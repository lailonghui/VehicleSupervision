// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/vehicle_alarm/graph/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteAlarmProcessingRecord             func(childComplexity int, where model.AlarmProcessingRecordBoolExp) int
		DeleteAlarmSupervisionPictureUpload     func(childComplexity int, where model.AlarmSupervisionPictureUploadBoolExp) int
		DeleteAlarmSupervisionPictureUploadByPk func(childComplexity int, id int64) int
		DeleteDistrictAlarmContentPush          func(childComplexity int, where model.DistrictAlarmContentPushBoolExp) int
		DeleteDistrictAlarmContentPushByPk      func(childComplexity int, id int64) int
		DeleteVehicleAlarmData                  func(childComplexity int, where model.VehicleAlarmDataBoolExp) int
		DeleteVehicleAlarmDataByPk              func(childComplexity int, id int64, vehicleAlarmDataID string) int
		InsertAlarmProcessingRecord             func(childComplexity int, objects []*model.AlarmProcessingRecordInsertInput) int
		InsertAlarmProcessingRecordOne          func(childComplexity int, object model.AlarmProcessingRecordInsertInput) int
		InsertAlarmSupervisionPictureUpload     func(childComplexity int, objects []*model.AlarmSupervisionPictureUploadInsertInput, onConflict *model.AlarmSupervisionPictureUploadOnConflict) int
		InsertAlarmSupervisionPictureUploadOne  func(childComplexity int, object model.AlarmSupervisionPictureUploadInsertInput, onConflict *model.AlarmSupervisionPictureUploadOnConflict) int
		InsertDistrictAlarmContentPush          func(childComplexity int, objects []*model.DistrictAlarmContentPushInsertInput, onConflict *model.DistrictAlarmContentPushOnConflict) int
		InsertDistrictAlarmContentPushOne       func(childComplexity int, object model.DistrictAlarmContentPushInsertInput, onConflict *model.DistrictAlarmContentPushOnConflict) int
		InsertVehicleAlarmData                  func(childComplexity int, objects []*model.VehicleAlarmDataInsertInput, onConflict *model.VehicleAlarmDataOnConflict) int
		InsertVehicleAlarmDataOne               func(childComplexity int, object model.VehicleAlarmDataInsertInput, onConflict *model.VehicleAlarmDataOnConflict) int
		UpdateAlarmProcessingRecord             func(childComplexity int, inc *model.AlarmProcessingRecordIncInput, set *model.AlarmProcessingRecordSetInput, where model.AlarmProcessingRecordBoolExp) int
		UpdateAlarmSupervisionPictureUpload     func(childComplexity int, inc *model.AlarmSupervisionPictureUploadIncInput, set *model.AlarmSupervisionPictureUploadSetInput, where model.AlarmSupervisionPictureUploadBoolExp) int
		UpdateAlarmSupervisionPictureUploadByPk func(childComplexity int, inc *model.AlarmSupervisionPictureUploadIncInput, set *model.AlarmSupervisionPictureUploadSetInput, pkColumns model.AlarmSupervisionPictureUploadPkColumnsInput) int
		UpdateDistrictAlarmContentPush          func(childComplexity int, inc *model.DistrictAlarmContentPushIncInput, set *model.DistrictAlarmContentPushSetInput, where model.DistrictAlarmContentPushBoolExp) int
		UpdateDistrictAlarmContentPushByPk      func(childComplexity int, inc *model.DistrictAlarmContentPushIncInput, set *model.DistrictAlarmContentPushSetInput, pkColumns model.DistrictAlarmContentPushPkColumnsInput) int
		UpdateVehicleAlarmData                  func(childComplexity int, inc *model.VehicleAlarmDataIncInput, set *model.VehicleAlarmDataSetInput, where model.VehicleAlarmDataBoolExp) int
		UpdateVehicleAlarmDataByPk              func(childComplexity int, inc *model.VehicleAlarmDataIncInput, set *model.VehicleAlarmDataSetInput, pkColumns model.VehicleAlarmDataPkColumnsInput) int
	}

	Query struct {
		AlarmProcessingRecord                  func(childComplexity int, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) int
		AlarmProcessingRecordAggregate         func(childComplexity int, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) int
		AlarmSupervisionPictureUpload          func(childComplexity int, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) int
		AlarmSupervisionPictureUploadAggregate func(childComplexity int, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) int
		AlarmSupervisionPictureUploadByPk      func(childComplexity int, id int64) int
		DistrictAlarmContentPush               func(childComplexity int, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) int
		DistrictAlarmContentPushAggregate      func(childComplexity int, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) int
		DistrictAlarmContentPushByPk           func(childComplexity int, id int64) int
		VehicleAlarmData                       func(childComplexity int, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) int
		VehicleAlarmDataAggregate              func(childComplexity int, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) int
		VehicleAlarmDataByPk                   func(childComplexity int, id int64, vehicleAlarmDataID string) int
	}

	Subscription struct {
		AlarmProcessingRecord                  func(childComplexity int, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) int
		AlarmProcessingRecordAggregate         func(childComplexity int, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) int
		AlarmSupervisionPictureUpload          func(childComplexity int, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) int
		AlarmSupervisionPictureUploadAggregate func(childComplexity int, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) int
		AlarmSupervisionPictureUploadByPk      func(childComplexity int, id int64) int
		DistrictAlarmContentPush               func(childComplexity int, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) int
		DistrictAlarmContentPushAggregate      func(childComplexity int, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) int
		DistrictAlarmContentPushByPk           func(childComplexity int, id int64) int
		VehicleAlarmData                       func(childComplexity int, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) int
		VehicleAlarmDataAggregate              func(childComplexity int, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) int
		VehicleAlarmDataByPk                   func(childComplexity int, id int64, vehicleAlarmDataID string) int
	}

	AlarmProcessingRecord struct {
		AlarmDataID               func(childComplexity int) int
		AlarmSupervisionPictureID func(childComplexity int) int
		AnnounceContent           func(childComplexity int) int
		AppPushContent            func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsAnnounce                func(childComplexity int) int
		IsAppPush                 func(childComplexity int) int
		IsDelete                  func(childComplexity int) int
		IsNotify                  func(childComplexity int) int
		IsSmsPush                 func(childComplexity int) int
		NotifyContent             func(childComplexity int) int
		OperationUser             func(childComplexity int) int
		ProcessingContent         func(childComplexity int) int
		ProcessingTime            func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	AlarmProcessingRecordAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	AlarmProcessingRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.AlarmProcessingRecordSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AlarmProcessingRecordAvgFields struct {
		ID             func(childComplexity int) int
		ProcessingType func(childComplexity int) int
	}

	AlarmProcessingRecordMaxFields struct {
		AlarmDataID               func(childComplexity int) int
		AlarmSupervisionPictureID func(childComplexity int) int
		AnnounceContent           func(childComplexity int) int
		AppPushContent            func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		ID                        func(childComplexity int) int
		NotifyContent             func(childComplexity int) int
		OperationUser             func(childComplexity int) int
		ProcessingContent         func(childComplexity int) int
		ProcessingTime            func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	AlarmProcessingRecordMinFields struct {
		AlarmDataID               func(childComplexity int) int
		AlarmSupervisionPictureID func(childComplexity int) int
		AnnounceContent           func(childComplexity int) int
		AppPushContent            func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		ID                        func(childComplexity int) int
		NotifyContent             func(childComplexity int) int
		OperationUser             func(childComplexity int) int
		ProcessingContent         func(childComplexity int) int
		ProcessingTime            func(childComplexity int) int
		ProcessingType            func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
	}

	AlarmProcessingRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AlarmProcessingRecordStddevFields struct {
		ID             func(childComplexity int) int
		ProcessingType func(childComplexity int) int
	}

	AlarmProcessingRecordStddevPopFields struct {
		ID             func(childComplexity int) int
		ProcessingType func(childComplexity int) int
	}

	AlarmProcessingRecordStddevSampFields struct {
		ID             func(childComplexity int) int
		ProcessingType func(childComplexity int) int
	}

	AlarmProcessingRecordSumFields struct {
		ID             func(childComplexity int) int
		ProcessingType func(childComplexity int) int
	}

	AlarmProcessingRecordVarPopFields struct {
		ID             func(childComplexity int) int
		ProcessingType func(childComplexity int) int
	}

	AlarmProcessingRecordVarSampFields struct {
		ID             func(childComplexity int) int
		ProcessingType func(childComplexity int) int
	}

	AlarmProcessingRecordVarianceFields struct {
		ID             func(childComplexity int) int
		ProcessingType func(childComplexity int) int
	}

	AlarmSupervisionPictureUpload struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		CameraID                  func(childComplexity int) int
		DriverID                  func(childComplexity int) int
		EnterpriseID              func(childComplexity int) int
		ID                        func(childComplexity int) int
		Imei                      func(childComplexity int) int
		MonitoringPicAddress      func(childComplexity int) int
		MonitoringPicName         func(childComplexity int) int
		MonitoringPicUploadTime   func(childComplexity int) int
		PhotoCondition            func(childComplexity int) int
		SimNumber                 func(childComplexity int) int
		UpdateTime                func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.AlarmSupervisionPictureUploadSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadAvgFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadMaxFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		CameraID                  func(childComplexity int) int
		DriverID                  func(childComplexity int) int
		EnterpriseID              func(childComplexity int) int
		ID                        func(childComplexity int) int
		Imei                      func(childComplexity int) int
		MonitoringPicAddress      func(childComplexity int) int
		MonitoringPicName         func(childComplexity int) int
		MonitoringPicUploadTime   func(childComplexity int) int
		PhotoCondition            func(childComplexity int) int
		SimNumber                 func(childComplexity int) int
		UpdateTime                func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadMinFields struct {
		AlarmSupervisionPictureID func(childComplexity int) int
		CameraID                  func(childComplexity int) int
		DriverID                  func(childComplexity int) int
		EnterpriseID              func(childComplexity int) int
		ID                        func(childComplexity int) int
		Imei                      func(childComplexity int) int
		MonitoringPicAddress      func(childComplexity int) int
		MonitoringPicName         func(childComplexity int) int
		MonitoringPicUploadTime   func(childComplexity int) int
		PhotoCondition            func(childComplexity int) int
		SimNumber                 func(childComplexity int) int
		UpdateTime                func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadStddevFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadStddevPopFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadStddevSampFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadSumFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadVarPopFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadVarSampFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	AlarmSupervisionPictureUploadVarianceFields struct {
		CameraID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	DistrictAlarmContentPush struct {
		AlarmContent func(childComplexity int) int
		AlarmDataID  func(childComplexity int) int
		AlarmType    func(childComplexity int) int
		CityID       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DistrictID   func(childComplexity int) int
		ID           func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		ProvinceID   func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	DistrictAlarmContentPushAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DistrictAlarmContentPushAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DistrictAlarmContentPushSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DistrictAlarmContentPushAvgFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushMaxFields struct {
		AlarmContent func(childComplexity int) int
		AlarmDataID  func(childComplexity int) int
		AlarmType    func(childComplexity int) int
		CityID       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DistrictID   func(childComplexity int) int
		ID           func(childComplexity int) int
		ProvinceID   func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	DistrictAlarmContentPushMinFields struct {
		AlarmContent func(childComplexity int) int
		AlarmDataID  func(childComplexity int) int
		AlarmType    func(childComplexity int) int
		CityID       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		DistrictID   func(childComplexity int) int
		ID           func(childComplexity int) int
		ProvinceID   func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
	}

	DistrictAlarmContentPushMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DistrictAlarmContentPushStddevFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushSumFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushVarPopFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushVarSampFields struct {
		ID func(childComplexity int) int
	}

	DistrictAlarmContentPushVarianceFields struct {
		ID func(childComplexity int) int
	}

	VehicleAlarmData struct {
		AlarmDealID           func(childComplexity int) int
		AlarmEndPosition      func(childComplexity int) int
		AlarmEndTime          func(childComplexity int) int
		AlarmSource           func(childComplexity int) int
		AlarmStartTime        func(childComplexity int) int
		AlarmType             func(childComplexity int) int
		AreaID                func(childComplexity int) int
		Coordinate            func(childComplexity int) int
		Duration              func(childComplexity int) int
		GpsSpeed              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsAlarmEffective      func(childComplexity int) int
		IsAlarmOver           func(childComplexity int) int
		IsCancelAlarm         func(childComplexity int) int
		IsResolve             func(childComplexity int) int
		IsSupervise           func(childComplexity int) int
		LatestAlarmPosition   func(childComplexity int) int
		LatestAlarmTime       func(childComplexity int) int
		LocationDescription   func(childComplexity int) int
		MaximumSpeed          func(childComplexity int) int
		Pid                   func(childComplexity int) int
		ProcessingDescription func(childComplexity int) int
		ProcessingMethod      func(childComplexity int) int
		ProcessingStatus      func(childComplexity int) int
		ProcessingTime        func(childComplexity int) int
		Processor             func(childComplexity int) int
		RecordTime            func(childComplexity int) int
		RoadGrade             func(childComplexity int) int
		RoadName              func(childComplexity int) int
		SpeedLimitThreshold   func(childComplexity int) int
		SupervisionNote       func(childComplexity int) int
		SupervisionTime       func(childComplexity int) int
		Supervisor            func(childComplexity int) int
		TachographSpeed       func(childComplexity int) int
		VehicleAlarmDataID    func(childComplexity int) int
		VehicleID             func(childComplexity int) int
	}

	VehicleAlarmDataAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleAlarmDataAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleAlarmDataSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleAlarmDataAvgFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataMaxFields struct {
		AlarmDealID           func(childComplexity int) int
		AlarmEndPosition      func(childComplexity int) int
		AlarmEndTime          func(childComplexity int) int
		AlarmSource           func(childComplexity int) int
		AlarmStartTime        func(childComplexity int) int
		AlarmType             func(childComplexity int) int
		AreaID                func(childComplexity int) int
		Duration              func(childComplexity int) int
		GpsSpeed              func(childComplexity int) int
		ID                    func(childComplexity int) int
		LatestAlarmPosition   func(childComplexity int) int
		LatestAlarmTime       func(childComplexity int) int
		LocationDescription   func(childComplexity int) int
		MaximumSpeed          func(childComplexity int) int
		Pid                   func(childComplexity int) int
		ProcessingDescription func(childComplexity int) int
		ProcessingMethod      func(childComplexity int) int
		ProcessingStatus      func(childComplexity int) int
		ProcessingTime        func(childComplexity int) int
		Processor             func(childComplexity int) int
		RecordTime            func(childComplexity int) int
		RoadGrade             func(childComplexity int) int
		RoadName              func(childComplexity int) int
		SpeedLimitThreshold   func(childComplexity int) int
		SupervisionNote       func(childComplexity int) int
		SupervisionTime       func(childComplexity int) int
		Supervisor            func(childComplexity int) int
		TachographSpeed       func(childComplexity int) int
		VehicleAlarmDataID    func(childComplexity int) int
		VehicleID             func(childComplexity int) int
	}

	VehicleAlarmDataMinFields struct {
		AlarmDealID           func(childComplexity int) int
		AlarmEndPosition      func(childComplexity int) int
		AlarmEndTime          func(childComplexity int) int
		AlarmSource           func(childComplexity int) int
		AlarmStartTime        func(childComplexity int) int
		AlarmType             func(childComplexity int) int
		AreaID                func(childComplexity int) int
		Duration              func(childComplexity int) int
		GpsSpeed              func(childComplexity int) int
		ID                    func(childComplexity int) int
		LatestAlarmPosition   func(childComplexity int) int
		LatestAlarmTime       func(childComplexity int) int
		LocationDescription   func(childComplexity int) int
		MaximumSpeed          func(childComplexity int) int
		Pid                   func(childComplexity int) int
		ProcessingDescription func(childComplexity int) int
		ProcessingMethod      func(childComplexity int) int
		ProcessingStatus      func(childComplexity int) int
		ProcessingTime        func(childComplexity int) int
		Processor             func(childComplexity int) int
		RecordTime            func(childComplexity int) int
		RoadGrade             func(childComplexity int) int
		RoadName              func(childComplexity int) int
		SpeedLimitThreshold   func(childComplexity int) int
		SupervisionNote       func(childComplexity int) int
		SupervisionTime       func(childComplexity int) int
		Supervisor            func(childComplexity int) int
		TachographSpeed       func(childComplexity int) int
		VehicleAlarmDataID    func(childComplexity int) int
		VehicleID             func(childComplexity int) int
	}

	VehicleAlarmDataMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleAlarmDataStddevFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataStddevPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataStddevSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataSumFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataVarPopFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataVarSampFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}

	VehicleAlarmDataVarianceFields struct {
		GpsSpeed            func(childComplexity int) int
		ID                  func(childComplexity int) int
		LatestAlarmPosition func(childComplexity int) int
		MaximumSpeed        func(childComplexity int) int
		SpeedLimitThreshold func(childComplexity int) int
		TachographSpeed     func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteAlarmProcessingRecord(ctx context.Context, where model.AlarmProcessingRecordBoolExp) (*model.AlarmProcessingRecordMutationResponse, error)
	InsertAlarmProcessingRecord(ctx context.Context, objects []*model.AlarmProcessingRecordInsertInput) (*model.AlarmProcessingRecordMutationResponse, error)
	InsertAlarmProcessingRecordOne(ctx context.Context, object model.AlarmProcessingRecordInsertInput) (*model.AlarmProcessingRecord, error)
	UpdateAlarmProcessingRecord(ctx context.Context, inc *model.AlarmProcessingRecordIncInput, set *model.AlarmProcessingRecordSetInput, where model.AlarmProcessingRecordBoolExp) (*model.AlarmProcessingRecordMutationResponse, error)
	DeleteAlarmSupervisionPictureUpload(ctx context.Context, where model.AlarmSupervisionPictureUploadBoolExp) (*model.AlarmSupervisionPictureUploadMutationResponse, error)
	DeleteAlarmSupervisionPictureUploadByPk(ctx context.Context, id int64) (*model.AlarmSupervisionPictureUpload, error)
	InsertAlarmSupervisionPictureUpload(ctx context.Context, objects []*model.AlarmSupervisionPictureUploadInsertInput, onConflict *model.AlarmSupervisionPictureUploadOnConflict) (*model.AlarmSupervisionPictureUploadMutationResponse, error)
	InsertAlarmSupervisionPictureUploadOne(ctx context.Context, object model.AlarmSupervisionPictureUploadInsertInput, onConflict *model.AlarmSupervisionPictureUploadOnConflict) (*model.AlarmSupervisionPictureUpload, error)
	UpdateAlarmSupervisionPictureUpload(ctx context.Context, inc *model.AlarmSupervisionPictureUploadIncInput, set *model.AlarmSupervisionPictureUploadSetInput, where model.AlarmSupervisionPictureUploadBoolExp) (*model.AlarmSupervisionPictureUploadMutationResponse, error)
	UpdateAlarmSupervisionPictureUploadByPk(ctx context.Context, inc *model.AlarmSupervisionPictureUploadIncInput, set *model.AlarmSupervisionPictureUploadSetInput, pkColumns model.AlarmSupervisionPictureUploadPkColumnsInput) (*model.AlarmSupervisionPictureUpload, error)
	DeleteDistrictAlarmContentPush(ctx context.Context, where model.DistrictAlarmContentPushBoolExp) (*model.DistrictAlarmContentPushMutationResponse, error)
	DeleteDistrictAlarmContentPushByPk(ctx context.Context, id int64) (*model.DistrictAlarmContentPush, error)
	InsertDistrictAlarmContentPush(ctx context.Context, objects []*model.DistrictAlarmContentPushInsertInput, onConflict *model.DistrictAlarmContentPushOnConflict) (*model.DistrictAlarmContentPushMutationResponse, error)
	InsertDistrictAlarmContentPushOne(ctx context.Context, object model.DistrictAlarmContentPushInsertInput, onConflict *model.DistrictAlarmContentPushOnConflict) (*model.DistrictAlarmContentPush, error)
	UpdateDistrictAlarmContentPush(ctx context.Context, inc *model.DistrictAlarmContentPushIncInput, set *model.DistrictAlarmContentPushSetInput, where model.DistrictAlarmContentPushBoolExp) (*model.DistrictAlarmContentPushMutationResponse, error)
	UpdateDistrictAlarmContentPushByPk(ctx context.Context, inc *model.DistrictAlarmContentPushIncInput, set *model.DistrictAlarmContentPushSetInput, pkColumns model.DistrictAlarmContentPushPkColumnsInput) (*model.DistrictAlarmContentPush, error)
	DeleteVehicleAlarmData(ctx context.Context, where model.VehicleAlarmDataBoolExp) (*model.VehicleAlarmDataMutationResponse, error)
	DeleteVehicleAlarmDataByPk(ctx context.Context, id int64, vehicleAlarmDataID string) (*model.VehicleAlarmData, error)
	InsertVehicleAlarmData(ctx context.Context, objects []*model.VehicleAlarmDataInsertInput, onConflict *model.VehicleAlarmDataOnConflict) (*model.VehicleAlarmDataMutationResponse, error)
	InsertVehicleAlarmDataOne(ctx context.Context, object model.VehicleAlarmDataInsertInput, onConflict *model.VehicleAlarmDataOnConflict) (*model.VehicleAlarmData, error)
	UpdateVehicleAlarmData(ctx context.Context, inc *model.VehicleAlarmDataIncInput, set *model.VehicleAlarmDataSetInput, where model.VehicleAlarmDataBoolExp) (*model.VehicleAlarmDataMutationResponse, error)
	UpdateVehicleAlarmDataByPk(ctx context.Context, inc *model.VehicleAlarmDataIncInput, set *model.VehicleAlarmDataSetInput, pkColumns model.VehicleAlarmDataPkColumnsInput) (*model.VehicleAlarmData, error)
}
type QueryResolver interface {
	AlarmProcessingRecord(ctx context.Context, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) ([]*model.AlarmProcessingRecord, error)
	AlarmProcessingRecordAggregate(ctx context.Context, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) (*model.AlarmProcessingRecordAggregate, error)
	AlarmSupervisionPictureUpload(ctx context.Context, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) ([]*model.AlarmSupervisionPictureUpload, error)
	AlarmSupervisionPictureUploadAggregate(ctx context.Context, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) (*model.AlarmSupervisionPictureUploadAggregate, error)
	AlarmSupervisionPictureUploadByPk(ctx context.Context, id int64) (*model.AlarmSupervisionPictureUpload, error)
	DistrictAlarmContentPush(ctx context.Context, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) ([]*model.DistrictAlarmContentPush, error)
	DistrictAlarmContentPushAggregate(ctx context.Context, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) (*model.DistrictAlarmContentPushAggregate, error)
	DistrictAlarmContentPushByPk(ctx context.Context, id int64) (*model.DistrictAlarmContentPush, error)
	VehicleAlarmData(ctx context.Context, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) ([]*model.VehicleAlarmData, error)
	VehicleAlarmDataAggregate(ctx context.Context, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) (*model.VehicleAlarmDataAggregate, error)
	VehicleAlarmDataByPk(ctx context.Context, id int64, vehicleAlarmDataID string) (*model.VehicleAlarmData, error)
}
type SubscriptionResolver interface {
	AlarmProcessingRecord(ctx context.Context, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) (<-chan []*model.AlarmProcessingRecord, error)
	AlarmProcessingRecordAggregate(ctx context.Context, distinctOn []model.AlarmProcessingRecordSelectColumn, limit *int, offset *int, orderBy []*model.AlarmProcessingRecordOrderBy, where *model.AlarmProcessingRecordBoolExp) (<-chan *model.AlarmProcessingRecordAggregate, error)
	AlarmSupervisionPictureUpload(ctx context.Context, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) (<-chan []*model.AlarmSupervisionPictureUpload, error)
	AlarmSupervisionPictureUploadAggregate(ctx context.Context, distinctOn []model.AlarmSupervisionPictureUploadSelectColumn, limit *int, offset *int, orderBy []*model.AlarmSupervisionPictureUploadOrderBy, where *model.AlarmSupervisionPictureUploadBoolExp) (<-chan *model.AlarmSupervisionPictureUploadAggregate, error)
	AlarmSupervisionPictureUploadByPk(ctx context.Context, id int64) (<-chan *model.AlarmSupervisionPictureUpload, error)
	DistrictAlarmContentPush(ctx context.Context, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) (<-chan []*model.DistrictAlarmContentPush, error)
	DistrictAlarmContentPushAggregate(ctx context.Context, distinctOn []model.DistrictAlarmContentPushSelectColumn, limit *int, offset *int, orderBy []*model.DistrictAlarmContentPushOrderBy, where *model.DistrictAlarmContentPushBoolExp) (<-chan *model.DistrictAlarmContentPushAggregate, error)
	DistrictAlarmContentPushByPk(ctx context.Context, id int64) (<-chan *model.DistrictAlarmContentPush, error)
	VehicleAlarmData(ctx context.Context, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) (<-chan []*model.VehicleAlarmData, error)
	VehicleAlarmDataAggregate(ctx context.Context, distinctOn []model.VehicleAlarmDataSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmDataOrderBy, where *model.VehicleAlarmDataBoolExp) (<-chan *model.VehicleAlarmDataAggregate, error)
	VehicleAlarmDataByPk(ctx context.Context, id int64, vehicleAlarmDataID string) (<-chan *model.VehicleAlarmData, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_alarm_processing_record":
		if e.complexity.Mutation.DeleteAlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAlarmProcessingRecord(childComplexity, args["where"].(model.AlarmProcessingRecordBoolExp)), true

	case "Mutation.delete_alarm_supervision_picture_upload":
		if e.complexity.Mutation.DeleteAlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Mutation_delete_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAlarmSupervisionPictureUpload(childComplexity, args["where"].(model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Mutation.delete_alarm_supervision_picture_upload_by_pk":
		if e.complexity.Mutation.DeleteAlarmSupervisionPictureUploadByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_alarm_supervision_picture_upload_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAlarmSupervisionPictureUploadByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_district_alarm_content_push":
		if e.complexity.Mutation.DeleteDistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Mutation_delete_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDistrictAlarmContentPush(childComplexity, args["where"].(model.DistrictAlarmContentPushBoolExp)), true

	case "Mutation.delete_district_alarm_content_push_by_pk":
		if e.complexity.Mutation.DeleteDistrictAlarmContentPushByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_district_alarm_content_push_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDistrictAlarmContentPushByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_alarm_data":
		if e.complexity.Mutation.DeleteVehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleAlarmData(childComplexity, args["where"].(model.VehicleAlarmDataBoolExp)), true

	case "Mutation.delete_vehicle_alarm_data_by_pk":
		if e.complexity.Mutation.DeleteVehicleAlarmDataByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_alarm_data_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleAlarmDataByPk(childComplexity, args["id"].(int64), args["vehicle_alarm_data_id"].(string)), true

	case "Mutation.insert_alarm_processing_record":
		if e.complexity.Mutation.InsertAlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAlarmProcessingRecord(childComplexity, args["objects"].([]*model.AlarmProcessingRecordInsertInput)), true

	case "Mutation.insert_alarm_processing_record_one":
		if e.complexity.Mutation.InsertAlarmProcessingRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_alarm_processing_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAlarmProcessingRecordOne(childComplexity, args["object"].(model.AlarmProcessingRecordInsertInput)), true

	case "Mutation.insert_alarm_supervision_picture_upload":
		if e.complexity.Mutation.InsertAlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Mutation_insert_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAlarmSupervisionPictureUpload(childComplexity, args["objects"].([]*model.AlarmSupervisionPictureUploadInsertInput), args["on_conflict"].(*model.AlarmSupervisionPictureUploadOnConflict)), true

	case "Mutation.insert_alarm_supervision_picture_upload_one":
		if e.complexity.Mutation.InsertAlarmSupervisionPictureUploadOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_alarm_supervision_picture_upload_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertAlarmSupervisionPictureUploadOne(childComplexity, args["object"].(model.AlarmSupervisionPictureUploadInsertInput), args["on_conflict"].(*model.AlarmSupervisionPictureUploadOnConflict)), true

	case "Mutation.insert_district_alarm_content_push":
		if e.complexity.Mutation.InsertDistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Mutation_insert_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDistrictAlarmContentPush(childComplexity, args["objects"].([]*model.DistrictAlarmContentPushInsertInput), args["on_conflict"].(*model.DistrictAlarmContentPushOnConflict)), true

	case "Mutation.insert_district_alarm_content_push_one":
		if e.complexity.Mutation.InsertDistrictAlarmContentPushOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_district_alarm_content_push_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDistrictAlarmContentPushOne(childComplexity, args["object"].(model.DistrictAlarmContentPushInsertInput), args["on_conflict"].(*model.DistrictAlarmContentPushOnConflict)), true

	case "Mutation.insert_vehicle_alarm_data":
		if e.complexity.Mutation.InsertVehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleAlarmData(childComplexity, args["objects"].([]*model.VehicleAlarmDataInsertInput), args["on_conflict"].(*model.VehicleAlarmDataOnConflict)), true

	case "Mutation.insert_vehicle_alarm_data_one":
		if e.complexity.Mutation.InsertVehicleAlarmDataOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_alarm_data_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleAlarmDataOne(childComplexity, args["object"].(model.VehicleAlarmDataInsertInput), args["on_conflict"].(*model.VehicleAlarmDataOnConflict)), true

	case "Mutation.update_alarm_processing_record":
		if e.complexity.Mutation.UpdateAlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlarmProcessingRecord(childComplexity, args["_inc"].(*model.AlarmProcessingRecordIncInput), args["_set"].(*model.AlarmProcessingRecordSetInput), args["where"].(model.AlarmProcessingRecordBoolExp)), true

	case "Mutation.update_alarm_supervision_picture_upload":
		if e.complexity.Mutation.UpdateAlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Mutation_update_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlarmSupervisionPictureUpload(childComplexity, args["_inc"].(*model.AlarmSupervisionPictureUploadIncInput), args["_set"].(*model.AlarmSupervisionPictureUploadSetInput), args["where"].(model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Mutation.update_alarm_supervision_picture_upload_by_pk":
		if e.complexity.Mutation.UpdateAlarmSupervisionPictureUploadByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_alarm_supervision_picture_upload_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlarmSupervisionPictureUploadByPk(childComplexity, args["_inc"].(*model.AlarmSupervisionPictureUploadIncInput), args["_set"].(*model.AlarmSupervisionPictureUploadSetInput), args["pk_columns"].(model.AlarmSupervisionPictureUploadPkColumnsInput)), true

	case "Mutation.update_district_alarm_content_push":
		if e.complexity.Mutation.UpdateDistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Mutation_update_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDistrictAlarmContentPush(childComplexity, args["_inc"].(*model.DistrictAlarmContentPushIncInput), args["_set"].(*model.DistrictAlarmContentPushSetInput), args["where"].(model.DistrictAlarmContentPushBoolExp)), true

	case "Mutation.update_district_alarm_content_push_by_pk":
		if e.complexity.Mutation.UpdateDistrictAlarmContentPushByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_district_alarm_content_push_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDistrictAlarmContentPushByPk(childComplexity, args["_inc"].(*model.DistrictAlarmContentPushIncInput), args["_set"].(*model.DistrictAlarmContentPushSetInput), args["pk_columns"].(model.DistrictAlarmContentPushPkColumnsInput)), true

	case "Mutation.update_vehicle_alarm_data":
		if e.complexity.Mutation.UpdateVehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleAlarmData(childComplexity, args["_inc"].(*model.VehicleAlarmDataIncInput), args["_set"].(*model.VehicleAlarmDataSetInput), args["where"].(model.VehicleAlarmDataBoolExp)), true

	case "Mutation.update_vehicle_alarm_data_by_pk":
		if e.complexity.Mutation.UpdateVehicleAlarmDataByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_alarm_data_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleAlarmDataByPk(childComplexity, args["_inc"].(*model.VehicleAlarmDataIncInput), args["_set"].(*model.VehicleAlarmDataSetInput), args["pk_columns"].(model.VehicleAlarmDataPkColumnsInput)), true

	case "Query.alarm_processing_record":
		if e.complexity.Query.AlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Query_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmProcessingRecord(childComplexity, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp)), true

	case "Query.alarm_processing_record_aggregate":
		if e.complexity.Query.AlarmProcessingRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_alarm_processing_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmProcessingRecordAggregate(childComplexity, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp)), true

	case "Query.alarm_supervision_picture_upload":
		if e.complexity.Query.AlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Query_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmSupervisionPictureUpload(childComplexity, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Query.alarm_supervision_picture_upload_aggregate":
		if e.complexity.Query.AlarmSupervisionPictureUploadAggregate == nil {
			break
		}

		args, err := ec.field_Query_alarm_supervision_picture_upload_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmSupervisionPictureUploadAggregate(childComplexity, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Query.alarm_supervision_picture_upload_by_pk":
		if e.complexity.Query.AlarmSupervisionPictureUploadByPk == nil {
			break
		}

		args, err := ec.field_Query_alarm_supervision_picture_upload_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AlarmSupervisionPictureUploadByPk(childComplexity, args["id"].(int64)), true

	case "Query.district_alarm_content_push":
		if e.complexity.Query.DistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Query_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DistrictAlarmContentPush(childComplexity, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp)), true

	case "Query.district_alarm_content_push_aggregate":
		if e.complexity.Query.DistrictAlarmContentPushAggregate == nil {
			break
		}

		args, err := ec.field_Query_district_alarm_content_push_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DistrictAlarmContentPushAggregate(childComplexity, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp)), true

	case "Query.district_alarm_content_push_by_pk":
		if e.complexity.Query.DistrictAlarmContentPushByPk == nil {
			break
		}

		args, err := ec.field_Query_district_alarm_content_push_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DistrictAlarmContentPushByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_alarm_data":
		if e.complexity.Query.VehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmData(childComplexity, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp)), true

	case "Query.vehicle_alarm_data_aggregate":
		if e.complexity.Query.VehicleAlarmDataAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_data_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmDataAggregate(childComplexity, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp)), true

	case "Query.vehicle_alarm_data_by_pk":
		if e.complexity.Query.VehicleAlarmDataByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_data_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmDataByPk(childComplexity, args["id"].(int64), args["vehicle_alarm_data_id"].(string)), true

	case "Subscription.alarm_processing_record":
		if e.complexity.Subscription.AlarmProcessingRecord == nil {
			break
		}

		args, err := ec.field_Subscription_alarm_processing_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AlarmProcessingRecord(childComplexity, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp)), true

	case "Subscription.alarm_processing_record_aggregate":
		if e.complexity.Subscription.AlarmProcessingRecordAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_alarm_processing_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AlarmProcessingRecordAggregate(childComplexity, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp)), true

	case "Subscription.alarm_supervision_picture_upload":
		if e.complexity.Subscription.AlarmSupervisionPictureUpload == nil {
			break
		}

		args, err := ec.field_Subscription_alarm_supervision_picture_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AlarmSupervisionPictureUpload(childComplexity, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Subscription.alarm_supervision_picture_upload_aggregate":
		if e.complexity.Subscription.AlarmSupervisionPictureUploadAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_alarm_supervision_picture_upload_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AlarmSupervisionPictureUploadAggregate(childComplexity, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp)), true

	case "Subscription.alarm_supervision_picture_upload_by_pk":
		if e.complexity.Subscription.AlarmSupervisionPictureUploadByPk == nil {
			break
		}

		args, err := ec.field_Subscription_alarm_supervision_picture_upload_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AlarmSupervisionPictureUploadByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.district_alarm_content_push":
		if e.complexity.Subscription.DistrictAlarmContentPush == nil {
			break
		}

		args, err := ec.field_Subscription_district_alarm_content_push_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DistrictAlarmContentPush(childComplexity, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp)), true

	case "Subscription.district_alarm_content_push_aggregate":
		if e.complexity.Subscription.DistrictAlarmContentPushAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_district_alarm_content_push_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DistrictAlarmContentPushAggregate(childComplexity, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp)), true

	case "Subscription.district_alarm_content_push_by_pk":
		if e.complexity.Subscription.DistrictAlarmContentPushByPk == nil {
			break
		}

		args, err := ec.field_Subscription_district_alarm_content_push_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DistrictAlarmContentPushByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.vehicle_alarm_data":
		if e.complexity.Subscription.VehicleAlarmData == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_alarm_data_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleAlarmData(childComplexity, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp)), true

	case "Subscription.vehicle_alarm_data_aggregate":
		if e.complexity.Subscription.VehicleAlarmDataAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_alarm_data_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleAlarmDataAggregate(childComplexity, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp)), true

	case "Subscription.vehicle_alarm_data_by_pk":
		if e.complexity.Subscription.VehicleAlarmDataByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_alarm_data_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleAlarmDataByPk(childComplexity, args["id"].(int64), args["vehicle_alarm_data_id"].(string)), true

	case "alarm_processing_record.alarm_data_id":
		if e.complexity.AlarmProcessingRecord.AlarmDataID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.AlarmDataID(childComplexity), true

	case "alarm_processing_record.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecord.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.AlarmSupervisionPictureID(childComplexity), true

	case "alarm_processing_record.announce_content":
		if e.complexity.AlarmProcessingRecord.AnnounceContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.AnnounceContent(childComplexity), true

	case "alarm_processing_record.app_push_content":
		if e.complexity.AlarmProcessingRecord.AppPushContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.AppPushContent(childComplexity), true

	case "alarm_processing_record.created_at":
		if e.complexity.AlarmProcessingRecord.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.CreatedAt(childComplexity), true

	case "alarm_processing_record.created_by":
		if e.complexity.AlarmProcessingRecord.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.CreatedBy(childComplexity), true

	case "alarm_processing_record.deleted_at":
		if e.complexity.AlarmProcessingRecord.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.DeletedAt(childComplexity), true

	case "alarm_processing_record.deleted_by":
		if e.complexity.AlarmProcessingRecord.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.DeletedBy(childComplexity), true

	case "alarm_processing_record.disposal_method":
		if e.complexity.AlarmProcessingRecord.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.DisposalMethod(childComplexity), true

	case "alarm_processing_record.disposal_result":
		if e.complexity.AlarmProcessingRecord.DisposalResult == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.DisposalResult(childComplexity), true

	case "alarm_processing_record.id":
		if e.complexity.AlarmProcessingRecord.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.ID(childComplexity), true

	case "alarm_processing_record.is_announce":
		if e.complexity.AlarmProcessingRecord.IsAnnounce == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsAnnounce(childComplexity), true

	case "alarm_processing_record.is_app_push":
		if e.complexity.AlarmProcessingRecord.IsAppPush == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsAppPush(childComplexity), true

	case "alarm_processing_record.is_delete":
		if e.complexity.AlarmProcessingRecord.IsDelete == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsDelete(childComplexity), true

	case "alarm_processing_record.is_notify":
		if e.complexity.AlarmProcessingRecord.IsNotify == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsNotify(childComplexity), true

	case "alarm_processing_record.is_sms_push":
		if e.complexity.AlarmProcessingRecord.IsSmsPush == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.IsSmsPush(childComplexity), true

	case "alarm_processing_record.notify_content":
		if e.complexity.AlarmProcessingRecord.NotifyContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.NotifyContent(childComplexity), true

	case "alarm_processing_record.operation_user":
		if e.complexity.AlarmProcessingRecord.OperationUser == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.OperationUser(childComplexity), true

	case "alarm_processing_record.processing_content":
		if e.complexity.AlarmProcessingRecord.ProcessingContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.ProcessingContent(childComplexity), true

	case "alarm_processing_record.processing_time":
		if e.complexity.AlarmProcessingRecord.ProcessingTime == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.ProcessingTime(childComplexity), true

	case "alarm_processing_record.processing_type":
		if e.complexity.AlarmProcessingRecord.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.ProcessingType(childComplexity), true

	case "alarm_processing_record.updated_at":
		if e.complexity.AlarmProcessingRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.UpdatedAt(childComplexity), true

	case "alarm_processing_record.updated_by":
		if e.complexity.AlarmProcessingRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecord.UpdatedBy(childComplexity), true

	case "alarm_processing_record_aggregate.aggregate":
		if e.complexity.AlarmProcessingRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregate.Aggregate(childComplexity), true

	case "alarm_processing_record_aggregate.nodes":
		if e.complexity.AlarmProcessingRecordAggregate.Nodes == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregate.Nodes(childComplexity), true

	case "alarm_processing_record_aggregate_fields.avg":
		if e.complexity.AlarmProcessingRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Avg(childComplexity), true

	case "alarm_processing_record_aggregate_fields.count":
		if e.complexity.AlarmProcessingRecordAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_alarm_processing_record_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Count(childComplexity, args["columns"].([]model.AlarmProcessingRecordSelectColumn), args["distinct"].(*bool)), true

	case "alarm_processing_record_aggregate_fields.max":
		if e.complexity.AlarmProcessingRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Max(childComplexity), true

	case "alarm_processing_record_aggregate_fields.min":
		if e.complexity.AlarmProcessingRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Min(childComplexity), true

	case "alarm_processing_record_aggregate_fields.stddev":
		if e.complexity.AlarmProcessingRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Stddev(childComplexity), true

	case "alarm_processing_record_aggregate_fields.stddev_pop":
		if e.complexity.AlarmProcessingRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.StddevPop(childComplexity), true

	case "alarm_processing_record_aggregate_fields.stddev_samp":
		if e.complexity.AlarmProcessingRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.StddevSamp(childComplexity), true

	case "alarm_processing_record_aggregate_fields.sum":
		if e.complexity.AlarmProcessingRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Sum(childComplexity), true

	case "alarm_processing_record_aggregate_fields.var_pop":
		if e.complexity.AlarmProcessingRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.VarPop(childComplexity), true

	case "alarm_processing_record_aggregate_fields.var_samp":
		if e.complexity.AlarmProcessingRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.VarSamp(childComplexity), true

	case "alarm_processing_record_aggregate_fields.variance":
		if e.complexity.AlarmProcessingRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAggregateFields.Variance(childComplexity), true

	case "alarm_processing_record_avg_fields.id":
		if e.complexity.AlarmProcessingRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAvgFields.ID(childComplexity), true

	case "alarm_processing_record_avg_fields.processing_type":
		if e.complexity.AlarmProcessingRecordAvgFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordAvgFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_max_fields.alarm_data_id":
		if e.complexity.AlarmProcessingRecordMaxFields.AlarmDataID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.AlarmDataID(childComplexity), true

	case "alarm_processing_record_max_fields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordMaxFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.AlarmSupervisionPictureID(childComplexity), true

	case "alarm_processing_record_max_fields.announce_content":
		if e.complexity.AlarmProcessingRecordMaxFields.AnnounceContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.AnnounceContent(childComplexity), true

	case "alarm_processing_record_max_fields.app_push_content":
		if e.complexity.AlarmProcessingRecordMaxFields.AppPushContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.AppPushContent(childComplexity), true

	case "alarm_processing_record_max_fields.created_at":
		if e.complexity.AlarmProcessingRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.CreatedAt(childComplexity), true

	case "alarm_processing_record_max_fields.created_by":
		if e.complexity.AlarmProcessingRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.CreatedBy(childComplexity), true

	case "alarm_processing_record_max_fields.deleted_at":
		if e.complexity.AlarmProcessingRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.DeletedAt(childComplexity), true

	case "alarm_processing_record_max_fields.deleted_by":
		if e.complexity.AlarmProcessingRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.DeletedBy(childComplexity), true

	case "alarm_processing_record_max_fields.disposal_method":
		if e.complexity.AlarmProcessingRecordMaxFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.DisposalMethod(childComplexity), true

	case "alarm_processing_record_max_fields.disposal_result":
		if e.complexity.AlarmProcessingRecordMaxFields.DisposalResult == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.DisposalResult(childComplexity), true

	case "alarm_processing_record_max_fields.id":
		if e.complexity.AlarmProcessingRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.ID(childComplexity), true

	case "alarm_processing_record_max_fields.notify_content":
		if e.complexity.AlarmProcessingRecordMaxFields.NotifyContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.NotifyContent(childComplexity), true

	case "alarm_processing_record_max_fields.operation_user":
		if e.complexity.AlarmProcessingRecordMaxFields.OperationUser == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.OperationUser(childComplexity), true

	case "alarm_processing_record_max_fields.processing_content":
		if e.complexity.AlarmProcessingRecordMaxFields.ProcessingContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.ProcessingContent(childComplexity), true

	case "alarm_processing_record_max_fields.processing_time":
		if e.complexity.AlarmProcessingRecordMaxFields.ProcessingTime == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.ProcessingTime(childComplexity), true

	case "alarm_processing_record_max_fields.processing_type":
		if e.complexity.AlarmProcessingRecordMaxFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_max_fields.updated_at":
		if e.complexity.AlarmProcessingRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.UpdatedAt(childComplexity), true

	case "alarm_processing_record_max_fields.updated_by":
		if e.complexity.AlarmProcessingRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMaxFields.UpdatedBy(childComplexity), true

	case "alarm_processing_record_min_fields.alarm_data_id":
		if e.complexity.AlarmProcessingRecordMinFields.AlarmDataID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.AlarmDataID(childComplexity), true

	case "alarm_processing_record_min_fields.alarm_supervision_picture_id":
		if e.complexity.AlarmProcessingRecordMinFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.AlarmSupervisionPictureID(childComplexity), true

	case "alarm_processing_record_min_fields.announce_content":
		if e.complexity.AlarmProcessingRecordMinFields.AnnounceContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.AnnounceContent(childComplexity), true

	case "alarm_processing_record_min_fields.app_push_content":
		if e.complexity.AlarmProcessingRecordMinFields.AppPushContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.AppPushContent(childComplexity), true

	case "alarm_processing_record_min_fields.created_at":
		if e.complexity.AlarmProcessingRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.CreatedAt(childComplexity), true

	case "alarm_processing_record_min_fields.created_by":
		if e.complexity.AlarmProcessingRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.CreatedBy(childComplexity), true

	case "alarm_processing_record_min_fields.deleted_at":
		if e.complexity.AlarmProcessingRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.DeletedAt(childComplexity), true

	case "alarm_processing_record_min_fields.deleted_by":
		if e.complexity.AlarmProcessingRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.DeletedBy(childComplexity), true

	case "alarm_processing_record_min_fields.disposal_method":
		if e.complexity.AlarmProcessingRecordMinFields.DisposalMethod == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.DisposalMethod(childComplexity), true

	case "alarm_processing_record_min_fields.disposal_result":
		if e.complexity.AlarmProcessingRecordMinFields.DisposalResult == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.DisposalResult(childComplexity), true

	case "alarm_processing_record_min_fields.id":
		if e.complexity.AlarmProcessingRecordMinFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.ID(childComplexity), true

	case "alarm_processing_record_min_fields.notify_content":
		if e.complexity.AlarmProcessingRecordMinFields.NotifyContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.NotifyContent(childComplexity), true

	case "alarm_processing_record_min_fields.operation_user":
		if e.complexity.AlarmProcessingRecordMinFields.OperationUser == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.OperationUser(childComplexity), true

	case "alarm_processing_record_min_fields.processing_content":
		if e.complexity.AlarmProcessingRecordMinFields.ProcessingContent == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.ProcessingContent(childComplexity), true

	case "alarm_processing_record_min_fields.processing_time":
		if e.complexity.AlarmProcessingRecordMinFields.ProcessingTime == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.ProcessingTime(childComplexity), true

	case "alarm_processing_record_min_fields.processing_type":
		if e.complexity.AlarmProcessingRecordMinFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_min_fields.updated_at":
		if e.complexity.AlarmProcessingRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.UpdatedAt(childComplexity), true

	case "alarm_processing_record_min_fields.updated_by":
		if e.complexity.AlarmProcessingRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMinFields.UpdatedBy(childComplexity), true

	case "alarm_processing_record_mutation_response.affected_rows":
		if e.complexity.AlarmProcessingRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMutationResponse.AffectedRows(childComplexity), true

	case "alarm_processing_record_mutation_response.returning":
		if e.complexity.AlarmProcessingRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordMutationResponse.Returning(childComplexity), true

	case "alarm_processing_record_stddev_fields.id":
		if e.complexity.AlarmProcessingRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevFields.ID(childComplexity), true

	case "alarm_processing_record_stddev_fields.processing_type":
		if e.complexity.AlarmProcessingRecordStddevFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_stddev_pop_fields.id":
		if e.complexity.AlarmProcessingRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevPopFields.ID(childComplexity), true

	case "alarm_processing_record_stddev_pop_fields.processing_type":
		if e.complexity.AlarmProcessingRecordStddevPopFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevPopFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_stddev_samp_fields.id":
		if e.complexity.AlarmProcessingRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevSampFields.ID(childComplexity), true

	case "alarm_processing_record_stddev_samp_fields.processing_type":
		if e.complexity.AlarmProcessingRecordStddevSampFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordStddevSampFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_sum_fields.id":
		if e.complexity.AlarmProcessingRecordSumFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordSumFields.ID(childComplexity), true

	case "alarm_processing_record_sum_fields.processing_type":
		if e.complexity.AlarmProcessingRecordSumFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordSumFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_var_pop_fields.id":
		if e.complexity.AlarmProcessingRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarPopFields.ID(childComplexity), true

	case "alarm_processing_record_var_pop_fields.processing_type":
		if e.complexity.AlarmProcessingRecordVarPopFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarPopFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_var_samp_fields.id":
		if e.complexity.AlarmProcessingRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarSampFields.ID(childComplexity), true

	case "alarm_processing_record_var_samp_fields.processing_type":
		if e.complexity.AlarmProcessingRecordVarSampFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarSampFields.ProcessingType(childComplexity), true

	case "alarm_processing_record_variance_fields.id":
		if e.complexity.AlarmProcessingRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarianceFields.ID(childComplexity), true

	case "alarm_processing_record_variance_fields.processing_type":
		if e.complexity.AlarmProcessingRecordVarianceFields.ProcessingType == nil {
			break
		}

		return e.complexity.AlarmProcessingRecordVarianceFields.ProcessingType(childComplexity), true

	case "alarm_supervision_picture_upload.alarm_supervision_picture_id":
		if e.complexity.AlarmSupervisionPictureUpload.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.AlarmSupervisionPictureID(childComplexity), true

	case "alarm_supervision_picture_upload.camera_id":
		if e.complexity.AlarmSupervisionPictureUpload.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload.driver_id":
		if e.complexity.AlarmSupervisionPictureUpload.DriverID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.DriverID(childComplexity), true

	case "alarm_supervision_picture_upload.enterprise_id":
		if e.complexity.AlarmSupervisionPictureUpload.EnterpriseID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.EnterpriseID(childComplexity), true

	case "alarm_supervision_picture_upload.id":
		if e.complexity.AlarmSupervisionPictureUpload.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.ID(childComplexity), true

	case "alarm_supervision_picture_upload.IMEI":
		if e.complexity.AlarmSupervisionPictureUpload.Imei == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.Imei(childComplexity), true

	case "alarm_supervision_picture_upload.monitoring_pic_address":
		if e.complexity.AlarmSupervisionPictureUpload.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.MonitoringPicAddress(childComplexity), true

	case "alarm_supervision_picture_upload.monitoring_pic_name":
		if e.complexity.AlarmSupervisionPictureUpload.MonitoringPicName == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.MonitoringPicName(childComplexity), true

	case "alarm_supervision_picture_upload.monitoring_pic_upload_time":
		if e.complexity.AlarmSupervisionPictureUpload.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.MonitoringPicUploadTime(childComplexity), true

	case "alarm_supervision_picture_upload.photo_condition":
		if e.complexity.AlarmSupervisionPictureUpload.PhotoCondition == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.PhotoCondition(childComplexity), true

	case "alarm_supervision_picture_upload.sim_number":
		if e.complexity.AlarmSupervisionPictureUpload.SimNumber == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.SimNumber(childComplexity), true

	case "alarm_supervision_picture_upload.update_time":
		if e.complexity.AlarmSupervisionPictureUpload.UpdateTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.UpdateTime(childComplexity), true

	case "alarm_supervision_picture_upload.vehicle_id":
		if e.complexity.AlarmSupervisionPictureUpload.VehicleID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUpload.VehicleID(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate.aggregate":
		if e.complexity.AlarmSupervisionPictureUploadAggregate.Aggregate == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregate.Aggregate(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate.nodes":
		if e.complexity.AlarmSupervisionPictureUploadAggregate.Nodes == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregate.Nodes(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.avg":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Avg == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Avg(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.count":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_alarm_supervision_picture_upload_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Count(childComplexity, args["columns"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["distinct"].(*bool)), true

	case "alarm_supervision_picture_upload_aggregate_fields.max":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Max == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Max(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.min":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Min == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Min(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.stddev":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Stddev(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.stddev_pop":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.StddevPop(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.stddev_samp":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.StddevSamp(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.sum":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Sum == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Sum(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.var_pop":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.VarPop(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.var_samp":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.VarSamp(childComplexity), true

	case "alarm_supervision_picture_upload_aggregate_fields.variance":
		if e.complexity.AlarmSupervisionPictureUploadAggregateFields.Variance == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAggregateFields.Variance(childComplexity), true

	case "alarm_supervision_picture_upload_avg_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadAvgFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAvgFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_avg_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadAvgFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadAvgFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.alarm_supervision_picture_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.AlarmSupervisionPictureID(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.driver_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.DriverID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.DriverID(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.enterprise_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.EnterpriseID(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.IMEI":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.Imei == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.Imei(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.monitoring_pic_address":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicAddress(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.monitoring_pic_name":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicName == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicName(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.monitoring_pic_upload_time":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.MonitoringPicUploadTime(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.photo_condition":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.PhotoCondition == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.PhotoCondition(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.sim_number":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.SimNumber == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.SimNumber(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.update_time":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.UpdateTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.UpdateTime(childComplexity), true

	case "alarm_supervision_picture_upload_max_fields.vehicle_id":
		if e.complexity.AlarmSupervisionPictureUploadMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMaxFields.VehicleID(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.alarm_supervision_picture_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.AlarmSupervisionPictureID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.AlarmSupervisionPictureID(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.driver_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.DriverID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.DriverID(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.enterprise_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.EnterpriseID(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.IMEI":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.Imei == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.Imei(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.monitoring_pic_address":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicAddress == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicAddress(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.monitoring_pic_name":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicName == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicName(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.monitoring_pic_upload_time":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicUploadTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.MonitoringPicUploadTime(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.photo_condition":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.PhotoCondition == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.PhotoCondition(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.sim_number":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.SimNumber == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.SimNumber(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.update_time":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.UpdateTime == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.UpdateTime(childComplexity), true

	case "alarm_supervision_picture_upload_min_fields.vehicle_id":
		if e.complexity.AlarmSupervisionPictureUploadMinFields.VehicleID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMinFields.VehicleID(childComplexity), true

	case "alarm_supervision_picture_upload_mutation_response.affected_rows":
		if e.complexity.AlarmSupervisionPictureUploadMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMutationResponse.AffectedRows(childComplexity), true

	case "alarm_supervision_picture_upload_mutation_response.returning":
		if e.complexity.AlarmSupervisionPictureUploadMutationResponse.Returning == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadMutationResponse.Returning(childComplexity), true

	case "alarm_supervision_picture_upload_stddev_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadStddevFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_stddev_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadStddevFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_stddev_pop_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadStddevPopFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevPopFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_stddev_pop_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadStddevPopFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevPopFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_stddev_samp_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadStddevSampFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevSampFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_stddev_samp_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadStddevSampFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadStddevSampFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_sum_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadSumFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadSumFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_sum_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadSumFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadSumFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_var_pop_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadVarPopFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarPopFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_var_pop_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadVarPopFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarPopFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_var_samp_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadVarSampFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarSampFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_var_samp_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadVarSampFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarSampFields.ID(childComplexity), true

	case "alarm_supervision_picture_upload_variance_fields.camera_id":
		if e.complexity.AlarmSupervisionPictureUploadVarianceFields.CameraID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarianceFields.CameraID(childComplexity), true

	case "alarm_supervision_picture_upload_variance_fields.id":
		if e.complexity.AlarmSupervisionPictureUploadVarianceFields.ID == nil {
			break
		}

		return e.complexity.AlarmSupervisionPictureUploadVarianceFields.ID(childComplexity), true

	case "district_alarm_content_push.alarm_content":
		if e.complexity.DistrictAlarmContentPush.AlarmContent == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.AlarmContent(childComplexity), true

	case "district_alarm_content_push.alarm_data_id":
		if e.complexity.DistrictAlarmContentPush.AlarmDataID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.AlarmDataID(childComplexity), true

	case "district_alarm_content_push.alarm_type":
		if e.complexity.DistrictAlarmContentPush.AlarmType == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.AlarmType(childComplexity), true

	case "district_alarm_content_push.city_id":
		if e.complexity.DistrictAlarmContentPush.CityID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.CityID(childComplexity), true

	case "district_alarm_content_push.created_at":
		if e.complexity.DistrictAlarmContentPush.CreatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.CreatedAt(childComplexity), true

	case "district_alarm_content_push.created_by":
		if e.complexity.DistrictAlarmContentPush.CreatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.CreatedBy(childComplexity), true

	case "district_alarm_content_push.deleted_at":
		if e.complexity.DistrictAlarmContentPush.DeletedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.DeletedAt(childComplexity), true

	case "district_alarm_content_push.deleted_by":
		if e.complexity.DistrictAlarmContentPush.DeletedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.DeletedBy(childComplexity), true

	case "district_alarm_content_push.district_id":
		if e.complexity.DistrictAlarmContentPush.DistrictID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.DistrictID(childComplexity), true

	case "district_alarm_content_push.id":
		if e.complexity.DistrictAlarmContentPush.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.ID(childComplexity), true

	case "district_alarm_content_push.is_delete":
		if e.complexity.DistrictAlarmContentPush.IsDelete == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.IsDelete(childComplexity), true

	case "district_alarm_content_push.province_id":
		if e.complexity.DistrictAlarmContentPush.ProvinceID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.ProvinceID(childComplexity), true

	case "district_alarm_content_push.updated_at":
		if e.complexity.DistrictAlarmContentPush.UpdatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.UpdatedAt(childComplexity), true

	case "district_alarm_content_push.updated_by":
		if e.complexity.DistrictAlarmContentPush.UpdatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPush.UpdatedBy(childComplexity), true

	case "district_alarm_content_push_aggregate.aggregate":
		if e.complexity.DistrictAlarmContentPushAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregate.Aggregate(childComplexity), true

	case "district_alarm_content_push_aggregate.nodes":
		if e.complexity.DistrictAlarmContentPushAggregate.Nodes == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregate.Nodes(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.avg":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Avg(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.count":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_district_alarm_content_push_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Count(childComplexity, args["columns"].([]model.DistrictAlarmContentPushSelectColumn), args["distinct"].(*bool)), true

	case "district_alarm_content_push_aggregate_fields.max":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Max == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Max(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.min":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Min == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Min(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.stddev":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Stddev(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.stddev_pop":
		if e.complexity.DistrictAlarmContentPushAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.StddevPop(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.stddev_samp":
		if e.complexity.DistrictAlarmContentPushAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.StddevSamp(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.sum":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Sum(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.var_pop":
		if e.complexity.DistrictAlarmContentPushAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.VarPop(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.var_samp":
		if e.complexity.DistrictAlarmContentPushAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.VarSamp(childComplexity), true

	case "district_alarm_content_push_aggregate_fields.variance":
		if e.complexity.DistrictAlarmContentPushAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAggregateFields.Variance(childComplexity), true

	case "district_alarm_content_push_avg_fields.id":
		if e.complexity.DistrictAlarmContentPushAvgFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushAvgFields.ID(childComplexity), true

	case "district_alarm_content_push_max_fields.alarm_content":
		if e.complexity.DistrictAlarmContentPushMaxFields.AlarmContent == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.AlarmContent(childComplexity), true

	case "district_alarm_content_push_max_fields.alarm_data_id":
		if e.complexity.DistrictAlarmContentPushMaxFields.AlarmDataID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.AlarmDataID(childComplexity), true

	case "district_alarm_content_push_max_fields.alarm_type":
		if e.complexity.DistrictAlarmContentPushMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.AlarmType(childComplexity), true

	case "district_alarm_content_push_max_fields.city_id":
		if e.complexity.DistrictAlarmContentPushMaxFields.CityID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.CityID(childComplexity), true

	case "district_alarm_content_push_max_fields.created_at":
		if e.complexity.DistrictAlarmContentPushMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.CreatedAt(childComplexity), true

	case "district_alarm_content_push_max_fields.created_by":
		if e.complexity.DistrictAlarmContentPushMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.CreatedBy(childComplexity), true

	case "district_alarm_content_push_max_fields.deleted_at":
		if e.complexity.DistrictAlarmContentPushMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.DeletedAt(childComplexity), true

	case "district_alarm_content_push_max_fields.deleted_by":
		if e.complexity.DistrictAlarmContentPushMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.DeletedBy(childComplexity), true

	case "district_alarm_content_push_max_fields.district_id":
		if e.complexity.DistrictAlarmContentPushMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.DistrictID(childComplexity), true

	case "district_alarm_content_push_max_fields.id":
		if e.complexity.DistrictAlarmContentPushMaxFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.ID(childComplexity), true

	case "district_alarm_content_push_max_fields.province_id":
		if e.complexity.DistrictAlarmContentPushMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.ProvinceID(childComplexity), true

	case "district_alarm_content_push_max_fields.updated_at":
		if e.complexity.DistrictAlarmContentPushMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.UpdatedAt(childComplexity), true

	case "district_alarm_content_push_max_fields.updated_by":
		if e.complexity.DistrictAlarmContentPushMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMaxFields.UpdatedBy(childComplexity), true

	case "district_alarm_content_push_min_fields.alarm_content":
		if e.complexity.DistrictAlarmContentPushMinFields.AlarmContent == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.AlarmContent(childComplexity), true

	case "district_alarm_content_push_min_fields.alarm_data_id":
		if e.complexity.DistrictAlarmContentPushMinFields.AlarmDataID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.AlarmDataID(childComplexity), true

	case "district_alarm_content_push_min_fields.alarm_type":
		if e.complexity.DistrictAlarmContentPushMinFields.AlarmType == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.AlarmType(childComplexity), true

	case "district_alarm_content_push_min_fields.city_id":
		if e.complexity.DistrictAlarmContentPushMinFields.CityID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.CityID(childComplexity), true

	case "district_alarm_content_push_min_fields.created_at":
		if e.complexity.DistrictAlarmContentPushMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.CreatedAt(childComplexity), true

	case "district_alarm_content_push_min_fields.created_by":
		if e.complexity.DistrictAlarmContentPushMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.CreatedBy(childComplexity), true

	case "district_alarm_content_push_min_fields.deleted_at":
		if e.complexity.DistrictAlarmContentPushMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.DeletedAt(childComplexity), true

	case "district_alarm_content_push_min_fields.deleted_by":
		if e.complexity.DistrictAlarmContentPushMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.DeletedBy(childComplexity), true

	case "district_alarm_content_push_min_fields.district_id":
		if e.complexity.DistrictAlarmContentPushMinFields.DistrictID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.DistrictID(childComplexity), true

	case "district_alarm_content_push_min_fields.id":
		if e.complexity.DistrictAlarmContentPushMinFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.ID(childComplexity), true

	case "district_alarm_content_push_min_fields.province_id":
		if e.complexity.DistrictAlarmContentPushMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.ProvinceID(childComplexity), true

	case "district_alarm_content_push_min_fields.updated_at":
		if e.complexity.DistrictAlarmContentPushMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.UpdatedAt(childComplexity), true

	case "district_alarm_content_push_min_fields.updated_by":
		if e.complexity.DistrictAlarmContentPushMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMinFields.UpdatedBy(childComplexity), true

	case "district_alarm_content_push_mutation_response.affected_rows":
		if e.complexity.DistrictAlarmContentPushMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMutationResponse.AffectedRows(childComplexity), true

	case "district_alarm_content_push_mutation_response.returning":
		if e.complexity.DistrictAlarmContentPushMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushMutationResponse.Returning(childComplexity), true

	case "district_alarm_content_push_stddev_fields.id":
		if e.complexity.DistrictAlarmContentPushStddevFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushStddevFields.ID(childComplexity), true

	case "district_alarm_content_push_stddev_pop_fields.id":
		if e.complexity.DistrictAlarmContentPushStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushStddevPopFields.ID(childComplexity), true

	case "district_alarm_content_push_stddev_samp_fields.id":
		if e.complexity.DistrictAlarmContentPushStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushStddevSampFields.ID(childComplexity), true

	case "district_alarm_content_push_sum_fields.id":
		if e.complexity.DistrictAlarmContentPushSumFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushSumFields.ID(childComplexity), true

	case "district_alarm_content_push_var_pop_fields.id":
		if e.complexity.DistrictAlarmContentPushVarPopFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushVarPopFields.ID(childComplexity), true

	case "district_alarm_content_push_var_samp_fields.id":
		if e.complexity.DistrictAlarmContentPushVarSampFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushVarSampFields.ID(childComplexity), true

	case "district_alarm_content_push_variance_fields.id":
		if e.complexity.DistrictAlarmContentPushVarianceFields.ID == nil {
			break
		}

		return e.complexity.DistrictAlarmContentPushVarianceFields.ID(childComplexity), true

	case "vehicle_alarm_data.alarm_deal_id":
		if e.complexity.VehicleAlarmData.AlarmDealID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmDealID(childComplexity), true

	case "vehicle_alarm_data.alarm_end_position":
		if e.complexity.VehicleAlarmData.AlarmEndPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmEndPosition(childComplexity), true

	case "vehicle_alarm_data.alarm_end_time":
		if e.complexity.VehicleAlarmData.AlarmEndTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmEndTime(childComplexity), true

	case "vehicle_alarm_data.alarm_source":
		if e.complexity.VehicleAlarmData.AlarmSource == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmSource(childComplexity), true

	case "vehicle_alarm_data.alarm_start_time":
		if e.complexity.VehicleAlarmData.AlarmStartTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmStartTime(childComplexity), true

	case "vehicle_alarm_data.alarm_type":
		if e.complexity.VehicleAlarmData.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AlarmType(childComplexity), true

	case "vehicle_alarm_data.area_id":
		if e.complexity.VehicleAlarmData.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.AreaID(childComplexity), true

	case "vehicle_alarm_data.coordinate":
		if e.complexity.VehicleAlarmData.Coordinate == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Coordinate(childComplexity), true

	case "vehicle_alarm_data.duration":
		if e.complexity.VehicleAlarmData.Duration == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Duration(childComplexity), true

	case "vehicle_alarm_data.GPS_speed":
		if e.complexity.VehicleAlarmData.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmData.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data.id":
		if e.complexity.VehicleAlarmData.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ID(childComplexity), true

	case "vehicle_alarm_data.is_alarm_effective":
		if e.complexity.VehicleAlarmData.IsAlarmEffective == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsAlarmEffective(childComplexity), true

	case "vehicle_alarm_data.is_alarm_over":
		if e.complexity.VehicleAlarmData.IsAlarmOver == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsAlarmOver(childComplexity), true

	case "vehicle_alarm_data.is_cancel_alarm":
		if e.complexity.VehicleAlarmData.IsCancelAlarm == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsCancelAlarm(childComplexity), true

	case "vehicle_alarm_data.is_resolve":
		if e.complexity.VehicleAlarmData.IsResolve == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsResolve(childComplexity), true

	case "vehicle_alarm_data.is_supervise":
		if e.complexity.VehicleAlarmData.IsSupervise == nil {
			break
		}

		return e.complexity.VehicleAlarmData.IsSupervise(childComplexity), true

	case "vehicle_alarm_data.latest_alarm_position":
		if e.complexity.VehicleAlarmData.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmData.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data.latest_alarm_time":
		if e.complexity.VehicleAlarmData.LatestAlarmTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.LatestAlarmTime(childComplexity), true

	case "vehicle_alarm_data.location_description":
		if e.complexity.VehicleAlarmData.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmData.LocationDescription(childComplexity), true

	case "vehicle_alarm_data.maximum_speed":
		if e.complexity.VehicleAlarmData.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmData.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data.pid":
		if e.complexity.VehicleAlarmData.Pid == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Pid(childComplexity), true

	case "vehicle_alarm_data.processing_description":
		if e.complexity.VehicleAlarmData.ProcessingDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ProcessingDescription(childComplexity), true

	case "vehicle_alarm_data.processing_method":
		if e.complexity.VehicleAlarmData.ProcessingMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ProcessingMethod(childComplexity), true

	case "vehicle_alarm_data.processing_status":
		if e.complexity.VehicleAlarmData.ProcessingStatus == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ProcessingStatus(childComplexity), true

	case "vehicle_alarm_data.processing_time":
		if e.complexity.VehicleAlarmData.ProcessingTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.ProcessingTime(childComplexity), true

	case "vehicle_alarm_data.processor":
		if e.complexity.VehicleAlarmData.Processor == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Processor(childComplexity), true

	case "vehicle_alarm_data.record_time":
		if e.complexity.VehicleAlarmData.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.RecordTime(childComplexity), true

	case "vehicle_alarm_data.road_grade":
		if e.complexity.VehicleAlarmData.RoadGrade == nil {
			break
		}

		return e.complexity.VehicleAlarmData.RoadGrade(childComplexity), true

	case "vehicle_alarm_data.road_name":
		if e.complexity.VehicleAlarmData.RoadName == nil {
			break
		}

		return e.complexity.VehicleAlarmData.RoadName(childComplexity), true

	case "vehicle_alarm_data.speed_limit_threshold":
		if e.complexity.VehicleAlarmData.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmData.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data.supervision_note":
		if e.complexity.VehicleAlarmData.SupervisionNote == nil {
			break
		}

		return e.complexity.VehicleAlarmData.SupervisionNote(childComplexity), true

	case "vehicle_alarm_data.supervision_time":
		if e.complexity.VehicleAlarmData.SupervisionTime == nil {
			break
		}

		return e.complexity.VehicleAlarmData.SupervisionTime(childComplexity), true

	case "vehicle_alarm_data.supervisor":
		if e.complexity.VehicleAlarmData.Supervisor == nil {
			break
		}

		return e.complexity.VehicleAlarmData.Supervisor(childComplexity), true

	case "vehicle_alarm_data.tachograph_speed":
		if e.complexity.VehicleAlarmData.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmData.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data.vehicle_alarm_data_id":
		if e.complexity.VehicleAlarmData.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.VehicleAlarmDataID(childComplexity), true

	case "vehicle_alarm_data.vehicle_id":
		if e.complexity.VehicleAlarmData.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmData.VehicleID(childComplexity), true

	case "vehicle_alarm_data_aggregate.aggregate":
		if e.complexity.VehicleAlarmDataAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregate.Aggregate(childComplexity), true

	case "vehicle_alarm_data_aggregate.nodes":
		if e.complexity.VehicleAlarmDataAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregate.Nodes(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.avg":
		if e.complexity.VehicleAlarmDataAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Avg(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.count":
		if e.complexity.VehicleAlarmDataAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_alarm_data_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleAlarmDataSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_alarm_data_aggregate_fields.max":
		if e.complexity.VehicleAlarmDataAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Max(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.min":
		if e.complexity.VehicleAlarmDataAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Min(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.stddev":
		if e.complexity.VehicleAlarmDataAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Stddev(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.stddev_pop":
		if e.complexity.VehicleAlarmDataAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.StddevPop(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.stddev_samp":
		if e.complexity.VehicleAlarmDataAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.sum":
		if e.complexity.VehicleAlarmDataAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Sum(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.var_pop":
		if e.complexity.VehicleAlarmDataAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.VarPop(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.var_samp":
		if e.complexity.VehicleAlarmDataAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.VarSamp(childComplexity), true

	case "vehicle_alarm_data_aggregate_fields.variance":
		if e.complexity.VehicleAlarmDataAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAggregateFields.Variance(childComplexity), true

	case "vehicle_alarm_data_avg_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataAvgFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_avg_fields.id":
		if e.complexity.VehicleAlarmDataAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.ID(childComplexity), true

	case "vehicle_alarm_data_avg_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataAvgFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_avg_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataAvgFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_avg_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataAvgFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_avg_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataAvgFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataAvgFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_max_fields.alarm_deal_id":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmDealID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmDealID(childComplexity), true

	case "vehicle_alarm_data_max_fields.alarm_end_position":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmEndPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmEndPosition(childComplexity), true

	case "vehicle_alarm_data_max_fields.alarm_end_time":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmEndTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmEndTime(childComplexity), true

	case "vehicle_alarm_data_max_fields.alarm_source":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmSource == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmSource(childComplexity), true

	case "vehicle_alarm_data_max_fields.alarm_start_time":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmStartTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmStartTime(childComplexity), true

	case "vehicle_alarm_data_max_fields.alarm_type":
		if e.complexity.VehicleAlarmDataMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AlarmType(childComplexity), true

	case "vehicle_alarm_data_max_fields.area_id":
		if e.complexity.VehicleAlarmDataMaxFields.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.AreaID(childComplexity), true

	case "vehicle_alarm_data_max_fields.duration":
		if e.complexity.VehicleAlarmDataMaxFields.Duration == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Duration(childComplexity), true

	case "vehicle_alarm_data_max_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataMaxFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_max_fields.id":
		if e.complexity.VehicleAlarmDataMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ID(childComplexity), true

	case "vehicle_alarm_data_max_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataMaxFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_max_fields.latest_alarm_time":
		if e.complexity.VehicleAlarmDataMaxFields.LatestAlarmTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.LatestAlarmTime(childComplexity), true

	case "vehicle_alarm_data_max_fields.location_description":
		if e.complexity.VehicleAlarmDataMaxFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.LocationDescription(childComplexity), true

	case "vehicle_alarm_data_max_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataMaxFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_max_fields.pid":
		if e.complexity.VehicleAlarmDataMaxFields.Pid == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Pid(childComplexity), true

	case "vehicle_alarm_data_max_fields.processing_description":
		if e.complexity.VehicleAlarmDataMaxFields.ProcessingDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ProcessingDescription(childComplexity), true

	case "vehicle_alarm_data_max_fields.processing_method":
		if e.complexity.VehicleAlarmDataMaxFields.ProcessingMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ProcessingMethod(childComplexity), true

	case "vehicle_alarm_data_max_fields.processing_status":
		if e.complexity.VehicleAlarmDataMaxFields.ProcessingStatus == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ProcessingStatus(childComplexity), true

	case "vehicle_alarm_data_max_fields.processing_time":
		if e.complexity.VehicleAlarmDataMaxFields.ProcessingTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.ProcessingTime(childComplexity), true

	case "vehicle_alarm_data_max_fields.processor":
		if e.complexity.VehicleAlarmDataMaxFields.Processor == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Processor(childComplexity), true

	case "vehicle_alarm_data_max_fields.record_time":
		if e.complexity.VehicleAlarmDataMaxFields.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.RecordTime(childComplexity), true

	case "vehicle_alarm_data_max_fields.road_grade":
		if e.complexity.VehicleAlarmDataMaxFields.RoadGrade == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.RoadGrade(childComplexity), true

	case "vehicle_alarm_data_max_fields.road_name":
		if e.complexity.VehicleAlarmDataMaxFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.RoadName(childComplexity), true

	case "vehicle_alarm_data_max_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataMaxFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_max_fields.supervision_note":
		if e.complexity.VehicleAlarmDataMaxFields.SupervisionNote == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.SupervisionNote(childComplexity), true

	case "vehicle_alarm_data_max_fields.supervision_time":
		if e.complexity.VehicleAlarmDataMaxFields.SupervisionTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.SupervisionTime(childComplexity), true

	case "vehicle_alarm_data_max_fields.supervisor":
		if e.complexity.VehicleAlarmDataMaxFields.Supervisor == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.Supervisor(childComplexity), true

	case "vehicle_alarm_data_max_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataMaxFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_max_fields.vehicle_alarm_data_id":
		if e.complexity.VehicleAlarmDataMaxFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.VehicleAlarmDataID(childComplexity), true

	case "vehicle_alarm_data_max_fields.vehicle_id":
		if e.complexity.VehicleAlarmDataMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMaxFields.VehicleID(childComplexity), true

	case "vehicle_alarm_data_min_fields.alarm_deal_id":
		if e.complexity.VehicleAlarmDataMinFields.AlarmDealID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmDealID(childComplexity), true

	case "vehicle_alarm_data_min_fields.alarm_end_position":
		if e.complexity.VehicleAlarmDataMinFields.AlarmEndPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmEndPosition(childComplexity), true

	case "vehicle_alarm_data_min_fields.alarm_end_time":
		if e.complexity.VehicleAlarmDataMinFields.AlarmEndTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmEndTime(childComplexity), true

	case "vehicle_alarm_data_min_fields.alarm_source":
		if e.complexity.VehicleAlarmDataMinFields.AlarmSource == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmSource(childComplexity), true

	case "vehicle_alarm_data_min_fields.alarm_start_time":
		if e.complexity.VehicleAlarmDataMinFields.AlarmStartTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmStartTime(childComplexity), true

	case "vehicle_alarm_data_min_fields.alarm_type":
		if e.complexity.VehicleAlarmDataMinFields.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AlarmType(childComplexity), true

	case "vehicle_alarm_data_min_fields.area_id":
		if e.complexity.VehicleAlarmDataMinFields.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.AreaID(childComplexity), true

	case "vehicle_alarm_data_min_fields.duration":
		if e.complexity.VehicleAlarmDataMinFields.Duration == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Duration(childComplexity), true

	case "vehicle_alarm_data_min_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataMinFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_min_fields.id":
		if e.complexity.VehicleAlarmDataMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ID(childComplexity), true

	case "vehicle_alarm_data_min_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataMinFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_min_fields.latest_alarm_time":
		if e.complexity.VehicleAlarmDataMinFields.LatestAlarmTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.LatestAlarmTime(childComplexity), true

	case "vehicle_alarm_data_min_fields.location_description":
		if e.complexity.VehicleAlarmDataMinFields.LocationDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.LocationDescription(childComplexity), true

	case "vehicle_alarm_data_min_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataMinFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_min_fields.pid":
		if e.complexity.VehicleAlarmDataMinFields.Pid == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Pid(childComplexity), true

	case "vehicle_alarm_data_min_fields.processing_description":
		if e.complexity.VehicleAlarmDataMinFields.ProcessingDescription == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ProcessingDescription(childComplexity), true

	case "vehicle_alarm_data_min_fields.processing_method":
		if e.complexity.VehicleAlarmDataMinFields.ProcessingMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ProcessingMethod(childComplexity), true

	case "vehicle_alarm_data_min_fields.processing_status":
		if e.complexity.VehicleAlarmDataMinFields.ProcessingStatus == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ProcessingStatus(childComplexity), true

	case "vehicle_alarm_data_min_fields.processing_time":
		if e.complexity.VehicleAlarmDataMinFields.ProcessingTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.ProcessingTime(childComplexity), true

	case "vehicle_alarm_data_min_fields.processor":
		if e.complexity.VehicleAlarmDataMinFields.Processor == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Processor(childComplexity), true

	case "vehicle_alarm_data_min_fields.record_time":
		if e.complexity.VehicleAlarmDataMinFields.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.RecordTime(childComplexity), true

	case "vehicle_alarm_data_min_fields.road_grade":
		if e.complexity.VehicleAlarmDataMinFields.RoadGrade == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.RoadGrade(childComplexity), true

	case "vehicle_alarm_data_min_fields.road_name":
		if e.complexity.VehicleAlarmDataMinFields.RoadName == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.RoadName(childComplexity), true

	case "vehicle_alarm_data_min_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataMinFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_min_fields.supervision_note":
		if e.complexity.VehicleAlarmDataMinFields.SupervisionNote == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.SupervisionNote(childComplexity), true

	case "vehicle_alarm_data_min_fields.supervision_time":
		if e.complexity.VehicleAlarmDataMinFields.SupervisionTime == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.SupervisionTime(childComplexity), true

	case "vehicle_alarm_data_min_fields.supervisor":
		if e.complexity.VehicleAlarmDataMinFields.Supervisor == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.Supervisor(childComplexity), true

	case "vehicle_alarm_data_min_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataMinFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_min_fields.vehicle_alarm_data_id":
		if e.complexity.VehicleAlarmDataMinFields.VehicleAlarmDataID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.VehicleAlarmDataID(childComplexity), true

	case "vehicle_alarm_data_min_fields.vehicle_id":
		if e.complexity.VehicleAlarmDataMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMinFields.VehicleID(childComplexity), true

	case "vehicle_alarm_data_mutation_response.affected_rows":
		if e.complexity.VehicleAlarmDataMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_alarm_data_mutation_response.returning":
		if e.complexity.VehicleAlarmDataMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleAlarmDataMutationResponse.Returning(childComplexity), true

	case "vehicle_alarm_data_stddev_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataStddevFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_stddev_fields.id":
		if e.complexity.VehicleAlarmDataStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.ID(childComplexity), true

	case "vehicle_alarm_data_stddev_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataStddevFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_stddev_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataStddevFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_stddev_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataStddevFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_stddev_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataStddevFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_stddev_pop_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataStddevPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_stddev_pop_fields.id":
		if e.complexity.VehicleAlarmDataStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.ID(childComplexity), true

	case "vehicle_alarm_data_stddev_pop_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataStddevPopFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_stddev_pop_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataStddevPopFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_stddev_pop_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataStddevPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_stddev_pop_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataStddevPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevPopFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_stddev_samp_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataStddevSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_stddev_samp_fields.id":
		if e.complexity.VehicleAlarmDataStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.ID(childComplexity), true

	case "vehicle_alarm_data_stddev_samp_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataStddevSampFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_stddev_samp_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataStddevSampFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_stddev_samp_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataStddevSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_stddev_samp_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataStddevSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataStddevSampFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_sum_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataSumFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_sum_fields.id":
		if e.complexity.VehicleAlarmDataSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.ID(childComplexity), true

	case "vehicle_alarm_data_sum_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataSumFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_sum_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataSumFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_sum_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataSumFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_sum_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataSumFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataSumFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_var_pop_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataVarPopFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_var_pop_fields.id":
		if e.complexity.VehicleAlarmDataVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.ID(childComplexity), true

	case "vehicle_alarm_data_var_pop_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataVarPopFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_var_pop_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataVarPopFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_var_pop_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataVarPopFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_var_pop_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataVarPopFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarPopFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_var_samp_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataVarSampFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_var_samp_fields.id":
		if e.complexity.VehicleAlarmDataVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.ID(childComplexity), true

	case "vehicle_alarm_data_var_samp_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataVarSampFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_var_samp_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataVarSampFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_var_samp_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataVarSampFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_var_samp_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataVarSampFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarSampFields.TachographSpeed(childComplexity), true

	case "vehicle_alarm_data_variance_fields.GPS_speed":
		if e.complexity.VehicleAlarmDataVarianceFields.GpsSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.GpsSpeed(childComplexity), true

	case "vehicle_alarm_data_variance_fields.id":
		if e.complexity.VehicleAlarmDataVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.ID(childComplexity), true

	case "vehicle_alarm_data_variance_fields.latest_alarm_position":
		if e.complexity.VehicleAlarmDataVarianceFields.LatestAlarmPosition == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.LatestAlarmPosition(childComplexity), true

	case "vehicle_alarm_data_variance_fields.maximum_speed":
		if e.complexity.VehicleAlarmDataVarianceFields.MaximumSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.MaximumSpeed(childComplexity), true

	case "vehicle_alarm_data_variance_fields.speed_limit_threshold":
		if e.complexity.VehicleAlarmDataVarianceFields.SpeedLimitThreshold == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.SpeedLimitThreshold(childComplexity), true

	case "vehicle_alarm_data_variance_fields.tachograph_speed":
		if e.complexity.VehicleAlarmDataVarianceFields.TachographSpeed == nil {
			break
		}

		return e.complexity.VehicleAlarmDataVarianceFields.TachographSpeed(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/alarm_processing_record.graphqls", Input: `

"""
报警处理记录表

columns and relationships of "alarm_processing_record"

"""
type alarm_processing_record {
    """vehicle_alarm_data报警数据表的alarm_data_id"""
    alarm_data_id: String!

    """
    alarm_supervision_picture_ upload报警监管图片上传表的alarm_supervision_picture_id
    """
    alarm_supervision_picture_id: String!

    """语音内容"""
    announce_content: String

    """APP推送内容"""
    app_push_content: String

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """处置方式字典"""
    disposal_method: String

    """处置结果"""
    disposal_result: String

    """主键"""
    id: bigint!

    """是否语音通知"""
    is_announce: Boolean

    """是否APP推送"""
    is_app_push: Boolean

    """是否删除"""
    is_delete: Boolean

    """是否通报"""
    is_notify: Boolean

    """是否短信推送"""
    is_sms_push: Boolean

    """通报内容"""
    notify_content: String

    """操作用户"""
    operation_user: String

    """处理内容"""
    processing_content: String

    """处理时间"""
    processing_time: timestamptz

    """
    处理类型  1.超速报警  2.疲劳驾驶  3.工程报警  4.超三天断电报警  5.进出区域报警  6.进出区域报警  7.安检到期报警  11.进出工地报警
    """
    processing_type: Int

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String
}

"""
aggregated selection of "alarm_processing_record"
"""
type alarm_processing_record_aggregate {
    aggregate: alarm_processing_record_aggregate_fields
    nodes: [alarm_processing_record!]!
}

"""
aggregate fields of "alarm_processing_record"
"""
type alarm_processing_record_aggregate_fields {
    avg: alarm_processing_record_avg_fields
    count(columns: [alarm_processing_record_select_column!], distinct: Boolean): Int
    max: alarm_processing_record_max_fields
    min: alarm_processing_record_min_fields
    stddev: alarm_processing_record_stddev_fields
    stddev_pop: alarm_processing_record_stddev_pop_fields
    stddev_samp: alarm_processing_record_stddev_samp_fields
    sum: alarm_processing_record_sum_fields
    var_pop: alarm_processing_record_var_pop_fields
    var_samp: alarm_processing_record_var_samp_fields
    variance: alarm_processing_record_variance_fields
}

"""
order by aggregate values of table "alarm_processing_record"
"""
input alarm_processing_record_aggregate_order_by {
    avg: alarm_processing_record_avg_order_by
    count: order_by
    max: alarm_processing_record_max_order_by
    min: alarm_processing_record_min_order_by
    stddev: alarm_processing_record_stddev_order_by
    stddev_pop: alarm_processing_record_stddev_pop_order_by
    stddev_samp: alarm_processing_record_stddev_samp_order_by
    sum: alarm_processing_record_sum_order_by
    var_pop: alarm_processing_record_var_pop_order_by
    var_samp: alarm_processing_record_var_samp_order_by
    variance: alarm_processing_record_variance_order_by
}

"""
input type for inserting array relation for remote table "alarm_processing_record"
"""
input alarm_processing_record_arr_rel_insert_input {
    data: [alarm_processing_record_insert_input!]!
}

"""aggregate avg on columns"""
type alarm_processing_record_avg_fields {
    id: Float
    processing_type: Float
}

"""
order by avg() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_avg_order_by {
    id: order_by
    processing_type: order_by
}

"""
Boolean expression to filter rows from the table "alarm_processing_record". All fields are combined with a logical 'AND'.
"""
input alarm_processing_record_bool_exp {
    _and: [alarm_processing_record_bool_exp]
    _not: alarm_processing_record_bool_exp
    _or: [alarm_processing_record_bool_exp]
    alarm_data_id: String_comparison_exp
    alarm_supervision_picture_id: String_comparison_exp
    announce_content: String_comparison_exp
    app_push_content: String_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    disposal_method: String_comparison_exp
    disposal_result: String_comparison_exp
    id: bigint_comparison_exp
    is_announce: Boolean_comparison_exp
    is_app_push: Boolean_comparison_exp
    is_delete: Boolean_comparison_exp
    is_notify: Boolean_comparison_exp
    is_sms_push: Boolean_comparison_exp
    notify_content: String_comparison_exp
    operation_user: String_comparison_exp
    processing_content: String_comparison_exp
    processing_time: timestamptz_comparison_exp
    processing_type: Int_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
}

"""
input type for incrementing integer column in table "alarm_processing_record"
"""
input alarm_processing_record_inc_input {
    id: bigint
    processing_type: Int
}

"""
input type for inserting data into table "alarm_processing_record"
"""
input alarm_processing_record_insert_input {
    alarm_data_id: String
    alarm_supervision_picture_id: String
    announce_content: String
    app_push_content: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    disposal_method: String
    disposal_result: String
    id: bigint
    is_announce: Boolean
    is_app_push: Boolean
    is_delete: Boolean
    is_notify: Boolean
    is_sms_push: Boolean
    notify_content: String
    operation_user: String
    processing_content: String
    processing_time: timestamptz
    processing_type: Int
    updated_at: timestamptz
    updated_by: String
}

"""aggregate max on columns"""
type alarm_processing_record_max_fields {
    alarm_data_id: String
    alarm_supervision_picture_id: String
    announce_content: String
    app_push_content: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    disposal_method: String
    disposal_result: String
    id: bigint
    notify_content: String
    operation_user: String
    processing_content: String
    processing_time: timestamptz
    processing_type: Int
    updated_at: timestamptz
    updated_by: String
}

"""
order by max() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_max_order_by {
    alarm_data_id: order_by
    alarm_supervision_picture_id: order_by
    announce_content: order_by
    app_push_content: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_method: order_by
    disposal_result: order_by
    id: order_by
    notify_content: order_by
    operation_user: order_by
    processing_content: order_by
    processing_time: order_by
    processing_type: order_by
    updated_at: order_by
    updated_by: order_by
}

"""aggregate min on columns"""
type alarm_processing_record_min_fields {
    alarm_data_id: String
    alarm_supervision_picture_id: String
    announce_content: String
    app_push_content: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    disposal_method: String
    disposal_result: String
    id: bigint
    notify_content: String
    operation_user: String
    processing_content: String
    processing_time: timestamptz
    processing_type: Int
    updated_at: timestamptz
    updated_by: String
}

"""
order by min() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_min_order_by {
    alarm_data_id: order_by
    alarm_supervision_picture_id: order_by
    announce_content: order_by
    app_push_content: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_method: order_by
    disposal_result: order_by
    id: order_by
    notify_content: order_by
    operation_user: order_by
    processing_content: order_by
    processing_time: order_by
    processing_type: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
response of any mutation on the table "alarm_processing_record"
"""
type alarm_processing_record_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [alarm_processing_record!]!
}

"""
input type for inserting object relation for remote table "alarm_processing_record"
"""
input alarm_processing_record_obj_rel_insert_input {
    data: alarm_processing_record_insert_input!
}

"""
ordering options when selecting data from "alarm_processing_record"
"""
input alarm_processing_record_order_by {
    alarm_data_id: order_by
    alarm_supervision_picture_id: order_by
    announce_content: order_by
    app_push_content: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_method: order_by
    disposal_result: order_by
    id: order_by
    is_announce: order_by
    is_app_push: order_by
    is_delete: order_by
    is_notify: order_by
    is_sms_push: order_by
    notify_content: order_by
    operation_user: order_by
    processing_content: order_by
    processing_time: order_by
    processing_type: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
select columns of table "alarm_processing_record"
"""
enum alarm_processing_record_select_column {
    """column name"""
    alarm_data_id

    """column name"""
    alarm_supervision_picture_id

    """column name"""
    announce_content

    """column name"""
    app_push_content

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    disposal_method

    """column name"""
    disposal_result

    """column name"""
    id

    """column name"""
    is_announce

    """column name"""
    is_app_push

    """column name"""
    is_delete

    """column name"""
    is_notify

    """column name"""
    is_sms_push

    """column name"""
    notify_content

    """column name"""
    operation_user

    """column name"""
    processing_content

    """column name"""
    processing_time

    """column name"""
    processing_type

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""
input type for updating data in table "alarm_processing_record"
"""
input alarm_processing_record_set_input {
    alarm_data_id: String
    alarm_supervision_picture_id: String
    announce_content: String
    app_push_content: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    disposal_method: String
    disposal_result: String
    id: bigint
    is_announce: Boolean
    is_app_push: Boolean
    is_delete: Boolean
    is_notify: Boolean
    is_sms_push: Boolean
    notify_content: String
    operation_user: String
    processing_content: String
    processing_time: timestamptz
    processing_type: Int
    updated_at: timestamptz
    updated_by: String
}

"""aggregate stddev on columns"""
type alarm_processing_record_stddev_fields {
    id: Float
    processing_type: Float
}

"""
order by stddev() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_stddev_order_by {
    id: order_by
    processing_type: order_by
}

"""aggregate stddev_pop on columns"""
type alarm_processing_record_stddev_pop_fields {
    id: Float
    processing_type: Float
}

"""
order by stddev_pop() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_stddev_pop_order_by {
    id: order_by
    processing_type: order_by
}

"""aggregate stddev_samp on columns"""
type alarm_processing_record_stddev_samp_fields {
    id: Float
    processing_type: Float
}

"""
order by stddev_samp() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_stddev_samp_order_by {
    id: order_by
    processing_type: order_by
}

"""aggregate sum on columns"""
type alarm_processing_record_sum_fields {
    id: bigint
    processing_type: Int
}

"""
order by sum() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_sum_order_by {
    id: order_by
    processing_type: order_by
}

"""aggregate var_pop on columns"""
type alarm_processing_record_var_pop_fields {
    id: Float
    processing_type: Float
}

"""
order by var_pop() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_var_pop_order_by {
    id: order_by
    processing_type: order_by
}

"""aggregate var_samp on columns"""
type alarm_processing_record_var_samp_fields {
    id: Float
    processing_type: Float
}

"""
order by var_samp() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_var_samp_order_by {
    id: order_by
    processing_type: order_by
}

"""aggregate variance on columns"""
type alarm_processing_record_variance_fields {
    id: Float
    processing_type: Float
}

"""
order by variance() on columns of table "alarm_processing_record"
"""
input alarm_processing_record_variance_order_by {
    id: order_by
    processing_type: order_by
}





"""mutation root"""
type Mutation {
    """
    delete data from the table: "alarm_processing_record"
  """
    delete_alarm_processing_record(
        """filter the rows which have to be deleted"""
        where: alarm_processing_record_bool_exp!
    ): alarm_processing_record_mutation_response

    """
    insert data into the table: "alarm_processing_record"
  """
    insert_alarm_processing_record(
        """the rows to be inserted"""
        objects: [alarm_processing_record_insert_input!]!
    ): alarm_processing_record_mutation_response

    """
    insert a single row into the table: "alarm_processing_record"
  """
    insert_alarm_processing_record_one(
        """the row to be inserted"""
        object: alarm_processing_record_insert_input!
    ): alarm_processing_record

    """
    update data of the table: "alarm_processing_record"
  """
    update_alarm_processing_record(
        """increments the integer columns with given value of the filtered values"""
        _inc: alarm_processing_record_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: alarm_processing_record_set_input

        """filter the rows which have to be updated"""
        where: alarm_processing_record_bool_exp!
    ): alarm_processing_record_mutation_response
}


"""query root"""
type Query {
    """
    fetch data from the table: "alarm_processing_record"
  """
    alarm_processing_record(
        """distinct select on columns"""
        distinct_on: [alarm_processing_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [alarm_processing_record_order_by!]

        """filter the rows returned"""
        where: alarm_processing_record_bool_exp
    ): [alarm_processing_record!]!

    """
    fetch aggregated fields from the table: "alarm_processing_record"
  """
    alarm_processing_record_aggregate(
        """distinct select on columns"""
        distinct_on: [alarm_processing_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [alarm_processing_record_order_by!]

        """filter the rows returned"""
        where: alarm_processing_record_bool_exp
    ): alarm_processing_record_aggregate!
}


"""subscription root"""
type Subscription {
    """
    fetch data from the table: "alarm_processing_record"
  """
    alarm_processing_record(
        """distinct select on columns"""
        distinct_on: [alarm_processing_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [alarm_processing_record_order_by!]

        """filter the rows returned"""
        where: alarm_processing_record_bool_exp
    ): [alarm_processing_record!]!

    """
    fetch aggregated fields from the table: "alarm_processing_record"
  """
    alarm_processing_record_aggregate(
        """distinct select on columns"""
        distinct_on: [alarm_processing_record_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [alarm_processing_record_order_by!]

        """filter the rows returned"""
        where: alarm_processing_record_bool_exp
    ): alarm_processing_record_aggregate!
}

`, BuiltIn: false},
	{Name: "graph/graphqls/alarm_supervision_picture_upload.graphqls", Input: `
"""
报警监管图片上传表


columns and relationships of "alarm_supervision_picture_upload"

"""
type alarm_supervision_picture_upload {
    """终端IMEI"""
    IMEI: String

    """联合主键"""
    alarm_supervision_picture_id: String!

    """摄像头ID字典"""
    camera_id: Int

    """驾驶员id"""
    driver_id: String

    """所在企业id"""
    enterprise_id: String

    """主键"""
    id: bigint!

    """报警监控图片地址"""
    monitoring_pic_address: String

    """报警监控图片名称"""
    monitoring_pic_name: String

    """报警监控图片上传时间"""
    monitoring_pic_upload_time: timestamptz

    """拍照条件字典"""
    photo_condition: String

    """SIM卡号"""
    sim_number: String

    """终端上报时间"""
    update_time: timestamptz

    """车辆ID"""
    vehicle_id: String
}

"""
aggregated selection of "alarm_supervision_picture_upload"
"""
type alarm_supervision_picture_upload_aggregate {
    aggregate: alarm_supervision_picture_upload_aggregate_fields
    nodes: [alarm_supervision_picture_upload!]!
}

"""
aggregate fields of "alarm_supervision_picture_upload"
"""
type alarm_supervision_picture_upload_aggregate_fields {
    avg: alarm_supervision_picture_upload_avg_fields
    count(columns: [alarm_supervision_picture_upload_select_column!], distinct: Boolean): Int
    max: alarm_supervision_picture_upload_max_fields
    min: alarm_supervision_picture_upload_min_fields
    stddev: alarm_supervision_picture_upload_stddev_fields
    stddev_pop: alarm_supervision_picture_upload_stddev_pop_fields
    stddev_samp: alarm_supervision_picture_upload_stddev_samp_fields
    sum: alarm_supervision_picture_upload_sum_fields
    var_pop: alarm_supervision_picture_upload_var_pop_fields
    var_samp: alarm_supervision_picture_upload_var_samp_fields
    variance: alarm_supervision_picture_upload_variance_fields
}

"""
order by aggregate values of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_aggregate_order_by {
    avg: alarm_supervision_picture_upload_avg_order_by
    count: order_by
    max: alarm_supervision_picture_upload_max_order_by
    min: alarm_supervision_picture_upload_min_order_by
    stddev: alarm_supervision_picture_upload_stddev_order_by
    stddev_pop: alarm_supervision_picture_upload_stddev_pop_order_by
    stddev_samp: alarm_supervision_picture_upload_stddev_samp_order_by
    sum: alarm_supervision_picture_upload_sum_order_by
    var_pop: alarm_supervision_picture_upload_var_pop_order_by
    var_samp: alarm_supervision_picture_upload_var_samp_order_by
    variance: alarm_supervision_picture_upload_variance_order_by
}

"""
input type for inserting array relation for remote table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_arr_rel_insert_input {
    data: [alarm_supervision_picture_upload_insert_input!]!
    on_conflict: alarm_supervision_picture_upload_on_conflict
}

"""aggregate avg on columns"""
type alarm_supervision_picture_upload_avg_fields {
    camera_id: Float
    id: Float
}

"""
order by avg() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_avg_order_by {
    camera_id: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table
"alarm_supervision_picture_upload". All fields are combined with a logical 'AND'.
"""
input alarm_supervision_picture_upload_bool_exp {
    IMEI: String_comparison_exp
    _and: [alarm_supervision_picture_upload_bool_exp]
    _not: alarm_supervision_picture_upload_bool_exp
    _or: [alarm_supervision_picture_upload_bool_exp]
    alarm_supervision_picture_id: String_comparison_exp
    camera_id: Int_comparison_exp
    driver_id: String_comparison_exp
    enterprise_id: String_comparison_exp
    id: bigint_comparison_exp
    monitoring_pic_address: String_comparison_exp
    monitoring_pic_name: String_comparison_exp
    monitoring_pic_upload_time: timestamptz_comparison_exp
    photo_condition: String_comparison_exp
    sim_number: String_comparison_exp
    update_time: timestamptz_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "alarm_supervision_picture_upload"
"""
enum alarm_supervision_picture_upload_constraint {
    """unique or primary key constraint"""
    alarm_supervision_picture_upload_pkey
}

"""
input type for incrementing integer column in table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_inc_input {
    camera_id: Int
    id: bigint
}

"""
input type for inserting data into table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_insert_input {
    IMEI: String
    alarm_supervision_picture_id: String
    camera_id: Int
    driver_id: String
    enterprise_id: String
    id: bigint
    monitoring_pic_address: String
    monitoring_pic_name: String
    monitoring_pic_upload_time: timestamptz
    photo_condition: String
    sim_number: String
    update_time: timestamptz
    vehicle_id: String
}

"""aggregate max on columns"""
type alarm_supervision_picture_upload_max_fields {
    IMEI: String
    alarm_supervision_picture_id: String
    camera_id: Int
    driver_id: String
    enterprise_id: String
    id: bigint
    monitoring_pic_address: String
    monitoring_pic_name: String
    monitoring_pic_upload_time: timestamptz
    photo_condition: String
    sim_number: String
    update_time: timestamptz
    vehicle_id: String
}

"""
order by max() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_max_order_by {
    IMEI: order_by
    alarm_supervision_picture_id: order_by
    camera_id: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    monitoring_pic_address: order_by
    monitoring_pic_name: order_by
    monitoring_pic_upload_time: order_by
    photo_condition: order_by
    sim_number: order_by
    update_time: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type alarm_supervision_picture_upload_min_fields {
    IMEI: String
    alarm_supervision_picture_id: String
    camera_id: Int
    driver_id: String
    enterprise_id: String
    id: bigint
    monitoring_pic_address: String
    monitoring_pic_name: String
    monitoring_pic_upload_time: timestamptz
    photo_condition: String
    sim_number: String
    update_time: timestamptz
    vehicle_id: String
}

"""
order by min() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_min_order_by {
    IMEI: order_by
    alarm_supervision_picture_id: order_by
    camera_id: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    monitoring_pic_address: order_by
    monitoring_pic_name: order_by
    monitoring_pic_upload_time: order_by
    photo_condition: order_by
    sim_number: order_by
    update_time: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "alarm_supervision_picture_upload"
"""
type alarm_supervision_picture_upload_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [alarm_supervision_picture_upload!]!
}

"""
input type for inserting object relation for remote table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_obj_rel_insert_input {
    data: alarm_supervision_picture_upload_insert_input!
    on_conflict: alarm_supervision_picture_upload_on_conflict
}

"""
on conflict condition type for table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_on_conflict {
    constraint: alarm_supervision_picture_upload_constraint!
    update_columns: [alarm_supervision_picture_upload_update_column!]!
    where: alarm_supervision_picture_upload_bool_exp
}

"""
ordering options when selecting data from "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_order_by {
    IMEI: order_by
    alarm_supervision_picture_id: order_by
    camera_id: order_by
    driver_id: order_by
    enterprise_id: order_by
    id: order_by
    monitoring_pic_address: order_by
    monitoring_pic_name: order_by
    monitoring_pic_upload_time: order_by
    photo_condition: order_by
    sim_number: order_by
    update_time: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "alarm_supervision_picture_upload"
"""
enum alarm_supervision_picture_upload_select_column {
    """column name"""
    IMEI

    """column name"""
    alarm_supervision_picture_id

    """column name"""
    camera_id

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    id

    """column name"""
    monitoring_pic_address

    """column name"""
    monitoring_pic_name

    """column name"""
    monitoring_pic_upload_time

    """column name"""
    photo_condition

    """column name"""
    sim_number

    """column name"""
    update_time

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_set_input {
    IMEI: String
    alarm_supervision_picture_id: String
    camera_id: Int
    driver_id: String
    enterprise_id: String
    id: bigint
    monitoring_pic_address: String
    monitoring_pic_name: String
    monitoring_pic_upload_time: timestamptz
    photo_condition: String
    sim_number: String
    update_time: timestamptz
    vehicle_id: String
}

"""aggregate stddev on columns"""
type alarm_supervision_picture_upload_stddev_fields {
    camera_id: Float
    id: Float
}

"""
order by stddev() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_stddev_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type alarm_supervision_picture_upload_stddev_pop_fields {
    camera_id: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_stddev_pop_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type alarm_supervision_picture_upload_stddev_samp_fields {
    camera_id: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_stddev_samp_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate sum on columns"""
type alarm_supervision_picture_upload_sum_fields {
    camera_id: Int
    id: bigint
}

"""
order by sum() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_sum_order_by {
    camera_id: order_by
    id: order_by
}

"""
update columns of table "alarm_supervision_picture_upload"
"""
enum alarm_supervision_picture_upload_update_column {
    """column name"""
    IMEI

    """column name"""
    alarm_supervision_picture_id

    """column name"""
    camera_id

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    id

    """column name"""
    monitoring_pic_address

    """column name"""
    monitoring_pic_name

    """column name"""
    monitoring_pic_upload_time

    """column name"""
    photo_condition

    """column name"""
    sim_number

    """column name"""
    update_time

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type alarm_supervision_picture_upload_var_pop_fields {
    camera_id: Float
    id: Float
}

"""
order by var_pop() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_var_pop_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type alarm_supervision_picture_upload_var_samp_fields {
    camera_id: Float
    id: Float
}

"""
order by var_samp() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_var_samp_order_by {
    camera_id: order_by
    id: order_by
}

"""aggregate variance on columns"""
type alarm_supervision_picture_upload_variance_fields {
    camera_id: Float
    id: Float
}

"""
order by variance() on columns of table "alarm_supervision_picture_upload"
"""
input alarm_supervision_picture_upload_variance_order_by {
    camera_id: order_by
    id: order_by
}


extend type Mutation {
    """
    delete data from the table: "alarm_supervision_picture_upload"
  """
    delete_alarm_supervision_picture_upload(
        """filter the rows which have to be deleted"""
        where: alarm_supervision_picture_upload_bool_exp!
    ): alarm_supervision_picture_upload_mutation_response

    """
    delete single row from the table: "alarm_supervision_picture_upload"
  """
    delete_alarm_supervision_picture_upload_by_pk(
        """主键"""
        id: bigint!
    ): alarm_supervision_picture_upload

    """
    insert data into the table: "alarm_supervision_picture_upload"
  """
    insert_alarm_supervision_picture_upload(
        """the rows to be inserted"""
        objects: [alarm_supervision_picture_upload_insert_input!]!

        """on conflict condition"""
        on_conflict: alarm_supervision_picture_upload_on_conflict
    ): alarm_supervision_picture_upload_mutation_response

    """
    insert a single row into the table: "alarm_supervision_picture_upload"
  """
    insert_alarm_supervision_picture_upload_one(
        """the row to be inserted"""
        object: alarm_supervision_picture_upload_insert_input!

        """on conflict condition"""
        on_conflict: alarm_supervision_picture_upload_on_conflict
    ): alarm_supervision_picture_upload

    """
    update data of the table: "alarm_supervision_picture_upload"
  """
    update_alarm_supervision_picture_upload(
        """increments the integer columns with given value of the filtered values"""
        _inc: alarm_supervision_picture_upload_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: alarm_supervision_picture_upload_set_input

        """filter the rows which have to be updated"""
        where: alarm_supervision_picture_upload_bool_exp!
    ): alarm_supervision_picture_upload_mutation_response

    """
    update single row of the table: "alarm_supervision_picture_upload"
  """
    update_alarm_supervision_picture_upload_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: alarm_supervision_picture_upload_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: alarm_supervision_picture_upload_set_input
        pk_columns: alarm_supervision_picture_upload_pk_columns_input!
    ): alarm_supervision_picture_upload
}


extend type Query {
    """
    fetch data from the table: "alarm_supervision_picture_upload"
  """
    alarm_supervision_picture_upload(
        """distinct select on columns"""
        distinct_on: [alarm_supervision_picture_upload_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [alarm_supervision_picture_upload_order_by!]

        """filter the rows returned"""
        where: alarm_supervision_picture_upload_bool_exp
    ): [alarm_supervision_picture_upload!]!

    """
    fetch aggregated fields from the table: "alarm_supervision_picture_upload"
  """
    alarm_supervision_picture_upload_aggregate(
        """distinct select on columns"""
        distinct_on: [alarm_supervision_picture_upload_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [alarm_supervision_picture_upload_order_by!]

        """filter the rows returned"""
        where: alarm_supervision_picture_upload_bool_exp
    ): alarm_supervision_picture_upload_aggregate!

    """
    fetch data from the table: "alarm_supervision_picture_upload" using primary key columns
    """
    alarm_supervision_picture_upload_by_pk(
        """主键"""
        id: bigint!
    ): alarm_supervision_picture_upload
}



extend type Subscription {
    """
    fetch data from the table: "alarm_supervision_picture_upload"
  """
    alarm_supervision_picture_upload(
        """distinct select on columns"""
        distinct_on: [alarm_supervision_picture_upload_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [alarm_supervision_picture_upload_order_by!]

        """filter the rows returned"""
        where: alarm_supervision_picture_upload_bool_exp
    ): [alarm_supervision_picture_upload!]!

    """
    fetch aggregated fields from the table: "alarm_supervision_picture_upload"
  """
    alarm_supervision_picture_upload_aggregate(
        """distinct select on columns"""
        distinct_on: [alarm_supervision_picture_upload_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [alarm_supervision_picture_upload_order_by!]

        """filter the rows returned"""
        where: alarm_supervision_picture_upload_bool_exp
    ): alarm_supervision_picture_upload_aggregate!

    """
    fetch data from the table: "alarm_supervision_picture_upload" using primary key columns
    """
    alarm_supervision_picture_upload_by_pk(
        """主键"""
        id: bigint!
    ): alarm_supervision_picture_upload
}

`, BuiltIn: false},
	{Name: "graph/graphqls/district_alarm_content_push.graphqls", Input: `
"""
各县市区报警内容推送表


columns and relationships of "district_alarm_content_push"

"""
type district_alarm_content_push {
    """内容"""
    alarm_content: String

    """vehicle_alarm_data报警数据表的alarm_data_id"""
    alarm_data_id: String!

    """报警类型字典"""
    alarm_type: String

    """城市ID"""
    city_id: String

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """区ID"""
    district_id: String

    """主键"""
    id: bigint!

    """是否删除"""
    is_delete: Boolean

    """省份ID"""
    province_id: String

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String
}

"""
aggregated selection of "district_alarm_content_push"
"""
type district_alarm_content_push_aggregate {
    aggregate: district_alarm_content_push_aggregate_fields
    nodes: [district_alarm_content_push!]!
}

"""
aggregate fields of "district_alarm_content_push"
"""
type district_alarm_content_push_aggregate_fields {
    avg: district_alarm_content_push_avg_fields
    count(columns: [district_alarm_content_push_select_column!], distinct: Boolean): Int
    max: district_alarm_content_push_max_fields
    min: district_alarm_content_push_min_fields
    stddev: district_alarm_content_push_stddev_fields
    stddev_pop: district_alarm_content_push_stddev_pop_fields
    stddev_samp: district_alarm_content_push_stddev_samp_fields
    sum: district_alarm_content_push_sum_fields
    var_pop: district_alarm_content_push_var_pop_fields
    var_samp: district_alarm_content_push_var_samp_fields
    variance: district_alarm_content_push_variance_fields
}

"""
order by aggregate values of table "district_alarm_content_push"
"""
input district_alarm_content_push_aggregate_order_by {
    avg: district_alarm_content_push_avg_order_by
    count: order_by
    max: district_alarm_content_push_max_order_by
    min: district_alarm_content_push_min_order_by
    stddev: district_alarm_content_push_stddev_order_by
    stddev_pop: district_alarm_content_push_stddev_pop_order_by
    stddev_samp: district_alarm_content_push_stddev_samp_order_by
    sum: district_alarm_content_push_sum_order_by
    var_pop: district_alarm_content_push_var_pop_order_by
    var_samp: district_alarm_content_push_var_samp_order_by
    variance: district_alarm_content_push_variance_order_by
}

"""
input type for inserting array relation for remote table "district_alarm_content_push"
"""
input district_alarm_content_push_arr_rel_insert_input {
    data: [district_alarm_content_push_insert_input!]!
    on_conflict: district_alarm_content_push_on_conflict
}

"""aggregate avg on columns"""
type district_alarm_content_push_avg_fields {
    id: Float
}

"""
order by avg() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_avg_order_by {
    id: order_by
}

"""
Boolean expression to filter rows from the table "district_alarm_content_push".
All fields are combined with a logical 'AND'.
"""
input district_alarm_content_push_bool_exp {
    _and: [district_alarm_content_push_bool_exp]
    _not: district_alarm_content_push_bool_exp
    _or: [district_alarm_content_push_bool_exp]
    alarm_content: String_comparison_exp
    alarm_data_id: String_comparison_exp
    alarm_type: String_comparison_exp
    city_id: String_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    district_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    province_id: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
}

"""
unique or primary key constraints on table "district_alarm_content_push"
"""
enum district_alarm_content_push_constraint {
    """unique or primary key constraint"""
    district_alarm_content_push_pkey
}

"""
input type for incrementing integer column in table "district_alarm_content_push"
"""
input district_alarm_content_push_inc_input {
    id: bigint
}

"""
input type for inserting data into table "district_alarm_content_push"
"""
input district_alarm_content_push_insert_input {
    alarm_content: String
    alarm_data_id: String
    alarm_type: String
    city_id: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    is_delete: Boolean
    province_id: String
    updated_at: timestamptz
    updated_by: String
}

"""aggregate max on columns"""
type district_alarm_content_push_max_fields {
    alarm_content: String
    alarm_data_id: String
    alarm_type: String
    city_id: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    province_id: String
    updated_at: timestamptz
    updated_by: String
}

"""
order by max() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_max_order_by {
    alarm_content: order_by
    alarm_data_id: order_by
    alarm_type: order_by
    city_id: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    province_id: order_by
    updated_at: order_by
    updated_by: order_by
}

"""aggregate min on columns"""
type district_alarm_content_push_min_fields {
    alarm_content: String
    alarm_data_id: String
    alarm_type: String
    city_id: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    province_id: String
    updated_at: timestamptz
    updated_by: String
}

"""
order by min() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_min_order_by {
    alarm_content: order_by
    alarm_data_id: order_by
    alarm_type: order_by
    city_id: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    province_id: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
response of any mutation on the table "district_alarm_content_push"
"""
type district_alarm_content_push_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [district_alarm_content_push!]!
}

"""
input type for inserting object relation for remote table "district_alarm_content_push"
"""
input district_alarm_content_push_obj_rel_insert_input {
    data: district_alarm_content_push_insert_input!
    on_conflict: district_alarm_content_push_on_conflict
}

"""
on conflict condition type for table "district_alarm_content_push"
"""
input district_alarm_content_push_on_conflict {
    constraint: district_alarm_content_push_constraint!
    update_columns: [district_alarm_content_push_update_column!]!
    where: district_alarm_content_push_bool_exp
}

"""
ordering options when selecting data from "district_alarm_content_push"
"""
input district_alarm_content_push_order_by {
    alarm_content: order_by
    alarm_data_id: order_by
    alarm_type: order_by
    city_id: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    is_delete: order_by
    province_id: order_by
    updated_at: order_by
    updated_by: order_by
}

"""
primary key columns input for table: "district_alarm_content_push"
"""
input district_alarm_content_push_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "district_alarm_content_push"
"""
enum district_alarm_content_push_select_column {
    """column name"""
    alarm_content

    """column name"""
    alarm_data_id

    """column name"""
    alarm_type

    """column name"""
    city_id

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    district_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    province_id

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""
input type for updating data in table "district_alarm_content_push"
"""
input district_alarm_content_push_set_input {
    alarm_content: String
    alarm_data_id: String
    alarm_type: String
    city_id: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    is_delete: Boolean
    province_id: String
    updated_at: timestamptz
    updated_by: String
}

"""aggregate stddev on columns"""
type district_alarm_content_push_stddev_fields {
    id: Float
}

"""
order by stddev() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_stddev_order_by {
    id: order_by
}

"""aggregate stddev_pop on columns"""
type district_alarm_content_push_stddev_pop_fields {
    id: Float
}

"""
order by stddev_pop() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_stddev_pop_order_by {
    id: order_by
}

"""aggregate stddev_samp on columns"""
type district_alarm_content_push_stddev_samp_fields {
    id: Float
}

"""
order by stddev_samp() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_stddev_samp_order_by {
    id: order_by
}

"""aggregate sum on columns"""
type district_alarm_content_push_sum_fields {
    id: bigint
}

"""
order by sum() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_sum_order_by {
    id: order_by
}

"""
update columns of table "district_alarm_content_push"
"""
enum district_alarm_content_push_update_column {
    """column name"""
    alarm_content

    """column name"""
    alarm_data_id

    """column name"""
    alarm_type

    """column name"""
    city_id

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    district_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    province_id

    """column name"""
    updated_at

    """column name"""
    updated_by
}

"""aggregate var_pop on columns"""
type district_alarm_content_push_var_pop_fields {
    id: Float
}

"""
order by var_pop() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_var_pop_order_by {
    id: order_by
}

"""aggregate var_samp on columns"""
type district_alarm_content_push_var_samp_fields {
    id: Float
}

"""
order by var_samp() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_var_samp_order_by {
    id: order_by
}

"""aggregate variance on columns"""
type district_alarm_content_push_variance_fields {
    id: Float
}

"""
order by variance() on columns of table "district_alarm_content_push"
"""
input district_alarm_content_push_variance_order_by {
    id: order_by
}

extend type Mutation {
    """
    delete data from the table: "district_alarm_content_push"
  """
    delete_district_alarm_content_push(
        """filter the rows which have to be deleted"""
        where: district_alarm_content_push_bool_exp!
    ): district_alarm_content_push_mutation_response

    """
    delete single row from the table: "district_alarm_content_push"
  """
    delete_district_alarm_content_push_by_pk(
        """主键"""
        id: bigint!
    ): district_alarm_content_push

    """
    insert data into the table: "district_alarm_content_push"
  """
    insert_district_alarm_content_push(
        """the rows to be inserted"""
        objects: [district_alarm_content_push_insert_input!]!

        """on conflict condition"""
        on_conflict: district_alarm_content_push_on_conflict
    ): district_alarm_content_push_mutation_response

    """
    insert a single row into the table: "district_alarm_content_push"
  """
    insert_district_alarm_content_push_one(
        """the row to be inserted"""
        object: district_alarm_content_push_insert_input!

        """on conflict condition"""
        on_conflict: district_alarm_content_push_on_conflict
    ): district_alarm_content_push

    """
    update data of the table: "district_alarm_content_push"
  """
    update_district_alarm_content_push(
        """increments the integer columns with given value of the filtered values"""
        _inc: district_alarm_content_push_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: district_alarm_content_push_set_input

        """filter the rows which have to be updated"""
        where: district_alarm_content_push_bool_exp!
    ): district_alarm_content_push_mutation_response

    """
    update single row of the table: "district_alarm_content_push"
  """
    update_district_alarm_content_push_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: district_alarm_content_push_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: district_alarm_content_push_set_input
        pk_columns: district_alarm_content_push_pk_columns_input!
    ): district_alarm_content_push
}


extend type Query {
    """
    fetch data from the table: "district_alarm_content_push"
  """
    district_alarm_content_push(
        """distinct select on columns"""
        distinct_on: [district_alarm_content_push_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [district_alarm_content_push_order_by!]

        """filter the rows returned"""
        where: district_alarm_content_push_bool_exp
    ): [district_alarm_content_push!]!

    """
    fetch aggregated fields from the table: "district_alarm_content_push"
  """
    district_alarm_content_push_aggregate(
        """distinct select on columns"""
        distinct_on: [district_alarm_content_push_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [district_alarm_content_push_order_by!]

        """filter the rows returned"""
        where: district_alarm_content_push_bool_exp
    ): district_alarm_content_push_aggregate!

    """
    fetch data from the table: "district_alarm_content_push" using primary key columns
    """
    district_alarm_content_push_by_pk(
        """主键"""
        id: bigint!
    ): district_alarm_content_push
}


extend type Subscription {
    """
    fetch data from the table: "district_alarm_content_push"
  """
    district_alarm_content_push(
        """distinct select on columns"""
        distinct_on: [district_alarm_content_push_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [district_alarm_content_push_order_by!]

        """filter the rows returned"""
        where: district_alarm_content_push_bool_exp
    ): [district_alarm_content_push!]!

    """
    fetch aggregated fields from the table: "district_alarm_content_push"
  """
    district_alarm_content_push_aggregate(
        """distinct select on columns"""
        distinct_on: [district_alarm_content_push_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [district_alarm_content_push_order_by!]

        """filter the rows returned"""
        where: district_alarm_content_push_bool_exp
    ): district_alarm_content_push_aggregate!

    """
    fetch data from the table: "district_alarm_content_push" using primary key columns
    """
    district_alarm_content_push_by_pk(
        """主键"""
        id: bigint!
    ): district_alarm_content_push
}
`, BuiltIn: false},
	{Name: "graph/graphqls/schema.graphqls", Input: `
scalar _jsonb
scalar bigint
scalar numeric
scalar timestamptz
scalar _text

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}


"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}


"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"expression to compare columns of type _text. All fields are combined with logical 'AND'."
input _text_comparison_exp {
    _eq: _text
    _gt: _text
    _gte: _text
    _in: [_text!]
    _is_null: Boolean
    _lt: _text
    _lte: _text
    _neq: _text
    _nin: [_text!]
}


scalar point

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
    _eq: point
    _gt: point
    _gte: point
    _in: [point!]
    _is_null: Boolean
    _lt: point
    _lte: point
    _neq: point
    _nin: [point!]
}`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_alarm_data.graphqls", Input: `
extend type Mutation {
    """
    delete data from the table: "vehicle_alarm_data"
  """
    delete_vehicle_alarm_data(
        """filter the rows which have to be deleted"""
        where: vehicle_alarm_data_bool_exp!
    ): vehicle_alarm_data_mutation_response

    """
    delete single row from the table: "vehicle_alarm_data"
  """
    delete_vehicle_alarm_data_by_pk(
        """主键"""
        id: bigint!

        """报警数据外部编码，由golang程序生成的xid，暴露到外部使用，联合主键"""
        vehicle_alarm_data_id: String!
    ): vehicle_alarm_data

    """
    insert data into the table: "vehicle_alarm_data"
  """
    insert_vehicle_alarm_data(
        """the rows to be inserted"""
        objects: [vehicle_alarm_data_insert_input!]!

        """on conflict condition"""
        on_conflict: vehicle_alarm_data_on_conflict
    ): vehicle_alarm_data_mutation_response

    """
    insert a single row into the table: "vehicle_alarm_data"
  """
    insert_vehicle_alarm_data_one(
        """the row to be inserted"""
        object: vehicle_alarm_data_insert_input!

        """on conflict condition"""
        on_conflict: vehicle_alarm_data_on_conflict
    ): vehicle_alarm_data

    """
    update data of the table: "vehicle_alarm_data"
  """
    update_vehicle_alarm_data(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_alarm_data_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_alarm_data_set_input

        """filter the rows which have to be updated"""
        where: vehicle_alarm_data_bool_exp!
    ): vehicle_alarm_data_mutation_response

    """
    update single row of the table: "vehicle_alarm_data"
  """
    update_vehicle_alarm_data_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: vehicle_alarm_data_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: vehicle_alarm_data_set_input
        pk_columns: vehicle_alarm_data_pk_columns_input!
    ): vehicle_alarm_data
}


extend type Query {
    """
    fetch data from the table: "vehicle_alarm_data"
  """
    vehicle_alarm_data(
        """distinct select on columns"""
        distinct_on: [vehicle_alarm_data_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_alarm_data_order_by!]

        """filter the rows returned"""
        where: vehicle_alarm_data_bool_exp
    ): [vehicle_alarm_data!]!

    """
    fetch aggregated fields from the table: "vehicle_alarm_data"
  """
    vehicle_alarm_data_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_alarm_data_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_alarm_data_order_by!]

        """filter the rows returned"""
        where: vehicle_alarm_data_bool_exp
    ): vehicle_alarm_data_aggregate!

    """
    fetch data from the table: "vehicle_alarm_data" using primary key columns
    """
    vehicle_alarm_data_by_pk(
        """主键"""
        id: bigint!

        """报警数据外部编码，由golang程序生成的xid，暴露到外部使用，联合主键"""
        vehicle_alarm_data_id: String!
    ): vehicle_alarm_data
}



extend type Subscription {
    """
    fetch data from the table: "vehicle_alarm_data"
  """
    vehicle_alarm_data(
        """distinct select on columns"""
        distinct_on: [vehicle_alarm_data_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_alarm_data_order_by!]

        """filter the rows returned"""
        where: vehicle_alarm_data_bool_exp
    ): [vehicle_alarm_data!]!

    """
    fetch aggregated fields from the table: "vehicle_alarm_data"
  """
    vehicle_alarm_data_aggregate(
        """distinct select on columns"""
        distinct_on: [vehicle_alarm_data_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [vehicle_alarm_data_order_by!]

        """filter the rows returned"""
        where: vehicle_alarm_data_bool_exp
    ): vehicle_alarm_data_aggregate!

    """
    fetch data from the table: "vehicle_alarm_data" using primary key columns
    """
    vehicle_alarm_data_by_pk(
        """主键"""
        id: bigint!

        """报警数据外部编码，由golang程序生成的xid，暴露到外部使用，联合主键"""
        vehicle_alarm_data_id: String!
    ): vehicle_alarm_data
}



"""
报警数据表


columns and relationships of "vehicle_alarm_data"

"""
type vehicle_alarm_data {
    """GPS速度"""
    GPS_speed: numeric

    """处警ID"""
    alarm_deal_id: String

    """报警结束位置"""
    alarm_end_position: String

    """报警结束时间"""
    alarm_end_time: timestamptz

    """报警来源字典"""
    alarm_source: String

    """报警开始时间"""
    alarm_start_time: timestamptz

    """报警类型字典"""
    alarm_type: String

    """进区域ID"""
    area_id: String

    """空间数据类型point表示经度(longitude)和纬度(latitude)"""
    coordinate: point

    """持续时间"""
    duration: String

    """主键"""
    id: bigint!

    """报警是否有效"""
    is_alarm_effective: Boolean

    """报警是否结束"""
    is_alarm_over: Boolean

    """是否取消报警"""
    is_cancel_alarm: Boolean

    """是否解析"""
    is_resolve: Boolean

    """是否监管"""
    is_supervise: Boolean

    """最新报警位置"""
    latest_alarm_position: Int

    """最新报警时间"""
    latest_alarm_time: timestamptz

    """位置描述"""
    location_description: String

    """最高速度"""
    maximum_speed: numeric

    """地区"""
    pid: String

    """处理描述"""
    processing_description: String

    """处警处理方式字典"""
    processing_method: String

    """
    处警处理状态字典

    """
    processing_status: String

    """处理时间"""
    processing_time: timestamptz

    """处理人"""
    processor: String

    """记录时间"""
    record_time: timestamptz

    """道路等级字典"""
    road_grade: String

    """道路名称"""
    road_name: String

    """限速阀值"""
    speed_limit_threshold: numeric

    """监管备注"""
    supervision_note: String

    """监管时间"""
    supervision_time: timestamptz

    """监管人"""
    supervisor: String

    """行驶记录仪速度"""
    tachograph_speed: numeric

    """报警数据外部编码，由golang程序生成的xid，暴露到外部使用，联合主键"""
    vehicle_alarm_data_id: String!

    """车辆ID"""
    vehicle_id: String
}

"""
aggregated selection of "vehicle_alarm_data"
"""
type vehicle_alarm_data_aggregate {
    aggregate: vehicle_alarm_data_aggregate_fields
    nodes: [vehicle_alarm_data!]!
}

"""
aggregate fields of "vehicle_alarm_data"
"""
type vehicle_alarm_data_aggregate_fields {
    avg: vehicle_alarm_data_avg_fields
    count(columns: [vehicle_alarm_data_select_column!], distinct: Boolean): Int
    max: vehicle_alarm_data_max_fields
    min: vehicle_alarm_data_min_fields
    stddev: vehicle_alarm_data_stddev_fields
    stddev_pop: vehicle_alarm_data_stddev_pop_fields
    stddev_samp: vehicle_alarm_data_stddev_samp_fields
    sum: vehicle_alarm_data_sum_fields
    var_pop: vehicle_alarm_data_var_pop_fields
    var_samp: vehicle_alarm_data_var_samp_fields
    variance: vehicle_alarm_data_variance_fields
}

"""
order by aggregate values of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_aggregate_order_by {
    avg: vehicle_alarm_data_avg_order_by
    count: order_by
    max: vehicle_alarm_data_max_order_by
    min: vehicle_alarm_data_min_order_by
    stddev: vehicle_alarm_data_stddev_order_by
    stddev_pop: vehicle_alarm_data_stddev_pop_order_by
    stddev_samp: vehicle_alarm_data_stddev_samp_order_by
    sum: vehicle_alarm_data_sum_order_by
    var_pop: vehicle_alarm_data_var_pop_order_by
    var_samp: vehicle_alarm_data_var_samp_order_by
    variance: vehicle_alarm_data_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicle_alarm_data"
"""
input vehicle_alarm_data_arr_rel_insert_input {
    data: [vehicle_alarm_data_insert_input!]!
    on_conflict: vehicle_alarm_data_on_conflict
}

"""aggregate avg on columns"""
type vehicle_alarm_data_avg_fields {
    GPS_speed: Float
    id: Float
    latest_alarm_position: Float
    maximum_speed: Float
    speed_limit_threshold: Float
    tachograph_speed: Float
}

"""
order by avg() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_avg_order_by {
    GPS_speed: order_by
    id: order_by
    latest_alarm_position: order_by
    maximum_speed: order_by
    speed_limit_threshold: order_by
    tachograph_speed: order_by
}

"""
Boolean expression to filter rows from the table "vehicle_alarm_data". All fields are combined with a logical 'AND'.
"""
input vehicle_alarm_data_bool_exp {
    GPS_speed: numeric_comparison_exp
    _and: [vehicle_alarm_data_bool_exp]
    _not: vehicle_alarm_data_bool_exp
    _or: [vehicle_alarm_data_bool_exp]
    alarm_deal_id: String_comparison_exp
    alarm_end_position: String_comparison_exp
    alarm_end_time: timestamptz_comparison_exp
    alarm_source: String_comparison_exp
    alarm_start_time: timestamptz_comparison_exp
    alarm_type: String_comparison_exp
    area_id: String_comparison_exp
    coordinate: point_comparison_exp
    duration: String_comparison_exp
    id: bigint_comparison_exp
    is_alarm_effective: Boolean_comparison_exp
    is_alarm_over: Boolean_comparison_exp
    is_cancel_alarm: Boolean_comparison_exp
    is_resolve: Boolean_comparison_exp
    is_supervise: Boolean_comparison_exp
    latest_alarm_position: Int_comparison_exp
    latest_alarm_time: timestamptz_comparison_exp
    location_description: String_comparison_exp
    maximum_speed: numeric_comparison_exp
    pid: String_comparison_exp
    processing_description: String_comparison_exp
    processing_method: String_comparison_exp
    processing_status: String_comparison_exp
    processing_time: timestamptz_comparison_exp
    processor: String_comparison_exp
    record_time: timestamptz_comparison_exp
    road_grade: String_comparison_exp
    road_name: String_comparison_exp
    speed_limit_threshold: numeric_comparison_exp
    supervision_note: String_comparison_exp
    supervision_time: timestamptz_comparison_exp
    supervisor: String_comparison_exp
    tachograph_speed: numeric_comparison_exp
    vehicle_alarm_data_id: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "vehicle_alarm_data"
"""
enum vehicle_alarm_data_constraint {
    """unique or primary key constraint"""
    vehicle_alarm_data_pkey
}

"""
input type for incrementing integer column in table "vehicle_alarm_data"
"""
input vehicle_alarm_data_inc_input {
    GPS_speed: numeric
    id: bigint
    latest_alarm_position: Int
    maximum_speed: numeric
    speed_limit_threshold: numeric
    tachograph_speed: numeric
}

"""
input type for inserting data into table "vehicle_alarm_data"
"""
input vehicle_alarm_data_insert_input {
    GPS_speed: numeric
    alarm_deal_id: String
    alarm_end_position: String
    alarm_end_time: timestamptz
    alarm_source: String
    alarm_start_time: timestamptz
    alarm_type: String
    area_id: String
    coordinate: point
    duration: String
    id: bigint
    is_alarm_effective: Boolean
    is_alarm_over: Boolean
    is_cancel_alarm: Boolean
    is_resolve: Boolean
    is_supervise: Boolean
    latest_alarm_position: Int
    latest_alarm_time: timestamptz
    location_description: String
    maximum_speed: numeric
    pid: String
    processing_description: String
    processing_method: String
    processing_status: String
    processing_time: timestamptz
    processor: String
    record_time: timestamptz
    road_grade: String
    road_name: String
    speed_limit_threshold: numeric
    supervision_note: String
    supervision_time: timestamptz
    supervisor: String
    tachograph_speed: numeric
    vehicle_alarm_data_id: String
    vehicle_id: String
}

"""aggregate max on columns"""
type vehicle_alarm_data_max_fields {
    GPS_speed: numeric
    alarm_deal_id: String
    alarm_end_position: String
    alarm_end_time: timestamptz
    alarm_source: String
    alarm_start_time: timestamptz
    alarm_type: String
    area_id: String
    duration: String
    id: bigint
    latest_alarm_position: Int
    latest_alarm_time: timestamptz
    location_description: String
    maximum_speed: numeric
    pid: String
    processing_description: String
    processing_method: String
    processing_status: String
    processing_time: timestamptz
    processor: String
    record_time: timestamptz
    road_grade: String
    road_name: String
    speed_limit_threshold: numeric
    supervision_note: String
    supervision_time: timestamptz
    supervisor: String
    tachograph_speed: numeric
    vehicle_alarm_data_id: String
    vehicle_id: String
}

"""
order by max() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_max_order_by {
    GPS_speed: order_by
    alarm_deal_id: order_by
    alarm_end_position: order_by
    alarm_end_time: order_by
    alarm_source: order_by
    alarm_start_time: order_by
    alarm_type: order_by
    area_id: order_by
    duration: order_by
    id: order_by
    latest_alarm_position: order_by
    latest_alarm_time: order_by
    location_description: order_by
    maximum_speed: order_by
    pid: order_by
    processing_description: order_by
    processing_method: order_by
    processing_status: order_by
    processing_time: order_by
    processor: order_by
    record_time: order_by
    road_grade: order_by
    road_name: order_by
    speed_limit_threshold: order_by
    supervision_note: order_by
    supervision_time: order_by
    supervisor: order_by
    tachograph_speed: order_by
    vehicle_alarm_data_id: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type vehicle_alarm_data_min_fields {
    GPS_speed: numeric
    alarm_deal_id: String
    alarm_end_position: String
    alarm_end_time: timestamptz
    alarm_source: String
    alarm_start_time: timestamptz
    alarm_type: String
    area_id: String
    duration: String
    id: bigint
    latest_alarm_position: Int
    latest_alarm_time: timestamptz
    location_description: String
    maximum_speed: numeric
    pid: String
    processing_description: String
    processing_method: String
    processing_status: String
    processing_time: timestamptz
    processor: String
    record_time: timestamptz
    road_grade: String
    road_name: String
    speed_limit_threshold: numeric
    supervision_note: String
    supervision_time: timestamptz
    supervisor: String
    tachograph_speed: numeric
    vehicle_alarm_data_id: String
    vehicle_id: String
}

"""
order by min() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_min_order_by {
    GPS_speed: order_by
    alarm_deal_id: order_by
    alarm_end_position: order_by
    alarm_end_time: order_by
    alarm_source: order_by
    alarm_start_time: order_by
    alarm_type: order_by
    area_id: order_by
    duration: order_by
    id: order_by
    latest_alarm_position: order_by
    latest_alarm_time: order_by
    location_description: order_by
    maximum_speed: order_by
    pid: order_by
    processing_description: order_by
    processing_method: order_by
    processing_status: order_by
    processing_time: order_by
    processor: order_by
    record_time: order_by
    road_grade: order_by
    road_name: order_by
    speed_limit_threshold: order_by
    supervision_note: order_by
    supervision_time: order_by
    supervisor: order_by
    tachograph_speed: order_by
    vehicle_alarm_data_id: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "vehicle_alarm_data"
"""
type vehicle_alarm_data_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [vehicle_alarm_data!]!
}

"""
input type for inserting object relation for remote table "vehicle_alarm_data"
"""
input vehicle_alarm_data_obj_rel_insert_input {
    data: vehicle_alarm_data_insert_input!
    on_conflict: vehicle_alarm_data_on_conflict
}

"""
on conflict condition type for table "vehicle_alarm_data"
"""
input vehicle_alarm_data_on_conflict {
    constraint: vehicle_alarm_data_constraint!
    update_columns: [vehicle_alarm_data_update_column!]!
    where: vehicle_alarm_data_bool_exp
}

"""
ordering options when selecting data from "vehicle_alarm_data"
"""
input vehicle_alarm_data_order_by {
    GPS_speed: order_by
    alarm_deal_id: order_by
    alarm_end_position: order_by
    alarm_end_time: order_by
    alarm_source: order_by
    alarm_start_time: order_by
    alarm_type: order_by
    area_id: order_by
    coordinate: order_by
    duration: order_by
    id: order_by
    is_alarm_effective: order_by
    is_alarm_over: order_by
    is_cancel_alarm: order_by
    is_resolve: order_by
    is_supervise: order_by
    latest_alarm_position: order_by
    latest_alarm_time: order_by
    location_description: order_by
    maximum_speed: order_by
    pid: order_by
    processing_description: order_by
    processing_method: order_by
    processing_status: order_by
    processing_time: order_by
    processor: order_by
    record_time: order_by
    road_grade: order_by
    road_name: order_by
    speed_limit_threshold: order_by
    supervision_note: order_by
    supervision_time: order_by
    supervisor: order_by
    tachograph_speed: order_by
    vehicle_alarm_data_id: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "vehicle_alarm_data"
"""
input vehicle_alarm_data_pk_columns_input {
    """主键"""
    id: bigint!

    """报警数据外部编码，由golang程序生成的xid，暴露到外部使用，联合主键"""
    vehicle_alarm_data_id: String!
}

"""
select columns of table "vehicle_alarm_data"
"""
enum vehicle_alarm_data_select_column {
    """column name"""
    GPS_speed

    """column name"""
    alarm_deal_id

    """column name"""
    alarm_end_position

    """column name"""
    alarm_end_time

    """column name"""
    alarm_source

    """column name"""
    alarm_start_time

    """column name"""
    alarm_type

    """column name"""
    area_id

    """column name"""
    coordinate

    """column name"""
    duration

    """column name"""
    id

    """column name"""
    is_alarm_effective

    """column name"""
    is_alarm_over

    """column name"""
    is_cancel_alarm

    """column name"""
    is_resolve

    """column name"""
    is_supervise

    """column name"""
    latest_alarm_position

    """column name"""
    latest_alarm_time

    """column name"""
    location_description

    """column name"""
    maximum_speed

    """column name"""
    pid

    """column name"""
    processing_description

    """column name"""
    processing_method

    """column name"""
    processing_status

    """column name"""
    processing_time

    """column name"""
    processor

    """column name"""
    record_time

    """column name"""
    road_grade

    """column name"""
    road_name

    """column name"""
    speed_limit_threshold

    """column name"""
    supervision_note

    """column name"""
    supervision_time

    """column name"""
    supervisor

    """column name"""
    tachograph_speed

    """column name"""
    vehicle_alarm_data_id

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "vehicle_alarm_data"
"""
input vehicle_alarm_data_set_input {
    GPS_speed: numeric
    alarm_deal_id: String
    alarm_end_position: String
    alarm_end_time: timestamptz
    alarm_source: String
    alarm_start_time: timestamptz
    alarm_type: String
    area_id: String
    coordinate: point
    duration: String
    id: bigint
    is_alarm_effective: Boolean
    is_alarm_over: Boolean
    is_cancel_alarm: Boolean
    is_resolve: Boolean
    is_supervise: Boolean
    latest_alarm_position: Int
    latest_alarm_time: timestamptz
    location_description: String
    maximum_speed: numeric
    pid: String
    processing_description: String
    processing_method: String
    processing_status: String
    processing_time: timestamptz
    processor: String
    record_time: timestamptz
    road_grade: String
    road_name: String
    speed_limit_threshold: numeric
    supervision_note: String
    supervision_time: timestamptz
    supervisor: String
    tachograph_speed: numeric
    vehicle_alarm_data_id: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type vehicle_alarm_data_stddev_fields {
    GPS_speed: Float
    id: Float
    latest_alarm_position: Float
    maximum_speed: Float
    speed_limit_threshold: Float
    tachograph_speed: Float
}

"""
order by stddev() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_stddev_order_by {
    GPS_speed: order_by
    id: order_by
    latest_alarm_position: order_by
    maximum_speed: order_by
    speed_limit_threshold: order_by
    tachograph_speed: order_by
}

"""aggregate stddev_pop on columns"""
type vehicle_alarm_data_stddev_pop_fields {
    GPS_speed: Float
    id: Float
    latest_alarm_position: Float
    maximum_speed: Float
    speed_limit_threshold: Float
    tachograph_speed: Float
}

"""
order by stddev_pop() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_stddev_pop_order_by {
    GPS_speed: order_by
    id: order_by
    latest_alarm_position: order_by
    maximum_speed: order_by
    speed_limit_threshold: order_by
    tachograph_speed: order_by
}

"""aggregate stddev_samp on columns"""
type vehicle_alarm_data_stddev_samp_fields {
    GPS_speed: Float
    id: Float
    latest_alarm_position: Float
    maximum_speed: Float
    speed_limit_threshold: Float
    tachograph_speed: Float
}

"""
order by stddev_samp() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_stddev_samp_order_by {
    GPS_speed: order_by
    id: order_by
    latest_alarm_position: order_by
    maximum_speed: order_by
    speed_limit_threshold: order_by
    tachograph_speed: order_by
}

"""aggregate sum on columns"""
type vehicle_alarm_data_sum_fields {
    GPS_speed: numeric
    id: bigint
    latest_alarm_position: Int
    maximum_speed: numeric
    speed_limit_threshold: numeric
    tachograph_speed: numeric
}

"""
order by sum() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_sum_order_by {
    GPS_speed: order_by
    id: order_by
    latest_alarm_position: order_by
    maximum_speed: order_by
    speed_limit_threshold: order_by
    tachograph_speed: order_by
}

"""
update columns of table "vehicle_alarm_data"
"""
enum vehicle_alarm_data_update_column {
    """column name"""
    GPS_speed

    """column name"""
    alarm_deal_id

    """column name"""
    alarm_end_position

    """column name"""
    alarm_end_time

    """column name"""
    alarm_source

    """column name"""
    alarm_start_time

    """column name"""
    alarm_type

    """column name"""
    area_id

    """column name"""
    coordinate

    """column name"""
    duration

    """column name"""
    id

    """column name"""
    is_alarm_effective

    """column name"""
    is_alarm_over

    """column name"""
    is_cancel_alarm

    """column name"""
    is_resolve

    """column name"""
    is_supervise

    """column name"""
    latest_alarm_position

    """column name"""
    latest_alarm_time

    """column name"""
    location_description

    """column name"""
    maximum_speed

    """column name"""
    pid

    """column name"""
    processing_description

    """column name"""
    processing_method

    """column name"""
    processing_status

    """column name"""
    processing_time

    """column name"""
    processor

    """column name"""
    record_time

    """column name"""
    road_grade

    """column name"""
    road_name

    """column name"""
    speed_limit_threshold

    """column name"""
    supervision_note

    """column name"""
    supervision_time

    """column name"""
    supervisor

    """column name"""
    tachograph_speed

    """column name"""
    vehicle_alarm_data_id

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type vehicle_alarm_data_var_pop_fields {
    GPS_speed: Float
    id: Float
    latest_alarm_position: Float
    maximum_speed: Float
    speed_limit_threshold: Float
    tachograph_speed: Float
}

"""
order by var_pop() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_var_pop_order_by {
    GPS_speed: order_by
    id: order_by
    latest_alarm_position: order_by
    maximum_speed: order_by
    speed_limit_threshold: order_by
    tachograph_speed: order_by
}

"""aggregate var_samp on columns"""
type vehicle_alarm_data_var_samp_fields {
    GPS_speed: Float
    id: Float
    latest_alarm_position: Float
    maximum_speed: Float
    speed_limit_threshold: Float
    tachograph_speed: Float
}

"""
order by var_samp() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_var_samp_order_by {
    GPS_speed: order_by
    id: order_by
    latest_alarm_position: order_by
    maximum_speed: order_by
    speed_limit_threshold: order_by
    tachograph_speed: order_by
}

"""aggregate variance on columns"""
type vehicle_alarm_data_variance_fields {
    GPS_speed: Float
    id: Float
    latest_alarm_position: Float
    maximum_speed: Float
    speed_limit_threshold: Float
    tachograph_speed: Float
}

"""
order by variance() on columns of table "vehicle_alarm_data"
"""
input vehicle_alarm_data_variance_order_by {
    GPS_speed: order_by
    id: order_by
    latest_alarm_position: order_by
    maximum_speed: order_by
    speed_limit_threshold: order_by
    tachograph_speed: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNalarm_processing_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNalarm_supervision_picture_upload_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_alarm_supervision_picture_upload_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdistrict_alarm_content_push_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_district_alarm_content_push_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_alarm_data_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_alarm_data_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_alarm_data_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_alarm_data_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AlarmProcessingRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNalarm_processing_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_alarm_processing_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AlarmProcessingRecordInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNalarm_processing_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AlarmSupervisionPictureUploadInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNalarm_supervision_picture_upload_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.AlarmSupervisionPictureUploadOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOalarm_supervision_picture_upload_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_alarm_supervision_picture_upload_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AlarmSupervisionPictureUploadInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNalarm_supervision_picture_upload_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.AlarmSupervisionPictureUploadOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOalarm_supervision_picture_upload_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DistrictAlarmContentPushInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdistrict_alarm_content_push_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DistrictAlarmContentPushOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdistrict_alarm_content_push_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_district_alarm_content_push_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DistrictAlarmContentPushInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdistrict_alarm_content_push_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DistrictAlarmContentPushOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdistrict_alarm_content_push_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleAlarmDataInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_alarm_data_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleAlarmDataOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_alarm_data_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_alarm_data_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleAlarmDataInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_alarm_data_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleAlarmDataOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_alarm_data_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AlarmProcessingRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOalarm_processing_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AlarmProcessingRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOalarm_processing_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNalarm_processing_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AlarmSupervisionPictureUploadIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOalarm_supervision_picture_upload_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AlarmSupervisionPictureUploadSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOalarm_supervision_picture_upload_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNalarm_supervision_picture_upload_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_alarm_supervision_picture_upload_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AlarmSupervisionPictureUploadIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOalarm_supervision_picture_upload_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.AlarmSupervisionPictureUploadSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOalarm_supervision_picture_upload_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.AlarmSupervisionPictureUploadPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNalarm_supervision_picture_upload_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DistrictAlarmContentPushIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdistrict_alarm_content_push_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DistrictAlarmContentPushSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdistrict_alarm_content_push_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdistrict_alarm_content_push_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_district_alarm_content_push_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DistrictAlarmContentPushIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdistrict_alarm_content_push_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DistrictAlarmContentPushSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdistrict_alarm_content_push_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DistrictAlarmContentPushPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdistrict_alarm_content_push_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleAlarmDataIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_alarm_data_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleAlarmDataSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_alarm_data_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_alarm_data_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_alarm_data_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleAlarmDataIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_alarm_data_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleAlarmDataSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_alarm_data_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleAlarmDataPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_alarm_data_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_alarm_processing_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmProcessingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOalarm_processing_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmProcessingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOalarm_processing_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOalarm_processing_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmProcessingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOalarm_processing_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmProcessingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOalarm_processing_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOalarm_processing_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_alarm_supervision_picture_upload_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmSupervisionPictureUploadSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOalarm_supervision_picture_upload_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmSupervisionPictureUploadOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOalarm_supervision_picture_upload_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmSupervisionPictureUploadSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOalarm_supervision_picture_upload_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmSupervisionPictureUploadOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOalarm_supervision_picture_upload_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_alarm_supervision_picture_upload_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_district_alarm_content_push_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DistrictAlarmContentPushSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdistrict_alarm_content_push_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DistrictAlarmContentPushOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdistrict_alarm_content_push_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DistrictAlarmContentPushSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdistrict_alarm_content_push_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DistrictAlarmContentPushOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdistrict_alarm_content_push_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_district_alarm_content_push_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_data_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmDataSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_alarm_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmDataOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_alarm_data_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmDataSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_alarm_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmDataOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_alarm_data_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_data_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_alarm_data_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_alarm_data_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_alarm_processing_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmProcessingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOalarm_processing_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmProcessingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOalarm_processing_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOalarm_processing_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_alarm_processing_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmProcessingRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOalarm_processing_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmProcessingRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOalarm_processing_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmProcessingRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOalarm_processing_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_alarm_supervision_picture_upload_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmSupervisionPictureUploadSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOalarm_supervision_picture_upload_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmSupervisionPictureUploadOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOalarm_supervision_picture_upload_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_alarm_supervision_picture_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmSupervisionPictureUploadSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOalarm_supervision_picture_upload_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.AlarmSupervisionPictureUploadOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOalarm_supervision_picture_upload_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.AlarmSupervisionPictureUploadBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_alarm_supervision_picture_upload_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_district_alarm_content_push_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DistrictAlarmContentPushSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdistrict_alarm_content_push_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DistrictAlarmContentPushOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdistrict_alarm_content_push_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_district_alarm_content_push_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DistrictAlarmContentPushSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdistrict_alarm_content_push_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DistrictAlarmContentPushOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdistrict_alarm_content_push_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DistrictAlarmContentPushBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_district_alarm_content_push_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_alarm_data_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmDataSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_alarm_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmDataOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_alarm_data_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_alarm_data_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmDataSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_alarm_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmDataOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_alarm_data_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmDataBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_alarm_data_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_alarm_data_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_alarm_data_id"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_alarm_processing_record_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmProcessingRecordSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOalarm_processing_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_alarm_supervision_picture_upload_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.AlarmSupervisionPictureUploadSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOalarm_supervision_picture_upload_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_district_alarm_content_push_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DistrictAlarmContentPushSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdistrict_alarm_content_push_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_vehicle_alarm_data_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmDataSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_alarm_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAlarmProcessingRecord(rctx, args["where"].(model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOalarm_processing_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAlarmProcessingRecord(rctx, args["objects"].([]*model.AlarmProcessingRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOalarm_processing_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_alarm_processing_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_alarm_processing_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAlarmProcessingRecordOne(rctx, args["object"].(model.AlarmProcessingRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalOalarm_processing_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAlarmProcessingRecord(rctx, args["_inc"].(*model.AlarmProcessingRecordIncInput), args["_set"].(*model.AlarmProcessingRecordSetInput), args["where"].(model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMutationResponse)
	fc.Result = res
	return ec.marshalOalarm_processing_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAlarmSupervisionPictureUpload(rctx, args["where"].(model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMutationResponse)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_alarm_supervision_picture_upload_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_alarm_supervision_picture_upload_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAlarmSupervisionPictureUploadByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAlarmSupervisionPictureUpload(rctx, args["objects"].([]*model.AlarmSupervisionPictureUploadInsertInput), args["on_conflict"].(*model.AlarmSupervisionPictureUploadOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMutationResponse)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_alarm_supervision_picture_upload_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_alarm_supervision_picture_upload_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertAlarmSupervisionPictureUploadOne(rctx, args["object"].(model.AlarmSupervisionPictureUploadInsertInput), args["on_conflict"].(*model.AlarmSupervisionPictureUploadOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAlarmSupervisionPictureUpload(rctx, args["_inc"].(*model.AlarmSupervisionPictureUploadIncInput), args["_set"].(*model.AlarmSupervisionPictureUploadSetInput), args["where"].(model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMutationResponse)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_alarm_supervision_picture_upload_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_alarm_supervision_picture_upload_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAlarmSupervisionPictureUploadByPk(rctx, args["_inc"].(*model.AlarmSupervisionPictureUploadIncInput), args["_set"].(*model.AlarmSupervisionPictureUploadSetInput), args["pk_columns"].(model.AlarmSupervisionPictureUploadPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDistrictAlarmContentPush(rctx, args["where"].(model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMutationResponse)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_district_alarm_content_push_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_district_alarm_content_push_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDistrictAlarmContentPushByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDistrictAlarmContentPush(rctx, args["objects"].([]*model.DistrictAlarmContentPushInsertInput), args["on_conflict"].(*model.DistrictAlarmContentPushOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMutationResponse)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_district_alarm_content_push_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_district_alarm_content_push_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDistrictAlarmContentPushOne(rctx, args["object"].(model.DistrictAlarmContentPushInsertInput), args["on_conflict"].(*model.DistrictAlarmContentPushOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDistrictAlarmContentPush(rctx, args["_inc"].(*model.DistrictAlarmContentPushIncInput), args["_set"].(*model.DistrictAlarmContentPushSetInput), args["where"].(model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMutationResponse)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_district_alarm_content_push_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_district_alarm_content_push_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDistrictAlarmContentPushByPk(rctx, args["_inc"].(*model.DistrictAlarmContentPushIncInput), args["_set"].(*model.DistrictAlarmContentPushSetInput), args["pk_columns"].(model.DistrictAlarmContentPushPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleAlarmData(rctx, args["where"].(model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_alarm_data_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_alarm_data_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleAlarmDataByPk(rctx, args["id"].(int64), args["vehicle_alarm_data_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmData)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleAlarmData(rctx, args["objects"].([]*model.VehicleAlarmDataInsertInput), args["on_conflict"].(*model.VehicleAlarmDataOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_alarm_data_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_alarm_data_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleAlarmDataOne(rctx, args["object"].(model.VehicleAlarmDataInsertInput), args["on_conflict"].(*model.VehicleAlarmDataOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmData)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleAlarmData(rctx, args["_inc"].(*model.VehicleAlarmDataIncInput), args["_set"].(*model.VehicleAlarmDataSetInput), args["where"].(model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_alarm_data_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_alarm_data_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleAlarmDataByPk(rctx, args["_inc"].(*model.VehicleAlarmDataIncInput), args["_set"].(*model.VehicleAlarmDataSetInput), args["pk_columns"].(model.VehicleAlarmDataPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmData)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmProcessingRecord(rctx, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalNalarm_processing_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_processing_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_processing_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmProcessingRecordAggregate(rctx, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordAggregate)
	fc.Result = res
	return ec.marshalNalarm_processing_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmSupervisionPictureUpload(rctx, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalNalarm_supervision_picture_upload2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_supervision_picture_upload_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_supervision_picture_upload_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmSupervisionPictureUploadAggregate(rctx, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadAggregate)
	fc.Result = res
	return ec.marshalNalarm_supervision_picture_upload_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alarm_supervision_picture_upload_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_alarm_supervision_picture_upload_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AlarmSupervisionPictureUploadByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DistrictAlarmContentPush(rctx, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalNdistrict_alarm_content_push2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_district_alarm_content_push_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_district_alarm_content_push_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DistrictAlarmContentPushAggregate(rctx, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushAggregate)
	fc.Result = res
	return ec.marshalNdistrict_alarm_content_push_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_district_alarm_content_push_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_district_alarm_content_push_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DistrictAlarmContentPushByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmData(rctx, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleAlarmData)
	fc.Result = res
	return ec.marshalNvehicle_alarm_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_data_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_data_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmDataAggregate(rctx, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataAggregate)
	fc.Result = res
	return ec.marshalNvehicle_alarm_data_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_data_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_data_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmDataByPk(rctx, args["id"].(int64), args["vehicle_alarm_data_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmData)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_alarm_processing_record(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_alarm_processing_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AlarmProcessingRecord(rctx, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.AlarmProcessingRecord)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNalarm_processing_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_alarm_processing_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_alarm_processing_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AlarmProcessingRecordAggregate(rctx, args["distinct_on"].([]model.AlarmProcessingRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmProcessingRecordOrderBy), args["where"].(*model.AlarmProcessingRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.AlarmProcessingRecordAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNalarm_processing_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_alarm_supervision_picture_upload(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_alarm_supervision_picture_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AlarmSupervisionPictureUpload(rctx, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.AlarmSupervisionPictureUpload)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNalarm_supervision_picture_upload2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_alarm_supervision_picture_upload_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_alarm_supervision_picture_upload_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AlarmSupervisionPictureUploadAggregate(rctx, args["distinct_on"].([]model.AlarmSupervisionPictureUploadSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.AlarmSupervisionPictureUploadOrderBy), args["where"].(*model.AlarmSupervisionPictureUploadBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.AlarmSupervisionPictureUploadAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNalarm_supervision_picture_upload_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_alarm_supervision_picture_upload_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_alarm_supervision_picture_upload_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().AlarmSupervisionPictureUploadByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.AlarmSupervisionPictureUpload)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOalarm_supervision_picture_upload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUpload(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_district_alarm_content_push(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_district_alarm_content_push_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DistrictAlarmContentPush(rctx, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DistrictAlarmContentPush)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdistrict_alarm_content_push2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_district_alarm_content_push_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_district_alarm_content_push_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DistrictAlarmContentPushAggregate(rctx, args["distinct_on"].([]model.DistrictAlarmContentPushSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DistrictAlarmContentPushOrderBy), args["where"].(*model.DistrictAlarmContentPushBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DistrictAlarmContentPushAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdistrict_alarm_content_push_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_district_alarm_content_push_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_district_alarm_content_push_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DistrictAlarmContentPushByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DistrictAlarmContentPush)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdistrict_alarm_content_push2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPush(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_alarm_data(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_alarm_data_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleAlarmData(rctx, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleAlarmData)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_alarm_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_alarm_data_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_alarm_data_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleAlarmDataAggregate(rctx, args["distinct_on"].([]model.VehicleAlarmDataSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmDataOrderBy), args["where"].(*model.VehicleAlarmDataBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleAlarmDataAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_alarm_data_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_alarm_data_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_alarm_data_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleAlarmDataByPk(rctx, args["id"].(int64), args["vehicle_alarm_data_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleAlarmData)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_alarm_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmData(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_is_announce(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_is_notify(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_processing_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordAggregateFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalNalarm_processing_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordAvgFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_alarm_processing_record_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMaxFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordMinFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordStddevFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordSumFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordVarPopFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordVarSampFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmProcessingRecordVarianceFields)
	fc.Result = res
	return ec.marshalOalarm_processing_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_avg_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_processing_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_processing_content(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AlarmProcessingRecord)
	fc.Result = res
	return ec.marshalNalarm_processing_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_stddev_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_stddev_pop_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_stddev_samp_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_sum_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_var_pop_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_var_samp_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_processing_record_variance_fields_processing_type(ctx context.Context, field graphql.CollectedField, obj *model.AlarmProcessingRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_processing_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_IMEI(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_update_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUpload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadAggregateFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalNalarm_supervision_picture_upload2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadAvgFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_alarm_supervision_picture_upload_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMaxFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadMinFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadStddevFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadStddevPopFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadStddevSampFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadSumFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadVarPopFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadVarSampFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlarmSupervisionPictureUploadVarianceFields)
	fc.Result = res
	return ec.marshalOalarm_supervision_picture_upload_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_avg_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_IMEI(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_update_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_IMEI(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imei, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_alarm_supervision_picture_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSupervisionPictureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_monitoring_pic_address(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_monitoring_pic_name(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_monitoring_pic_upload_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPicUploadTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_photo_condition(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_sim_number(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_update_time(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AlarmSupervisionPictureUpload)
	fc.Result = res
	return ec.marshalNalarm_supervision_picture_upload2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_pop_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_samp_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_sum_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_var_pop_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_var_samp_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_variance_fields_camera_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CameraID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _alarm_supervision_picture_upload_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.AlarmSupervisionPictureUploadVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "alarm_supervision_picture_upload_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPush) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushAggregateFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalNdistrict_alarm_content_push2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushAvgFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_district_alarm_content_push_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMaxFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushMinFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushStddevFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushStddevPopFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushStddevSampFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushSumFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushVarPopFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushVarSampFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DistrictAlarmContentPushVarianceFields)
	fc.Result = res
	return ec.marshalOdistrict_alarm_content_push_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_alarm_content(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DistrictAlarmContentPush)
	fc.Result = res
	return ec.marshalNdistrict_alarm_content_push2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _district_alarm_content_push_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DistrictAlarmContentPushVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "district_alarm_content_push_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_alarm_deal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDealID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_alarm_end_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_alarm_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_area_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOpoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_duration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_is_alarm_effective(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAlarmEffective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_is_alarm_over(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAlarmOver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_is_cancel_alarm(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCancelAlarm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_is_resolve(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResolve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_is_supervise(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSupervise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_latest_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_pid(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_processing_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_processing_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_processing_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_processor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_road_grade(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadGrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_supervision_note(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_supervisor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleAlarmData)
	fc.Result = res
	return ec.marshalNvehicle_alarm_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_alarm_data_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataMinFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataSumFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmDataVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_alarm_data_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_avg_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_avg_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_avg_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_avg_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_avg_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_alarm_deal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDealID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_alarm_end_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_alarm_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_duration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_latest_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_pid(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_processing_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_processing_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_processing_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_processor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_road_grade(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadGrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_supervision_note(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_supervisor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_alarm_deal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDealID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_alarm_end_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_alarm_source(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_alarm_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_duration(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_latest_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_location_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_pid(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_processing_description(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_processing_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_processing_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_processing_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_processor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_road_grade(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadGrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_road_name(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_supervision_note(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_supervision_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_supervisor(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_vehicle_alarm_data_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmDataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleAlarmData)
	fc.Result = res
	return ec.marshalNvehicle_alarm_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_pop_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_pop_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_pop_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_pop_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_pop_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_samp_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_samp_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_samp_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_samp_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_stddev_samp_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_sum_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_sum_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_sum_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_sum_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_sum_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_pop_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_pop_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_pop_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_pop_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_pop_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_samp_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_samp_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_samp_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_samp_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_var_samp_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_variance_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_variance_fields_latest_alarm_position(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestAlarmPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_variance_fields_maximum_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaximumSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_variance_fields_speed_limit_threshold(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedLimitThreshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_alarm_data_variance_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmDataVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_alarm_data_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model1.BooleanComparisonExp, error) {
	var it model1.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model1.IntComparisonExp, error) {
	var it model1.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model1.StringComparisonExp, error) {
	var it model1.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model1.JsonbComparisonExp, error) {
	var it model1.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_text_comparison_exp(ctx context.Context, obj interface{}) (model.TextComparisonExp, error) {
	var it model.TextComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_text2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_text2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_aggregate_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordAggregateOrderBy, error) {
	var it model.AlarmProcessingRecordAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOalarm_processing_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOalarm_processing_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOalarm_processing_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOalarm_processing_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOalarm_processing_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOalarm_processing_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOalarm_processing_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOalarm_processing_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOalarm_processing_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOalarm_processing_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordArrRelInsertInput, error) {
	var it model.AlarmProcessingRecordArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNalarm_processing_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_avg_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordAvgOrderBy, error) {
	var it model.AlarmProcessingRecordAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_bool_exp(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordBoolExp, error) {
	var it model.AlarmProcessingRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOalarm_processing_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOalarm_processing_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOalarm_processing_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_inc_input(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordIncInput, error) {
	var it model.AlarmProcessingRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_insert_input(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordInsertInput, error) {
	var it model.AlarmProcessingRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_max_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordMaxOrderBy, error) {
	var it model.AlarmProcessingRecordMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_min_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordMinOrderBy, error) {
	var it model.AlarmProcessingRecordMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordObjRelInsertInput, error) {
	var it model.AlarmProcessingRecordObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNalarm_processing_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordOrderBy, error) {
	var it model.AlarmProcessingRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_set_input(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordSetInput, error) {
	var it model.AlarmProcessingRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_content"))
			it.ProcessingContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_stddev_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordStddevOrderBy, error) {
	var it model.AlarmProcessingRecordStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordStddevPopOrderBy, error) {
	var it model.AlarmProcessingRecordStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordStddevSampOrderBy, error) {
	var it model.AlarmProcessingRecordStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_sum_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordSumOrderBy, error) {
	var it model.AlarmProcessingRecordSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_var_pop_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordVarPopOrderBy, error) {
	var it model.AlarmProcessingRecordVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_var_samp_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordVarSampOrderBy, error) {
	var it model.AlarmProcessingRecordVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_processing_record_variance_order_by(ctx context.Context, obj interface{}) (model.AlarmProcessingRecordVarianceOrderBy, error) {
	var it model.AlarmProcessingRecordVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_type"))
			it.ProcessingType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_aggregate_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadAggregateOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOalarm_supervision_picture_upload_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOalarm_supervision_picture_upload_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOalarm_supervision_picture_upload_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOalarm_supervision_picture_upload_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOalarm_supervision_picture_upload_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOalarm_supervision_picture_upload_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOalarm_supervision_picture_upload_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOalarm_supervision_picture_upload_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOalarm_supervision_picture_upload_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOalarm_supervision_picture_upload_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadArrRelInsertInput, error) {
	var it model.AlarmSupervisionPictureUploadArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNalarm_supervision_picture_upload_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOalarm_supervision_picture_upload_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_avg_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadAvgOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_bool_exp(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadBoolExp, error) {
	var it model.AlarmSupervisionPictureUploadBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_inc_input(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadIncInput, error) {
	var it model.AlarmSupervisionPictureUploadIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_insert_input(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadInsertInput, error) {
	var it model.AlarmSupervisionPictureUploadInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_max_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadMaxOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_min_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadMinOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadObjRelInsertInput, error) {
	var it model.AlarmSupervisionPictureUploadObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNalarm_supervision_picture_upload_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOalarm_supervision_picture_upload_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_on_conflict(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadOnConflict, error) {
	var it model.AlarmSupervisionPictureUploadOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNalarm_supervision_picture_upload_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNalarm_supervision_picture_upload_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_pk_columns_input(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadPkColumnsInput, error) {
	var it model.AlarmSupervisionPictureUploadPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_set_input(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadSetInput, error) {
	var it model.AlarmSupervisionPictureUploadSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "IMEI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IMEI"))
			it.Imei, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_supervision_picture_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_supervision_picture_id"))
			it.AlarmSupervisionPictureID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_address"))
			it.MonitoringPicAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_name"))
			it.MonitoringPicName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_pic_upload_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_pic_upload_time"))
			it.MonitoringPicUploadTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "photo_condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photo_condition"))
			it.PhotoCondition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_number"))
			it.SimNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time"))
			it.UpdateTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_stddev_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadStddevOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadStddevPopOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadStddevSampOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_sum_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadSumOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_var_pop_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadVarPopOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_var_samp_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadVarSampOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputalarm_supervision_picture_upload_variance_order_by(ctx context.Context, obj interface{}) (model.AlarmSupervisionPictureUploadVarianceOrderBy, error) {
	var it model.AlarmSupervisionPictureUploadVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "camera_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("camera_id"))
			it.CameraID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model1.BigintComparisonExp, error) {
	var it model1.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_aggregate_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushAggregateOrderBy, error) {
	var it model.DistrictAlarmContentPushAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdistrict_alarm_content_push_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdistrict_alarm_content_push_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdistrict_alarm_content_push_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdistrict_alarm_content_push_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdistrict_alarm_content_push_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdistrict_alarm_content_push_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdistrict_alarm_content_push_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdistrict_alarm_content_push_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdistrict_alarm_content_push_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdistrict_alarm_content_push_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushArrRelInsertInput, error) {
	var it model.DistrictAlarmContentPushArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdistrict_alarm_content_push_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdistrict_alarm_content_push_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_avg_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushAvgOrderBy, error) {
	var it model.DistrictAlarmContentPushAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_bool_exp(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushBoolExp, error) {
	var it model.DistrictAlarmContentPushBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_inc_input(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushIncInput, error) {
	var it model.DistrictAlarmContentPushIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_insert_input(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushInsertInput, error) {
	var it model.DistrictAlarmContentPushInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_max_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushMaxOrderBy, error) {
	var it model.DistrictAlarmContentPushMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_min_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushMinOrderBy, error) {
	var it model.DistrictAlarmContentPushMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushObjRelInsertInput, error) {
	var it model.DistrictAlarmContentPushObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdistrict_alarm_content_push_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdistrict_alarm_content_push_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_on_conflict(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushOnConflict, error) {
	var it model.DistrictAlarmContentPushOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdistrict_alarm_content_push_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdistrict_alarm_content_push_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushOrderBy, error) {
	var it model.DistrictAlarmContentPushOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_pk_columns_input(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushPkColumnsInput, error) {
	var it model.DistrictAlarmContentPushPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_set_input(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushSetInput, error) {
	var it model.DistrictAlarmContentPushSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_content"))
			it.AlarmContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_data_id"))
			it.AlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_stddev_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushStddevOrderBy, error) {
	var it model.DistrictAlarmContentPushStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushStddevPopOrderBy, error) {
	var it model.DistrictAlarmContentPushStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushStddevSampOrderBy, error) {
	var it model.DistrictAlarmContentPushStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_sum_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushSumOrderBy, error) {
	var it model.DistrictAlarmContentPushSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_var_pop_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushVarPopOrderBy, error) {
	var it model.DistrictAlarmContentPushVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_var_samp_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushVarSampOrderBy, error) {
	var it model.DistrictAlarmContentPushVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdistrict_alarm_content_push_variance_order_by(ctx context.Context, obj interface{}) (model.DistrictAlarmContentPushVarianceOrderBy, error) {
	var it model.DistrictAlarmContentPushVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model1.NumericComparisonExp, error) {
	var it model1.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpoint_comparison_exp(ctx context.Context, obj interface{}) (model1.PointComparisonExp, error) {
	var it model1.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model1.TimestamptzComparisonExp, error) {
	var it model1.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataAggregateOrderBy, error) {
	var it model.VehicleAlarmDataAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_alarm_data_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_alarm_data_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_alarm_data_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_alarm_data_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_alarm_data_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_alarm_data_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_alarm_data_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_alarm_data_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_alarm_data_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_alarm_data_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleAlarmDataArrRelInsertInput, error) {
	var it model.VehicleAlarmDataArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_alarm_data_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_alarm_data_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataAvgOrderBy, error) {
	var it model.VehicleAlarmDataAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_bool_exp(ctx context.Context, obj interface{}) (model.VehicleAlarmDataBoolExp, error) {
	var it model.VehicleAlarmDataBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_effective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_effective"))
			it.IsAlarmEffective, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_over":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_over"))
			it.IsAlarmOver, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cancel_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cancel_alarm"))
			it.IsCancelAlarm, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve"))
			it.IsResolve, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_inc_input(ctx context.Context, obj interface{}) (model.VehicleAlarmDataIncInput, error) {
	var it model.VehicleAlarmDataIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_insert_input(ctx context.Context, obj interface{}) (model.VehicleAlarmDataInsertInput, error) {
	var it model.VehicleAlarmDataInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_effective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_effective"))
			it.IsAlarmEffective, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_over":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_over"))
			it.IsAlarmOver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cancel_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cancel_alarm"))
			it.IsCancelAlarm, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve"))
			it.IsResolve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_max_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataMaxOrderBy, error) {
	var it model.VehicleAlarmDataMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_min_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataMinOrderBy, error) {
	var it model.VehicleAlarmDataMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleAlarmDataObjRelInsertInput, error) {
	var it model.VehicleAlarmDataObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_alarm_data_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_alarm_data_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_on_conflict(ctx context.Context, obj interface{}) (model.VehicleAlarmDataOnConflict, error) {
	var it model.VehicleAlarmDataOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_alarm_data_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_alarm_data_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataOrderBy, error) {
	var it model.VehicleAlarmDataOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_effective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_effective"))
			it.IsAlarmEffective, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_over":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_over"))
			it.IsAlarmOver, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cancel_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cancel_alarm"))
			it.IsCancelAlarm, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve"))
			it.IsResolve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleAlarmDataPkColumnsInput, error) {
	var it model.VehicleAlarmDataPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_set_input(ctx context.Context, obj interface{}) (model.VehicleAlarmDataSetInput, error) {
	var it model.VehicleAlarmDataSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_deal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_deal_id"))
			it.AlarmDealID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_position"))
			it.AlarmEndPosition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_source"))
			it.AlarmSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_start_time"))
			it.AlarmStartTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_effective":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_effective"))
			it.IsAlarmEffective, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_alarm_over":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_alarm_over"))
			it.IsAlarmOver, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cancel_alarm":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cancel_alarm"))
			it.IsCancelAlarm, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve"))
			it.IsResolve, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_supervise":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_supervise"))
			it.IsSupervise, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_time"))
			it.LatestAlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_description"))
			it.LocationDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pid"))
			it.Pid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_description"))
			it.ProcessingDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_method"))
			it.ProcessingMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_status"))
			it.ProcessingStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "processing_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processing_time"))
			it.ProcessingTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "processor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processor"))
			it.Processor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_grade"))
			it.RoadGrade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_name"))
			it.RoadName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_note"))
			it.SupervisionNote, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_time"))
			it.SupervisionTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisor"))
			it.Supervisor, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_data_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_data_id"))
			it.VehicleAlarmDataID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataStddevOrderBy, error) {
	var it model.VehicleAlarmDataStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataStddevPopOrderBy, error) {
	var it model.VehicleAlarmDataStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataStddevSampOrderBy, error) {
	var it model.VehicleAlarmDataStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataSumOrderBy, error) {
	var it model.VehicleAlarmDataSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataVarPopOrderBy, error) {
	var it model.VehicleAlarmDataVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataVarSampOrderBy, error) {
	var it model.VehicleAlarmDataVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_alarm_data_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleAlarmDataVarianceOrderBy, error) {
	var it model.VehicleAlarmDataVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latest_alarm_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latest_alarm_position"))
			it.LatestAlarmPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "maximum_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maximum_speed"))
			it.MaximumSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_limit_threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_limit_threshold"))
			it.SpeedLimitThreshold, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_alarm_processing_record":
			out.Values[i] = ec._Mutation_delete_alarm_processing_record(ctx, field)
		case "insert_alarm_processing_record":
			out.Values[i] = ec._Mutation_insert_alarm_processing_record(ctx, field)
		case "insert_alarm_processing_record_one":
			out.Values[i] = ec._Mutation_insert_alarm_processing_record_one(ctx, field)
		case "update_alarm_processing_record":
			out.Values[i] = ec._Mutation_update_alarm_processing_record(ctx, field)
		case "delete_alarm_supervision_picture_upload":
			out.Values[i] = ec._Mutation_delete_alarm_supervision_picture_upload(ctx, field)
		case "delete_alarm_supervision_picture_upload_by_pk":
			out.Values[i] = ec._Mutation_delete_alarm_supervision_picture_upload_by_pk(ctx, field)
		case "insert_alarm_supervision_picture_upload":
			out.Values[i] = ec._Mutation_insert_alarm_supervision_picture_upload(ctx, field)
		case "insert_alarm_supervision_picture_upload_one":
			out.Values[i] = ec._Mutation_insert_alarm_supervision_picture_upload_one(ctx, field)
		case "update_alarm_supervision_picture_upload":
			out.Values[i] = ec._Mutation_update_alarm_supervision_picture_upload(ctx, field)
		case "update_alarm_supervision_picture_upload_by_pk":
			out.Values[i] = ec._Mutation_update_alarm_supervision_picture_upload_by_pk(ctx, field)
		case "delete_district_alarm_content_push":
			out.Values[i] = ec._Mutation_delete_district_alarm_content_push(ctx, field)
		case "delete_district_alarm_content_push_by_pk":
			out.Values[i] = ec._Mutation_delete_district_alarm_content_push_by_pk(ctx, field)
		case "insert_district_alarm_content_push":
			out.Values[i] = ec._Mutation_insert_district_alarm_content_push(ctx, field)
		case "insert_district_alarm_content_push_one":
			out.Values[i] = ec._Mutation_insert_district_alarm_content_push_one(ctx, field)
		case "update_district_alarm_content_push":
			out.Values[i] = ec._Mutation_update_district_alarm_content_push(ctx, field)
		case "update_district_alarm_content_push_by_pk":
			out.Values[i] = ec._Mutation_update_district_alarm_content_push_by_pk(ctx, field)
		case "delete_vehicle_alarm_data":
			out.Values[i] = ec._Mutation_delete_vehicle_alarm_data(ctx, field)
		case "delete_vehicle_alarm_data_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_alarm_data_by_pk(ctx, field)
		case "insert_vehicle_alarm_data":
			out.Values[i] = ec._Mutation_insert_vehicle_alarm_data(ctx, field)
		case "insert_vehicle_alarm_data_one":
			out.Values[i] = ec._Mutation_insert_vehicle_alarm_data_one(ctx, field)
		case "update_vehicle_alarm_data":
			out.Values[i] = ec._Mutation_update_vehicle_alarm_data(ctx, field)
		case "update_vehicle_alarm_data_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_alarm_data_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "alarm_processing_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_processing_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_processing_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_processing_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_supervision_picture_upload":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_supervision_picture_upload(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_supervision_picture_upload_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_supervision_picture_upload_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alarm_supervision_picture_upload_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alarm_supervision_picture_upload_by_pk(ctx, field)
				return res
			})
		case "district_alarm_content_push":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_district_alarm_content_push(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "district_alarm_content_push_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_district_alarm_content_push_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "district_alarm_content_push_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_district_alarm_content_push_by_pk(ctx, field)
				return res
			})
		case "vehicle_alarm_data":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_data(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_data_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_data_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_data_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_data_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "alarm_processing_record":
		return ec._Subscription_alarm_processing_record(ctx, fields[0])
	case "alarm_processing_record_aggregate":
		return ec._Subscription_alarm_processing_record_aggregate(ctx, fields[0])
	case "alarm_supervision_picture_upload":
		return ec._Subscription_alarm_supervision_picture_upload(ctx, fields[0])
	case "alarm_supervision_picture_upload_aggregate":
		return ec._Subscription_alarm_supervision_picture_upload_aggregate(ctx, fields[0])
	case "alarm_supervision_picture_upload_by_pk":
		return ec._Subscription_alarm_supervision_picture_upload_by_pk(ctx, fields[0])
	case "district_alarm_content_push":
		return ec._Subscription_district_alarm_content_push(ctx, fields[0])
	case "district_alarm_content_push_aggregate":
		return ec._Subscription_district_alarm_content_push_aggregate(ctx, fields[0])
	case "district_alarm_content_push_by_pk":
		return ec._Subscription_district_alarm_content_push_by_pk(ctx, fields[0])
	case "vehicle_alarm_data":
		return ec._Subscription_vehicle_alarm_data(ctx, fields[0])
	case "vehicle_alarm_data_aggregate":
		return ec._Subscription_vehicle_alarm_data_aggregate(ctx, fields[0])
	case "vehicle_alarm_data_by_pk":
		return ec._Subscription_vehicle_alarm_data_by_pk(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_recordImplementors = []string{"alarm_processing_record"}

func (ec *executionContext) _alarm_processing_record(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_recordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record")
		case "alarm_data_id":
			out.Values[i] = ec._alarm_processing_record_alarm_data_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._alarm_processing_record_alarm_supervision_picture_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "announce_content":
			out.Values[i] = ec._alarm_processing_record_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._alarm_processing_record_app_push_content(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._alarm_processing_record_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._alarm_processing_record_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._alarm_processing_record_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._alarm_processing_record_deleted_by(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._alarm_processing_record_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._alarm_processing_record_disposal_result(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_processing_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_announce":
			out.Values[i] = ec._alarm_processing_record_is_announce(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._alarm_processing_record_is_app_push(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._alarm_processing_record_is_delete(ctx, field, obj)
		case "is_notify":
			out.Values[i] = ec._alarm_processing_record_is_notify(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._alarm_processing_record_is_sms_push(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._alarm_processing_record_notify_content(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._alarm_processing_record_operation_user(ctx, field, obj)
		case "processing_content":
			out.Values[i] = ec._alarm_processing_record_processing_content(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._alarm_processing_record_processing_time(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_processing_type(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._alarm_processing_record_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._alarm_processing_record_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_aggregateImplementors = []string{"alarm_processing_record_aggregate"}

func (ec *executionContext) _alarm_processing_record_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_aggregate")
		case "aggregate":
			out.Values[i] = ec._alarm_processing_record_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._alarm_processing_record_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_aggregate_fieldsImplementors = []string{"alarm_processing_record_aggregate_fields"}

func (ec *executionContext) _alarm_processing_record_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_aggregate_fields")
		case "avg":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._alarm_processing_record_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_avg_fieldsImplementors = []string{"alarm_processing_record_avg_fields"}

func (ec *executionContext) _alarm_processing_record_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_avg_fields")
		case "id":
			out.Values[i] = ec._alarm_processing_record_avg_fields_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_avg_fields_processing_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_max_fieldsImplementors = []string{"alarm_processing_record_max_fields"}

func (ec *executionContext) _alarm_processing_record_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_max_fields")
		case "alarm_data_id":
			out.Values[i] = ec._alarm_processing_record_max_fields_alarm_data_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._alarm_processing_record_max_fields_alarm_supervision_picture_id(ctx, field, obj)
		case "announce_content":
			out.Values[i] = ec._alarm_processing_record_max_fields_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._alarm_processing_record_max_fields_app_push_content(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._alarm_processing_record_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._alarm_processing_record_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._alarm_processing_record_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._alarm_processing_record_max_fields_deleted_by(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._alarm_processing_record_max_fields_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._alarm_processing_record_max_fields_disposal_result(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_processing_record_max_fields_id(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._alarm_processing_record_max_fields_notify_content(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._alarm_processing_record_max_fields_operation_user(ctx, field, obj)
		case "processing_content":
			out.Values[i] = ec._alarm_processing_record_max_fields_processing_content(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._alarm_processing_record_max_fields_processing_time(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_max_fields_processing_type(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._alarm_processing_record_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._alarm_processing_record_max_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_min_fieldsImplementors = []string{"alarm_processing_record_min_fields"}

func (ec *executionContext) _alarm_processing_record_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_min_fields")
		case "alarm_data_id":
			out.Values[i] = ec._alarm_processing_record_min_fields_alarm_data_id(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._alarm_processing_record_min_fields_alarm_supervision_picture_id(ctx, field, obj)
		case "announce_content":
			out.Values[i] = ec._alarm_processing_record_min_fields_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._alarm_processing_record_min_fields_app_push_content(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._alarm_processing_record_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._alarm_processing_record_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._alarm_processing_record_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._alarm_processing_record_min_fields_deleted_by(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._alarm_processing_record_min_fields_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._alarm_processing_record_min_fields_disposal_result(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_processing_record_min_fields_id(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._alarm_processing_record_min_fields_notify_content(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._alarm_processing_record_min_fields_operation_user(ctx, field, obj)
		case "processing_content":
			out.Values[i] = ec._alarm_processing_record_min_fields_processing_content(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._alarm_processing_record_min_fields_processing_time(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_min_fields_processing_type(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._alarm_processing_record_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._alarm_processing_record_min_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_mutation_responseImplementors = []string{"alarm_processing_record_mutation_response"}

func (ec *executionContext) _alarm_processing_record_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._alarm_processing_record_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._alarm_processing_record_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_stddev_fieldsImplementors = []string{"alarm_processing_record_stddev_fields"}

func (ec *executionContext) _alarm_processing_record_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_stddev_fields")
		case "id":
			out.Values[i] = ec._alarm_processing_record_stddev_fields_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_stddev_fields_processing_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_stddev_pop_fieldsImplementors = []string{"alarm_processing_record_stddev_pop_fields"}

func (ec *executionContext) _alarm_processing_record_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._alarm_processing_record_stddev_pop_fields_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_stddev_pop_fields_processing_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_stddev_samp_fieldsImplementors = []string{"alarm_processing_record_stddev_samp_fields"}

func (ec *executionContext) _alarm_processing_record_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._alarm_processing_record_stddev_samp_fields_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_stddev_samp_fields_processing_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_sum_fieldsImplementors = []string{"alarm_processing_record_sum_fields"}

func (ec *executionContext) _alarm_processing_record_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_sum_fields")
		case "id":
			out.Values[i] = ec._alarm_processing_record_sum_fields_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_sum_fields_processing_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_var_pop_fieldsImplementors = []string{"alarm_processing_record_var_pop_fields"}

func (ec *executionContext) _alarm_processing_record_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_var_pop_fields")
		case "id":
			out.Values[i] = ec._alarm_processing_record_var_pop_fields_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_var_pop_fields_processing_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_var_samp_fieldsImplementors = []string{"alarm_processing_record_var_samp_fields"}

func (ec *executionContext) _alarm_processing_record_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_var_samp_fields")
		case "id":
			out.Values[i] = ec._alarm_processing_record_var_samp_fields_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_var_samp_fields_processing_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_processing_record_variance_fieldsImplementors = []string{"alarm_processing_record_variance_fields"}

func (ec *executionContext) _alarm_processing_record_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmProcessingRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_processing_record_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_processing_record_variance_fields")
		case "id":
			out.Values[i] = ec._alarm_processing_record_variance_fields_id(ctx, field, obj)
		case "processing_type":
			out.Values[i] = ec._alarm_processing_record_variance_fields_processing_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_uploadImplementors = []string{"alarm_supervision_picture_upload"}

func (ec *executionContext) _alarm_supervision_picture_upload(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUpload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_uploadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload")
		case "IMEI":
			out.Values[i] = ec._alarm_supervision_picture_upload_IMEI(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_alarm_supervision_picture_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_camera_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "monitoring_pic_address":
			out.Values[i] = ec._alarm_supervision_picture_upload_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._alarm_supervision_picture_upload_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._alarm_supervision_picture_upload_monitoring_pic_upload_time(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._alarm_supervision_picture_upload_photo_condition(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._alarm_supervision_picture_upload_sim_number(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._alarm_supervision_picture_upload_update_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_aggregateImplementors = []string{"alarm_supervision_picture_upload_aggregate"}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_aggregate")
		case "aggregate":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_aggregate_fieldsImplementors = []string{"alarm_supervision_picture_upload_aggregate_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_aggregate_fields")
		case "avg":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._alarm_supervision_picture_upload_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_avg_fieldsImplementors = []string{"alarm_supervision_picture_upload_avg_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_avg_fields")
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_avg_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_max_fieldsImplementors = []string{"alarm_supervision_picture_upload_max_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_max_fields")
		case "IMEI":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_IMEI(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_alarm_supervision_picture_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_camera_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_id(ctx, field, obj)
		case "monitoring_pic_address":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_monitoring_pic_upload_time(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_photo_condition(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_sim_number(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_update_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_min_fieldsImplementors = []string{"alarm_supervision_picture_upload_min_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_min_fields")
		case "IMEI":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_IMEI(ctx, field, obj)
		case "alarm_supervision_picture_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_alarm_supervision_picture_id(ctx, field, obj)
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_camera_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_id(ctx, field, obj)
		case "monitoring_pic_address":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_monitoring_pic_address(ctx, field, obj)
		case "monitoring_pic_name":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_monitoring_pic_name(ctx, field, obj)
		case "monitoring_pic_upload_time":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_monitoring_pic_upload_time(ctx, field, obj)
		case "photo_condition":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_photo_condition(ctx, field, obj)
		case "sim_number":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_sim_number(ctx, field, obj)
		case "update_time":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_update_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_mutation_responseImplementors = []string{"alarm_supervision_picture_upload_mutation_response"}

func (ec *executionContext) _alarm_supervision_picture_upload_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._alarm_supervision_picture_upload_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._alarm_supervision_picture_upload_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_stddev_fieldsImplementors = []string{"alarm_supervision_picture_upload_stddev_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_stddev_fields")
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_stddev_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_stddev_pop_fieldsImplementors = []string{"alarm_supervision_picture_upload_stddev_pop_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_stddev_pop_fields")
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_stddev_pop_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_stddev_samp_fieldsImplementors = []string{"alarm_supervision_picture_upload_stddev_samp_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_stddev_samp_fields")
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_stddev_samp_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_sum_fieldsImplementors = []string{"alarm_supervision_picture_upload_sum_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_sum_fields")
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_sum_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_var_pop_fieldsImplementors = []string{"alarm_supervision_picture_upload_var_pop_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_var_pop_fields")
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_var_pop_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_var_samp_fieldsImplementors = []string{"alarm_supervision_picture_upload_var_samp_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_var_samp_fields")
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_var_samp_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var alarm_supervision_picture_upload_variance_fieldsImplementors = []string{"alarm_supervision_picture_upload_variance_fields"}

func (ec *executionContext) _alarm_supervision_picture_upload_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.AlarmSupervisionPictureUploadVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alarm_supervision_picture_upload_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("alarm_supervision_picture_upload_variance_fields")
		case "camera_id":
			out.Values[i] = ec._alarm_supervision_picture_upload_variance_fields_camera_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._alarm_supervision_picture_upload_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_pushImplementors = []string{"district_alarm_content_push"}

func (ec *executionContext) _district_alarm_content_push(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPush) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_pushImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push")
		case "alarm_content":
			out.Values[i] = ec._district_alarm_content_push_alarm_content(ctx, field, obj)
		case "alarm_data_id":
			out.Values[i] = ec._district_alarm_content_push_alarm_data_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_type":
			out.Values[i] = ec._district_alarm_content_push_alarm_type(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._district_alarm_content_push_city_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._district_alarm_content_push_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._district_alarm_content_push_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._district_alarm_content_push_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._district_alarm_content_push_deleted_by(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._district_alarm_content_push_district_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._district_alarm_content_push_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._district_alarm_content_push_is_delete(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._district_alarm_content_push_province_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._district_alarm_content_push_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._district_alarm_content_push_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_aggregateImplementors = []string{"district_alarm_content_push_aggregate"}

func (ec *executionContext) _district_alarm_content_push_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_aggregate")
		case "aggregate":
			out.Values[i] = ec._district_alarm_content_push_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._district_alarm_content_push_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_aggregate_fieldsImplementors = []string{"district_alarm_content_push_aggregate_fields"}

func (ec *executionContext) _district_alarm_content_push_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_aggregate_fields")
		case "avg":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._district_alarm_content_push_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_avg_fieldsImplementors = []string{"district_alarm_content_push_avg_fields"}

func (ec *executionContext) _district_alarm_content_push_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_avg_fields")
		case "id":
			out.Values[i] = ec._district_alarm_content_push_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_max_fieldsImplementors = []string{"district_alarm_content_push_max_fields"}

func (ec *executionContext) _district_alarm_content_push_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_max_fields")
		case "alarm_content":
			out.Values[i] = ec._district_alarm_content_push_max_fields_alarm_content(ctx, field, obj)
		case "alarm_data_id":
			out.Values[i] = ec._district_alarm_content_push_max_fields_alarm_data_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._district_alarm_content_push_max_fields_alarm_type(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._district_alarm_content_push_max_fields_city_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._district_alarm_content_push_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._district_alarm_content_push_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._district_alarm_content_push_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._district_alarm_content_push_max_fields_deleted_by(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._district_alarm_content_push_max_fields_district_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._district_alarm_content_push_max_fields_id(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._district_alarm_content_push_max_fields_province_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._district_alarm_content_push_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._district_alarm_content_push_max_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_min_fieldsImplementors = []string{"district_alarm_content_push_min_fields"}

func (ec *executionContext) _district_alarm_content_push_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_min_fields")
		case "alarm_content":
			out.Values[i] = ec._district_alarm_content_push_min_fields_alarm_content(ctx, field, obj)
		case "alarm_data_id":
			out.Values[i] = ec._district_alarm_content_push_min_fields_alarm_data_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._district_alarm_content_push_min_fields_alarm_type(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._district_alarm_content_push_min_fields_city_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._district_alarm_content_push_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._district_alarm_content_push_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._district_alarm_content_push_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._district_alarm_content_push_min_fields_deleted_by(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._district_alarm_content_push_min_fields_district_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._district_alarm_content_push_min_fields_id(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._district_alarm_content_push_min_fields_province_id(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._district_alarm_content_push_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._district_alarm_content_push_min_fields_updated_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_mutation_responseImplementors = []string{"district_alarm_content_push_mutation_response"}

func (ec *executionContext) _district_alarm_content_push_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._district_alarm_content_push_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._district_alarm_content_push_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_stddev_fieldsImplementors = []string{"district_alarm_content_push_stddev_fields"}

func (ec *executionContext) _district_alarm_content_push_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_stddev_fields")
		case "id":
			out.Values[i] = ec._district_alarm_content_push_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_stddev_pop_fieldsImplementors = []string{"district_alarm_content_push_stddev_pop_fields"}

func (ec *executionContext) _district_alarm_content_push_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._district_alarm_content_push_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_stddev_samp_fieldsImplementors = []string{"district_alarm_content_push_stddev_samp_fields"}

func (ec *executionContext) _district_alarm_content_push_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._district_alarm_content_push_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_sum_fieldsImplementors = []string{"district_alarm_content_push_sum_fields"}

func (ec *executionContext) _district_alarm_content_push_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_sum_fields")
		case "id":
			out.Values[i] = ec._district_alarm_content_push_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_var_pop_fieldsImplementors = []string{"district_alarm_content_push_var_pop_fields"}

func (ec *executionContext) _district_alarm_content_push_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_var_pop_fields")
		case "id":
			out.Values[i] = ec._district_alarm_content_push_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_var_samp_fieldsImplementors = []string{"district_alarm_content_push_var_samp_fields"}

func (ec *executionContext) _district_alarm_content_push_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_var_samp_fields")
		case "id":
			out.Values[i] = ec._district_alarm_content_push_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var district_alarm_content_push_variance_fieldsImplementors = []string{"district_alarm_content_push_variance_fields"}

func (ec *executionContext) _district_alarm_content_push_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DistrictAlarmContentPushVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, district_alarm_content_push_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("district_alarm_content_push_variance_fields")
		case "id":
			out.Values[i] = ec._district_alarm_content_push_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_dataImplementors = []string{"vehicle_alarm_data"}

func (ec *executionContext) _vehicle_alarm_data(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_dataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_GPS_speed(ctx, field, obj)
		case "alarm_deal_id":
			out.Values[i] = ec._vehicle_alarm_data_alarm_deal_id(ctx, field, obj)
		case "alarm_end_position":
			out.Values[i] = ec._vehicle_alarm_data_alarm_end_position(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._vehicle_alarm_data_alarm_end_time(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._vehicle_alarm_data_alarm_source(ctx, field, obj)
		case "alarm_start_time":
			out.Values[i] = ec._vehicle_alarm_data_alarm_start_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._vehicle_alarm_data_alarm_type(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._vehicle_alarm_data_area_id(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._vehicle_alarm_data_coordinate(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._vehicle_alarm_data_duration(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_alarm_effective":
			out.Values[i] = ec._vehicle_alarm_data_is_alarm_effective(ctx, field, obj)
		case "is_alarm_over":
			out.Values[i] = ec._vehicle_alarm_data_is_alarm_over(ctx, field, obj)
		case "is_cancel_alarm":
			out.Values[i] = ec._vehicle_alarm_data_is_cancel_alarm(ctx, field, obj)
		case "is_resolve":
			out.Values[i] = ec._vehicle_alarm_data_is_resolve(ctx, field, obj)
		case "is_supervise":
			out.Values[i] = ec._vehicle_alarm_data_is_supervise(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_latest_alarm_position(ctx, field, obj)
		case "latest_alarm_time":
			out.Values[i] = ec._vehicle_alarm_data_latest_alarm_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_alarm_data_location_description(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_maximum_speed(ctx, field, obj)
		case "pid":
			out.Values[i] = ec._vehicle_alarm_data_pid(ctx, field, obj)
		case "processing_description":
			out.Values[i] = ec._vehicle_alarm_data_processing_description(ctx, field, obj)
		case "processing_method":
			out.Values[i] = ec._vehicle_alarm_data_processing_method(ctx, field, obj)
		case "processing_status":
			out.Values[i] = ec._vehicle_alarm_data_processing_status(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._vehicle_alarm_data_processing_time(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._vehicle_alarm_data_processor(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._vehicle_alarm_data_record_time(ctx, field, obj)
		case "road_grade":
			out.Values[i] = ec._vehicle_alarm_data_road_grade(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_alarm_data_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_speed_limit_threshold(ctx, field, obj)
		case "supervision_note":
			out.Values[i] = ec._vehicle_alarm_data_supervision_note(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._vehicle_alarm_data_supervision_time(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._vehicle_alarm_data_supervisor(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_tachograph_speed(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._vehicle_alarm_data_vehicle_alarm_data_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._vehicle_alarm_data_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_aggregateImplementors = []string{"vehicle_alarm_data_aggregate"}

func (ec *executionContext) _vehicle_alarm_data_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_aggregate_fieldsImplementors = []string{"vehicle_alarm_data_aggregate_fields"}

func (ec *executionContext) _vehicle_alarm_data_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_alarm_data_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_avg_fieldsImplementors = []string{"vehicle_alarm_data_avg_fields"}

func (ec *executionContext) _vehicle_alarm_data_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_avg_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_avg_fields_GPS_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_avg_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_avg_fields_latest_alarm_position(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_avg_fields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_avg_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_avg_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_max_fieldsImplementors = []string{"vehicle_alarm_data_max_fields"}

func (ec *executionContext) _vehicle_alarm_data_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_max_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_GPS_speed(ctx, field, obj)
		case "alarm_deal_id":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_alarm_deal_id(ctx, field, obj)
		case "alarm_end_position":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_alarm_end_position(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_alarm_end_time(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_alarm_source(ctx, field, obj)
		case "alarm_start_time":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_alarm_start_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_alarm_type(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_area_id(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_duration(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_latest_alarm_position(ctx, field, obj)
		case "latest_alarm_time":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_latest_alarm_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_location_description(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_maximum_speed(ctx, field, obj)
		case "pid":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_pid(ctx, field, obj)
		case "processing_description":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_processing_description(ctx, field, obj)
		case "processing_method":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_processing_method(ctx, field, obj)
		case "processing_status":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_processing_status(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_processing_time(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_processor(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_record_time(ctx, field, obj)
		case "road_grade":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_road_grade(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_speed_limit_threshold(ctx, field, obj)
		case "supervision_note":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_supervision_note(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_supervision_time(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_supervisor(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_tachograph_speed(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_vehicle_alarm_data_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_alarm_data_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_min_fieldsImplementors = []string{"vehicle_alarm_data_min_fields"}

func (ec *executionContext) _vehicle_alarm_data_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_min_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_GPS_speed(ctx, field, obj)
		case "alarm_deal_id":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_alarm_deal_id(ctx, field, obj)
		case "alarm_end_position":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_alarm_end_position(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_alarm_end_time(ctx, field, obj)
		case "alarm_source":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_alarm_source(ctx, field, obj)
		case "alarm_start_time":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_alarm_start_time(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_alarm_type(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_area_id(ctx, field, obj)
		case "duration":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_duration(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_latest_alarm_position(ctx, field, obj)
		case "latest_alarm_time":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_latest_alarm_time(ctx, field, obj)
		case "location_description":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_location_description(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_maximum_speed(ctx, field, obj)
		case "pid":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_pid(ctx, field, obj)
		case "processing_description":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_processing_description(ctx, field, obj)
		case "processing_method":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_processing_method(ctx, field, obj)
		case "processing_status":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_processing_status(ctx, field, obj)
		case "processing_time":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_processing_time(ctx, field, obj)
		case "processor":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_processor(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_record_time(ctx, field, obj)
		case "road_grade":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_road_grade(ctx, field, obj)
		case "road_name":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_road_name(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_speed_limit_threshold(ctx, field, obj)
		case "supervision_note":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_supervision_note(ctx, field, obj)
		case "supervision_time":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_supervision_time(ctx, field, obj)
		case "supervisor":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_supervisor(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_tachograph_speed(ctx, field, obj)
		case "vehicle_alarm_data_id":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_vehicle_alarm_data_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_alarm_data_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_mutation_responseImplementors = []string{"vehicle_alarm_data_mutation_response"}

func (ec *executionContext) _vehicle_alarm_data_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_alarm_data_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_alarm_data_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_stddev_fieldsImplementors = []string{"vehicle_alarm_data_stddev_fields"}

func (ec *executionContext) _vehicle_alarm_data_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_stddev_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_fields_GPS_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_stddev_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_stddev_fields_latest_alarm_position(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_fields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_stddev_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_stddev_pop_fieldsImplementors = []string{"vehicle_alarm_data_stddev_pop_fields"}

func (ec *executionContext) _vehicle_alarm_data_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_stddev_pop_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_pop_fields_GPS_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_stddev_pop_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_stddev_pop_fields_latest_alarm_position(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_pop_fields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_stddev_pop_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_pop_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_stddev_samp_fieldsImplementors = []string{"vehicle_alarm_data_stddev_samp_fields"}

func (ec *executionContext) _vehicle_alarm_data_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_stddev_samp_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_samp_fields_GPS_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_stddev_samp_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_stddev_samp_fields_latest_alarm_position(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_samp_fields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_stddev_samp_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_stddev_samp_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_sum_fieldsImplementors = []string{"vehicle_alarm_data_sum_fields"}

func (ec *executionContext) _vehicle_alarm_data_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_sum_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_sum_fields_GPS_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_sum_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_sum_fields_latest_alarm_position(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_sum_fields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_sum_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_sum_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_var_pop_fieldsImplementors = []string{"vehicle_alarm_data_var_pop_fields"}

func (ec *executionContext) _vehicle_alarm_data_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_var_pop_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_var_pop_fields_GPS_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_var_pop_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_var_pop_fields_latest_alarm_position(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_var_pop_fields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_var_pop_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_var_pop_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_var_samp_fieldsImplementors = []string{"vehicle_alarm_data_var_samp_fields"}

func (ec *executionContext) _vehicle_alarm_data_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_var_samp_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_var_samp_fields_GPS_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_var_samp_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_var_samp_fields_latest_alarm_position(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_var_samp_fields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_var_samp_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_var_samp_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_alarm_data_variance_fieldsImplementors = []string{"vehicle_alarm_data_variance_fields"}

func (ec *executionContext) _vehicle_alarm_data_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmDataVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_alarm_data_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_alarm_data_variance_fields")
		case "GPS_speed":
			out.Values[i] = ec._vehicle_alarm_data_variance_fields_GPS_speed(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_alarm_data_variance_fields_id(ctx, field, obj)
		case "latest_alarm_position":
			out.Values[i] = ec._vehicle_alarm_data_variance_fields_latest_alarm_position(ctx, field, obj)
		case "maximum_speed":
			out.Values[i] = ec._vehicle_alarm_data_variance_fields_maximum_speed(ctx, field, obj)
		case "speed_limit_threshold":
			out.Values[i] = ec._vehicle_alarm_data_variance_fields_speed_limit_threshold(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._vehicle_alarm_data_variance_fields_tachograph_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_text2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_text2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNalarm_processing_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AlarmProcessingRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNalarm_processing_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNalarm_processing_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecord(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._alarm_processing_record(ctx, sel, v)
}

func (ec *executionContext) marshalNalarm_processing_record_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.AlarmProcessingRecordAggregate) graphql.Marshaler {
	return ec._alarm_processing_record_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNalarm_processing_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._alarm_processing_record_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNalarm_processing_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx context.Context, v interface{}) (model.AlarmProcessingRecordBoolExp, error) {
	res, err := ec.unmarshalInputalarm_processing_record_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_processing_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx context.Context, v interface{}) (model.AlarmProcessingRecordInsertInput, error) {
	res, err := ec.unmarshalInputalarm_processing_record_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_processing_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AlarmProcessingRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmProcessingRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNalarm_processing_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNalarm_processing_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordInsertInput(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordInsertInput, error) {
	res, err := ec.unmarshalInputalarm_processing_record_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_processing_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordOrderBy, error) {
	res, err := ec.unmarshalInputalarm_processing_record_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_processing_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumn(ctx context.Context, v interface{}) (model.AlarmProcessingRecordSelectColumn, error) {
	var res model.AlarmProcessingRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNalarm_processing_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AlarmProcessingRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNalarm_supervision_picture_upload2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AlarmSupervisionPictureUpload) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNalarm_supervision_picture_upload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUpload(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNalarm_supervision_picture_upload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUpload(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUpload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload(ctx, sel, v)
}

func (ec *executionContext) marshalNalarm_supervision_picture_upload_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregate(ctx context.Context, sel ast.SelectionSet, v model.AlarmSupervisionPictureUploadAggregate) graphql.Marshaler {
	return ec._alarm_supervision_picture_upload_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNalarm_supervision_picture_upload_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregate(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadBoolExp, error) {
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadConstraint(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadConstraint, error) {
	var res model.AlarmSupervisionPictureUploadConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNalarm_supervision_picture_upload_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadConstraint(ctx context.Context, sel ast.SelectionSet, v model.AlarmSupervisionPictureUploadConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadInsertInput, error) {
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.AlarmSupervisionPictureUploadInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmSupervisionPictureUploadInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNalarm_supervision_picture_upload_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadInsertInput(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadInsertInput, error) {
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadOrderBy, error) {
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadPkColumnsInput(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadPkColumnsInput, error) {
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumn(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadSelectColumn, error) {
	var res model.AlarmSupervisionPictureUploadSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNalarm_supervision_picture_upload_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.AlarmSupervisionPictureUploadSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadUpdateColumn(ctx context.Context, v interface{}) (model.AlarmSupervisionPictureUploadUpdateColumn, error) {
	var res model.AlarmSupervisionPictureUploadUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNalarm_supervision_picture_upload_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.AlarmSupervisionPictureUploadUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNalarm_supervision_picture_upload_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.AlarmSupervisionPictureUploadUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AlarmSupervisionPictureUploadUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNalarm_supervision_picture_upload_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNalarm_supervision_picture_upload_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlarmSupervisionPictureUploadUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNalarm_supervision_picture_upload_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNdistrict_alarm_content_push2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DistrictAlarmContentPush) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdistrict_alarm_content_push2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPush(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdistrict_alarm_content_push2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPush(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPush) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._district_alarm_content_push(ctx, sel, v)
}

func (ec *executionContext) marshalNdistrict_alarm_content_push_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregate(ctx context.Context, sel ast.SelectionSet, v model.DistrictAlarmContentPushAggregate) graphql.Marshaler {
	return ec._district_alarm_content_push_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdistrict_alarm_content_push_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._district_alarm_content_push_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushBoolExp, error) {
	res, err := ec.unmarshalInputdistrict_alarm_content_push_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushConstraint(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushConstraint, error) {
	var res model.DistrictAlarmContentPushConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdistrict_alarm_content_push_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushConstraint(ctx context.Context, sel ast.SelectionSet, v model.DistrictAlarmContentPushConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushInsertInput, error) {
	res, err := ec.unmarshalInputdistrict_alarm_content_push_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DistrictAlarmContentPushInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DistrictAlarmContentPushInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdistrict_alarm_content_push_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushInsertInput(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushInsertInput, error) {
	res, err := ec.unmarshalInputdistrict_alarm_content_push_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushOrderBy, error) {
	res, err := ec.unmarshalInputdistrict_alarm_content_push_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushPkColumnsInput(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushPkColumnsInput, error) {
	res, err := ec.unmarshalInputdistrict_alarm_content_push_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumn(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushSelectColumn, error) {
	var res model.DistrictAlarmContentPushSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdistrict_alarm_content_push_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DistrictAlarmContentPushSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushUpdateColumn(ctx context.Context, v interface{}) (model.DistrictAlarmContentPushUpdateColumn, error) {
	var res model.DistrictAlarmContentPushUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdistrict_alarm_content_push_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DistrictAlarmContentPushUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdistrict_alarm_content_push_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DistrictAlarmContentPushUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DistrictAlarmContentPushUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdistrict_alarm_content_push_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdistrict_alarm_content_push_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DistrictAlarmContentPushUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdistrict_alarm_content_push_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNpoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNvehicle_alarm_data2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleAlarmData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_alarm_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_alarm_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmData(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_alarm_data(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_alarm_data_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmDataAggregate) graphql.Marshaler {
	return ec._vehicle_alarm_data_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_alarm_data_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_alarm_data_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx context.Context, v interface{}) (model.VehicleAlarmDataBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_alarm_data_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataConstraint(ctx context.Context, v interface{}) (model.VehicleAlarmDataConstraint, error) {
	var res model.VehicleAlarmDataConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_alarm_data_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmDataConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx context.Context, v interface{}) (model.VehicleAlarmDataInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_alarm_data_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleAlarmDataInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmDataInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_alarm_data_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataInsertInput(ctx context.Context, v interface{}) (*model.VehicleAlarmDataInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_alarm_data_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_alarm_data_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleAlarmDataPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_alarm_data_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumn(ctx context.Context, v interface{}) (model.VehicleAlarmDataSelectColumn, error) {
	var res model.VehicleAlarmDataSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_alarm_data_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmDataSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataUpdateColumn(ctx context.Context, v interface{}) (model.VehicleAlarmDataUpdateColumn, error) {
	var res model.VehicleAlarmDataUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_alarm_data_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmDataUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_alarm_data_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleAlarmDataUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleAlarmDataUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_alarm_data_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_alarm_data_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleAlarmDataUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_alarm_data_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model1.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model1.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model1.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalO_text2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_text2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_text2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_text2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_text2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_text2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOalarm_processing_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecord(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record(ctx, sel, v)
}

func (ec *executionContext) marshalOalarm_processing_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOalarm_processing_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordAvgOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOalarm_processing_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx context.Context, v interface{}) ([]*model.AlarmProcessingRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmProcessingRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOalarm_processing_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOalarm_processing_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordBoolExp(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOalarm_processing_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordIncInput(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMaxOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMinOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AlarmProcessingRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmProcessingRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNalarm_processing_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOalarm_processing_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AlarmProcessingRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AlarmProcessingRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNalarm_processing_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOalarm_processing_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlarmProcessingRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNalarm_processing_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOalarm_processing_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSetInput(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevPopOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordStddevSampOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordSumOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarPopOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarSampOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_processing_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmProcessingRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_processing_record_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_processing_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmProcessingRecordVarianceOrderBy(ctx context.Context, v interface{}) (*model.AlarmProcessingRecordVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_processing_record_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUpload(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUpload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload(ctx, sel, v)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadAvgOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx context.Context, v interface{}) ([]*model.AlarmSupervisionPictureUploadBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmSupervisionPictureUploadBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOalarm_supervision_picture_upload_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadBoolExp(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadIncInput(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMaxOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMinFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMinOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOnConflict(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderByᚄ(ctx context.Context, v interface{}) ([]*model.AlarmSupervisionPictureUploadOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.AlarmSupervisionPictureUploadOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNalarm_supervision_picture_upload_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.AlarmSupervisionPictureUploadSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.AlarmSupervisionPictureUploadSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNalarm_supervision_picture_upload_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlarmSupervisionPictureUploadSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNalarm_supervision_picture_upload_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSetInput(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevPopOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadStddevSampOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSumFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadSumOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarPopOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarSampOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOalarm_supervision_picture_upload_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.AlarmSupervisionPictureUploadVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._alarm_supervision_picture_upload_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOalarm_supervision_picture_upload_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐAlarmSupervisionPictureUploadVarianceOrderBy(ctx context.Context, v interface{}) (*model.AlarmSupervisionPictureUploadVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputalarm_supervision_picture_upload_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model1.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPush(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPush) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push(ctx, sel, v)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushAvgOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx context.Context, v interface{}) ([]*model.DistrictAlarmContentPushBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DistrictAlarmContentPushBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdistrict_alarm_content_push_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushBoolExp(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushIncInput(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMaxOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMinOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOnConflict(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DistrictAlarmContentPushOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DistrictAlarmContentPushOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdistrict_alarm_content_push_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DistrictAlarmContentPushSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DistrictAlarmContentPushSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdistrict_alarm_content_push_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DistrictAlarmContentPushSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdistrict_alarm_content_push_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSetInput(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushSumOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarPopOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarSampOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdistrict_alarm_content_push_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DistrictAlarmContentPushVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._district_alarm_content_push_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdistrict_alarm_content_push_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐDistrictAlarmContentPushVarianceOrderBy(ctx context.Context, v interface{}) (*model.DistrictAlarmContentPushVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdistrict_alarm_content_push_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model1.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model1.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model1.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model1.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNpoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOpoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model1.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputpoint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model1.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmData(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_alarm_data_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_alarm_data_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleAlarmDataBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmDataBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_alarm_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataBoolExp(ctx context.Context, v interface{}) (*model.VehicleAlarmDataBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataIncInput(ctx context.Context, v interface{}) (*model.VehicleAlarmDataIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOnConflict(ctx context.Context, v interface{}) (*model.VehicleAlarmDataOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleAlarmDataOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmDataOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_alarm_data_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleAlarmDataSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleAlarmDataSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_alarm_data_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_alarm_data_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleAlarmDataSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_alarm_data_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSetInput(ctx context.Context, v interface{}) (*model.VehicleAlarmDataSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_alarm_data_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmDataVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_alarm_data_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_alarm_data_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋvehicle_alarmᚋgraphᚋmodelᚐVehicleAlarmDataVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmDataVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_alarm_data_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
