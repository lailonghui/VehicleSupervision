// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/dictionary/graph/model"
	model1 "VehicleSupervision/internal/modules/dictionary/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteDataDictionary             func(childComplexity int, where model.DataDictionaryBoolExp) int
		DeleteDataDictionaryByPk         func(childComplexity int, id int64) int
		DeleteDataDictionaryCategory     func(childComplexity int, where model.DataDictionaryCategoryBoolExp) int
		DeleteDataDictionaryCategoryByPk func(childComplexity int, id int64) int
		InsertDataDictionary             func(childComplexity int, objects []*model.DataDictionaryInsertInput, onConflict *model.DataDictionaryOnConflict) int
		InsertDataDictionaryCategory     func(childComplexity int, objects []*model.DataDictionaryCategoryInsertInput, onConflict *model.DataDictionaryCategoryOnConflict) int
		InsertDataDictionaryCategoryOne  func(childComplexity int, object model.DataDictionaryCategoryInsertInput, onConflict *model.DataDictionaryCategoryOnConflict) int
		InsertDataDictionaryOne          func(childComplexity int, object model.DataDictionaryInsertInput, onConflict *model.DataDictionaryOnConflict) int
		UpdateDataDictionary             func(childComplexity int, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, where model.DataDictionaryBoolExp) int
		UpdateDataDictionaryByPk         func(childComplexity int, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, pkColumns model.DataDictionaryPkColumnsInput) int
		UpdateDataDictionaryCategory     func(childComplexity int, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, where model.DataDictionaryCategoryBoolExp) int
		UpdateDataDictionaryCategoryByPk func(childComplexity int, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, pkColumns model.DataDictionaryCategoryPkColumnsInput) int
	}

	Query struct {
		DataDictionary                  func(childComplexity int, distinctOn []model.DataDictionarySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryOrderBy, where *model.DataDictionaryBoolExp) int
		DataDictionaryAggregate         func(childComplexity int, distinctOn []model.DataDictionarySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryOrderBy, where *model.DataDictionaryBoolExp) int
		DataDictionaryByPk              func(childComplexity int, id int64) int
		DataDictionaryCategory          func(childComplexity int, distinctOn []model.DataDictionaryCategorySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryCategoryOrderBy, where *model.DataDictionaryCategoryBoolExp) int
		DataDictionaryCategoryAggregate func(childComplexity int, distinctOn []model.DataDictionaryCategorySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryCategoryOrderBy, where *model.DataDictionaryCategoryBoolExp) int
		DataDictionaryCategoryByPk      func(childComplexity int, id int64) int
	}

	DataDictionary struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		DictionaryID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		Name                 func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
		Value                func(childComplexity int) int
	}

	DataDictionaryAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DataDictionaryAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DataDictionarySelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DataDictionaryAvgFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryCategory struct {
		CategoryCode         func(childComplexity int) int
		CategoryName         func(childComplexity int) int
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DataDictionaryCategoryAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DataDictionaryCategoryAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DataDictionaryCategorySelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DataDictionaryCategoryAvgFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryMaxFields struct {
		CategoryCode         func(childComplexity int) int
		CategoryName         func(childComplexity int) int
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		ID                   func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DataDictionaryCategoryMinFields struct {
		CategoryCode         func(childComplexity int) int
		CategoryName         func(childComplexity int) int
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		ID                   func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DataDictionaryCategoryMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DataDictionaryCategoryStddevFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategorySumFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryVarPopFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryVarSampFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryVarianceFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryMaxFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		DictionaryID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
		Value                func(childComplexity int) int
	}

	DataDictionaryMinFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		DictionaryID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
		Value                func(childComplexity int) int
	}

	DataDictionaryMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DataDictionaryStddevFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryStddevPopFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryStddevSampFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionarySumFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryVarPopFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryVarSampFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryVarianceFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteDataDictionary(ctx context.Context, where model.DataDictionaryBoolExp) (*model.DataDictionaryMutationResponse, error)
	DeleteDataDictionaryByPk(ctx context.Context, id int64) (*model1.DataDictionary, error)
	InsertDataDictionary(ctx context.Context, objects []*model.DataDictionaryInsertInput, onConflict *model.DataDictionaryOnConflict) (*model.DataDictionaryMutationResponse, error)
	InsertDataDictionaryOne(ctx context.Context, object model.DataDictionaryInsertInput, onConflict *model.DataDictionaryOnConflict) (*model1.DataDictionary, error)
	UpdateDataDictionary(ctx context.Context, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, where model.DataDictionaryBoolExp) (*model.DataDictionaryMutationResponse, error)
	UpdateDataDictionaryByPk(ctx context.Context, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, pkColumns model.DataDictionaryPkColumnsInput) (*model1.DataDictionary, error)
	DeleteDataDictionaryCategory(ctx context.Context, where model.DataDictionaryCategoryBoolExp) (*model.DataDictionaryCategoryMutationResponse, error)
	DeleteDataDictionaryCategoryByPk(ctx context.Context, id int64) (*model1.DataDictionaryCategory, error)
	InsertDataDictionaryCategory(ctx context.Context, objects []*model.DataDictionaryCategoryInsertInput, onConflict *model.DataDictionaryCategoryOnConflict) (*model.DataDictionaryCategoryMutationResponse, error)
	InsertDataDictionaryCategoryOne(ctx context.Context, object model.DataDictionaryCategoryInsertInput, onConflict *model.DataDictionaryCategoryOnConflict) (*model1.DataDictionaryCategory, error)
	UpdateDataDictionaryCategory(ctx context.Context, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, where model.DataDictionaryCategoryBoolExp) (*model.DataDictionaryCategoryMutationResponse, error)
	UpdateDataDictionaryCategoryByPk(ctx context.Context, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, pkColumns model.DataDictionaryCategoryPkColumnsInput) (*model1.DataDictionaryCategory, error)
}
type QueryResolver interface {
	DataDictionary(ctx context.Context, distinctOn []model.DataDictionarySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryOrderBy, where *model.DataDictionaryBoolExp) ([]*model1.DataDictionary, error)
	DataDictionaryAggregate(ctx context.Context, distinctOn []model.DataDictionarySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryOrderBy, where *model.DataDictionaryBoolExp) (*model.DataDictionaryAggregate, error)
	DataDictionaryByPk(ctx context.Context, id int64) (*model1.DataDictionary, error)
	DataDictionaryCategory(ctx context.Context, distinctOn []model.DataDictionaryCategorySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryCategoryOrderBy, where *model.DataDictionaryCategoryBoolExp) ([]*model1.DataDictionaryCategory, error)
	DataDictionaryCategoryAggregate(ctx context.Context, distinctOn []model.DataDictionaryCategorySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryCategoryOrderBy, where *model.DataDictionaryCategoryBoolExp) (*model.DataDictionaryCategoryAggregate, error)
	DataDictionaryCategoryByPk(ctx context.Context, id int64) (*model1.DataDictionaryCategory, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_data_dictionary":
		if e.complexity.Mutation.DeleteDataDictionary == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionary(childComplexity, args["where"].(model.DataDictionaryBoolExp)), true

	case "Mutation.delete_data_dictionary_by_pk":
		if e.complexity.Mutation.DeleteDataDictionaryByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionaryByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_data_dictionary_category":
		if e.complexity.Mutation.DeleteDataDictionaryCategory == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionaryCategory(childComplexity, args["where"].(model.DataDictionaryCategoryBoolExp)), true

	case "Mutation.delete_data_dictionary_category_by_pk":
		if e.complexity.Mutation.DeleteDataDictionaryCategoryByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_category_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionaryCategoryByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_data_dictionary":
		if e.complexity.Mutation.InsertDataDictionary == nil {
			break
		}

		args, err := ec.field_Mutation_insert_data_dictionary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDataDictionary(childComplexity, args["objects"].([]*model.DataDictionaryInsertInput), args["on_conflict"].(*model.DataDictionaryOnConflict)), true

	case "Mutation.insert_data_dictionary_category":
		if e.complexity.Mutation.InsertDataDictionaryCategory == nil {
			break
		}

		args, err := ec.field_Mutation_insert_data_dictionary_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDataDictionaryCategory(childComplexity, args["objects"].([]*model.DataDictionaryCategoryInsertInput), args["on_conflict"].(*model.DataDictionaryCategoryOnConflict)), true

	case "Mutation.insert_data_dictionary_category_one":
		if e.complexity.Mutation.InsertDataDictionaryCategoryOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_data_dictionary_category_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDataDictionaryCategoryOne(childComplexity, args["object"].(model.DataDictionaryCategoryInsertInput), args["on_conflict"].(*model.DataDictionaryCategoryOnConflict)), true

	case "Mutation.insert_data_dictionary_one":
		if e.complexity.Mutation.InsertDataDictionaryOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_data_dictionary_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDataDictionaryOne(childComplexity, args["object"].(model.DataDictionaryInsertInput), args["on_conflict"].(*model.DataDictionaryOnConflict)), true

	case "Mutation.update_data_dictionary":
		if e.complexity.Mutation.UpdateDataDictionary == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionary(childComplexity, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["where"].(model.DataDictionaryBoolExp)), true

	case "Mutation.update_data_dictionary_by_pk":
		if e.complexity.Mutation.UpdateDataDictionaryByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionaryByPk(childComplexity, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["pk_columns"].(model.DataDictionaryPkColumnsInput)), true

	case "Mutation.update_data_dictionary_category":
		if e.complexity.Mutation.UpdateDataDictionaryCategory == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionaryCategory(childComplexity, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["where"].(model.DataDictionaryCategoryBoolExp)), true

	case "Mutation.update_data_dictionary_category_by_pk":
		if e.complexity.Mutation.UpdateDataDictionaryCategoryByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_category_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionaryCategoryByPk(childComplexity, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["pk_columns"].(model.DataDictionaryCategoryPkColumnsInput)), true

	case "Query.data_dictionary":
		if e.complexity.Query.DataDictionary == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionary(childComplexity, args["distinct_on"].([]model.DataDictionarySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryOrderBy), args["where"].(*model.DataDictionaryBoolExp)), true

	case "Query.data_dictionary_aggregate":
		if e.complexity.Query.DataDictionaryAggregate == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryAggregate(childComplexity, args["distinct_on"].([]model.DataDictionarySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryOrderBy), args["where"].(*model.DataDictionaryBoolExp)), true

	case "Query.data_dictionary_by_pk":
		if e.complexity.Query.DataDictionaryByPk == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryByPk(childComplexity, args["id"].(int64)), true

	case "Query.data_dictionary_category":
		if e.complexity.Query.DataDictionaryCategory == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryCategory(childComplexity, args["distinct_on"].([]model.DataDictionaryCategorySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryCategoryOrderBy), args["where"].(*model.DataDictionaryCategoryBoolExp)), true

	case "Query.data_dictionary_category_aggregate":
		if e.complexity.Query.DataDictionaryCategoryAggregate == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_category_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryCategoryAggregate(childComplexity, args["distinct_on"].([]model.DataDictionaryCategorySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryCategoryOrderBy), args["where"].(*model.DataDictionaryCategoryBoolExp)), true

	case "Query.data_dictionary_category_by_pk":
		if e.complexity.Query.DataDictionaryCategoryByPk == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_category_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryCategoryByPk(childComplexity, args["id"].(int64)), true

	case "data_dictionary.create_at":
		if e.complexity.DataDictionary.CreateAt == nil {
			break
		}

		return e.complexity.DataDictionary.CreateAt(childComplexity), true

	case "data_dictionary.create_by":
		if e.complexity.DataDictionary.CreateBy == nil {
			break
		}

		return e.complexity.DataDictionary.CreateBy(childComplexity), true

	case "data_dictionary.delete_at":
		if e.complexity.DataDictionary.DeleteAt == nil {
			break
		}

		return e.complexity.DataDictionary.DeleteAt(childComplexity), true

	case "data_dictionary.delete_by":
		if e.complexity.DataDictionary.DeleteBy == nil {
			break
		}

		return e.complexity.DataDictionary.DeleteBy(childComplexity), true

	case "data_dictionary.dictionary_category_id":
		if e.complexity.DataDictionary.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionary.DictionaryCategoryID(childComplexity), true

	case "data_dictionary.dictionary_id":
		if e.complexity.DataDictionary.DictionaryID == nil {
			break
		}

		return e.complexity.DataDictionary.DictionaryID(childComplexity), true

	case "data_dictionary.id":
		if e.complexity.DataDictionary.ID == nil {
			break
		}

		return e.complexity.DataDictionary.ID(childComplexity), true

	case "data_dictionary.is_delete":
		if e.complexity.DataDictionary.IsDelete == nil {
			break
		}

		return e.complexity.DataDictionary.IsDelete(childComplexity), true

	case "data_dictionary.name":
		if e.complexity.DataDictionary.Name == nil {
			break
		}

		return e.complexity.DataDictionary.Name(childComplexity), true

	case "data_dictionary.remarks":
		if e.complexity.DataDictionary.Remarks == nil {
			break
		}

		return e.complexity.DataDictionary.Remarks(childComplexity), true

	case "data_dictionary.update_at":
		if e.complexity.DataDictionary.UpdateAt == nil {
			break
		}

		return e.complexity.DataDictionary.UpdateAt(childComplexity), true

	case "data_dictionary.update_by":
		if e.complexity.DataDictionary.UpdateBy == nil {
			break
		}

		return e.complexity.DataDictionary.UpdateBy(childComplexity), true

	case "data_dictionary.value":
		if e.complexity.DataDictionary.Value == nil {
			break
		}

		return e.complexity.DataDictionary.Value(childComplexity), true

	case "data_dictionary_aggregate.aggregate":
		if e.complexity.DataDictionaryAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DataDictionaryAggregate.Aggregate(childComplexity), true

	case "data_dictionary_aggregate.nodes":
		if e.complexity.DataDictionaryAggregate.Nodes == nil {
			break
		}

		return e.complexity.DataDictionaryAggregate.Nodes(childComplexity), true

	case "data_dictionary_aggregate_fields.avg":
		if e.complexity.DataDictionaryAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Avg(childComplexity), true

	case "data_dictionary_aggregate_fields.count":
		if e.complexity.DataDictionaryAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_data_dictionary_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DataDictionaryAggregateFields.Count(childComplexity, args["columns"].([]model.DataDictionarySelectColumn), args["distinct"].(*bool)), true

	case "data_dictionary_aggregate_fields.max":
		if e.complexity.DataDictionaryAggregateFields.Max == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Max(childComplexity), true

	case "data_dictionary_aggregate_fields.min":
		if e.complexity.DataDictionaryAggregateFields.Min == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Min(childComplexity), true

	case "data_dictionary_aggregate_fields.stddev":
		if e.complexity.DataDictionaryAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Stddev(childComplexity), true

	case "data_dictionary_aggregate_fields.stddev_pop":
		if e.complexity.DataDictionaryAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.StddevPop(childComplexity), true

	case "data_dictionary_aggregate_fields.stddev_samp":
		if e.complexity.DataDictionaryAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.StddevSamp(childComplexity), true

	case "data_dictionary_aggregate_fields.sum":
		if e.complexity.DataDictionaryAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Sum(childComplexity), true

	case "data_dictionary_aggregate_fields.var_pop":
		if e.complexity.DataDictionaryAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.VarPop(childComplexity), true

	case "data_dictionary_aggregate_fields.var_samp":
		if e.complexity.DataDictionaryAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.VarSamp(childComplexity), true

	case "data_dictionary_aggregate_fields.variance":
		if e.complexity.DataDictionaryAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Variance(childComplexity), true

	case "data_dictionary_avg_fields.id":
		if e.complexity.DataDictionaryAvgFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryAvgFields.ID(childComplexity), true

	case "data_dictionary_avg_fields.value":
		if e.complexity.DataDictionaryAvgFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryAvgFields.Value(childComplexity), true

	case "data_dictionary_category.category_code":
		if e.complexity.DataDictionaryCategory.CategoryCode == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.CategoryCode(childComplexity), true

	case "data_dictionary_category.category_name":
		if e.complexity.DataDictionaryCategory.CategoryName == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.CategoryName(childComplexity), true

	case "data_dictionary_category.create_at":
		if e.complexity.DataDictionaryCategory.CreateAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.CreateAt(childComplexity), true

	case "data_dictionary_category.create_by":
		if e.complexity.DataDictionaryCategory.CreateBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.CreateBy(childComplexity), true

	case "data_dictionary_category.delete_at":
		if e.complexity.DataDictionaryCategory.DeleteAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.DeleteAt(childComplexity), true

	case "data_dictionary_category.delete_by":
		if e.complexity.DataDictionaryCategory.DeleteBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.DeleteBy(childComplexity), true

	case "data_dictionary_category.dictionary_category_id":
		if e.complexity.DataDictionaryCategory.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.DictionaryCategoryID(childComplexity), true

	case "data_dictionary_category.id":
		if e.complexity.DataDictionaryCategory.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.ID(childComplexity), true

	case "data_dictionary_category.is_delete":
		if e.complexity.DataDictionaryCategory.IsDelete == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.IsDelete(childComplexity), true

	case "data_dictionary_category.remarks":
		if e.complexity.DataDictionaryCategory.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.Remarks(childComplexity), true

	case "data_dictionary_category.update_at":
		if e.complexity.DataDictionaryCategory.UpdateAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.UpdateAt(childComplexity), true

	case "data_dictionary_category.update_by":
		if e.complexity.DataDictionaryCategory.UpdateBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.UpdateBy(childComplexity), true

	case "data_dictionary_category_aggregate.aggregate":
		if e.complexity.DataDictionaryCategoryAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregate.Aggregate(childComplexity), true

	case "data_dictionary_category_aggregate.nodes":
		if e.complexity.DataDictionaryCategoryAggregate.Nodes == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregate.Nodes(childComplexity), true

	case "data_dictionary_category_aggregate_fields.avg":
		if e.complexity.DataDictionaryCategoryAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Avg(childComplexity), true

	case "data_dictionary_category_aggregate_fields.count":
		if e.complexity.DataDictionaryCategoryAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_data_dictionary_category_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Count(childComplexity, args["columns"].([]model.DataDictionaryCategorySelectColumn), args["distinct"].(*bool)), true

	case "data_dictionary_category_aggregate_fields.max":
		if e.complexity.DataDictionaryCategoryAggregateFields.Max == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Max(childComplexity), true

	case "data_dictionary_category_aggregate_fields.min":
		if e.complexity.DataDictionaryCategoryAggregateFields.Min == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Min(childComplexity), true

	case "data_dictionary_category_aggregate_fields.stddev":
		if e.complexity.DataDictionaryCategoryAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Stddev(childComplexity), true

	case "data_dictionary_category_aggregate_fields.stddev_pop":
		if e.complexity.DataDictionaryCategoryAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.StddevPop(childComplexity), true

	case "data_dictionary_category_aggregate_fields.stddev_samp":
		if e.complexity.DataDictionaryCategoryAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.StddevSamp(childComplexity), true

	case "data_dictionary_category_aggregate_fields.sum":
		if e.complexity.DataDictionaryCategoryAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Sum(childComplexity), true

	case "data_dictionary_category_aggregate_fields.var_pop":
		if e.complexity.DataDictionaryCategoryAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.VarPop(childComplexity), true

	case "data_dictionary_category_aggregate_fields.var_samp":
		if e.complexity.DataDictionaryCategoryAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.VarSamp(childComplexity), true

	case "data_dictionary_category_aggregate_fields.variance":
		if e.complexity.DataDictionaryCategoryAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Variance(childComplexity), true

	case "data_dictionary_category_avg_fields.id":
		if e.complexity.DataDictionaryCategoryAvgFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAvgFields.ID(childComplexity), true

	case "data_dictionary_category_max_fields.category_code":
		if e.complexity.DataDictionaryCategoryMaxFields.CategoryCode == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.CategoryCode(childComplexity), true

	case "data_dictionary_category_max_fields.category_name":
		if e.complexity.DataDictionaryCategoryMaxFields.CategoryName == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.CategoryName(childComplexity), true

	case "data_dictionary_category_max_fields.create_at":
		if e.complexity.DataDictionaryCategoryMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.CreateAt(childComplexity), true

	case "data_dictionary_category_max_fields.create_by":
		if e.complexity.DataDictionaryCategoryMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.CreateBy(childComplexity), true

	case "data_dictionary_category_max_fields.delete_at":
		if e.complexity.DataDictionaryCategoryMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.DeleteAt(childComplexity), true

	case "data_dictionary_category_max_fields.delete_by":
		if e.complexity.DataDictionaryCategoryMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.DeleteBy(childComplexity), true

	case "data_dictionary_category_max_fields.dictionary_category_id":
		if e.complexity.DataDictionaryCategoryMaxFields.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.DictionaryCategoryID(childComplexity), true

	case "data_dictionary_category_max_fields.id":
		if e.complexity.DataDictionaryCategoryMaxFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.ID(childComplexity), true

	case "data_dictionary_category_max_fields.remarks":
		if e.complexity.DataDictionaryCategoryMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.Remarks(childComplexity), true

	case "data_dictionary_category_max_fields.update_at":
		if e.complexity.DataDictionaryCategoryMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.UpdateAt(childComplexity), true

	case "data_dictionary_category_max_fields.update_by":
		if e.complexity.DataDictionaryCategoryMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.UpdateBy(childComplexity), true

	case "data_dictionary_category_min_fields.category_code":
		if e.complexity.DataDictionaryCategoryMinFields.CategoryCode == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.CategoryCode(childComplexity), true

	case "data_dictionary_category_min_fields.category_name":
		if e.complexity.DataDictionaryCategoryMinFields.CategoryName == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.CategoryName(childComplexity), true

	case "data_dictionary_category_min_fields.create_at":
		if e.complexity.DataDictionaryCategoryMinFields.CreateAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.CreateAt(childComplexity), true

	case "data_dictionary_category_min_fields.create_by":
		if e.complexity.DataDictionaryCategoryMinFields.CreateBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.CreateBy(childComplexity), true

	case "data_dictionary_category_min_fields.delete_at":
		if e.complexity.DataDictionaryCategoryMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.DeleteAt(childComplexity), true

	case "data_dictionary_category_min_fields.delete_by":
		if e.complexity.DataDictionaryCategoryMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.DeleteBy(childComplexity), true

	case "data_dictionary_category_min_fields.dictionary_category_id":
		if e.complexity.DataDictionaryCategoryMinFields.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.DictionaryCategoryID(childComplexity), true

	case "data_dictionary_category_min_fields.id":
		if e.complexity.DataDictionaryCategoryMinFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.ID(childComplexity), true

	case "data_dictionary_category_min_fields.remarks":
		if e.complexity.DataDictionaryCategoryMinFields.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.Remarks(childComplexity), true

	case "data_dictionary_category_min_fields.update_at":
		if e.complexity.DataDictionaryCategoryMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.UpdateAt(childComplexity), true

	case "data_dictionary_category_min_fields.update_by":
		if e.complexity.DataDictionaryCategoryMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.UpdateBy(childComplexity), true

	case "data_dictionary_category_mutation_response.affected_rows":
		if e.complexity.DataDictionaryCategoryMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMutationResponse.AffectedRows(childComplexity), true

	case "data_dictionary_category_mutation_response.returning":
		if e.complexity.DataDictionaryCategoryMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMutationResponse.Returning(childComplexity), true

	case "data_dictionary_category_stddev_fields.id":
		if e.complexity.DataDictionaryCategoryStddevFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryStddevFields.ID(childComplexity), true

	case "data_dictionary_category_stddev_pop_fields.id":
		if e.complexity.DataDictionaryCategoryStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryStddevPopFields.ID(childComplexity), true

	case "data_dictionary_category_stddev_samp_fields.id":
		if e.complexity.DataDictionaryCategoryStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryStddevSampFields.ID(childComplexity), true

	case "data_dictionary_category_sum_fields.id":
		if e.complexity.DataDictionaryCategorySumFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategorySumFields.ID(childComplexity), true

	case "data_dictionary_category_var_pop_fields.id":
		if e.complexity.DataDictionaryCategoryVarPopFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryVarPopFields.ID(childComplexity), true

	case "data_dictionary_category_var_samp_fields.id":
		if e.complexity.DataDictionaryCategoryVarSampFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryVarSampFields.ID(childComplexity), true

	case "data_dictionary_category_variance_fields.id":
		if e.complexity.DataDictionaryCategoryVarianceFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryVarianceFields.ID(childComplexity), true

	case "data_dictionary_max_fields.create_at":
		if e.complexity.DataDictionaryMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.CreateAt(childComplexity), true

	case "data_dictionary_max_fields.create_by":
		if e.complexity.DataDictionaryMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.CreateBy(childComplexity), true

	case "data_dictionary_max_fields.delete_at":
		if e.complexity.DataDictionaryMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.DeleteAt(childComplexity), true

	case "data_dictionary_max_fields.delete_by":
		if e.complexity.DataDictionaryMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.DeleteBy(childComplexity), true

	case "data_dictionary_max_fields.dictionary_category_id":
		if e.complexity.DataDictionaryMaxFields.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.DictionaryCategoryID(childComplexity), true

	case "data_dictionary_max_fields.dictionary_id":
		if e.complexity.DataDictionaryMaxFields.DictionaryID == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.DictionaryID(childComplexity), true

	case "data_dictionary_max_fields.id":
		if e.complexity.DataDictionaryMaxFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.ID(childComplexity), true

	case "data_dictionary_max_fields.name":
		if e.complexity.DataDictionaryMaxFields.Name == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.Name(childComplexity), true

	case "data_dictionary_max_fields.remarks":
		if e.complexity.DataDictionaryMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.Remarks(childComplexity), true

	case "data_dictionary_max_fields.update_at":
		if e.complexity.DataDictionaryMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.UpdateAt(childComplexity), true

	case "data_dictionary_max_fields.update_by":
		if e.complexity.DataDictionaryMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.UpdateBy(childComplexity), true

	case "data_dictionary_max_fields.value":
		if e.complexity.DataDictionaryMaxFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.Value(childComplexity), true

	case "data_dictionary_min_fields.create_at":
		if e.complexity.DataDictionaryMinFields.CreateAt == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.CreateAt(childComplexity), true

	case "data_dictionary_min_fields.create_by":
		if e.complexity.DataDictionaryMinFields.CreateBy == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.CreateBy(childComplexity), true

	case "data_dictionary_min_fields.delete_at":
		if e.complexity.DataDictionaryMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.DeleteAt(childComplexity), true

	case "data_dictionary_min_fields.delete_by":
		if e.complexity.DataDictionaryMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.DeleteBy(childComplexity), true

	case "data_dictionary_min_fields.dictionary_category_id":
		if e.complexity.DataDictionaryMinFields.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.DictionaryCategoryID(childComplexity), true

	case "data_dictionary_min_fields.dictionary_id":
		if e.complexity.DataDictionaryMinFields.DictionaryID == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.DictionaryID(childComplexity), true

	case "data_dictionary_min_fields.id":
		if e.complexity.DataDictionaryMinFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.ID(childComplexity), true

	case "data_dictionary_min_fields.name":
		if e.complexity.DataDictionaryMinFields.Name == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.Name(childComplexity), true

	case "data_dictionary_min_fields.remarks":
		if e.complexity.DataDictionaryMinFields.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.Remarks(childComplexity), true

	case "data_dictionary_min_fields.update_at":
		if e.complexity.DataDictionaryMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.UpdateAt(childComplexity), true

	case "data_dictionary_min_fields.update_by":
		if e.complexity.DataDictionaryMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.UpdateBy(childComplexity), true

	case "data_dictionary_min_fields.value":
		if e.complexity.DataDictionaryMinFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.Value(childComplexity), true

	case "data_dictionary_mutation_response.affected_rows":
		if e.complexity.DataDictionaryMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DataDictionaryMutationResponse.AffectedRows(childComplexity), true

	case "data_dictionary_mutation_response.returning":
		if e.complexity.DataDictionaryMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DataDictionaryMutationResponse.Returning(childComplexity), true

	case "data_dictionary_stddev_fields.id":
		if e.complexity.DataDictionaryStddevFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryStddevFields.ID(childComplexity), true

	case "data_dictionary_stddev_fields.value":
		if e.complexity.DataDictionaryStddevFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryStddevFields.Value(childComplexity), true

	case "data_dictionary_stddev_pop_fields.id":
		if e.complexity.DataDictionaryStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryStddevPopFields.ID(childComplexity), true

	case "data_dictionary_stddev_pop_fields.value":
		if e.complexity.DataDictionaryStddevPopFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryStddevPopFields.Value(childComplexity), true

	case "data_dictionary_stddev_samp_fields.id":
		if e.complexity.DataDictionaryStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryStddevSampFields.ID(childComplexity), true

	case "data_dictionary_stddev_samp_fields.value":
		if e.complexity.DataDictionaryStddevSampFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryStddevSampFields.Value(childComplexity), true

	case "data_dictionary_sum_fields.id":
		if e.complexity.DataDictionarySumFields.ID == nil {
			break
		}

		return e.complexity.DataDictionarySumFields.ID(childComplexity), true

	case "data_dictionary_sum_fields.value":
		if e.complexity.DataDictionarySumFields.Value == nil {
			break
		}

		return e.complexity.DataDictionarySumFields.Value(childComplexity), true

	case "data_dictionary_var_pop_fields.id":
		if e.complexity.DataDictionaryVarPopFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryVarPopFields.ID(childComplexity), true

	case "data_dictionary_var_pop_fields.value":
		if e.complexity.DataDictionaryVarPopFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryVarPopFields.Value(childComplexity), true

	case "data_dictionary_var_samp_fields.id":
		if e.complexity.DataDictionaryVarSampFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryVarSampFields.ID(childComplexity), true

	case "data_dictionary_var_samp_fields.value":
		if e.complexity.DataDictionaryVarSampFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryVarSampFields.Value(childComplexity), true

	case "data_dictionary_variance_fields.id":
		if e.complexity.DataDictionaryVarianceFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryVarianceFields.ID(childComplexity), true

	case "data_dictionary_variance_fields.value":
		if e.complexity.DataDictionaryVarianceFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryVarianceFields.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}


"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}



"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}


"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
    _eq: point
    _gt: point
    _gte: point
    _in: [point!]
    _is_null: Boolean
    _lt: point
    _lte: point
    _neq: point
    _nin: [point!]
}




scalar _jsonb
scalar bigint
scalar timestamptz
scalar point
scalar numeric
`, BuiltIn: false},
	{Name: "graph/graphqls/data_dictionary.graphqls", Input: `
"""
数据字典


columns and relationships of "data_dictionary"

"""
type data_dictionary {
  """创建时间"""
  create_at: timestamptz!

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """字典类型ID"""
  dictionary_category_id: String!

  """字典ID"""
  dictionary_id: String!

  """ID"""
  id: bigint!

  """是否删除"""
  is_delete: Boolean!

  """名称"""
  name: String!

  """备注"""
  remarks: String

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String

  """值"""
  value: Int!
}

"""
aggregated selection of "data_dictionary"
"""
type data_dictionary_aggregate {
  aggregate: data_dictionary_aggregate_fields
  nodes: [data_dictionary!]!
}

"""
aggregate fields of "data_dictionary"
"""
type data_dictionary_aggregate_fields {
  avg: data_dictionary_avg_fields
  count(columns: [data_dictionary_select_column!], distinct: Boolean): Int
  max: data_dictionary_max_fields
  min: data_dictionary_min_fields
  stddev: data_dictionary_stddev_fields
  stddev_pop: data_dictionary_stddev_pop_fields
  stddev_samp: data_dictionary_stddev_samp_fields
  sum: data_dictionary_sum_fields
  var_pop: data_dictionary_var_pop_fields
  var_samp: data_dictionary_var_samp_fields
  variance: data_dictionary_variance_fields
}

"""
order by aggregate values of table "data_dictionary"
"""
input data_dictionary_aggregate_order_by {
  avg: data_dictionary_avg_order_by
  count: order_by
  max: data_dictionary_max_order_by
  min: data_dictionary_min_order_by
  stddev: data_dictionary_stddev_order_by
  stddev_pop: data_dictionary_stddev_pop_order_by
  stddev_samp: data_dictionary_stddev_samp_order_by
  sum: data_dictionary_sum_order_by
  var_pop: data_dictionary_var_pop_order_by
  var_samp: data_dictionary_var_samp_order_by
  variance: data_dictionary_variance_order_by
}

"""
input type for inserting array relation for remote table "data_dictionary"
"""
input data_dictionary_arr_rel_insert_input {
  data: [data_dictionary_insert_input!]!
  on_conflict: data_dictionary_on_conflict
}

"""aggregate avg on columns"""
type data_dictionary_avg_fields {
  id: Float
  value: Float
}

"""
order by avg() on columns of table "data_dictionary"
"""
input data_dictionary_avg_order_by {
  id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "data_dictionary". All fields are combined with a logical 'AND'.
"""
input data_dictionary_bool_exp {
  _and: [data_dictionary_bool_exp]
  _not: data_dictionary_bool_exp
  _or: [data_dictionary_bool_exp]
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  dictionary_category_id: String_comparison_exp
  dictionary_id: String_comparison_exp
  id: bigint_comparison_exp
  is_delete: Boolean_comparison_exp
  name: String_comparison_exp
  remarks: String_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  value: Int_comparison_exp
}

"""
unique or primary key constraints on table "data_dictionary"
"""
enum data_dictionary_constraint {
  """unique or primary key constraint"""
  data_dirtionary_pkey
}

"""
input type for incrementing integer column in table "data_dictionary"
"""
input data_dictionary_inc_input {
  id: bigint
  value: Int
}

"""
input type for inserting data into table "data_dictionary"
"""
input data_dictionary_insert_input {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  dictionary_category_id: String
  dictionary_id: String
  id: bigint
  is_delete: Boolean
  name: String
  remarks: String
  update_at: timestamptz
  update_by: String
  value: Int
}

"""aggregate max on columns"""
type data_dictionary_max_fields {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  dictionary_category_id: String
  dictionary_id: String
  id: bigint
  name: String
  remarks: String
  update_at: timestamptz
  update_by: String
  value: Int
}

"""
order by max() on columns of table "data_dictionary"
"""
input data_dictionary_max_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  dictionary_category_id: order_by
  dictionary_id: order_by
  id: order_by
  name: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
  value: order_by
}

"""aggregate min on columns"""
type data_dictionary_min_fields {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  dictionary_category_id: String
  dictionary_id: String
  id: bigint
  name: String
  remarks: String
  update_at: timestamptz
  update_by: String
  value: Int
}

"""
order by min() on columns of table "data_dictionary"
"""
input data_dictionary_min_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  dictionary_category_id: order_by
  dictionary_id: order_by
  id: order_by
  name: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
  value: order_by
}

"""
response of any mutation on the table "data_dictionary"
"""
type data_dictionary_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [data_dictionary!]!
}

"""
input type for inserting object relation for remote table "data_dictionary"
"""
input data_dictionary_obj_rel_insert_input {
  data: data_dictionary_insert_input!
  on_conflict: data_dictionary_on_conflict
}

"""
on conflict condition type for table "data_dictionary"
"""
input data_dictionary_on_conflict {
  constraint: data_dictionary_constraint!
  update_columns: [data_dictionary_update_column!]!
  where: data_dictionary_bool_exp
}

"""
ordering options when selecting data from "data_dictionary"
"""
input data_dictionary_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  dictionary_category_id: order_by
  dictionary_id: order_by
  id: order_by
  is_delete: order_by
  name: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
  value: order_by
}

"""
primary key columns input for table: "data_dictionary"
"""
input data_dictionary_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "data_dictionary"
"""
enum data_dictionary_select_column {
  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  dictionary_category_id

  """column name"""
  dictionary_id

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  name

  """column name"""
  remarks

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  value
}

"""
input type for updating data in table "data_dictionary"
"""
input data_dictionary_set_input {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  dictionary_category_id: String
  dictionary_id: String
  id: bigint
  is_delete: Boolean
  name: String
  remarks: String
  update_at: timestamptz
  update_by: String
  value: Int
}

"""aggregate stddev on columns"""
type data_dictionary_stddev_fields {
  id: Float
  value: Float
}

"""
order by stddev() on columns of table "data_dictionary"
"""
input data_dictionary_stddev_order_by {
  id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type data_dictionary_stddev_pop_fields {
  id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "data_dictionary"
"""
input data_dictionary_stddev_pop_order_by {
  id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type data_dictionary_stddev_samp_fields {
  id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "data_dictionary"
"""
input data_dictionary_stddev_samp_order_by {
  id: order_by
  value: order_by
}

"""aggregate sum on columns"""
type data_dictionary_sum_fields {
  id: bigint
  value: Int
}

"""
order by sum() on columns of table "data_dictionary"
"""
input data_dictionary_sum_order_by {
  id: order_by
  value: order_by
}

"""
update columns of table "data_dictionary"
"""
enum data_dictionary_update_column {
  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  dictionary_category_id

  """column name"""
  dictionary_id

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  name

  """column name"""
  remarks

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  value
}

"""aggregate var_pop on columns"""
type data_dictionary_var_pop_fields {
  id: Float
  value: Float
}

"""
order by var_pop() on columns of table "data_dictionary"
"""
input data_dictionary_var_pop_order_by {
  id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type data_dictionary_var_samp_fields {
  id: Float
  value: Float
}

"""
order by var_samp() on columns of table "data_dictionary"
"""
input data_dictionary_var_samp_order_by {
  id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type data_dictionary_variance_fields {
  id: Float
  value: Float
}

"""
order by variance() on columns of table "data_dictionary"
"""
input data_dictionary_variance_order_by {
  id: order_by
  value: order_by
}

extend type Mutation {
  """
  delete data from the table: "data_dictionary"
  """
  delete_data_dictionary(
    """filter the rows which have to be deleted"""
    where: data_dictionary_bool_exp!
  ): data_dictionary_mutation_response

  """
  delete single row from the table: "data_dictionary"
  """
  delete_data_dictionary_by_pk(
    """ID"""
    id: bigint!
  ): data_dictionary

  """
  insert data into the table: "data_dictionary"
  """
  insert_data_dictionary(
    """the rows to be inserted"""
    objects: [data_dictionary_insert_input!]!

    """on conflict condition"""
    on_conflict: data_dictionary_on_conflict
  ): data_dictionary_mutation_response

  """
  insert a single row into the table: "data_dictionary"
  """
  insert_data_dictionary_one(
    """the row to be inserted"""
    object: data_dictionary_insert_input!

    """on conflict condition"""
    on_conflict: data_dictionary_on_conflict
  ): data_dictionary

  """
  update data of the table: "data_dictionary"
  """
  update_data_dictionary(
    """increments the integer columns with given value of the filtered values"""
    _inc: data_dictionary_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: data_dictionary_set_input

    """filter the rows which have to be updated"""
    where: data_dictionary_bool_exp!
  ): data_dictionary_mutation_response

  """
  update single row of the table: "data_dictionary"
  """
  update_data_dictionary_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: data_dictionary_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: data_dictionary_set_input
    pk_columns: data_dictionary_pk_columns_input!
  ): data_dictionary
}

extend type Query {
  """
  fetch data from the table: "data_dictionary"
  """
  data_dictionary(
    """distinct select on columns"""
    distinct_on: [data_dictionary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [data_dictionary_order_by!]

    """filter the rows returned"""
    where: data_dictionary_bool_exp
  ): [data_dictionary!]!

  """
  fetch aggregated fields from the table: "data_dictionary"
  """
  data_dictionary_aggregate(
    """distinct select on columns"""
    distinct_on: [data_dictionary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [data_dictionary_order_by!]

    """filter the rows returned"""
    where: data_dictionary_bool_exp
  ): data_dictionary_aggregate!

  """fetch data from the table: "data_dictionary" using primary key columns"""
  data_dictionary_by_pk(
    """ID"""
    id: bigint!
  ): data_dictionary
}
`, BuiltIn: false},
	{Name: "graph/graphqls/data_dictionary_category.graphqls", Input: `

"""
数据字典类型


columns and relationships of "data_dictionary_category"

"""
type data_dictionary_category {
  """类型编号"""
  category_code: String!

  """类型名称"""
  category_name: String!

  """创建时间"""
  create_at: timestamptz!

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """字典类型ID"""
  dictionary_category_id: String!

  """ID"""
  id: bigint!

  """是否删除"""
  is_delete: Boolean!

  """备注"""
  remarks: String

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String
}

"""
aggregated selection of "data_dictionary_category"
"""
type data_dictionary_category_aggregate {
  aggregate: data_dictionary_category_aggregate_fields
  nodes: [data_dictionary_category!]!
}

"""
aggregate fields of "data_dictionary_category"
"""
type data_dictionary_category_aggregate_fields {
  avg: data_dictionary_category_avg_fields
  count(columns: [data_dictionary_category_select_column!], distinct: Boolean): Int
  max: data_dictionary_category_max_fields
  min: data_dictionary_category_min_fields
  stddev: data_dictionary_category_stddev_fields
  stddev_pop: data_dictionary_category_stddev_pop_fields
  stddev_samp: data_dictionary_category_stddev_samp_fields
  sum: data_dictionary_category_sum_fields
  var_pop: data_dictionary_category_var_pop_fields
  var_samp: data_dictionary_category_var_samp_fields
  variance: data_dictionary_category_variance_fields
}

"""
order by aggregate values of table "data_dictionary_category"
"""
input data_dictionary_category_aggregate_order_by {
  avg: data_dictionary_category_avg_order_by
  count: order_by
  max: data_dictionary_category_max_order_by
  min: data_dictionary_category_min_order_by
  stddev: data_dictionary_category_stddev_order_by
  stddev_pop: data_dictionary_category_stddev_pop_order_by
  stddev_samp: data_dictionary_category_stddev_samp_order_by
  sum: data_dictionary_category_sum_order_by
  var_pop: data_dictionary_category_var_pop_order_by
  var_samp: data_dictionary_category_var_samp_order_by
  variance: data_dictionary_category_variance_order_by
}

"""
input type for inserting array relation for remote table "data_dictionary_category"
"""
input data_dictionary_category_arr_rel_insert_input {
  data: [data_dictionary_category_insert_input!]!
  on_conflict: data_dictionary_category_on_conflict
}

"""aggregate avg on columns"""
type data_dictionary_category_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "data_dictionary_category". All fields are combined with a logical 'AND'.
"""
input data_dictionary_category_bool_exp {
  _and: [data_dictionary_category_bool_exp]
  _not: data_dictionary_category_bool_exp
  _or: [data_dictionary_category_bool_exp]
  category_code: String_comparison_exp
  category_name: String_comparison_exp
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  dictionary_category_id: String_comparison_exp
  id: bigint_comparison_exp
  is_delete: Boolean_comparison_exp
  remarks: String_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
}

"""
unique or primary key constraints on table "data_dictionary_category"
"""
enum data_dictionary_category_constraint {
  """unique or primary key constraint"""
  data_dirtionary_category_pkey
}

"""
input type for incrementing integer column in table "data_dictionary_category"
"""
input data_dictionary_category_inc_input {
  id: bigint
}

"""
input type for inserting data into table "data_dictionary_category"
"""
input data_dictionary_category_insert_input {
  category_code: String
  category_name: String
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  dictionary_category_id: String
  id: bigint
  is_delete: Boolean
  remarks: String
  update_at: timestamptz
  update_by: String
}

"""aggregate max on columns"""
type data_dictionary_category_max_fields {
  category_code: String
  category_name: String
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  dictionary_category_id: String
  id: bigint
  remarks: String
  update_at: timestamptz
  update_by: String
}

"""
order by max() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_max_order_by {
  category_code: order_by
  category_name: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  dictionary_category_id: order_by
  id: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
}

"""aggregate min on columns"""
type data_dictionary_category_min_fields {
  category_code: String
  category_name: String
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  dictionary_category_id: String
  id: bigint
  remarks: String
  update_at: timestamptz
  update_by: String
}

"""
order by min() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_min_order_by {
  category_code: order_by
  category_name: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  dictionary_category_id: order_by
  id: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
}

"""
response of any mutation on the table "data_dictionary_category"
"""
type data_dictionary_category_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [data_dictionary_category!]!
}

"""
input type for inserting object relation for remote table "data_dictionary_category"
"""
input data_dictionary_category_obj_rel_insert_input {
  data: data_dictionary_category_insert_input!
  on_conflict: data_dictionary_category_on_conflict
}

"""
on conflict condition type for table "data_dictionary_category"
"""
input data_dictionary_category_on_conflict {
  constraint: data_dictionary_category_constraint!
  update_columns: [data_dictionary_category_update_column!]!
  where: data_dictionary_category_bool_exp
}

"""
ordering options when selecting data from "data_dictionary_category"
"""
input data_dictionary_category_order_by {
  category_code: order_by
  category_name: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  dictionary_category_id: order_by
  id: order_by
  is_delete: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
}

"""
primary key columns input for table: "data_dictionary_category"
"""
input data_dictionary_category_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "data_dictionary_category"
"""
enum data_dictionary_category_select_column {
  """column name"""
  category_code

  """column name"""
  category_name

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  dictionary_category_id

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  remarks

  """column name"""
  update_at

  """column name"""
  update_by
}

"""
input type for updating data in table "data_dictionary_category"
"""
input data_dictionary_category_set_input {
  category_code: String
  category_name: String
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  dictionary_category_id: String
  id: bigint
  is_delete: Boolean
  remarks: String
  update_at: timestamptz
  update_by: String
}

"""aggregate stddev on columns"""
type data_dictionary_category_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type data_dictionary_category_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type data_dictionary_category_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type data_dictionary_category_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_sum_order_by {
  id: order_by
}

"""
update columns of table "data_dictionary_category"
"""
enum data_dictionary_category_update_column {
  """column name"""
  category_code

  """column name"""
  category_name

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  dictionary_category_id

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  remarks

  """column name"""
  update_at

  """column name"""
  update_by
}

"""aggregate var_pop on columns"""
type data_dictionary_category_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type data_dictionary_category_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type data_dictionary_category_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "data_dictionary_category"
"""
input data_dictionary_category_variance_order_by {
  id: order_by
}


extend type Mutation {
  """
  delete data from the table: "data_dictionary_category"
  """
  delete_data_dictionary_category(
    """filter the rows which have to be deleted"""
    where: data_dictionary_category_bool_exp!
  ): data_dictionary_category_mutation_response

  """
  delete single row from the table: "data_dictionary_category"
  """
  delete_data_dictionary_category_by_pk(
    """ID"""
    id: bigint!
  ): data_dictionary_category

  """
  insert data into the table: "data_dictionary_category"
  """
  insert_data_dictionary_category(
    """the rows to be inserted"""
    objects: [data_dictionary_category_insert_input!]!

    """on conflict condition"""
    on_conflict: data_dictionary_category_on_conflict
  ): data_dictionary_category_mutation_response

  """
  insert a single row into the table: "data_dictionary_category"
  """
  insert_data_dictionary_category_one(
    """the row to be inserted"""
    object: data_dictionary_category_insert_input!

    """on conflict condition"""
    on_conflict: data_dictionary_category_on_conflict
  ): data_dictionary_category

  """
  update data of the table: "data_dictionary_category"
  """
  update_data_dictionary_category(
    """increments the integer columns with given value of the filtered values"""
    _inc: data_dictionary_category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: data_dictionary_category_set_input

    """filter the rows which have to be updated"""
    where: data_dictionary_category_bool_exp!
  ): data_dictionary_category_mutation_response

  """
  update single row of the table: "data_dictionary_category"
  """
  update_data_dictionary_category_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: data_dictionary_category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: data_dictionary_category_set_input
    pk_columns: data_dictionary_category_pk_columns_input!
  ): data_dictionary_category
}

extend type Query {
  """
  fetch data from the table: "data_dictionary_category"
  """
  data_dictionary_category(
    """distinct select on columns"""
    distinct_on: [data_dictionary_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [data_dictionary_category_order_by!]

    """filter the rows returned"""
    where: data_dictionary_category_bool_exp
  ): [data_dictionary_category!]!

  """
  fetch aggregated fields from the table: "data_dictionary_category"
  """
  data_dictionary_category_aggregate(
    """distinct select on columns"""
    distinct_on: [data_dictionary_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [data_dictionary_category_order_by!]

    """filter the rows returned"""
    where: data_dictionary_category_bool_exp
  ): data_dictionary_category_aggregate!

  """
  fetch data from the table: "data_dictionary_category" using primary key columns
  """
  data_dictionary_category_by_pk(
    """ID"""
    id: bigint!
  ): data_dictionary_category
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_data_dictionary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDictionaryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdata_dictionary_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_data_dictionary_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_data_dictionary_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDictionaryCategoryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdata_dictionary_category_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_data_dictionary_category_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_data_dictionary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DataDictionaryInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdata_dictionary_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DataDictionaryOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdata_dictionary_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_data_dictionary_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DataDictionaryCategoryInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdata_dictionary_category_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DataDictionaryCategoryOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdata_dictionary_category_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_data_dictionary_category_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDictionaryCategoryInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdata_dictionary_category_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DataDictionaryCategoryOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdata_dictionary_category_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_data_dictionary_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDictionaryInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdata_dictionary_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DataDictionaryOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdata_dictionary_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdata_dictionary_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionarySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdata_dictionary_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DataDictionaryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdata_dictionary_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdata_dictionary_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionarySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdata_dictionary_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DataDictionaryPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdata_dictionary_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryCategoryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdata_dictionary_category_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionaryCategorySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdata_dictionary_category_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DataDictionaryCategoryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdata_dictionary_category_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_category_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryCategoryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdata_dictionary_category_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionaryCategorySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdata_dictionary_category_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DataDictionaryCategoryPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdata_dictionary_category_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionarySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdata_dictionary_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DataDictionaryOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdata_dictionary_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DataDictionaryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdata_dictionary_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionarySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdata_dictionary_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DataDictionaryOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdata_dictionary_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DataDictionaryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdata_dictionary_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_category_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionaryCategorySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdata_dictionary_category_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DataDictionaryCategoryOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdata_dictionary_category_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DataDictionaryCategoryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdata_dictionary_category_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionaryCategorySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdata_dictionary_category_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DataDictionaryCategoryOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdata_dictionary_category_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DataDictionaryCategoryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdata_dictionary_category_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_category_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_data_dictionary_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionarySelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdata_dictionary_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_data_dictionary_category_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionaryCategorySelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdata_dictionary_category_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_data_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionary(rctx, args["where"].(model.DataDictionaryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMutationResponse)
	fc.Result = res
	return ec.marshalOdata_dictionary_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionaryByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalOdata_dictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_data_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_data_dictionary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDataDictionary(rctx, args["objects"].([]*model.DataDictionaryInsertInput), args["on_conflict"].(*model.DataDictionaryOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMutationResponse)
	fc.Result = res
	return ec.marshalOdata_dictionary_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_data_dictionary_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_data_dictionary_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDataDictionaryOne(rctx, args["object"].(model.DataDictionaryInsertInput), args["on_conflict"].(*model.DataDictionaryOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalOdata_dictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionary(rctx, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["where"].(model.DataDictionaryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMutationResponse)
	fc.Result = res
	return ec.marshalOdata_dictionary_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionaryByPk(rctx, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["pk_columns"].(model.DataDictionaryPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalOdata_dictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionaryCategory(rctx, args["where"].(model.DataDictionaryCategoryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMutationResponse)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary_category_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_category_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionaryCategoryByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalOdata_dictionary_category2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_data_dictionary_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_data_dictionary_category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDataDictionaryCategory(rctx, args["objects"].([]*model.DataDictionaryCategoryInsertInput), args["on_conflict"].(*model.DataDictionaryCategoryOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMutationResponse)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_data_dictionary_category_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_data_dictionary_category_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDataDictionaryCategoryOne(rctx, args["object"].(model.DataDictionaryCategoryInsertInput), args["on_conflict"].(*model.DataDictionaryCategoryOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalOdata_dictionary_category2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionaryCategory(rctx, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["where"].(model.DataDictionaryCategoryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMutationResponse)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary_category_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_category_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionaryCategoryByPk(rctx, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["pk_columns"].(model.DataDictionaryCategoryPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalOdata_dictionary_category2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionary(rctx, args["distinct_on"].([]model.DataDictionarySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryOrderBy), args["where"].(*model.DataDictionaryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionary)
	fc.Result = res
	return ec.marshalNdata_dictionary2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryAggregate(rctx, args["distinct_on"].([]model.DataDictionarySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryOrderBy), args["where"].(*model.DataDictionaryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryAggregate)
	fc.Result = res
	return ec.marshalNdata_dictionary_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalOdata_dictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryCategory(rctx, args["distinct_on"].([]model.DataDictionaryCategorySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryCategoryOrderBy), args["where"].(*model.DataDictionaryCategoryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalNdata_dictionary_category2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_category_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_category_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryCategoryAggregate(rctx, args["distinct_on"].([]model.DataDictionaryCategorySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryCategoryOrderBy), args["where"].(*model.DataDictionaryCategoryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryAggregate)
	fc.Result = res
	return ec.marshalNdata_dictionary_category_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_category_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_category_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryCategoryByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalOdata_dictionary_category2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_dictionary_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_name(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_value(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryAggregateFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionary)
	fc.Result = res
	return ec.marshalNdata_dictionary2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryAvgFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_data_dictionary_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMaxFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMinFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryStddevFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryStddevPopFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryStddevSampFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionarySumFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryVarPopFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryVarSampFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryVarianceFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_avg_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_category_code(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_category_name(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryAggregateFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalNdata_dictionary_category2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryAvgFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_data_dictionary_category_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMaxFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMinFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryStddevFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryStddevPopFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryStddevSampFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategorySumFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryVarPopFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryVarSampFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryVarianceFields)
	fc.Result = res
	return ec.marshalOdata_dictionary_category_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_category_code(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_category_name(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_category_code(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_category_name(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalNdata_dictionary_category2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategorySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_category_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_category_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_dictionary_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_name(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_max_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_dictionary_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_name(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_min_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionary)
	fc.Result = res
	return ec.marshalNdata_dictionary2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_stddev_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_stddev_pop_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_stddev_samp_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionarySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_sum_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionarySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_var_pop_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_var_samp_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _data_dictionary_variance_fields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "data_dictionary_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_aggregate_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryAggregateOrderBy, error) {
	var it model.DataDictionaryAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdata_dictionary_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdata_dictionary_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdata_dictionary_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdata_dictionary_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdata_dictionary_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdata_dictionary_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdata_dictionary_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdata_dictionary_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdata_dictionary_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdata_dictionary_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DataDictionaryArrRelInsertInput, error) {
	var it model.DataDictionaryArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdata_dictionary_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdata_dictionary_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_avg_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryAvgOrderBy, error) {
	var it model.DataDictionaryAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_bool_exp(ctx context.Context, obj interface{}) (model.DataDictionaryBoolExp, error) {
	var it model.DataDictionaryBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdata_dictionary_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdata_dictionary_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdata_dictionary_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_aggregate_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryAggregateOrderBy, error) {
	var it model.DataDictionaryCategoryAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdata_dictionary_category_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdata_dictionary_category_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdata_dictionary_category_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdata_dictionary_category_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdata_dictionary_category_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdata_dictionary_category_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdata_dictionary_category_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdata_dictionary_category_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdata_dictionary_category_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdata_dictionary_category_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryArrRelInsertInput, error) {
	var it model.DataDictionaryCategoryArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdata_dictionary_category_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdata_dictionary_category_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_avg_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryAvgOrderBy, error) {
	var it model.DataDictionaryCategoryAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_bool_exp(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryBoolExp, error) {
	var it model.DataDictionaryCategoryBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdata_dictionary_category_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdata_dictionary_category_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdata_dictionary_category_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_inc_input(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryIncInput, error) {
	var it model.DataDictionaryCategoryIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_insert_input(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryInsertInput, error) {
	var it model.DataDictionaryCategoryInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_max_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryMaxOrderBy, error) {
	var it model.DataDictionaryCategoryMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_min_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryMinOrderBy, error) {
	var it model.DataDictionaryCategoryMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryObjRelInsertInput, error) {
	var it model.DataDictionaryCategoryObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdata_dictionary_category_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdata_dictionary_category_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_on_conflict(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryOnConflict, error) {
	var it model.DataDictionaryCategoryOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdata_dictionary_category_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdata_dictionary_category_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdata_dictionary_category_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryOrderBy, error) {
	var it model.DataDictionaryCategoryOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_pk_columns_input(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryPkColumnsInput, error) {
	var it model.DataDictionaryCategoryPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_set_input(ctx context.Context, obj interface{}) (model.DataDictionaryCategorySetInput, error) {
	var it model.DataDictionaryCategorySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_stddev_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryStddevOrderBy, error) {
	var it model.DataDictionaryCategoryStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryStddevPopOrderBy, error) {
	var it model.DataDictionaryCategoryStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryStddevSampOrderBy, error) {
	var it model.DataDictionaryCategoryStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_sum_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategorySumOrderBy, error) {
	var it model.DataDictionaryCategorySumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_var_pop_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryVarPopOrderBy, error) {
	var it model.DataDictionaryCategoryVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_var_samp_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryVarSampOrderBy, error) {
	var it model.DataDictionaryCategoryVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_category_variance_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryVarianceOrderBy, error) {
	var it model.DataDictionaryCategoryVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_inc_input(ctx context.Context, obj interface{}) (model.DataDictionaryIncInput, error) {
	var it model.DataDictionaryIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_insert_input(ctx context.Context, obj interface{}) (model.DataDictionaryInsertInput, error) {
	var it model.DataDictionaryInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_max_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryMaxOrderBy, error) {
	var it model.DataDictionaryMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_min_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryMinOrderBy, error) {
	var it model.DataDictionaryMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DataDictionaryObjRelInsertInput, error) {
	var it model.DataDictionaryObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdata_dictionary_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdata_dictionary_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_on_conflict(ctx context.Context, obj interface{}) (model.DataDictionaryOnConflict, error) {
	var it model.DataDictionaryOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdata_dictionary_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdata_dictionary_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdata_dictionary_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryOrderBy, error) {
	var it model.DataDictionaryOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_pk_columns_input(ctx context.Context, obj interface{}) (model.DataDictionaryPkColumnsInput, error) {
	var it model.DataDictionaryPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_set_input(ctx context.Context, obj interface{}) (model.DataDictionarySetInput, error) {
	var it model.DataDictionarySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_stddev_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryStddevOrderBy, error) {
	var it model.DataDictionaryStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryStddevPopOrderBy, error) {
	var it model.DataDictionaryStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryStddevSampOrderBy, error) {
	var it model.DataDictionaryStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_sum_order_by(ctx context.Context, obj interface{}) (model.DataDictionarySumOrderBy, error) {
	var it model.DataDictionarySumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_var_pop_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryVarPopOrderBy, error) {
	var it model.DataDictionaryVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_var_samp_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryVarSampOrderBy, error) {
	var it model.DataDictionaryVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdata_dictionary_variance_order_by(ctx context.Context, obj interface{}) (model.DataDictionaryVarianceOrderBy, error) {
	var it model.DataDictionaryVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model.NumericComparisonExp, error) {
	var it model.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpoint_comparison_exp(ctx context.Context, obj interface{}) (model.PointComparisonExp, error) {
	var it model.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_data_dictionary":
			out.Values[i] = ec._Mutation_delete_data_dictionary(ctx, field)
		case "delete_data_dictionary_by_pk":
			out.Values[i] = ec._Mutation_delete_data_dictionary_by_pk(ctx, field)
		case "insert_data_dictionary":
			out.Values[i] = ec._Mutation_insert_data_dictionary(ctx, field)
		case "insert_data_dictionary_one":
			out.Values[i] = ec._Mutation_insert_data_dictionary_one(ctx, field)
		case "update_data_dictionary":
			out.Values[i] = ec._Mutation_update_data_dictionary(ctx, field)
		case "update_data_dictionary_by_pk":
			out.Values[i] = ec._Mutation_update_data_dictionary_by_pk(ctx, field)
		case "delete_data_dictionary_category":
			out.Values[i] = ec._Mutation_delete_data_dictionary_category(ctx, field)
		case "delete_data_dictionary_category_by_pk":
			out.Values[i] = ec._Mutation_delete_data_dictionary_category_by_pk(ctx, field)
		case "insert_data_dictionary_category":
			out.Values[i] = ec._Mutation_insert_data_dictionary_category(ctx, field)
		case "insert_data_dictionary_category_one":
			out.Values[i] = ec._Mutation_insert_data_dictionary_category_one(ctx, field)
		case "update_data_dictionary_category":
			out.Values[i] = ec._Mutation_update_data_dictionary_category(ctx, field)
		case "update_data_dictionary_category_by_pk":
			out.Values[i] = ec._Mutation_update_data_dictionary_category_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "data_dictionary":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_by_pk(ctx, field)
				return res
			})
		case "data_dictionary_category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_category(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_category_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_category_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_category_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_category_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionaryImplementors = []string{"data_dictionary"}

func (ec *executionContext) _data_dictionary(ctx context.Context, sel ast.SelectionSet, obj *model1.DataDictionary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary")
		case "create_at":
			out.Values[i] = ec._data_dictionary_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._data_dictionary_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._data_dictionary_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._data_dictionary_delete_by(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._data_dictionary_dictionary_category_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dictionary_id":
			out.Values[i] = ec._data_dictionary_dictionary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._data_dictionary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._data_dictionary_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._data_dictionary_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._data_dictionary_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._data_dictionary_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._data_dictionary_update_by(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_aggregateImplementors = []string{"data_dictionary_aggregate"}

func (ec *executionContext) _data_dictionary_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_aggregate")
		case "aggregate":
			out.Values[i] = ec._data_dictionary_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._data_dictionary_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_aggregate_fieldsImplementors = []string{"data_dictionary_aggregate_fields"}

func (ec *executionContext) _data_dictionary_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_aggregate_fields")
		case "avg":
			out.Values[i] = ec._data_dictionary_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._data_dictionary_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._data_dictionary_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._data_dictionary_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._data_dictionary_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._data_dictionary_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._data_dictionary_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._data_dictionary_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._data_dictionary_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._data_dictionary_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._data_dictionary_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_avg_fieldsImplementors = []string{"data_dictionary_avg_fields"}

func (ec *executionContext) _data_dictionary_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_avg_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_avg_fields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_avg_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_categoryImplementors = []string{"data_dictionary_category"}

func (ec *executionContext) _data_dictionary_category(ctx context.Context, sel ast.SelectionSet, obj *model1.DataDictionaryCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_categoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category")
		case "category_code":
			out.Values[i] = ec._data_dictionary_category_category_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category_name":
			out.Values[i] = ec._data_dictionary_category_category_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._data_dictionary_category_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._data_dictionary_category_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._data_dictionary_category_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._data_dictionary_category_delete_by(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._data_dictionary_category_dictionary_category_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._data_dictionary_category_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._data_dictionary_category_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._data_dictionary_category_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._data_dictionary_category_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._data_dictionary_category_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_aggregateImplementors = []string{"data_dictionary_category_aggregate"}

func (ec *executionContext) _data_dictionary_category_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_aggregate")
		case "aggregate":
			out.Values[i] = ec._data_dictionary_category_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._data_dictionary_category_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_aggregate_fieldsImplementors = []string{"data_dictionary_category_aggregate_fields"}

func (ec *executionContext) _data_dictionary_category_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_aggregate_fields")
		case "avg":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._data_dictionary_category_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_avg_fieldsImplementors = []string{"data_dictionary_category_avg_fields"}

func (ec *executionContext) _data_dictionary_category_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_avg_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_category_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_max_fieldsImplementors = []string{"data_dictionary_category_max_fields"}

func (ec *executionContext) _data_dictionary_category_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_max_fields")
		case "category_code":
			out.Values[i] = ec._data_dictionary_category_max_fields_category_code(ctx, field, obj)
		case "category_name":
			out.Values[i] = ec._data_dictionary_category_max_fields_category_name(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._data_dictionary_category_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._data_dictionary_category_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._data_dictionary_category_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._data_dictionary_category_max_fields_delete_by(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._data_dictionary_category_max_fields_dictionary_category_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._data_dictionary_category_max_fields_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._data_dictionary_category_max_fields_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._data_dictionary_category_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._data_dictionary_category_max_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_min_fieldsImplementors = []string{"data_dictionary_category_min_fields"}

func (ec *executionContext) _data_dictionary_category_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_min_fields")
		case "category_code":
			out.Values[i] = ec._data_dictionary_category_min_fields_category_code(ctx, field, obj)
		case "category_name":
			out.Values[i] = ec._data_dictionary_category_min_fields_category_name(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._data_dictionary_category_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._data_dictionary_category_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._data_dictionary_category_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._data_dictionary_category_min_fields_delete_by(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._data_dictionary_category_min_fields_dictionary_category_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._data_dictionary_category_min_fields_id(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._data_dictionary_category_min_fields_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._data_dictionary_category_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._data_dictionary_category_min_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_mutation_responseImplementors = []string{"data_dictionary_category_mutation_response"}

func (ec *executionContext) _data_dictionary_category_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._data_dictionary_category_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._data_dictionary_category_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_stddev_fieldsImplementors = []string{"data_dictionary_category_stddev_fields"}

func (ec *executionContext) _data_dictionary_category_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_stddev_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_category_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_stddev_pop_fieldsImplementors = []string{"data_dictionary_category_stddev_pop_fields"}

func (ec *executionContext) _data_dictionary_category_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_category_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_stddev_samp_fieldsImplementors = []string{"data_dictionary_category_stddev_samp_fields"}

func (ec *executionContext) _data_dictionary_category_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_category_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_sum_fieldsImplementors = []string{"data_dictionary_category_sum_fields"}

func (ec *executionContext) _data_dictionary_category_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategorySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_sum_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_category_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_var_pop_fieldsImplementors = []string{"data_dictionary_category_var_pop_fields"}

func (ec *executionContext) _data_dictionary_category_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_var_pop_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_category_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_var_samp_fieldsImplementors = []string{"data_dictionary_category_var_samp_fields"}

func (ec *executionContext) _data_dictionary_category_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_var_samp_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_category_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_category_variance_fieldsImplementors = []string{"data_dictionary_category_variance_fields"}

func (ec *executionContext) _data_dictionary_category_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_category_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_category_variance_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_category_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_max_fieldsImplementors = []string{"data_dictionary_max_fields"}

func (ec *executionContext) _data_dictionary_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_max_fields")
		case "create_at":
			out.Values[i] = ec._data_dictionary_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._data_dictionary_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._data_dictionary_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._data_dictionary_max_fields_delete_by(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._data_dictionary_max_fields_dictionary_category_id(ctx, field, obj)
		case "dictionary_id":
			out.Values[i] = ec._data_dictionary_max_fields_dictionary_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._data_dictionary_max_fields_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._data_dictionary_max_fields_name(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._data_dictionary_max_fields_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._data_dictionary_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._data_dictionary_max_fields_update_by(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_max_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_min_fieldsImplementors = []string{"data_dictionary_min_fields"}

func (ec *executionContext) _data_dictionary_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_min_fields")
		case "create_at":
			out.Values[i] = ec._data_dictionary_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._data_dictionary_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._data_dictionary_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._data_dictionary_min_fields_delete_by(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._data_dictionary_min_fields_dictionary_category_id(ctx, field, obj)
		case "dictionary_id":
			out.Values[i] = ec._data_dictionary_min_fields_dictionary_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._data_dictionary_min_fields_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._data_dictionary_min_fields_name(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._data_dictionary_min_fields_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._data_dictionary_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._data_dictionary_min_fields_update_by(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_min_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_mutation_responseImplementors = []string{"data_dictionary_mutation_response"}

func (ec *executionContext) _data_dictionary_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._data_dictionary_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._data_dictionary_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_stddev_fieldsImplementors = []string{"data_dictionary_stddev_fields"}

func (ec *executionContext) _data_dictionary_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_stddev_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_stddev_fields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_stddev_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_stddev_pop_fieldsImplementors = []string{"data_dictionary_stddev_pop_fields"}

func (ec *executionContext) _data_dictionary_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_stddev_pop_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_stddev_pop_fields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_stddev_pop_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_stddev_samp_fieldsImplementors = []string{"data_dictionary_stddev_samp_fields"}

func (ec *executionContext) _data_dictionary_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_stddev_samp_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_stddev_samp_fields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_stddev_samp_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_sum_fieldsImplementors = []string{"data_dictionary_sum_fields"}

func (ec *executionContext) _data_dictionary_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionarySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_sum_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_sum_fields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_sum_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_var_pop_fieldsImplementors = []string{"data_dictionary_var_pop_fields"}

func (ec *executionContext) _data_dictionary_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_var_pop_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_var_pop_fields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_var_pop_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_var_samp_fieldsImplementors = []string{"data_dictionary_var_samp_fields"}

func (ec *executionContext) _data_dictionary_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_var_samp_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_var_samp_fields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_var_samp_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var data_dictionary_variance_fieldsImplementors = []string{"data_dictionary_variance_fields"}

func (ec *executionContext) _data_dictionary_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, data_dictionary_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("data_dictionary_variance_fields")
		case "id":
			out.Values[i] = ec._data_dictionary_variance_fields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._data_dictionary_variance_fields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNdata_dictionary2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DataDictionary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdata_dictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdata_dictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx context.Context, sel ast.SelectionSet, v *model1.DataDictionary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._data_dictionary(ctx, sel, v)
}

func (ec *executionContext) marshalNdata_dictionary_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregate(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryAggregate) graphql.Marshaler {
	return ec._data_dictionary_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdata_dictionary_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._data_dictionary_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdata_dictionary_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx context.Context, v interface{}) (model.DataDictionaryBoolExp, error) {
	res, err := ec.unmarshalInputdata_dictionary_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdata_dictionary_category2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DataDictionaryCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdata_dictionary_category2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdata_dictionary_category2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx context.Context, sel ast.SelectionSet, v *model1.DataDictionaryCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._data_dictionary_category(ctx, sel, v)
}

func (ec *executionContext) marshalNdata_dictionary_category_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregate(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryCategoryAggregate) graphql.Marshaler {
	return ec._data_dictionary_category_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdata_dictionary_category_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._data_dictionary_category_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdata_dictionary_category_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx context.Context, v interface{}) (model.DataDictionaryCategoryBoolExp, error) {
	res, err := ec.unmarshalInputdata_dictionary_category_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_category_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryConstraint(ctx context.Context, v interface{}) (model.DataDictionaryCategoryConstraint, error) {
	var res model.DataDictionaryCategoryConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdata_dictionary_category_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryConstraint(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryCategoryConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdata_dictionary_category_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx context.Context, v interface{}) (model.DataDictionaryCategoryInsertInput, error) {
	res, err := ec.unmarshalInputdata_dictionary_category_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_category_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DataDictionaryCategoryInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryCategoryInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdata_dictionary_category_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdata_dictionary_category_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryInsertInput, error) {
	res, err := ec.unmarshalInputdata_dictionary_category_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_category_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryOrderBy, error) {
	res, err := ec.unmarshalInputdata_dictionary_category_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_category_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryPkColumnsInput(ctx context.Context, v interface{}) (model.DataDictionaryCategoryPkColumnsInput, error) {
	res, err := ec.unmarshalInputdata_dictionary_category_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_category_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumn(ctx context.Context, v interface{}) (model.DataDictionaryCategorySelectColumn, error) {
	var res model.DataDictionaryCategorySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdata_dictionary_category_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryCategorySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdata_dictionary_category_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryUpdateColumn(ctx context.Context, v interface{}) (model.DataDictionaryCategoryUpdateColumn, error) {
	var res model.DataDictionaryCategoryUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdata_dictionary_category_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryCategoryUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdata_dictionary_category_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DataDictionaryCategoryUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DataDictionaryCategoryUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdata_dictionary_category_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdata_dictionary_category_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataDictionaryCategoryUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdata_dictionary_category_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNdata_dictionary_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryConstraint(ctx context.Context, v interface{}) (model.DataDictionaryConstraint, error) {
	var res model.DataDictionaryConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdata_dictionary_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryConstraint(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdata_dictionary_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx context.Context, v interface{}) (model.DataDictionaryInsertInput, error) {
	res, err := ec.unmarshalInputdata_dictionary_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DataDictionaryInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdata_dictionary_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdata_dictionary_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx context.Context, v interface{}) (*model.DataDictionaryInsertInput, error) {
	res, err := ec.unmarshalInputdata_dictionary_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryOrderBy, error) {
	res, err := ec.unmarshalInputdata_dictionary_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryPkColumnsInput(ctx context.Context, v interface{}) (model.DataDictionaryPkColumnsInput, error) {
	res, err := ec.unmarshalInputdata_dictionary_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdata_dictionary_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumn(ctx context.Context, v interface{}) (model.DataDictionarySelectColumn, error) {
	var res model.DataDictionarySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdata_dictionary_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DataDictionarySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdata_dictionary_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryUpdateColumn(ctx context.Context, v interface{}) (model.DataDictionaryUpdateColumn, error) {
	var res model.DataDictionaryUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdata_dictionary_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdata_dictionary_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DataDictionaryUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DataDictionaryUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdata_dictionary_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdata_dictionary_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataDictionaryUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdata_dictionary_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNpoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx context.Context, sel ast.SelectionSet, v *model1.DataDictionary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary(ctx, sel, v)
}

func (ec *executionContext) marshalOdata_dictionary_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdata_dictionary_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAvgOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdata_dictionary_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx context.Context, v interface{}) ([]*model.DataDictionaryBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdata_dictionary_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdata_dictionary_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx context.Context, v interface{}) (*model.DataDictionaryBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx context.Context, sel ast.SelectionSet, v *model1.DataDictionaryCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category(ctx, sel, v)
}

func (ec *executionContext) marshalOdata_dictionary_category_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdata_dictionary_category_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAvgOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx context.Context, v interface{}) ([]*model.DataDictionaryCategoryBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryCategoryBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdata_dictionary_category_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdata_dictionary_category_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryIncInput(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMaxOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMinOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOnConflict(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DataDictionaryCategoryOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryCategoryOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdata_dictionary_category_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdata_dictionary_category_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DataDictionaryCategorySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DataDictionaryCategorySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdata_dictionary_category_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdata_dictionary_category_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataDictionaryCategorySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdata_dictionary_category_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdata_dictionary_category_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySetInput(ctx context.Context, v interface{}) (*model.DataDictionaryCategorySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySumFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategorySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySumOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategorySumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarPopOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarSampOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_category_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_category_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_category_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarianceOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_category_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdata_dictionary_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryIncInput(ctx context.Context, v interface{}) (*model.DataDictionaryIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMaxOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMinOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOnConflict(ctx context.Context, v interface{}) (*model.DataDictionaryOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdata_dictionary_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DataDictionaryOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdata_dictionary_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdata_dictionary_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DataDictionarySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DataDictionarySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdata_dictionary_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdata_dictionary_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataDictionarySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdata_dictionary_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdata_dictionary_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySetInput(ctx context.Context, v interface{}) (*model.DataDictionarySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySumFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionarySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySumOrderBy(ctx context.Context, v interface{}) (*model.DataDictionarySumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarPopOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarSampOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdata_dictionary_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._data_dictionary_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdata_dictionary_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarianceOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdata_dictionary_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNpoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOpoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
