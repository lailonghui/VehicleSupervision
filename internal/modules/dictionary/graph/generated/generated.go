// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/dictionary/graph/model"
	model1 "VehicleSupervision/internal/modules/dictionary/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	DataDictionary struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		DictionaryID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Name                 func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Value                func(childComplexity int) int
	}

	DataDictionaryAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DataDictionaryAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DataDictionaryAvgFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryCategory struct {
		CategoryCode         func(childComplexity int) int
		CategoryName         func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	DataDictionaryCategoryAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DataDictionaryCategoryAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DataDictionaryCategoryAvgFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryMaxFields struct {
		CategoryCode         func(childComplexity int) int
		CategoryName         func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	DataDictionaryCategoryMinFields struct {
		CategoryCode         func(childComplexity int) int
		CategoryName         func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
	}

	DataDictionaryCategoryMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DataDictionaryCategoryStddevFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryStddevPopFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryStddevSampFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategorySumFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryVarPopFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryVarSampFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryCategoryVarianceFields struct {
		ID func(childComplexity int) int
	}

	DataDictionaryMaxFields struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		DictionaryID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Name                 func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Value                func(childComplexity int) int
	}

	DataDictionaryMinFields struct {
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DictionaryCategoryID func(childComplexity int) int
		DictionaryID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Name                 func(childComplexity int) int
		Remarks              func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Value                func(childComplexity int) int
	}

	DataDictionaryMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DataDictionaryStddevFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryStddevPopFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryStddevSampFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionarySumFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryVarPopFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryVarSampFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DataDictionaryVarianceFields struct {
		ID    func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Mutation struct {
		DeleteDataDictionary                  func(childComplexity int, where model.DataDictionaryBoolExp) int
		DeleteDataDictionaryByPk              func(childComplexity int, id int64) int
		DeleteDataDictionaryByUnionPk         func(childComplexity int, dictionaryID string) int
		DeleteDataDictionaryCategory          func(childComplexity int, where model.DataDictionaryCategoryBoolExp) int
		DeleteDataDictionaryCategoryByPk      func(childComplexity int, id int64) int
		DeleteDataDictionaryCategoryByUnionPk func(childComplexity int, dictionaryCategoryID string) int
		InsertDataDictionary                  func(childComplexity int, objects []*model.DataDictionaryInsertInput) int
		InsertDataDictionaryCategory          func(childComplexity int, objects []*model.DataDictionaryCategoryInsertInput) int
		InsertDataDictionaryCategoryOne       func(childComplexity int, objects model.DataDictionaryCategoryInsertInput) int
		InsertDataDictionaryOne               func(childComplexity int, objects model.DataDictionaryInsertInput) int
		UpdateDataDictionary                  func(childComplexity int, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, where model.DataDictionaryBoolExp) int
		UpdateDataDictionaryByPk              func(childComplexity int, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, id int64) int
		UpdateDataDictionaryByUnionPk         func(childComplexity int, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, dictionaryID string) int
		UpdateDataDictionaryCategory          func(childComplexity int, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, where model.DataDictionaryCategoryBoolExp) int
		UpdateDataDictionaryCategoryByPk      func(childComplexity int, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, id int64) int
		UpdateDataDictionaryCategoryByUnionPk func(childComplexity int, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, dictionaryCategoryID string) int
	}

	Query struct {
		DataDictionary                  func(childComplexity int, distinctOn []model.DataDictionarySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryOrderBy, where *model.DataDictionaryBoolExp) int
		DataDictionaryAggregate         func(childComplexity int, distinctOn []model.DataDictionarySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryOrderBy, where *model.DataDictionaryBoolExp) int
		DataDictionaryByPk              func(childComplexity int, id int64) int
		DataDictionaryByUnionPk         func(childComplexity int, dictionaryID string) int
		DataDictionaryCategory          func(childComplexity int, distinctOn []model.DataDictionaryCategorySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryCategoryOrderBy, where *model.DataDictionaryCategoryBoolExp) int
		DataDictionaryCategoryAggregate func(childComplexity int, distinctOn []model.DataDictionaryCategorySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryCategoryOrderBy, where *model.DataDictionaryCategoryBoolExp) int
		DataDictionaryCategoryByPk      func(childComplexity int, id int64) int
		DataDictionaryCategoryByUnionPk func(childComplexity int, dictionaryCategoryID string) int
	}
}

type MutationResolver interface {
	DeleteDataDictionary(ctx context.Context, where model.DataDictionaryBoolExp) (*model.DataDictionaryMutationResponse, error)
	DeleteDataDictionaryByPk(ctx context.Context, id int64) (*model1.DataDictionary, error)
	InsertDataDictionary(ctx context.Context, objects []*model.DataDictionaryInsertInput) (*model.DataDictionaryMutationResponse, error)
	InsertDataDictionaryOne(ctx context.Context, objects model.DataDictionaryInsertInput) (*model1.DataDictionary, error)
	UpdateDataDictionary(ctx context.Context, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, where model.DataDictionaryBoolExp) (*model.DataDictionaryMutationResponse, error)
	UpdateDataDictionaryByPk(ctx context.Context, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, id int64) (*model1.DataDictionary, error)
	UpdateDataDictionaryByUnionPk(ctx context.Context, inc *model.DataDictionaryIncInput, set *model.DataDictionarySetInput, dictionaryID string) (*model1.DataDictionary, error)
	DeleteDataDictionaryByUnionPk(ctx context.Context, dictionaryID string) (*model1.DataDictionary, error)
	DeleteDataDictionaryCategory(ctx context.Context, where model.DataDictionaryCategoryBoolExp) (*model.DataDictionaryCategoryMutationResponse, error)
	DeleteDataDictionaryCategoryByPk(ctx context.Context, id int64) (*model1.DataDictionaryCategory, error)
	InsertDataDictionaryCategory(ctx context.Context, objects []*model.DataDictionaryCategoryInsertInput) (*model.DataDictionaryCategoryMutationResponse, error)
	InsertDataDictionaryCategoryOne(ctx context.Context, objects model.DataDictionaryCategoryInsertInput) (*model1.DataDictionaryCategory, error)
	UpdateDataDictionaryCategory(ctx context.Context, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, where model.DataDictionaryCategoryBoolExp) (*model.DataDictionaryCategoryMutationResponse, error)
	UpdateDataDictionaryCategoryByPk(ctx context.Context, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, id int64) (*model1.DataDictionaryCategory, error)
	UpdateDataDictionaryCategoryByUnionPk(ctx context.Context, inc *model.DataDictionaryCategoryIncInput, set *model.DataDictionaryCategorySetInput, dictionaryCategoryID string) (*model1.DataDictionaryCategory, error)
	DeleteDataDictionaryCategoryByUnionPk(ctx context.Context, dictionaryCategoryID string) (*model1.DataDictionaryCategory, error)
}
type QueryResolver interface {
	DataDictionary(ctx context.Context, distinctOn []model.DataDictionarySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryOrderBy, where *model.DataDictionaryBoolExp) ([]*model1.DataDictionary, error)
	DataDictionaryAggregate(ctx context.Context, distinctOn []model.DataDictionarySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryOrderBy, where *model.DataDictionaryBoolExp) (*model.DataDictionaryAggregate, error)
	DataDictionaryByPk(ctx context.Context, id int64) (*model1.DataDictionary, error)
	DataDictionaryByUnionPk(ctx context.Context, dictionaryID string) (*model1.DataDictionary, error)
	DataDictionaryCategory(ctx context.Context, distinctOn []model.DataDictionaryCategorySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryCategoryOrderBy, where *model.DataDictionaryCategoryBoolExp) ([]*model1.DataDictionaryCategory, error)
	DataDictionaryCategoryAggregate(ctx context.Context, distinctOn []model.DataDictionaryCategorySelectColumn, limit *int, offset *int, orderBy []*model.DataDictionaryCategoryOrderBy, where *model.DataDictionaryCategoryBoolExp) (*model.DataDictionaryCategoryAggregate, error)
	DataDictionaryCategoryByPk(ctx context.Context, id int64) (*model1.DataDictionaryCategory, error)
	DataDictionaryCategoryByUnionPk(ctx context.Context, dictionaryCategoryID string) (*model1.DataDictionaryCategory, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "DataDictionary.created_at":
		if e.complexity.DataDictionary.CreatedAt == nil {
			break
		}

		return e.complexity.DataDictionary.CreatedAt(childComplexity), true

	case "DataDictionary.created_by":
		if e.complexity.DataDictionary.CreatedBy == nil {
			break
		}

		return e.complexity.DataDictionary.CreatedBy(childComplexity), true

	case "DataDictionary.deleted_at":
		if e.complexity.DataDictionary.DeletedAt == nil {
			break
		}

		return e.complexity.DataDictionary.DeletedAt(childComplexity), true

	case "DataDictionary.deleted_by":
		if e.complexity.DataDictionary.DeletedBy == nil {
			break
		}

		return e.complexity.DataDictionary.DeletedBy(childComplexity), true

	case "DataDictionary.dictionary_category_id":
		if e.complexity.DataDictionary.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionary.DictionaryCategoryID(childComplexity), true

	case "DataDictionary.dictionary_id":
		if e.complexity.DataDictionary.DictionaryID == nil {
			break
		}

		return e.complexity.DataDictionary.DictionaryID(childComplexity), true

	case "DataDictionary.id":
		if e.complexity.DataDictionary.ID == nil {
			break
		}

		return e.complexity.DataDictionary.ID(childComplexity), true

	case "DataDictionary.is_deleted":
		if e.complexity.DataDictionary.IsDeleted == nil {
			break
		}

		return e.complexity.DataDictionary.IsDeleted(childComplexity), true

	case "DataDictionary.name":
		if e.complexity.DataDictionary.Name == nil {
			break
		}

		return e.complexity.DataDictionary.Name(childComplexity), true

	case "DataDictionary.remarks":
		if e.complexity.DataDictionary.Remarks == nil {
			break
		}

		return e.complexity.DataDictionary.Remarks(childComplexity), true

	case "DataDictionary.updated_at":
		if e.complexity.DataDictionary.UpdatedAt == nil {
			break
		}

		return e.complexity.DataDictionary.UpdatedAt(childComplexity), true

	case "DataDictionary.updated_by":
		if e.complexity.DataDictionary.UpdatedBy == nil {
			break
		}

		return e.complexity.DataDictionary.UpdatedBy(childComplexity), true

	case "DataDictionary.value":
		if e.complexity.DataDictionary.Value == nil {
			break
		}

		return e.complexity.DataDictionary.Value(childComplexity), true

	case "DataDictionaryAggregate.aggregate":
		if e.complexity.DataDictionaryAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DataDictionaryAggregate.Aggregate(childComplexity), true

	case "DataDictionaryAggregateFields.avg":
		if e.complexity.DataDictionaryAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Avg(childComplexity), true

	case "DataDictionaryAggregateFields.count":
		if e.complexity.DataDictionaryAggregateFields.Count == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Count(childComplexity), true

	case "DataDictionaryAggregateFields.max":
		if e.complexity.DataDictionaryAggregateFields.Max == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Max(childComplexity), true

	case "DataDictionaryAggregateFields.min":
		if e.complexity.DataDictionaryAggregateFields.Min == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Min(childComplexity), true

	case "DataDictionaryAggregateFields.stddev":
		if e.complexity.DataDictionaryAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Stddev(childComplexity), true

	case "DataDictionaryAggregateFields.stddev_pop":
		if e.complexity.DataDictionaryAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.StddevPop(childComplexity), true

	case "DataDictionaryAggregateFields.stddev_samp":
		if e.complexity.DataDictionaryAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.StddevSamp(childComplexity), true

	case "DataDictionaryAggregateFields.sum":
		if e.complexity.DataDictionaryAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Sum(childComplexity), true

	case "DataDictionaryAggregateFields.var_pop":
		if e.complexity.DataDictionaryAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.VarPop(childComplexity), true

	case "DataDictionaryAggregateFields.var_samp":
		if e.complexity.DataDictionaryAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.VarSamp(childComplexity), true

	case "DataDictionaryAggregateFields.variance":
		if e.complexity.DataDictionaryAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DataDictionaryAggregateFields.Variance(childComplexity), true

	case "DataDictionaryAvgFields.id":
		if e.complexity.DataDictionaryAvgFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryAvgFields.ID(childComplexity), true

	case "DataDictionaryAvgFields.value":
		if e.complexity.DataDictionaryAvgFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryAvgFields.Value(childComplexity), true

	case "DataDictionaryCategory.category_code":
		if e.complexity.DataDictionaryCategory.CategoryCode == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.CategoryCode(childComplexity), true

	case "DataDictionaryCategory.category_name":
		if e.complexity.DataDictionaryCategory.CategoryName == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.CategoryName(childComplexity), true

	case "DataDictionaryCategory.created_at":
		if e.complexity.DataDictionaryCategory.CreatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.CreatedAt(childComplexity), true

	case "DataDictionaryCategory.created_by":
		if e.complexity.DataDictionaryCategory.CreatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.CreatedBy(childComplexity), true

	case "DataDictionaryCategory.deleted_at":
		if e.complexity.DataDictionaryCategory.DeletedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.DeletedAt(childComplexity), true

	case "DataDictionaryCategory.deleted_by":
		if e.complexity.DataDictionaryCategory.DeletedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.DeletedBy(childComplexity), true

	case "DataDictionaryCategory.dictionary_category_id":
		if e.complexity.DataDictionaryCategory.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.DictionaryCategoryID(childComplexity), true

	case "DataDictionaryCategory.id":
		if e.complexity.DataDictionaryCategory.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.ID(childComplexity), true

	case "DataDictionaryCategory.is_deleted":
		if e.complexity.DataDictionaryCategory.IsDeleted == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.IsDeleted(childComplexity), true

	case "DataDictionaryCategory.remarks":
		if e.complexity.DataDictionaryCategory.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.Remarks(childComplexity), true

	case "DataDictionaryCategory.updated_at":
		if e.complexity.DataDictionaryCategory.UpdatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.UpdatedAt(childComplexity), true

	case "DataDictionaryCategory.updated_by":
		if e.complexity.DataDictionaryCategory.UpdatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategory.UpdatedBy(childComplexity), true

	case "DataDictionaryCategoryAggregate.aggregate":
		if e.complexity.DataDictionaryCategoryAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregate.Aggregate(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.avg":
		if e.complexity.DataDictionaryCategoryAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Avg(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.count":
		if e.complexity.DataDictionaryCategoryAggregateFields.Count == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Count(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.max":
		if e.complexity.DataDictionaryCategoryAggregateFields.Max == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Max(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.min":
		if e.complexity.DataDictionaryCategoryAggregateFields.Min == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Min(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.stddev":
		if e.complexity.DataDictionaryCategoryAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Stddev(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.stddev_pop":
		if e.complexity.DataDictionaryCategoryAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.StddevPop(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.stddev_samp":
		if e.complexity.DataDictionaryCategoryAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.StddevSamp(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.sum":
		if e.complexity.DataDictionaryCategoryAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Sum(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.var_pop":
		if e.complexity.DataDictionaryCategoryAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.VarPop(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.var_samp":
		if e.complexity.DataDictionaryCategoryAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.VarSamp(childComplexity), true

	case "DataDictionaryCategoryAggregateFields.variance":
		if e.complexity.DataDictionaryCategoryAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAggregateFields.Variance(childComplexity), true

	case "DataDictionaryCategoryAvgFields.id":
		if e.complexity.DataDictionaryCategoryAvgFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryAvgFields.ID(childComplexity), true

	case "DataDictionaryCategoryMaxFields.category_code":
		if e.complexity.DataDictionaryCategoryMaxFields.CategoryCode == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.CategoryCode(childComplexity), true

	case "DataDictionaryCategoryMaxFields.category_name":
		if e.complexity.DataDictionaryCategoryMaxFields.CategoryName == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.CategoryName(childComplexity), true

	case "DataDictionaryCategoryMaxFields.created_at":
		if e.complexity.DataDictionaryCategoryMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.CreatedAt(childComplexity), true

	case "DataDictionaryCategoryMaxFields.created_by":
		if e.complexity.DataDictionaryCategoryMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.CreatedBy(childComplexity), true

	case "DataDictionaryCategoryMaxFields.deleted_at":
		if e.complexity.DataDictionaryCategoryMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.DeletedAt(childComplexity), true

	case "DataDictionaryCategoryMaxFields.deleted_by":
		if e.complexity.DataDictionaryCategoryMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.DeletedBy(childComplexity), true

	case "DataDictionaryCategoryMaxFields.dictionary_category_id":
		if e.complexity.DataDictionaryCategoryMaxFields.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.DictionaryCategoryID(childComplexity), true

	case "DataDictionaryCategoryMaxFields.id":
		if e.complexity.DataDictionaryCategoryMaxFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.ID(childComplexity), true

	case "DataDictionaryCategoryMaxFields.is_deleted":
		if e.complexity.DataDictionaryCategoryMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.IsDeleted(childComplexity), true

	case "DataDictionaryCategoryMaxFields.remarks":
		if e.complexity.DataDictionaryCategoryMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.Remarks(childComplexity), true

	case "DataDictionaryCategoryMaxFields.updated_at":
		if e.complexity.DataDictionaryCategoryMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.UpdatedAt(childComplexity), true

	case "DataDictionaryCategoryMaxFields.updated_by":
		if e.complexity.DataDictionaryCategoryMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMaxFields.UpdatedBy(childComplexity), true

	case "DataDictionaryCategoryMinFields.category_code":
		if e.complexity.DataDictionaryCategoryMinFields.CategoryCode == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.CategoryCode(childComplexity), true

	case "DataDictionaryCategoryMinFields.category_name":
		if e.complexity.DataDictionaryCategoryMinFields.CategoryName == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.CategoryName(childComplexity), true

	case "DataDictionaryCategoryMinFields.created_at":
		if e.complexity.DataDictionaryCategoryMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.CreatedAt(childComplexity), true

	case "DataDictionaryCategoryMinFields.created_by":
		if e.complexity.DataDictionaryCategoryMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.CreatedBy(childComplexity), true

	case "DataDictionaryCategoryMinFields.deleted_at":
		if e.complexity.DataDictionaryCategoryMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.DeletedAt(childComplexity), true

	case "DataDictionaryCategoryMinFields.deleted_by":
		if e.complexity.DataDictionaryCategoryMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.DeletedBy(childComplexity), true

	case "DataDictionaryCategoryMinFields.dictionary_category_id":
		if e.complexity.DataDictionaryCategoryMinFields.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.DictionaryCategoryID(childComplexity), true

	case "DataDictionaryCategoryMinFields.id":
		if e.complexity.DataDictionaryCategoryMinFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.ID(childComplexity), true

	case "DataDictionaryCategoryMinFields.is_deleted":
		if e.complexity.DataDictionaryCategoryMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.IsDeleted(childComplexity), true

	case "DataDictionaryCategoryMinFields.remarks":
		if e.complexity.DataDictionaryCategoryMinFields.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.Remarks(childComplexity), true

	case "DataDictionaryCategoryMinFields.updated_at":
		if e.complexity.DataDictionaryCategoryMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.UpdatedAt(childComplexity), true

	case "DataDictionaryCategoryMinFields.updated_by":
		if e.complexity.DataDictionaryCategoryMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMinFields.UpdatedBy(childComplexity), true

	case "DataDictionaryCategoryMutationResponse.affected_rows":
		if e.complexity.DataDictionaryCategoryMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMutationResponse.AffectedRows(childComplexity), true

	case "DataDictionaryCategoryMutationResponse.returning":
		if e.complexity.DataDictionaryCategoryMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryMutationResponse.Returning(childComplexity), true

	case "DataDictionaryCategoryStddevFields.id":
		if e.complexity.DataDictionaryCategoryStddevFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryStddevFields.ID(childComplexity), true

	case "DataDictionaryCategoryStddevPopFields.id":
		if e.complexity.DataDictionaryCategoryStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryStddevPopFields.ID(childComplexity), true

	case "DataDictionaryCategoryStddevSampFields.id":
		if e.complexity.DataDictionaryCategoryStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryStddevSampFields.ID(childComplexity), true

	case "DataDictionaryCategorySumFields.id":
		if e.complexity.DataDictionaryCategorySumFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategorySumFields.ID(childComplexity), true

	case "DataDictionaryCategoryVarPopFields.id":
		if e.complexity.DataDictionaryCategoryVarPopFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryVarPopFields.ID(childComplexity), true

	case "DataDictionaryCategoryVarSampFields.id":
		if e.complexity.DataDictionaryCategoryVarSampFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryVarSampFields.ID(childComplexity), true

	case "DataDictionaryCategoryVarianceFields.id":
		if e.complexity.DataDictionaryCategoryVarianceFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryCategoryVarianceFields.ID(childComplexity), true

	case "DataDictionaryMaxFields.created_at":
		if e.complexity.DataDictionaryMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.CreatedAt(childComplexity), true

	case "DataDictionaryMaxFields.created_by":
		if e.complexity.DataDictionaryMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.CreatedBy(childComplexity), true

	case "DataDictionaryMaxFields.deleted_at":
		if e.complexity.DataDictionaryMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.DeletedAt(childComplexity), true

	case "DataDictionaryMaxFields.deleted_by":
		if e.complexity.DataDictionaryMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.DeletedBy(childComplexity), true

	case "DataDictionaryMaxFields.dictionary_category_id":
		if e.complexity.DataDictionaryMaxFields.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.DictionaryCategoryID(childComplexity), true

	case "DataDictionaryMaxFields.dictionary_id":
		if e.complexity.DataDictionaryMaxFields.DictionaryID == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.DictionaryID(childComplexity), true

	case "DataDictionaryMaxFields.id":
		if e.complexity.DataDictionaryMaxFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.ID(childComplexity), true

	case "DataDictionaryMaxFields.is_deleted":
		if e.complexity.DataDictionaryMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.IsDeleted(childComplexity), true

	case "DataDictionaryMaxFields.name":
		if e.complexity.DataDictionaryMaxFields.Name == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.Name(childComplexity), true

	case "DataDictionaryMaxFields.remarks":
		if e.complexity.DataDictionaryMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.Remarks(childComplexity), true

	case "DataDictionaryMaxFields.updated_at":
		if e.complexity.DataDictionaryMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.UpdatedAt(childComplexity), true

	case "DataDictionaryMaxFields.updated_by":
		if e.complexity.DataDictionaryMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.UpdatedBy(childComplexity), true

	case "DataDictionaryMaxFields.value":
		if e.complexity.DataDictionaryMaxFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryMaxFields.Value(childComplexity), true

	case "DataDictionaryMinFields.created_at":
		if e.complexity.DataDictionaryMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.CreatedAt(childComplexity), true

	case "DataDictionaryMinFields.created_by":
		if e.complexity.DataDictionaryMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.CreatedBy(childComplexity), true

	case "DataDictionaryMinFields.deleted_at":
		if e.complexity.DataDictionaryMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.DeletedAt(childComplexity), true

	case "DataDictionaryMinFields.deleted_by":
		if e.complexity.DataDictionaryMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.DeletedBy(childComplexity), true

	case "DataDictionaryMinFields.dictionary_category_id":
		if e.complexity.DataDictionaryMinFields.DictionaryCategoryID == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.DictionaryCategoryID(childComplexity), true

	case "DataDictionaryMinFields.dictionary_id":
		if e.complexity.DataDictionaryMinFields.DictionaryID == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.DictionaryID(childComplexity), true

	case "DataDictionaryMinFields.id":
		if e.complexity.DataDictionaryMinFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.ID(childComplexity), true

	case "DataDictionaryMinFields.is_deleted":
		if e.complexity.DataDictionaryMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.IsDeleted(childComplexity), true

	case "DataDictionaryMinFields.name":
		if e.complexity.DataDictionaryMinFields.Name == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.Name(childComplexity), true

	case "DataDictionaryMinFields.remarks":
		if e.complexity.DataDictionaryMinFields.Remarks == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.Remarks(childComplexity), true

	case "DataDictionaryMinFields.updated_at":
		if e.complexity.DataDictionaryMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.UpdatedAt(childComplexity), true

	case "DataDictionaryMinFields.updated_by":
		if e.complexity.DataDictionaryMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.UpdatedBy(childComplexity), true

	case "DataDictionaryMinFields.value":
		if e.complexity.DataDictionaryMinFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryMinFields.Value(childComplexity), true

	case "DataDictionaryMutationResponse.affected_rows":
		if e.complexity.DataDictionaryMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DataDictionaryMutationResponse.AffectedRows(childComplexity), true

	case "DataDictionaryMutationResponse.returning":
		if e.complexity.DataDictionaryMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DataDictionaryMutationResponse.Returning(childComplexity), true

	case "DataDictionaryStddevFields.id":
		if e.complexity.DataDictionaryStddevFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryStddevFields.ID(childComplexity), true

	case "DataDictionaryStddevFields.value":
		if e.complexity.DataDictionaryStddevFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryStddevFields.Value(childComplexity), true

	case "DataDictionaryStddevPopFields.id":
		if e.complexity.DataDictionaryStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryStddevPopFields.ID(childComplexity), true

	case "DataDictionaryStddevPopFields.value":
		if e.complexity.DataDictionaryStddevPopFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryStddevPopFields.Value(childComplexity), true

	case "DataDictionaryStddevSampFields.id":
		if e.complexity.DataDictionaryStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryStddevSampFields.ID(childComplexity), true

	case "DataDictionaryStddevSampFields.value":
		if e.complexity.DataDictionaryStddevSampFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryStddevSampFields.Value(childComplexity), true

	case "DataDictionarySumFields.id":
		if e.complexity.DataDictionarySumFields.ID == nil {
			break
		}

		return e.complexity.DataDictionarySumFields.ID(childComplexity), true

	case "DataDictionarySumFields.value":
		if e.complexity.DataDictionarySumFields.Value == nil {
			break
		}

		return e.complexity.DataDictionarySumFields.Value(childComplexity), true

	case "DataDictionaryVarPopFields.id":
		if e.complexity.DataDictionaryVarPopFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryVarPopFields.ID(childComplexity), true

	case "DataDictionaryVarPopFields.value":
		if e.complexity.DataDictionaryVarPopFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryVarPopFields.Value(childComplexity), true

	case "DataDictionaryVarSampFields.id":
		if e.complexity.DataDictionaryVarSampFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryVarSampFields.ID(childComplexity), true

	case "DataDictionaryVarSampFields.value":
		if e.complexity.DataDictionaryVarSampFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryVarSampFields.Value(childComplexity), true

	case "DataDictionaryVarianceFields.id":
		if e.complexity.DataDictionaryVarianceFields.ID == nil {
			break
		}

		return e.complexity.DataDictionaryVarianceFields.ID(childComplexity), true

	case "DataDictionaryVarianceFields.value":
		if e.complexity.DataDictionaryVarianceFields.Value == nil {
			break
		}

		return e.complexity.DataDictionaryVarianceFields.Value(childComplexity), true

	case "Mutation.delete_data_dictionary":
		if e.complexity.Mutation.DeleteDataDictionary == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionary(childComplexity, args["where"].(model.DataDictionaryBoolExp)), true

	case "Mutation.delete_data_dictionary_by_pk":
		if e.complexity.Mutation.DeleteDataDictionaryByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionaryByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_data_dictionary_by_union_pk":
		if e.complexity.Mutation.DeleteDataDictionaryByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionaryByUnionPk(childComplexity, args["dictionary_id"].(string)), true

	case "Mutation.delete_data_dictionary_category":
		if e.complexity.Mutation.DeleteDataDictionaryCategory == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionaryCategory(childComplexity, args["where"].(model.DataDictionaryCategoryBoolExp)), true

	case "Mutation.delete_data_dictionary_category_by_pk":
		if e.complexity.Mutation.DeleteDataDictionaryCategoryByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_category_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionaryCategoryByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_data_dictionary_category_by_union_pk":
		if e.complexity.Mutation.DeleteDataDictionaryCategoryByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_data_dictionary_category_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDictionaryCategoryByUnionPk(childComplexity, args["dictionary_category_id"].(string)), true

	case "Mutation.insert_data_dictionary":
		if e.complexity.Mutation.InsertDataDictionary == nil {
			break
		}

		args, err := ec.field_Mutation_insert_data_dictionary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDataDictionary(childComplexity, args["objects"].([]*model.DataDictionaryInsertInput)), true

	case "Mutation.insert_data_dictionary_category":
		if e.complexity.Mutation.InsertDataDictionaryCategory == nil {
			break
		}

		args, err := ec.field_Mutation_insert_data_dictionary_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDataDictionaryCategory(childComplexity, args["objects"].([]*model.DataDictionaryCategoryInsertInput)), true

	case "Mutation.insert_data_dictionary_category_one":
		if e.complexity.Mutation.InsertDataDictionaryCategoryOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_data_dictionary_category_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDataDictionaryCategoryOne(childComplexity, args["objects"].(model.DataDictionaryCategoryInsertInput)), true

	case "Mutation.insert_data_dictionary_one":
		if e.complexity.Mutation.InsertDataDictionaryOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_data_dictionary_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDataDictionaryOne(childComplexity, args["objects"].(model.DataDictionaryInsertInput)), true

	case "Mutation.update_data_dictionary":
		if e.complexity.Mutation.UpdateDataDictionary == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionary(childComplexity, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["where"].(model.DataDictionaryBoolExp)), true

	case "Mutation.update_data_dictionary_by_pk":
		if e.complexity.Mutation.UpdateDataDictionaryByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionaryByPk(childComplexity, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["id"].(int64)), true

	case "Mutation.update_data_dictionary_by_union_pk":
		if e.complexity.Mutation.UpdateDataDictionaryByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionaryByUnionPk(childComplexity, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["dictionary_id"].(string)), true

	case "Mutation.update_data_dictionary_category":
		if e.complexity.Mutation.UpdateDataDictionaryCategory == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionaryCategory(childComplexity, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["where"].(model.DataDictionaryCategoryBoolExp)), true

	case "Mutation.update_data_dictionary_category_by_pk":
		if e.complexity.Mutation.UpdateDataDictionaryCategoryByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_category_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionaryCategoryByPk(childComplexity, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["id"].(int64)), true

	case "Mutation.update_data_dictionary_category_by_union_pk":
		if e.complexity.Mutation.UpdateDataDictionaryCategoryByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_data_dictionary_category_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDictionaryCategoryByUnionPk(childComplexity, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["dictionary_category_id"].(string)), true

	case "Query.data_dictionary":
		if e.complexity.Query.DataDictionary == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionary(childComplexity, args["distinct_on"].([]model.DataDictionarySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryOrderBy), args["where"].(*model.DataDictionaryBoolExp)), true

	case "Query.data_dictionary_aggregate":
		if e.complexity.Query.DataDictionaryAggregate == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryAggregate(childComplexity, args["distinct_on"].([]model.DataDictionarySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryOrderBy), args["where"].(*model.DataDictionaryBoolExp)), true

	case "Query.data_dictionary_by_pk":
		if e.complexity.Query.DataDictionaryByPk == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryByPk(childComplexity, args["id"].(int64)), true

	case "Query.data_dictionary_by_union_pk":
		if e.complexity.Query.DataDictionaryByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryByUnionPk(childComplexity, args["dictionary_id"].(string)), true

	case "Query.data_dictionary_category":
		if e.complexity.Query.DataDictionaryCategory == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryCategory(childComplexity, args["distinct_on"].([]model.DataDictionaryCategorySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryCategoryOrderBy), args["where"].(*model.DataDictionaryCategoryBoolExp)), true

	case "Query.data_dictionary_category_aggregate":
		if e.complexity.Query.DataDictionaryCategoryAggregate == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_category_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryCategoryAggregate(childComplexity, args["distinct_on"].([]model.DataDictionaryCategorySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryCategoryOrderBy), args["where"].(*model.DataDictionaryCategoryBoolExp)), true

	case "Query.data_dictionary_category_by_pk":
		if e.complexity.Query.DataDictionaryCategoryByPk == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_category_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryCategoryByPk(childComplexity, args["id"].(int64)), true

	case "Query.data_dictionary_category_by_union_pk":
		if e.complexity.Query.DataDictionaryCategoryByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_data_dictionary_category_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataDictionaryCategoryByUnionPk(childComplexity, args["dictionary_category_id"].(string)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/data_dictionary.graphqls", Input: `"""
数据字典
"""
type DataDictionary {
	"""
	ID
	"""
	id: Bigint!
	"""
	字典ID
	"""
	dictionary_id: String!
	"""
	字典类型ID
	"""
	dictionary_category_id: String!
	"""
	名称
	"""
	name: String!
	"""
	值
	"""
	value: Int!
	"""
	备注
	"""
	remarks: String
	"""
	创建时间
	"""
	created_at: Timestamptz!
	"""
	创建人
	"""
	created_by: String
	"""
	修改时间
	"""
	updated_at: Timestamptz
	"""
	修改人
	"""
	updated_by: String
	"""
	删除时间
	"""
	deleted_at: Timestamptz
	"""
	删除人
	"""
	deleted_by: String
	"""
	是否删除
	"""
	is_deleted: Boolean!
}
"""
aggregated selection of "data_dictionary"
"""
type DataDictionaryAggregate {
	aggregate: DataDictionaryAggregateFields
}
"""
aggregate fields of "data_dictionary"
"""
type DataDictionaryAggregateFields {
	avg: DataDictionaryAvgFields
	count: Int
	max: DataDictionaryMaxFields
	min: DataDictionaryMinFields
	stddev: DataDictionaryStddevFields
	stddev_pop: DataDictionaryStddevPopFields
	stddev_samp: DataDictionaryStddevSampFields
	sum: DataDictionarySumFields
	var_pop: DataDictionaryVarPopFields
	var_samp: DataDictionaryVarSampFields
	variance: DataDictionaryVarianceFields
}
"""
aggregate avg on columns of table "data_dictionary"
"""
type DataDictionaryAvgFields {
	id: Bigint
	value: Int
}
"""
aggregate max on columns of table "data_dictionary"
"""
type DataDictionaryMaxFields {
	id: Bigint
	dictionary_id: String
	dictionary_category_id: String
	name: String
	value: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "data_dictionary"
"""
type DataDictionaryMinFields {
	id: Bigint
	dictionary_id: String
	dictionary_category_id: String
	name: String
	value: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "data_dictionary"
"""
type DataDictionaryStddevFields {
	id: Bigint
	value: Int
}
"""
aggregate stddev_pop on columns of table "data_dictionary"
"""
type DataDictionaryStddevPopFields {
	id: Bigint
	value: Int
}
"""
aggregate stddev_samp on columns of table "data_dictionary"
"""
type DataDictionaryStddevSampFields {
	id: Bigint
	value: Int
}
"""
aggregate sum on columns of table "data_dictionary"
"""
type DataDictionarySumFields {
	id: Bigint
	value: Int
}
"""
aggregate var_pop on columns of table "data_dictionary"
"""
type DataDictionaryVarPopFields {
	id: Bigint
	value: Int
}
"""
aggregate var_samp on columns of table "data_dictionary"
"""
type DataDictionaryVarSampFields {
	id: Bigint
	value: Int
}
"""
aggregate variance on columns of table "data_dictionary"
"""
type DataDictionaryVarianceFields {
	id: Bigint
	value: Int
}
"""
response of any mutation on the table "data_dictionary"
"""
type DataDictionaryMutationResponse {
	affected_rows: Int!
	returning: [DataDictionary!]!
}
"""
ordering options when selecting data from "data_dictionary"
"""
input DataDictionaryOrderBy {
	id: OrderBy
	dictionary_id: OrderBy
	dictionary_category_id: OrderBy
	name: OrderBy
	value: OrderBy
	remarks: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'data_dictionary'.
"""
input DataDictionaryBoolExp {
	_and: [DataDictionaryBoolExp]
	_not: DataDictionaryBoolExp
	_or: [DataDictionaryBoolExp]
	id: BigintComparisonExp
	dictionary_id: StringComparisonExp
	dictionary_category_id: StringComparisonExp
	name: StringComparisonExp
	value: IntComparisonExp
	remarks: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "data_dictionary"
"""
input DataDictionaryInsertInput {
	dictionary_id: String!
	dictionary_category_id: String!
	name: String!
	value: Int!
	remarks: String
	created_at: Timestamptz!
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean!
}
"""
input type for incrementing integer column in table "data_dictionary"
"""
input DataDictionaryIncInput {
	id: Bigint
	value: Int
}
"""
input type for updating data in table "data_dictionary"
"""
input DataDictionarySetInput {
	id: Bigint
	dictionary_id: String
	dictionary_category_id: String
	name: String
	value: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum DataDictionarySelectColumn {
	"""
	ID
	"""
	id
	"""
	字典ID
	"""
	dictionary_id
	"""
	字典类型ID
	"""
	dictionary_category_id
	"""
	名称
	"""
	name
	"""
	值
	"""
	value
	"""
	备注
	"""
	remarks
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	created_by
	"""
	修改时间
	"""
	updated_at
	"""
	修改人
	"""
	updated_by
	"""
	删除时间
	"""
	deleted_at
	"""
	删除人
	"""
	deleted_by
	"""
	是否删除
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	data_dictionary(distinct_on: [DataDictionarySelectColumn!], limit: Int, offset: Int, order_by: [DataDictionaryOrderBy!], where: DataDictionaryBoolExp): [DataDictionary!]!
	"""
	聚合查询
	"""
	data_dictionary_aggregate(distinct_on: [DataDictionarySelectColumn!], limit: Int, offset: Int, order_by: [DataDictionaryOrderBy!], where: DataDictionaryBoolExp): DataDictionaryAggregate!
	"""
	主键查询
	"""
	data_dictionary_by_pk(id: Bigint!): DataDictionary!
	"""
	联合主键查询
	"""
	data_dictionary_by_union_pk(dictionary_id: String!): DataDictionary!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_data_dictionary(where: DataDictionaryBoolExp!): DataDictionaryMutationResponse
	"""
	根据主键删除记录
	"""
	delete_data_dictionary_by_pk(id: Bigint!): DataDictionary
	"""
	插入
	"""
	insert_data_dictionary(objects: [DataDictionaryInsertInput!]!): DataDictionaryMutationResponse
	"""
	插入一条记录
	"""
	insert_data_dictionary_one(objects: DataDictionaryInsertInput!): DataDictionary
	"""
	更新
	"""
	update_data_dictionary(_inc: DataDictionaryIncInput, _set: DataDictionarySetInput, where: DataDictionaryBoolExp!): DataDictionaryMutationResponse
	"""
	根据主键更新
	"""
	update_data_dictionary_by_pk(_inc: DataDictionaryIncInput, _set: DataDictionarySetInput, id: Bigint!): DataDictionary
	"""
	根据联合主键更新
	"""
	update_data_dictionary_by_union_pk(_inc: DataDictionaryIncInput, _set: DataDictionarySetInput, dictionary_id: String!): DataDictionary
	"""
	根据联合主键删除记录
	"""
	delete_data_dictionary_by_union_pk(dictionary_id: String!): DataDictionary
}
`, BuiltIn: false},
	{Name: "graph/graphqls/data_dictionary_category.graphqls", Input: `"""
数据字典类型
"""
type DataDictionaryCategory {
	"""
	ID
	"""
	id: Bigint!
	"""
	字典类型ID
	"""
	dictionary_category_id: String!
	"""
	类型名称
	"""
	category_name: String!
	"""
	类型编号
	"""
	category_code: String!
	"""
	备注
	"""
	remarks: String
	"""
	创建时间
	"""
	created_at: Timestamptz!
	"""
	创建人
	"""
	created_by: String
	"""
	修改时间
	"""
	updated_at: Timestamptz
	"""
	修改人
	"""
	updated_by: String
	"""
	删除时间
	"""
	deleted_at: Timestamptz
	"""
	删除人
	"""
	deleted_by: String
	"""
	是否删除
	"""
	is_deleted: Boolean!
}
"""
aggregated selection of "data_dictionary_category"
"""
type DataDictionaryCategoryAggregate {
	aggregate: DataDictionaryCategoryAggregateFields
}
"""
aggregate fields of "data_dictionary_category"
"""
type DataDictionaryCategoryAggregateFields {
	avg: DataDictionaryCategoryAvgFields
	count: Int
	max: DataDictionaryCategoryMaxFields
	min: DataDictionaryCategoryMinFields
	stddev: DataDictionaryCategoryStddevFields
	stddev_pop: DataDictionaryCategoryStddevPopFields
	stddev_samp: DataDictionaryCategoryStddevSampFields
	sum: DataDictionaryCategorySumFields
	var_pop: DataDictionaryCategoryVarPopFields
	var_samp: DataDictionaryCategoryVarSampFields
	variance: DataDictionaryCategoryVarianceFields
}
"""
aggregate avg on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryMaxFields {
	id: Bigint
	dictionary_category_id: String
	category_name: String
	category_code: String
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryMinFields {
	id: Bigint
	dictionary_category_id: String
	category_name: String
	category_code: String
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "data_dictionary_category"
"""
type DataDictionaryCategorySumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "data_dictionary_category"
"""
type DataDictionaryCategoryVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "data_dictionary_category"
"""
type DataDictionaryCategoryMutationResponse {
	affected_rows: Int!
	returning: [DataDictionaryCategory!]!
}
"""
ordering options when selecting data from "data_dictionary_category"
"""
input DataDictionaryCategoryOrderBy {
	id: OrderBy
	dictionary_category_id: OrderBy
	category_name: OrderBy
	category_code: OrderBy
	remarks: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'data_dictionary_category'.
"""
input DataDictionaryCategoryBoolExp {
	_and: [DataDictionaryCategoryBoolExp]
	_not: DataDictionaryCategoryBoolExp
	_or: [DataDictionaryCategoryBoolExp]
	id: BigintComparisonExp
	dictionary_category_id: StringComparisonExp
	category_name: StringComparisonExp
	category_code: StringComparisonExp
	remarks: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "data_dictionary_category"
"""
input DataDictionaryCategoryInsertInput {
	dictionary_category_id: String!
	category_name: String!
	category_code: String!
	remarks: String
	created_at: Timestamptz!
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean!
}
"""
input type for incrementing integer column in table "data_dictionary_category"
"""
input DataDictionaryCategoryIncInput {
	id: Bigint
}
"""
input type for updating data in table "data_dictionary_category"
"""
input DataDictionaryCategorySetInput {
	id: Bigint
	dictionary_category_id: String
	category_name: String
	category_code: String
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum DataDictionaryCategorySelectColumn {
	"""
	ID
	"""
	id
	"""
	字典类型ID
	"""
	dictionary_category_id
	"""
	类型名称
	"""
	category_name
	"""
	类型编号
	"""
	category_code
	"""
	备注
	"""
	remarks
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	created_by
	"""
	修改时间
	"""
	updated_at
	"""
	修改人
	"""
	updated_by
	"""
	删除时间
	"""
	deleted_at
	"""
	删除人
	"""
	deleted_by
	"""
	是否删除
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	data_dictionary_category(distinct_on: [DataDictionaryCategorySelectColumn!], limit: Int, offset: Int, order_by: [DataDictionaryCategoryOrderBy!], where: DataDictionaryCategoryBoolExp): [DataDictionaryCategory!]!
	"""
	聚合查询
	"""
	data_dictionary_category_aggregate(distinct_on: [DataDictionaryCategorySelectColumn!], limit: Int, offset: Int, order_by: [DataDictionaryCategoryOrderBy!], where: DataDictionaryCategoryBoolExp): DataDictionaryCategoryAggregate!
	"""
	主键查询
	"""
	data_dictionary_category_by_pk(id: Bigint!): DataDictionaryCategory!
	"""
	联合主键查询
	"""
	data_dictionary_category_by_union_pk(dictionary_category_id: String!): DataDictionaryCategory!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_data_dictionary_category(where: DataDictionaryCategoryBoolExp!): DataDictionaryCategoryMutationResponse
	"""
	根据主键删除记录
	"""
	delete_data_dictionary_category_by_pk(id: Bigint!): DataDictionaryCategory
	"""
	插入
	"""
	insert_data_dictionary_category(objects: [DataDictionaryCategoryInsertInput!]!): DataDictionaryCategoryMutationResponse
	"""
	插入一条记录
	"""
	insert_data_dictionary_category_one(objects: DataDictionaryCategoryInsertInput!): DataDictionaryCategory
	"""
	更新
	"""
	update_data_dictionary_category(_inc: DataDictionaryCategoryIncInput, _set: DataDictionaryCategorySetInput, where: DataDictionaryCategoryBoolExp!): DataDictionaryCategoryMutationResponse
	"""
	根据主键更新
	"""
	update_data_dictionary_category_by_pk(_inc: DataDictionaryCategoryIncInput, _set: DataDictionaryCategorySetInput, id: Bigint!): DataDictionaryCategory
	"""
	根据联合主键更新
	"""
	update_data_dictionary_category_by_union_pk(_inc: DataDictionaryCategoryIncInput, _set: DataDictionaryCategorySetInput, dictionary_category_id: String!): DataDictionaryCategory
	"""
	根据联合主键删除记录
	"""
	delete_data_dictionary_category_by_union_pk(dictionary_category_id: String!): DataDictionaryCategory
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_data_dictionary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDictionaryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDataDictionaryBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_data_dictionary_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_data_dictionary_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dictionary_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dictionary_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_data_dictionary_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDictionaryCategoryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDataDictionaryCategoryBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_data_dictionary_category_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_data_dictionary_category_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dictionary_category_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dictionary_category_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_data_dictionary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DataDictionaryInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDataDictionaryInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_data_dictionary_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DataDictionaryCategoryInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDataDictionaryCategoryInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_data_dictionary_category_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDictionaryCategoryInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDataDictionaryCategoryInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_data_dictionary_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDictionaryInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDataDictionaryInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODataDictionaryIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionarySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODataDictionarySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DataDictionaryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDataDictionaryBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODataDictionaryIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionarySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODataDictionarySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODataDictionaryIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionarySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODataDictionarySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["dictionary_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dictionary_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryCategoryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODataDictionaryCategoryIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionaryCategorySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODataDictionaryCategorySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DataDictionaryCategoryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDataDictionaryCategoryBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_category_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryCategoryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODataDictionaryCategoryIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionaryCategorySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODataDictionaryCategorySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_data_dictionary_category_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDictionaryCategoryIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODataDictionaryCategoryIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DataDictionaryCategorySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODataDictionaryCategorySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["dictionary_category_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dictionary_category_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionarySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODataDictionarySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DataDictionaryOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODataDictionaryOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DataDictionaryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODataDictionaryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionarySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODataDictionarySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DataDictionaryOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODataDictionaryOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DataDictionaryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODataDictionaryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dictionary_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dictionary_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_category_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionaryCategorySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODataDictionaryCategorySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DataDictionaryCategoryOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODataDictionaryCategoryOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DataDictionaryCategoryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODataDictionaryCategoryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DataDictionaryCategorySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODataDictionaryCategorySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DataDictionaryCategoryOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODataDictionaryCategoryOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DataDictionaryCategoryBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODataDictionaryCategoryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_category_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_data_dictionary_category_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dictionary_category_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dictionary_category_id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _DataDictionary_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_dictionary_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_name(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_value(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionary_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryAggregateFields)
	fc.Result = res
	return ec.marshalODataDictionaryAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryAvgFields)
	fc.Result = res
	return ec.marshalODataDictionaryAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMaxFields)
	fc.Result = res
	return ec.marshalODataDictionaryMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMinFields)
	fc.Result = res
	return ec.marshalODataDictionaryMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryStddevFields)
	fc.Result = res
	return ec.marshalODataDictionaryStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryStddevPopFields)
	fc.Result = res
	return ec.marshalODataDictionaryStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryStddevSampFields)
	fc.Result = res
	return ec.marshalODataDictionaryStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionarySumFields)
	fc.Result = res
	return ec.marshalODataDictionarySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryVarPopFields)
	fc.Result = res
	return ec.marshalODataDictionaryVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryVarSampFields)
	fc.Result = res
	return ec.marshalODataDictionaryVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryVarianceFields)
	fc.Result = res
	return ec.marshalODataDictionaryVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryAvgFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_category_name(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_category_code(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategory_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DataDictionaryCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryAggregateFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryAvgFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMaxFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMinFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryStddevFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryStddevPopFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryStddevSampFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategorySumFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategorySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryVarPopFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryVarSampFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryVarianceFields)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_category_name(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_category_code(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_category_name(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_category_code(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalNDataDictionaryCategory2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategorySumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategorySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategorySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryCategoryVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryCategoryVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryCategoryVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_dictionary_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_name(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_dictionary_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_dictionary_category_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictionaryCategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_name(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionary)
	fc.Result = res
	return ec.marshalNDataDictionary2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryStddevFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryStddevPopFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryStddevSampFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionarySumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionarySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionarySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionarySumFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionarySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionarySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryVarPopFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryVarSampFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataDictionaryVarianceFields_value(ctx context.Context, field graphql.CollectedField, obj *model.DataDictionaryVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataDictionaryVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionary(rctx, args["where"].(model.DataDictionaryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMutationResponse)
	fc.Result = res
	return ec.marshalODataDictionaryMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionaryByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalODataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_data_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_data_dictionary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDataDictionary(rctx, args["objects"].([]*model.DataDictionaryInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMutationResponse)
	fc.Result = res
	return ec.marshalODataDictionaryMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_data_dictionary_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_data_dictionary_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDataDictionaryOne(rctx, args["objects"].(model.DataDictionaryInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalODataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionary(rctx, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["where"].(model.DataDictionaryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryMutationResponse)
	fc.Result = res
	return ec.marshalODataDictionaryMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionaryByPk(rctx, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalODataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionaryByUnionPk(rctx, args["_inc"].(*model.DataDictionaryIncInput), args["_set"].(*model.DataDictionarySetInput), args["dictionary_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalODataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionaryByUnionPk(rctx, args["dictionary_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalODataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionaryCategory(rctx, args["where"].(model.DataDictionaryCategoryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMutationResponse)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary_category_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_category_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionaryCategoryByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalODataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_data_dictionary_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_data_dictionary_category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDataDictionaryCategory(rctx, args["objects"].([]*model.DataDictionaryCategoryInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMutationResponse)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_data_dictionary_category_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_data_dictionary_category_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDataDictionaryCategoryOne(rctx, args["objects"].(model.DataDictionaryCategoryInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalODataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionaryCategory(rctx, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["where"].(model.DataDictionaryCategoryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryMutationResponse)
	fc.Result = res
	return ec.marshalODataDictionaryCategoryMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary_category_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_category_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionaryCategoryByPk(rctx, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalODataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_data_dictionary_category_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_data_dictionary_category_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDictionaryCategoryByUnionPk(rctx, args["_inc"].(*model.DataDictionaryCategoryIncInput), args["_set"].(*model.DataDictionaryCategorySetInput), args["dictionary_category_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalODataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_data_dictionary_category_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_data_dictionary_category_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDictionaryCategoryByUnionPk(rctx, args["dictionary_category_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalODataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionary(rctx, args["distinct_on"].([]model.DataDictionarySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryOrderBy), args["where"].(*model.DataDictionaryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionary)
	fc.Result = res
	return ec.marshalNDataDictionary2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryAggregate(rctx, args["distinct_on"].([]model.DataDictionarySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryOrderBy), args["where"].(*model.DataDictionaryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryAggregate)
	fc.Result = res
	return ec.marshalNDataDictionaryAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalNDataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryByUnionPk(rctx, args["dictionary_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionary)
	fc.Result = res
	return ec.marshalNDataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryCategory(rctx, args["distinct_on"].([]model.DataDictionaryCategorySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryCategoryOrderBy), args["where"].(*model.DataDictionaryCategoryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalNDataDictionaryCategory2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_category_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_category_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryCategoryAggregate(rctx, args["distinct_on"].([]model.DataDictionaryCategorySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DataDictionaryCategoryOrderBy), args["where"].(*model.DataDictionaryCategoryBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DataDictionaryCategoryAggregate)
	fc.Result = res
	return ec.marshalNDataDictionaryCategoryAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_category_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_category_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryCategoryByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalNDataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_data_dictionary_category_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_data_dictionary_category_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataDictionaryCategoryByUnionPk(rctx, args["dictionary_category_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DataDictionaryCategory)
	fc.Result = res
	return ec.marshalNDataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryBoolExp(ctx context.Context, obj interface{}) (model.DataDictionaryBoolExp, error) {
	var it model.DataDictionaryBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODataDictionaryBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODataDictionaryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODataDictionaryBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryCategoryBoolExp(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryBoolExp, error) {
	var it model.DataDictionaryCategoryBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODataDictionaryCategoryBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODataDictionaryCategoryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODataDictionaryCategoryBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryCategoryIncInput(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryIncInput, error) {
	var it model.DataDictionaryCategoryIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryCategoryInsertInput(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryInsertInput, error) {
	var it model.DataDictionaryCategoryInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryCategoryOrderBy(ctx context.Context, obj interface{}) (model.DataDictionaryCategoryOrderBy, error) {
	var it model.DataDictionaryCategoryOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryCategorySetInput(ctx context.Context, obj interface{}) (model.DataDictionaryCategorySetInput, error) {
	var it model.DataDictionaryCategorySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_name"))
			it.CategoryName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category_code"))
			it.CategoryCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryIncInput(ctx context.Context, obj interface{}) (model.DataDictionaryIncInput, error) {
	var it model.DataDictionaryIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryInsertInput(ctx context.Context, obj interface{}) (model.DataDictionaryInsertInput, error) {
	var it model.DataDictionaryInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionaryOrderBy(ctx context.Context, obj interface{}) (model.DataDictionaryOrderBy, error) {
	var it model.DataDictionaryOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDictionarySetInput(ctx context.Context, obj interface{}) (model.DataDictionarySetInput, error) {
	var it model.DataDictionarySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_id"))
			it.DictionaryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dictionary_category_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dictionary_category_id"))
			it.DictionaryCategoryID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var dataDictionaryImplementors = []string{"DataDictionary"}

func (ec *executionContext) _DataDictionary(ctx context.Context, sel ast.SelectionSet, obj *model1.DataDictionary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionary")
		case "id":
			out.Values[i] = ec._DataDictionary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dictionary_id":
			out.Values[i] = ec._DataDictionary_dictionary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dictionary_category_id":
			out.Values[i] = ec._DataDictionary_dictionary_category_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._DataDictionary_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._DataDictionary_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._DataDictionary_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DataDictionary_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DataDictionary_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DataDictionary_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DataDictionary_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DataDictionary_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DataDictionary_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DataDictionary_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryAggregateImplementors = []string{"DataDictionaryAggregate"}

func (ec *executionContext) _DataDictionaryAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryAggregate")
		case "aggregate":
			out.Values[i] = ec._DataDictionaryAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryAggregateFieldsImplementors = []string{"DataDictionaryAggregateFields"}

func (ec *executionContext) _DataDictionaryAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryAggregateFields")
		case "avg":
			out.Values[i] = ec._DataDictionaryAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DataDictionaryAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DataDictionaryAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DataDictionaryAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DataDictionaryAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DataDictionaryAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DataDictionaryAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DataDictionaryAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DataDictionaryAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DataDictionaryAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DataDictionaryAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryAvgFieldsImplementors = []string{"DataDictionaryAvgFields"}

func (ec *executionContext) _DataDictionaryAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryAvgFields")
		case "id":
			out.Values[i] = ec._DataDictionaryAvgFields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryAvgFields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryImplementors = []string{"DataDictionaryCategory"}

func (ec *executionContext) _DataDictionaryCategory(ctx context.Context, sel ast.SelectionSet, obj *model1.DataDictionaryCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategory")
		case "id":
			out.Values[i] = ec._DataDictionaryCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dictionary_category_id":
			out.Values[i] = ec._DataDictionaryCategory_dictionary_category_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category_name":
			out.Values[i] = ec._DataDictionaryCategory_category_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category_code":
			out.Values[i] = ec._DataDictionaryCategory_category_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._DataDictionaryCategory_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DataDictionaryCategory_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DataDictionaryCategory_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DataDictionaryCategory_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DataDictionaryCategory_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DataDictionaryCategory_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DataDictionaryCategory_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DataDictionaryCategory_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryAggregateImplementors = []string{"DataDictionaryCategoryAggregate"}

func (ec *executionContext) _DataDictionaryCategoryAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryAggregate")
		case "aggregate":
			out.Values[i] = ec._DataDictionaryCategoryAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryAggregateFieldsImplementors = []string{"DataDictionaryCategoryAggregateFields"}

func (ec *executionContext) _DataDictionaryCategoryAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryAggregateFields")
		case "avg":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DataDictionaryCategoryAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryAvgFieldsImplementors = []string{"DataDictionaryCategoryAvgFields"}

func (ec *executionContext) _DataDictionaryCategoryAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryAvgFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryMaxFieldsImplementors = []string{"DataDictionaryCategoryMaxFields"}

func (ec *executionContext) _DataDictionaryCategoryMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryMaxFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_id(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_dictionary_category_id(ctx, field, obj)
		case "category_name":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_category_name(ctx, field, obj)
		case "category_code":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_category_code(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DataDictionaryCategoryMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryMinFieldsImplementors = []string{"DataDictionaryCategoryMinFields"}

func (ec *executionContext) _DataDictionaryCategoryMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryMinFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_id(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_dictionary_category_id(ctx, field, obj)
		case "category_name":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_category_name(ctx, field, obj)
		case "category_code":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_category_code(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DataDictionaryCategoryMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryMutationResponseImplementors = []string{"DataDictionaryCategoryMutationResponse"}

func (ec *executionContext) _DataDictionaryCategoryMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DataDictionaryCategoryMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DataDictionaryCategoryMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryStddevFieldsImplementors = []string{"DataDictionaryCategoryStddevFields"}

func (ec *executionContext) _DataDictionaryCategoryStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryStddevFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryStddevPopFieldsImplementors = []string{"DataDictionaryCategoryStddevPopFields"}

func (ec *executionContext) _DataDictionaryCategoryStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryStddevPopFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryStddevSampFieldsImplementors = []string{"DataDictionaryCategoryStddevSampFields"}

func (ec *executionContext) _DataDictionaryCategoryStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryStddevSampFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategorySumFieldsImplementors = []string{"DataDictionaryCategorySumFields"}

func (ec *executionContext) _DataDictionaryCategorySumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategorySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategorySumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategorySumFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategorySumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryVarPopFieldsImplementors = []string{"DataDictionaryCategoryVarPopFields"}

func (ec *executionContext) _DataDictionaryCategoryVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryVarPopFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryVarSampFieldsImplementors = []string{"DataDictionaryCategoryVarSampFields"}

func (ec *executionContext) _DataDictionaryCategoryVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryVarSampFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryCategoryVarianceFieldsImplementors = []string{"DataDictionaryCategoryVarianceFields"}

func (ec *executionContext) _DataDictionaryCategoryVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryCategoryVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryCategoryVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryCategoryVarianceFields")
		case "id":
			out.Values[i] = ec._DataDictionaryCategoryVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryMaxFieldsImplementors = []string{"DataDictionaryMaxFields"}

func (ec *executionContext) _DataDictionaryMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryMaxFields")
		case "id":
			out.Values[i] = ec._DataDictionaryMaxFields_id(ctx, field, obj)
		case "dictionary_id":
			out.Values[i] = ec._DataDictionaryMaxFields_dictionary_id(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._DataDictionaryMaxFields_dictionary_category_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DataDictionaryMaxFields_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryMaxFields_value(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DataDictionaryMaxFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DataDictionaryMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DataDictionaryMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DataDictionaryMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DataDictionaryMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DataDictionaryMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DataDictionaryMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DataDictionaryMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryMinFieldsImplementors = []string{"DataDictionaryMinFields"}

func (ec *executionContext) _DataDictionaryMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryMinFields")
		case "id":
			out.Values[i] = ec._DataDictionaryMinFields_id(ctx, field, obj)
		case "dictionary_id":
			out.Values[i] = ec._DataDictionaryMinFields_dictionary_id(ctx, field, obj)
		case "dictionary_category_id":
			out.Values[i] = ec._DataDictionaryMinFields_dictionary_category_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DataDictionaryMinFields_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryMinFields_value(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DataDictionaryMinFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DataDictionaryMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DataDictionaryMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DataDictionaryMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DataDictionaryMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DataDictionaryMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DataDictionaryMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DataDictionaryMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryMutationResponseImplementors = []string{"DataDictionaryMutationResponse"}

func (ec *executionContext) _DataDictionaryMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DataDictionaryMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DataDictionaryMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryStddevFieldsImplementors = []string{"DataDictionaryStddevFields"}

func (ec *executionContext) _DataDictionaryStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryStddevFields")
		case "id":
			out.Values[i] = ec._DataDictionaryStddevFields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryStddevFields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryStddevPopFieldsImplementors = []string{"DataDictionaryStddevPopFields"}

func (ec *executionContext) _DataDictionaryStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryStddevPopFields")
		case "id":
			out.Values[i] = ec._DataDictionaryStddevPopFields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryStddevPopFields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryStddevSampFieldsImplementors = []string{"DataDictionaryStddevSampFields"}

func (ec *executionContext) _DataDictionaryStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryStddevSampFields")
		case "id":
			out.Values[i] = ec._DataDictionaryStddevSampFields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryStddevSampFields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionarySumFieldsImplementors = []string{"DataDictionarySumFields"}

func (ec *executionContext) _DataDictionarySumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionarySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionarySumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionarySumFields")
		case "id":
			out.Values[i] = ec._DataDictionarySumFields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionarySumFields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryVarPopFieldsImplementors = []string{"DataDictionaryVarPopFields"}

func (ec *executionContext) _DataDictionaryVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryVarPopFields")
		case "id":
			out.Values[i] = ec._DataDictionaryVarPopFields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryVarPopFields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryVarSampFieldsImplementors = []string{"DataDictionaryVarSampFields"}

func (ec *executionContext) _DataDictionaryVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryVarSampFields")
		case "id":
			out.Values[i] = ec._DataDictionaryVarSampFields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryVarSampFields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataDictionaryVarianceFieldsImplementors = []string{"DataDictionaryVarianceFields"}

func (ec *executionContext) _DataDictionaryVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DataDictionaryVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataDictionaryVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataDictionaryVarianceFields")
		case "id":
			out.Values[i] = ec._DataDictionaryVarianceFields_id(ctx, field, obj)
		case "value":
			out.Values[i] = ec._DataDictionaryVarianceFields_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_data_dictionary":
			out.Values[i] = ec._Mutation_delete_data_dictionary(ctx, field)
		case "delete_data_dictionary_by_pk":
			out.Values[i] = ec._Mutation_delete_data_dictionary_by_pk(ctx, field)
		case "insert_data_dictionary":
			out.Values[i] = ec._Mutation_insert_data_dictionary(ctx, field)
		case "insert_data_dictionary_one":
			out.Values[i] = ec._Mutation_insert_data_dictionary_one(ctx, field)
		case "update_data_dictionary":
			out.Values[i] = ec._Mutation_update_data_dictionary(ctx, field)
		case "update_data_dictionary_by_pk":
			out.Values[i] = ec._Mutation_update_data_dictionary_by_pk(ctx, field)
		case "update_data_dictionary_by_union_pk":
			out.Values[i] = ec._Mutation_update_data_dictionary_by_union_pk(ctx, field)
		case "delete_data_dictionary_by_union_pk":
			out.Values[i] = ec._Mutation_delete_data_dictionary_by_union_pk(ctx, field)
		case "delete_data_dictionary_category":
			out.Values[i] = ec._Mutation_delete_data_dictionary_category(ctx, field)
		case "delete_data_dictionary_category_by_pk":
			out.Values[i] = ec._Mutation_delete_data_dictionary_category_by_pk(ctx, field)
		case "insert_data_dictionary_category":
			out.Values[i] = ec._Mutation_insert_data_dictionary_category(ctx, field)
		case "insert_data_dictionary_category_one":
			out.Values[i] = ec._Mutation_insert_data_dictionary_category_one(ctx, field)
		case "update_data_dictionary_category":
			out.Values[i] = ec._Mutation_update_data_dictionary_category(ctx, field)
		case "update_data_dictionary_category_by_pk":
			out.Values[i] = ec._Mutation_update_data_dictionary_category_by_pk(ctx, field)
		case "update_data_dictionary_category_by_union_pk":
			out.Values[i] = ec._Mutation_update_data_dictionary_category_by_union_pk(ctx, field)
		case "delete_data_dictionary_category_by_union_pk":
			out.Values[i] = ec._Mutation_delete_data_dictionary_category_by_union_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "data_dictionary":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_category(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_category_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_category_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_category_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_category_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "data_dictionary_category_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_data_dictionary_category_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDataDictionary2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx context.Context, sel ast.SelectionSet, v model1.DataDictionary) graphql.Marshaler {
	return ec._DataDictionary(ctx, sel, &v)
}

func (ec *executionContext) marshalNDataDictionary2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DataDictionary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx context.Context, sel ast.SelectionSet, v *model1.DataDictionary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DataDictionary(ctx, sel, v)
}

func (ec *executionContext) marshalNDataDictionaryAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregate(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryAggregate) graphql.Marshaler {
	return ec._DataDictionaryAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDataDictionaryAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DataDictionaryAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDataDictionaryBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx context.Context, v interface{}) (model.DataDictionaryBoolExp, error) {
	res, err := ec.unmarshalInputDataDictionaryBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataDictionaryCategory2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx context.Context, sel ast.SelectionSet, v model1.DataDictionaryCategory) graphql.Marshaler {
	return ec._DataDictionaryCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNDataDictionaryCategory2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DataDictionaryCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx context.Context, sel ast.SelectionSet, v *model1.DataDictionaryCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DataDictionaryCategory(ctx, sel, v)
}

func (ec *executionContext) marshalNDataDictionaryCategoryAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregate(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryCategoryAggregate) graphql.Marshaler {
	return ec._DataDictionaryCategoryAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDataDictionaryCategoryAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DataDictionaryCategoryAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDataDictionaryCategoryBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx context.Context, v interface{}) (model.DataDictionaryCategoryBoolExp, error) {
	res, err := ec.unmarshalInputDataDictionaryCategoryBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDataDictionaryCategoryInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx context.Context, v interface{}) (model.DataDictionaryCategoryInsertInput, error) {
	res, err := ec.unmarshalInputDataDictionaryCategoryInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDataDictionaryCategoryInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DataDictionaryCategoryInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryCategoryInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataDictionaryCategoryInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDataDictionaryCategoryInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryInsertInput(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryInsertInput, error) {
	res, err := ec.unmarshalInputDataDictionaryCategoryInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDataDictionaryCategoryOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryOrderBy, error) {
	res, err := ec.unmarshalInputDataDictionaryCategoryOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDataDictionaryCategorySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumn(ctx context.Context, v interface{}) (model.DataDictionaryCategorySelectColumn, error) {
	var res model.DataDictionaryCategorySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataDictionaryCategorySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DataDictionaryCategorySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDataDictionaryInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx context.Context, v interface{}) (model.DataDictionaryInsertInput, error) {
	res, err := ec.unmarshalInputDataDictionaryInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDataDictionaryInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DataDictionaryInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataDictionaryInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDataDictionaryInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryInsertInput(ctx context.Context, v interface{}) (*model.DataDictionaryInsertInput, error) {
	res, err := ec.unmarshalInputDataDictionaryInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDataDictionaryOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderBy(ctx context.Context, v interface{}) (*model.DataDictionaryOrderBy, error) {
	res, err := ec.unmarshalInputDataDictionaryOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDataDictionarySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumn(ctx context.Context, v interface{}) (model.DataDictionarySelectColumn, error) {
	var res model.DataDictionarySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataDictionarySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DataDictionarySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataDictionary2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionary(ctx context.Context, sel ast.SelectionSet, v *model1.DataDictionary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionary(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataDictionaryBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx context.Context, v interface{}) ([]*model.DataDictionaryBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODataDictionaryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODataDictionaryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryBoolExp(ctx context.Context, v interface{}) (*model.DataDictionaryBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataDictionaryBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataDictionaryCategory2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋmodelᚐDataDictionaryCategory(ctx context.Context, sel ast.SelectionSet, v *model1.DataDictionaryCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategory(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataDictionaryCategoryBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx context.Context, v interface{}) ([]*model.DataDictionaryCategoryBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryCategoryBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODataDictionaryCategoryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODataDictionaryCategoryBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryBoolExp(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataDictionaryCategoryBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODataDictionaryCategoryIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryIncInput(ctx context.Context, v interface{}) (*model.DataDictionaryCategoryIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataDictionaryCategoryIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataDictionaryCategoryMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataDictionaryCategoryOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DataDictionaryCategoryOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryCategoryOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataDictionaryCategoryOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODataDictionaryCategorySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DataDictionaryCategorySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DataDictionaryCategorySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataDictionaryCategorySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODataDictionaryCategorySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataDictionaryCategorySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataDictionaryCategorySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODataDictionaryCategorySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySetInput(ctx context.Context, v interface{}) (*model.DataDictionaryCategorySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataDictionaryCategorySetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataDictionaryCategoryStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategorySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategorySumFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategorySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategorySumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryCategoryVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryCategoryVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryCategoryVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryCategoryVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataDictionaryIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryIncInput(ctx context.Context, v interface{}) (*model.DataDictionaryIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataDictionaryIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataDictionaryMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataDictionaryOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DataDictionaryOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DataDictionaryOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataDictionaryOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODataDictionarySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DataDictionarySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DataDictionarySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataDictionarySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODataDictionarySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataDictionarySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataDictionarySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODataDictionarySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySetInput(ctx context.Context, v interface{}) (*model.DataDictionarySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataDictionarySetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataDictionaryStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionarySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionarySumFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionarySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionarySumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODataDictionaryVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdictionaryᚋgraphᚋmodelᚐDataDictionaryVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DataDictionaryVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataDictionaryVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
