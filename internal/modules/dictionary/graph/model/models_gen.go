// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/dictionary/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "data_dictionary"
type DataDictionaryAggregate struct {
	Aggregate *DataDictionaryAggregateFields `json:"aggregate"`
}

// aggregate fields of "data_dictionary"
type DataDictionaryAggregateFields struct {
	Avg        *DataDictionaryAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *DataDictionaryMaxFields        `json:"max"`
	Min        *DataDictionaryMinFields        `json:"min"`
	Stddev     *DataDictionaryStddevFields     `json:"stddev"`
	StddevPop  *DataDictionaryStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DataDictionaryStddevSampFields `json:"stddev_samp"`
	Sum        *DataDictionarySumFields        `json:"sum"`
	VarPop     *DataDictionaryVarPopFields     `json:"var_pop"`
	VarSamp    *DataDictionaryVarSampFields    `json:"var_samp"`
	Variance   *DataDictionaryVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "data_dictionary"
type DataDictionaryAvgFields struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'data_dictionary'.
type DataDictionaryBoolExp struct {
	And                  []*DataDictionaryBoolExp        `json:"_and"`
	Not                  *DataDictionaryBoolExp          `json:"_not"`
	Or                   []*DataDictionaryBoolExp        `json:"_or"`
	ID                   *model.BigintComparisonExp      `json:"id"`
	DictionaryID         *model.StringComparisonExp      `json:"dictionary_id"`
	DictionaryCategoryID *model.StringComparisonExp      `json:"dictionary_category_id"`
	Name                 *model.StringComparisonExp      `json:"name"`
	Value                *model.IntComparisonExp         `json:"value"`
	Remarks              *model.StringComparisonExp      `json:"remarks"`
	CreatedAt            *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy            *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt            *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy            *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt            *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy            *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted            *model.BooleanComparisonExp     `json:"is_deleted"`
}

// aggregated selection of "data_dictionary_category"
type DataDictionaryCategoryAggregate struct {
	Aggregate *DataDictionaryCategoryAggregateFields `json:"aggregate"`
}

// aggregate fields of "data_dictionary_category"
type DataDictionaryCategoryAggregateFields struct {
	Avg        *DataDictionaryCategoryAvgFields        `json:"avg"`
	Count      *int                                    `json:"count"`
	Max        *DataDictionaryCategoryMaxFields        `json:"max"`
	Min        *DataDictionaryCategoryMinFields        `json:"min"`
	Stddev     *DataDictionaryCategoryStddevFields     `json:"stddev"`
	StddevPop  *DataDictionaryCategoryStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DataDictionaryCategoryStddevSampFields `json:"stddev_samp"`
	Sum        *DataDictionaryCategorySumFields        `json:"sum"`
	VarPop     *DataDictionaryCategoryVarPopFields     `json:"var_pop"`
	VarSamp    *DataDictionaryCategoryVarSampFields    `json:"var_samp"`
	Variance   *DataDictionaryCategoryVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "data_dictionary_category"
type DataDictionaryCategoryAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'data_dictionary_category'.
type DataDictionaryCategoryBoolExp struct {
	And                  []*DataDictionaryCategoryBoolExp `json:"_and"`
	Not                  *DataDictionaryCategoryBoolExp   `json:"_not"`
	Or                   []*DataDictionaryCategoryBoolExp `json:"_or"`
	ID                   *model.BigintComparisonExp       `json:"id"`
	DictionaryCategoryID *model.StringComparisonExp       `json:"dictionary_category_id"`
	CategoryName         *model.StringComparisonExp       `json:"category_name"`
	CategoryCode         *model.StringComparisonExp       `json:"category_code"`
	Remarks              *model.StringComparisonExp       `json:"remarks"`
	CreatedAt            *model.TimestamptzComparisonExp  `json:"created_at"`
	CreatedBy            *model.StringComparisonExp       `json:"created_by"`
	UpdatedAt            *model.TimestamptzComparisonExp  `json:"updated_at"`
	UpdatedBy            *model.StringComparisonExp       `json:"updated_by"`
	DeletedAt            *model.TimestamptzComparisonExp  `json:"deleted_at"`
	DeletedBy            *model.StringComparisonExp       `json:"deleted_by"`
	IsDeleted            *model.BooleanComparisonExp      `json:"is_deleted"`
}

// input type for incrementing integer column in table "data_dictionary_category"
type DataDictionaryCategoryIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "data_dictionary_category"
type DataDictionaryCategoryInsertInput struct {
	DictionaryCategoryID string     `json:"dictionary_category_id"`
	CategoryName         string     `json:"category_name"`
	CategoryCode         string     `json:"category_code"`
	Remarks              *string    `json:"remarks"`
	CreatedAt            time.Time  `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            bool       `json:"is_deleted"`
}

// aggregate max on columns of table "data_dictionary_category"
type DataDictionaryCategoryMaxFields struct {
	ID                   *int64     `json:"id"`
	DictionaryCategoryID *string    `json:"dictionary_category_id"`
	CategoryName         *string    `json:"category_name"`
	CategoryCode         *string    `json:"category_code"`
	Remarks              *string    `json:"remarks"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "data_dictionary_category"
type DataDictionaryCategoryMinFields struct {
	ID                   *int64     `json:"id"`
	DictionaryCategoryID *string    `json:"dictionary_category_id"`
	CategoryName         *string    `json:"category_name"`
	CategoryCode         *string    `json:"category_code"`
	Remarks              *string    `json:"remarks"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
}

// response of any mutation on the table "data_dictionary_category"
type DataDictionaryCategoryMutationResponse struct {
	AffectedRows int                              `json:"affected_rows"`
	Returning    []*model1.DataDictionaryCategory `json:"returning"`
}

// ordering options when selecting data from "data_dictionary_category"
type DataDictionaryCategoryOrderBy struct {
	ID                   *model.OrderBy `json:"id"`
	DictionaryCategoryID *model.OrderBy `json:"dictionary_category_id"`
	CategoryName         *model.OrderBy `json:"category_name"`
	CategoryCode         *model.OrderBy `json:"category_code"`
	Remarks              *model.OrderBy `json:"remarks"`
	CreatedAt            *model.OrderBy `json:"created_at"`
	CreatedBy            *model.OrderBy `json:"created_by"`
	UpdatedAt            *model.OrderBy `json:"updated_at"`
	UpdatedBy            *model.OrderBy `json:"updated_by"`
	DeletedAt            *model.OrderBy `json:"deleted_at"`
	DeletedBy            *model.OrderBy `json:"deleted_by"`
	IsDeleted            *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "data_dictionary_category"
type DataDictionaryCategorySetInput struct {
	ID                   *int64     `json:"id"`
	DictionaryCategoryID *string    `json:"dictionary_category_id"`
	CategoryName         *string    `json:"category_name"`
	CategoryCode         *string    `json:"category_code"`
	Remarks              *string    `json:"remarks"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "data_dictionary_category"
type DataDictionaryCategoryStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "data_dictionary_category"
type DataDictionaryCategoryStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "data_dictionary_category"
type DataDictionaryCategoryStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "data_dictionary_category"
type DataDictionaryCategorySumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "data_dictionary_category"
type DataDictionaryCategoryVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "data_dictionary_category"
type DataDictionaryCategoryVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "data_dictionary_category"
type DataDictionaryCategoryVarianceFields struct {
	ID *int64 `json:"id"`
}

// input type for incrementing integer column in table "data_dictionary"
type DataDictionaryIncInput struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// input type for inserting data into table "data_dictionary"
type DataDictionaryInsertInput struct {
	DictionaryID         string     `json:"dictionary_id"`
	DictionaryCategoryID string     `json:"dictionary_category_id"`
	Name                 string     `json:"name"`
	Value                int        `json:"value"`
	Remarks              *string    `json:"remarks"`
	CreatedAt            time.Time  `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            bool       `json:"is_deleted"`
}

// aggregate max on columns of table "data_dictionary"
type DataDictionaryMaxFields struct {
	ID                   *int64     `json:"id"`
	DictionaryID         *string    `json:"dictionary_id"`
	DictionaryCategoryID *string    `json:"dictionary_category_id"`
	Name                 *string    `json:"name"`
	Value                *int       `json:"value"`
	Remarks              *string    `json:"remarks"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "data_dictionary"
type DataDictionaryMinFields struct {
	ID                   *int64     `json:"id"`
	DictionaryID         *string    `json:"dictionary_id"`
	DictionaryCategoryID *string    `json:"dictionary_category_id"`
	Name                 *string    `json:"name"`
	Value                *int       `json:"value"`
	Remarks              *string    `json:"remarks"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
}

// response of any mutation on the table "data_dictionary"
type DataDictionaryMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.DataDictionary `json:"returning"`
}

// ordering options when selecting data from "data_dictionary"
type DataDictionaryOrderBy struct {
	ID                   *model.OrderBy `json:"id"`
	DictionaryID         *model.OrderBy `json:"dictionary_id"`
	DictionaryCategoryID *model.OrderBy `json:"dictionary_category_id"`
	Name                 *model.OrderBy `json:"name"`
	Value                *model.OrderBy `json:"value"`
	Remarks              *model.OrderBy `json:"remarks"`
	CreatedAt            *model.OrderBy `json:"created_at"`
	CreatedBy            *model.OrderBy `json:"created_by"`
	UpdatedAt            *model.OrderBy `json:"updated_at"`
	UpdatedBy            *model.OrderBy `json:"updated_by"`
	DeletedAt            *model.OrderBy `json:"deleted_at"`
	DeletedBy            *model.OrderBy `json:"deleted_by"`
	IsDeleted            *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "data_dictionary"
type DataDictionarySetInput struct {
	ID                   *int64     `json:"id"`
	DictionaryID         *string    `json:"dictionary_id"`
	DictionaryCategoryID *string    `json:"dictionary_category_id"`
	Name                 *string    `json:"name"`
	Value                *int       `json:"value"`
	Remarks              *string    `json:"remarks"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "data_dictionary"
type DataDictionaryStddevFields struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// aggregate stddev_pop on columns of table "data_dictionary"
type DataDictionaryStddevPopFields struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// aggregate stddev_samp on columns of table "data_dictionary"
type DataDictionaryStddevSampFields struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// aggregate sum on columns of table "data_dictionary"
type DataDictionarySumFields struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// aggregate var_pop on columns of table "data_dictionary"
type DataDictionaryVarPopFields struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// aggregate var_samp on columns of table "data_dictionary"
type DataDictionaryVarSampFields struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// aggregate variance on columns of table "data_dictionary"
type DataDictionaryVarianceFields struct {
	ID    *int64 `json:"id"`
	Value *int   `json:"value"`
}

// 可选select
type DataDictionaryCategorySelectColumn string

const (
	// ID
	DataDictionaryCategorySelectColumnID DataDictionaryCategorySelectColumn = "id"
	// 字典类型ID
	DataDictionaryCategorySelectColumnDictionaryCategoryID DataDictionaryCategorySelectColumn = "dictionary_category_id"
	// 类型名称
	DataDictionaryCategorySelectColumnCategoryName DataDictionaryCategorySelectColumn = "category_name"
	// 类型编号
	DataDictionaryCategorySelectColumnCategoryCode DataDictionaryCategorySelectColumn = "category_code"
	// 备注
	DataDictionaryCategorySelectColumnRemarks DataDictionaryCategorySelectColumn = "remarks"
	// 创建时间
	DataDictionaryCategorySelectColumnCreatedAt DataDictionaryCategorySelectColumn = "created_at"
	// 创建人
	DataDictionaryCategorySelectColumnCreatedBy DataDictionaryCategorySelectColumn = "created_by"
	// 修改时间
	DataDictionaryCategorySelectColumnUpdatedAt DataDictionaryCategorySelectColumn = "updated_at"
	// 修改人
	DataDictionaryCategorySelectColumnUpdatedBy DataDictionaryCategorySelectColumn = "updated_by"
	// 删除时间
	DataDictionaryCategorySelectColumnDeletedAt DataDictionaryCategorySelectColumn = "deleted_at"
	// 删除人
	DataDictionaryCategorySelectColumnDeletedBy DataDictionaryCategorySelectColumn = "deleted_by"
	// 是否删除
	DataDictionaryCategorySelectColumnIsDeleted DataDictionaryCategorySelectColumn = "is_deleted"
)

var AllDataDictionaryCategorySelectColumn = []DataDictionaryCategorySelectColumn{
	DataDictionaryCategorySelectColumnID,
	DataDictionaryCategorySelectColumnDictionaryCategoryID,
	DataDictionaryCategorySelectColumnCategoryName,
	DataDictionaryCategorySelectColumnCategoryCode,
	DataDictionaryCategorySelectColumnRemarks,
	DataDictionaryCategorySelectColumnCreatedAt,
	DataDictionaryCategorySelectColumnCreatedBy,
	DataDictionaryCategorySelectColumnUpdatedAt,
	DataDictionaryCategorySelectColumnUpdatedBy,
	DataDictionaryCategorySelectColumnDeletedAt,
	DataDictionaryCategorySelectColumnDeletedBy,
	DataDictionaryCategorySelectColumnIsDeleted,
}

func (e DataDictionaryCategorySelectColumn) IsValid() bool {
	switch e {
	case DataDictionaryCategorySelectColumnID, DataDictionaryCategorySelectColumnDictionaryCategoryID, DataDictionaryCategorySelectColumnCategoryName, DataDictionaryCategorySelectColumnCategoryCode, DataDictionaryCategorySelectColumnRemarks, DataDictionaryCategorySelectColumnCreatedAt, DataDictionaryCategorySelectColumnCreatedBy, DataDictionaryCategorySelectColumnUpdatedAt, DataDictionaryCategorySelectColumnUpdatedBy, DataDictionaryCategorySelectColumnDeletedAt, DataDictionaryCategorySelectColumnDeletedBy, DataDictionaryCategorySelectColumnIsDeleted:
		return true
	}
	return false
}

func (e DataDictionaryCategorySelectColumn) String() string {
	return string(e)
}

func (e *DataDictionaryCategorySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataDictionaryCategorySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataDictionaryCategorySelectColumn", str)
	}
	return nil
}

func (e DataDictionaryCategorySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DataDictionarySelectColumn string

const (
	// ID
	DataDictionarySelectColumnID DataDictionarySelectColumn = "id"
	// 字典ID
	DataDictionarySelectColumnDictionaryID DataDictionarySelectColumn = "dictionary_id"
	// 字典类型ID
	DataDictionarySelectColumnDictionaryCategoryID DataDictionarySelectColumn = "dictionary_category_id"
	// 名称
	DataDictionarySelectColumnName DataDictionarySelectColumn = "name"
	// 值
	DataDictionarySelectColumnValue DataDictionarySelectColumn = "value"
	// 备注
	DataDictionarySelectColumnRemarks DataDictionarySelectColumn = "remarks"
	// 创建时间
	DataDictionarySelectColumnCreatedAt DataDictionarySelectColumn = "created_at"
	// 创建人
	DataDictionarySelectColumnCreatedBy DataDictionarySelectColumn = "created_by"
	// 修改时间
	DataDictionarySelectColumnUpdatedAt DataDictionarySelectColumn = "updated_at"
	// 修改人
	DataDictionarySelectColumnUpdatedBy DataDictionarySelectColumn = "updated_by"
	// 删除时间
	DataDictionarySelectColumnDeletedAt DataDictionarySelectColumn = "deleted_at"
	// 删除人
	DataDictionarySelectColumnDeletedBy DataDictionarySelectColumn = "deleted_by"
	// 是否删除
	DataDictionarySelectColumnIsDeleted DataDictionarySelectColumn = "is_deleted"
)

var AllDataDictionarySelectColumn = []DataDictionarySelectColumn{
	DataDictionarySelectColumnID,
	DataDictionarySelectColumnDictionaryID,
	DataDictionarySelectColumnDictionaryCategoryID,
	DataDictionarySelectColumnName,
	DataDictionarySelectColumnValue,
	DataDictionarySelectColumnRemarks,
	DataDictionarySelectColumnCreatedAt,
	DataDictionarySelectColumnCreatedBy,
	DataDictionarySelectColumnUpdatedAt,
	DataDictionarySelectColumnUpdatedBy,
	DataDictionarySelectColumnDeletedAt,
	DataDictionarySelectColumnDeletedBy,
	DataDictionarySelectColumnIsDeleted,
}

func (e DataDictionarySelectColumn) IsValid() bool {
	switch e {
	case DataDictionarySelectColumnID, DataDictionarySelectColumnDictionaryID, DataDictionarySelectColumnDictionaryCategoryID, DataDictionarySelectColumnName, DataDictionarySelectColumnValue, DataDictionarySelectColumnRemarks, DataDictionarySelectColumnCreatedAt, DataDictionarySelectColumnCreatedBy, DataDictionarySelectColumnUpdatedAt, DataDictionarySelectColumnUpdatedBy, DataDictionarySelectColumnDeletedAt, DataDictionarySelectColumnDeletedBy, DataDictionarySelectColumnIsDeleted:
		return true
	}
	return false
}

func (e DataDictionarySelectColumn) String() string {
	return string(e)
}

func (e *DataDictionarySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataDictionarySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataDictionarySelectColumn", str)
	}
	return nil
}

func (e DataDictionarySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
