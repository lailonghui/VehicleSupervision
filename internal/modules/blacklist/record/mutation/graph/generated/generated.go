// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	model1 "VehicleSupervision/internal/modules/blacklist/record/model"
	"VehicleSupervision/internal/modules/blacklist/record/mutation/graph/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteBlacklistOperationRecord     func(childComplexity int, where model.BlacklistOperationRecordBoolExp) int
		DeleteBlacklistOperationRecordByPk func(childComplexity int, id int64) int
		InsertBlacklistOperationRecord     func(childComplexity int, objects []*model.BlacklistOperationRecordInsertInput, onConflict *model.BlacklistOperationRecordOnConflict) int
		InsertBlacklistOperationRecordOne  func(childComplexity int, object model.BlacklistOperationRecordInsertInput, onConflict *model.BlacklistOperationRecordOnConflict) int
		UpdateBlacklistOperationRecord     func(childComplexity int, inc *model.BlacklistOperationRecordIncInput, set *model.BlacklistOperationRecordSetInput, where model.BlacklistOperationRecordBoolExp) int
		UpdateBlacklistOperationRecordByPk func(childComplexity int, inc *model.BlacklistOperationRecordIncInput, set *model.BlacklistOperationRecordSetInput, pkColumns model.BlacklistOperationRecordPkColumnsInput) int
	}

	Query struct {
		T func(childComplexity int) int
	}

	BlacklistOperationRecord struct {
		BlacklistRecordID func(childComplexity int) int
		BlacklistType     func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		ID                func(childComplexity int) int
		IsDelete          func(childComplexity int) int
		Operate           func(childComplexity int) int
		Remarks           func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
		VSeqn             func(childComplexity int) int
	}

	BlacklistOperationRecordAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	BlacklistOperationRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.BlacklistOperationRecordSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	BlacklistOperationRecordAvgFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordMaxFields struct {
		BlacklistRecordID func(childComplexity int) int
		BlacklistType     func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		ID                func(childComplexity int) int
		Operate           func(childComplexity int) int
		Remarks           func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
		VSeqn             func(childComplexity int) int
	}

	BlacklistOperationRecordMinFields struct {
		BlacklistRecordID func(childComplexity int) int
		BlacklistType     func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		ID                func(childComplexity int) int
		Operate           func(childComplexity int) int
		Remarks           func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
		VSeqn             func(childComplexity int) int
	}

	BlacklistOperationRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	BlacklistOperationRecordStddevFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordStddevPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordStddevSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordSumFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordVarPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordVarSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordVarianceFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	SubscriptionRoot struct {
		BlacklistOperationRecord          func(childComplexity int, distinctOn []model.BlacklistOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.BlacklistOperationRecordOrderBy, where *model.BlacklistOperationRecordBoolExp) int
		BlacklistOperationRecordAggregate func(childComplexity int, distinctOn []model.BlacklistOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.BlacklistOperationRecordOrderBy, where *model.BlacklistOperationRecordBoolExp) int
		BlacklistOperationRecordByPk      func(childComplexity int, id int64) int
	}
}

type MutationResolver interface {
	DeleteBlacklistOperationRecord(ctx context.Context, where model.BlacklistOperationRecordBoolExp) (*model.BlacklistOperationRecordMutationResponse, error)
	DeleteBlacklistOperationRecordByPk(ctx context.Context, id int64) (*model1.BlacklistOperationRecord, error)
	InsertBlacklistOperationRecord(ctx context.Context, objects []*model.BlacklistOperationRecordInsertInput, onConflict *model.BlacklistOperationRecordOnConflict) (*model.BlacklistOperationRecordMutationResponse, error)
	InsertBlacklistOperationRecordOne(ctx context.Context, object model.BlacklistOperationRecordInsertInput, onConflict *model.BlacklistOperationRecordOnConflict) (*model1.BlacklistOperationRecord, error)
	UpdateBlacklistOperationRecord(ctx context.Context, inc *model.BlacklistOperationRecordIncInput, set *model.BlacklistOperationRecordSetInput, where model.BlacklistOperationRecordBoolExp) (*model.BlacklistOperationRecordMutationResponse, error)
	UpdateBlacklistOperationRecordByPk(ctx context.Context, inc *model.BlacklistOperationRecordIncInput, set *model.BlacklistOperationRecordSetInput, pkColumns model.BlacklistOperationRecordPkColumnsInput) (*model1.BlacklistOperationRecord, error)
}
type QueryResolver interface {
	T(ctx context.Context) (*int, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_blacklist_operation_record":
		if e.complexity.Mutation.DeleteBlacklistOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_blacklist_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBlacklistOperationRecord(childComplexity, args["where"].(model.BlacklistOperationRecordBoolExp)), true

	case "Mutation.delete_blacklist_operation_record_by_pk":
		if e.complexity.Mutation.DeleteBlacklistOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_blacklist_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBlacklistOperationRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_blacklist_operation_record":
		if e.complexity.Mutation.InsertBlacklistOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_blacklist_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertBlacklistOperationRecord(childComplexity, args["objects"].([]*model.BlacklistOperationRecordInsertInput), args["on_conflict"].(*model.BlacklistOperationRecordOnConflict)), true

	case "Mutation.insert_blacklist_operation_record_one":
		if e.complexity.Mutation.InsertBlacklistOperationRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_blacklist_operation_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertBlacklistOperationRecordOne(childComplexity, args["object"].(model.BlacklistOperationRecordInsertInput), args["on_conflict"].(*model.BlacklistOperationRecordOnConflict)), true

	case "Mutation.update_blacklist_operation_record":
		if e.complexity.Mutation.UpdateBlacklistOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_blacklist_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBlacklistOperationRecord(childComplexity, args["_inc"].(*model.BlacklistOperationRecordIncInput), args["_set"].(*model.BlacklistOperationRecordSetInput), args["where"].(model.BlacklistOperationRecordBoolExp)), true

	case "Mutation.update_blacklist_operation_record_by_pk":
		if e.complexity.Mutation.UpdateBlacklistOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_blacklist_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBlacklistOperationRecordByPk(childComplexity, args["_inc"].(*model.BlacklistOperationRecordIncInput), args["_set"].(*model.BlacklistOperationRecordSetInput), args["pk_columns"].(model.BlacklistOperationRecordPkColumnsInput)), true

	case "Query.t":
		if e.complexity.Query.T == nil {
			break
		}

		return e.complexity.Query.T(childComplexity), true

	case "blacklist_operation_record.blacklist_record_id":
		if e.complexity.BlacklistOperationRecord.BlacklistRecordID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.BlacklistRecordID(childComplexity), true

	case "blacklist_operation_record.blacklist_type":
		if e.complexity.BlacklistOperationRecord.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.BlacklistType(childComplexity), true

	case "blacklist_operation_record.create_at":
		if e.complexity.BlacklistOperationRecord.CreateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.CreateAt(childComplexity), true

	case "blacklist_operation_record.create_by":
		if e.complexity.BlacklistOperationRecord.CreateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.CreateBy(childComplexity), true

	case "blacklist_operation_record.delete_at":
		if e.complexity.BlacklistOperationRecord.DeleteAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.DeleteAt(childComplexity), true

	case "blacklist_operation_record.delete_by":
		if e.complexity.BlacklistOperationRecord.DeleteBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.DeleteBy(childComplexity), true

	case "blacklist_operation_record.id":
		if e.complexity.BlacklistOperationRecord.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.ID(childComplexity), true

	case "blacklist_operation_record.is_delete":
		if e.complexity.BlacklistOperationRecord.IsDelete == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.IsDelete(childComplexity), true

	case "blacklist_operation_record.operate":
		if e.complexity.BlacklistOperationRecord.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.Operate(childComplexity), true

	case "blacklist_operation_record.remarks":
		if e.complexity.BlacklistOperationRecord.Remarks == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.Remarks(childComplexity), true

	case "blacklist_operation_record.update_at":
		if e.complexity.BlacklistOperationRecord.UpdateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.UpdateAt(childComplexity), true

	case "blacklist_operation_record.update_by":
		if e.complexity.BlacklistOperationRecord.UpdateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.UpdateBy(childComplexity), true

	case "blacklist_operation_record.v_seqn":
		if e.complexity.BlacklistOperationRecord.VSeqn == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.VSeqn(childComplexity), true

	case "blacklist_operation_record_aggregate.aggregate":
		if e.complexity.BlacklistOperationRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregate.Aggregate(childComplexity), true

	case "blacklist_operation_record_aggregate.nodes":
		if e.complexity.BlacklistOperationRecordAggregate.Nodes == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregate.Nodes(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.avg":
		if e.complexity.BlacklistOperationRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Avg(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.count":
		if e.complexity.BlacklistOperationRecordAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_blacklist_operation_record_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Count(childComplexity, args["columns"].([]model.BlacklistOperationRecordSelectColumn), args["distinct"].(*bool)), true

	case "blacklist_operation_record_aggregate_fields.max":
		if e.complexity.BlacklistOperationRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Max(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.min":
		if e.complexity.BlacklistOperationRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Min(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.stddev":
		if e.complexity.BlacklistOperationRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Stddev(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.stddev_pop":
		if e.complexity.BlacklistOperationRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.StddevPop(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.stddev_samp":
		if e.complexity.BlacklistOperationRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.StddevSamp(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.sum":
		if e.complexity.BlacklistOperationRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Sum(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.var_pop":
		if e.complexity.BlacklistOperationRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.VarPop(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.var_samp":
		if e.complexity.BlacklistOperationRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.VarSamp(childComplexity), true

	case "blacklist_operation_record_aggregate_fields.variance":
		if e.complexity.BlacklistOperationRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Variance(childComplexity), true

	case "blacklist_operation_record_avg_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordAvgFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAvgFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_avg_fields.id":
		if e.complexity.BlacklistOperationRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAvgFields.ID(childComplexity), true

	case "blacklist_operation_record_avg_fields.operate":
		if e.complexity.BlacklistOperationRecordAvgFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAvgFields.Operate(childComplexity), true

	case "blacklist_operation_record_max_fields.blacklist_record_id":
		if e.complexity.BlacklistOperationRecordMaxFields.BlacklistRecordID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.BlacklistRecordID(childComplexity), true

	case "blacklist_operation_record_max_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordMaxFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_max_fields.create_at":
		if e.complexity.BlacklistOperationRecordMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.CreateAt(childComplexity), true

	case "blacklist_operation_record_max_fields.create_by":
		if e.complexity.BlacklistOperationRecordMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.CreateBy(childComplexity), true

	case "blacklist_operation_record_max_fields.delete_at":
		if e.complexity.BlacklistOperationRecordMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.DeleteAt(childComplexity), true

	case "blacklist_operation_record_max_fields.delete_by":
		if e.complexity.BlacklistOperationRecordMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.DeleteBy(childComplexity), true

	case "blacklist_operation_record_max_fields.id":
		if e.complexity.BlacklistOperationRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.ID(childComplexity), true

	case "blacklist_operation_record_max_fields.operate":
		if e.complexity.BlacklistOperationRecordMaxFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.Operate(childComplexity), true

	case "blacklist_operation_record_max_fields.remarks":
		if e.complexity.BlacklistOperationRecordMaxFields.Remarks == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.Remarks(childComplexity), true

	case "blacklist_operation_record_max_fields.update_at":
		if e.complexity.BlacklistOperationRecordMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.UpdateAt(childComplexity), true

	case "blacklist_operation_record_max_fields.update_by":
		if e.complexity.BlacklistOperationRecordMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.UpdateBy(childComplexity), true

	case "blacklist_operation_record_max_fields.v_seqn":
		if e.complexity.BlacklistOperationRecordMaxFields.VSeqn == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.VSeqn(childComplexity), true

	case "blacklist_operation_record_min_fields.blacklist_record_id":
		if e.complexity.BlacklistOperationRecordMinFields.BlacklistRecordID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.BlacklistRecordID(childComplexity), true

	case "blacklist_operation_record_min_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordMinFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_min_fields.create_at":
		if e.complexity.BlacklistOperationRecordMinFields.CreateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.CreateAt(childComplexity), true

	case "blacklist_operation_record_min_fields.create_by":
		if e.complexity.BlacklistOperationRecordMinFields.CreateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.CreateBy(childComplexity), true

	case "blacklist_operation_record_min_fields.delete_at":
		if e.complexity.BlacklistOperationRecordMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.DeleteAt(childComplexity), true

	case "blacklist_operation_record_min_fields.delete_by":
		if e.complexity.BlacklistOperationRecordMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.DeleteBy(childComplexity), true

	case "blacklist_operation_record_min_fields.id":
		if e.complexity.BlacklistOperationRecordMinFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.ID(childComplexity), true

	case "blacklist_operation_record_min_fields.operate":
		if e.complexity.BlacklistOperationRecordMinFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.Operate(childComplexity), true

	case "blacklist_operation_record_min_fields.remarks":
		if e.complexity.BlacklistOperationRecordMinFields.Remarks == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.Remarks(childComplexity), true

	case "blacklist_operation_record_min_fields.update_at":
		if e.complexity.BlacklistOperationRecordMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.UpdateAt(childComplexity), true

	case "blacklist_operation_record_min_fields.update_by":
		if e.complexity.BlacklistOperationRecordMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.UpdateBy(childComplexity), true

	case "blacklist_operation_record_min_fields.v_seqn":
		if e.complexity.BlacklistOperationRecordMinFields.VSeqn == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.VSeqn(childComplexity), true

	case "blacklist_operation_record_mutation_response.affected_rows":
		if e.complexity.BlacklistOperationRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMutationResponse.AffectedRows(childComplexity), true

	case "blacklist_operation_record_mutation_response.returning":
		if e.complexity.BlacklistOperationRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMutationResponse.Returning(childComplexity), true

	case "blacklist_operation_record_stddev_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordStddevFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_stddev_fields.id":
		if e.complexity.BlacklistOperationRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevFields.ID(childComplexity), true

	case "blacklist_operation_record_stddev_fields.operate":
		if e.complexity.BlacklistOperationRecordStddevFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevFields.Operate(childComplexity), true

	case "blacklist_operation_record_stddev_pop_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordStddevPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevPopFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_stddev_pop_fields.id":
		if e.complexity.BlacklistOperationRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevPopFields.ID(childComplexity), true

	case "blacklist_operation_record_stddev_pop_fields.operate":
		if e.complexity.BlacklistOperationRecordStddevPopFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevPopFields.Operate(childComplexity), true

	case "blacklist_operation_record_stddev_samp_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordStddevSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevSampFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_stddev_samp_fields.id":
		if e.complexity.BlacklistOperationRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevSampFields.ID(childComplexity), true

	case "blacklist_operation_record_stddev_samp_fields.operate":
		if e.complexity.BlacklistOperationRecordStddevSampFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevSampFields.Operate(childComplexity), true

	case "blacklist_operation_record_sum_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordSumFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordSumFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_sum_fields.id":
		if e.complexity.BlacklistOperationRecordSumFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordSumFields.ID(childComplexity), true

	case "blacklist_operation_record_sum_fields.operate":
		if e.complexity.BlacklistOperationRecordSumFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordSumFields.Operate(childComplexity), true

	case "blacklist_operation_record_var_pop_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordVarPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarPopFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_var_pop_fields.id":
		if e.complexity.BlacklistOperationRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarPopFields.ID(childComplexity), true

	case "blacklist_operation_record_var_pop_fields.operate":
		if e.complexity.BlacklistOperationRecordVarPopFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarPopFields.Operate(childComplexity), true

	case "blacklist_operation_record_var_samp_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordVarSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarSampFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_var_samp_fields.id":
		if e.complexity.BlacklistOperationRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarSampFields.ID(childComplexity), true

	case "blacklist_operation_record_var_samp_fields.operate":
		if e.complexity.BlacklistOperationRecordVarSampFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarSampFields.Operate(childComplexity), true

	case "blacklist_operation_record_variance_fields.blacklist_type":
		if e.complexity.BlacklistOperationRecordVarianceFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarianceFields.BlacklistType(childComplexity), true

	case "blacklist_operation_record_variance_fields.id":
		if e.complexity.BlacklistOperationRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarianceFields.ID(childComplexity), true

	case "blacklist_operation_record_variance_fields.operate":
		if e.complexity.BlacklistOperationRecordVarianceFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarianceFields.Operate(childComplexity), true

	case "subscription_root.blacklist_operation_record":
		if e.complexity.SubscriptionRoot.BlacklistOperationRecord == nil {
			break
		}

		args, err := ec.field_subscription_root_blacklist_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.BlacklistOperationRecord(childComplexity, args["distinct_on"].([]model.BlacklistOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.BlacklistOperationRecordOrderBy), args["where"].(*model.BlacklistOperationRecordBoolExp)), true

	case "subscription_root.blacklist_operation_record_aggregate":
		if e.complexity.SubscriptionRoot.BlacklistOperationRecordAggregate == nil {
			break
		}

		args, err := ec.field_subscription_root_blacklist_operation_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.BlacklistOperationRecordAggregate(childComplexity, args["distinct_on"].([]model.BlacklistOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.BlacklistOperationRecordOrderBy), args["where"].(*model.BlacklistOperationRecordBoolExp)), true

	case "subscription_root.blacklist_operation_record_by_pk":
		if e.complexity.SubscriptionRoot.BlacklistOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_subscription_root_blacklist_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.BlacklistOperationRecordByPk(childComplexity, args["id"].(int64)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/generate.graphqls", Input: `

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
黑名单操作记录表


columns and relationships of "blacklist_operation_record"

"""
type blacklist_operation_record {
  """黑名单记录ID"""
  blacklist_record_id: String!

  """黑名单类别"""
  blacklist_type: Int!

  """创建时间"""
  create_at: timestamptz!

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """ID"""
  id: bigint!

  """是否删除"""
  is_delete: Boolean!

  """操作类别"""
  operate: Int!

  """备注"""
  remarks: String

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String

  """驾驶员ID或者企业ID或者车辆ID"""
  v_seqn: String!
}

"""
aggregated selection of "blacklist_operation_record"
"""
type blacklist_operation_record_aggregate {
  aggregate: blacklist_operation_record_aggregate_fields
  nodes: [blacklist_operation_record!]!
}

"""
aggregate fields of "blacklist_operation_record"
"""
type blacklist_operation_record_aggregate_fields {
  avg: blacklist_operation_record_avg_fields
  count(columns: [blacklist_operation_record_select_column!], distinct: Boolean): Int
  max: blacklist_operation_record_max_fields
  min: blacklist_operation_record_min_fields
  stddev: blacklist_operation_record_stddev_fields
  stddev_pop: blacklist_operation_record_stddev_pop_fields
  stddev_samp: blacklist_operation_record_stddev_samp_fields
  sum: blacklist_operation_record_sum_fields
  var_pop: blacklist_operation_record_var_pop_fields
  var_samp: blacklist_operation_record_var_samp_fields
  variance: blacklist_operation_record_variance_fields
}

"""
order by aggregate values of table "blacklist_operation_record"
"""
input blacklist_operation_record_aggregate_order_by {
  avg: blacklist_operation_record_avg_order_by
  count: order_by
  max: blacklist_operation_record_max_order_by
  min: blacklist_operation_record_min_order_by
  stddev: blacklist_operation_record_stddev_order_by
  stddev_pop: blacklist_operation_record_stddev_pop_order_by
  stddev_samp: blacklist_operation_record_stddev_samp_order_by
  sum: blacklist_operation_record_sum_order_by
  var_pop: blacklist_operation_record_var_pop_order_by
  var_samp: blacklist_operation_record_var_samp_order_by
  variance: blacklist_operation_record_variance_order_by
}

"""
input type for inserting array relation for remote table "blacklist_operation_record"
"""
input blacklist_operation_record_arr_rel_insert_input {
  data: [blacklist_operation_record_insert_input!]!
  on_conflict: blacklist_operation_record_on_conflict
}

"""aggregate avg on columns"""
type blacklist_operation_record_avg_fields {
  blacklist_type: Float
  id: Float
  operate: Float
}

"""
order by avg() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_avg_order_by {
  blacklist_type: order_by
  id: order_by
  operate: order_by
}

"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'AND'.
"""
input blacklist_operation_record_bool_exp {
  _and: [blacklist_operation_record_bool_exp]
  _not: blacklist_operation_record_bool_exp
  _or: [blacklist_operation_record_bool_exp]
  blacklist_record_id: String_comparison_exp
  blacklist_type: Int_comparison_exp
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  id: bigint_comparison_exp
  is_delete: Boolean_comparison_exp
  operate: Int_comparison_exp
  remarks: String_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  v_seqn: String_comparison_exp
}

"""
unique or primary key constraints on table "blacklist_operation_record"
"""
enum blacklist_operation_record_constraint {
  """unique or primary key constraint"""
  blacklist_operation_record_pkey
}

"""
input type for incrementing integer column in table "blacklist_operation_record"
"""
input blacklist_operation_record_inc_input {
  blacklist_type: Int
  id: bigint
  operate: Int
}

"""
input type for inserting data into table "blacklist_operation_record"
"""
input blacklist_operation_record_insert_input {
  blacklist_record_id: String
  blacklist_type: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  id: bigint
  is_delete: Boolean
  operate: Int
  remarks: String
  update_at: timestamptz
  update_by: String
  v_seqn: String
}

"""aggregate max on columns"""
type blacklist_operation_record_max_fields {
  blacklist_record_id: String
  blacklist_type: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  id: bigint
  operate: Int
  remarks: String
  update_at: timestamptz
  update_by: String
  v_seqn: String
}

"""
order by max() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_max_order_by {
  blacklist_record_id: order_by
  blacklist_type: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  id: order_by
  operate: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
  v_seqn: order_by
}

"""aggregate min on columns"""
type blacklist_operation_record_min_fields {
  blacklist_record_id: String
  blacklist_type: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  id: bigint
  operate: Int
  remarks: String
  update_at: timestamptz
  update_by: String
  v_seqn: String
}

"""
order by min() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_min_order_by {
  blacklist_record_id: order_by
  blacklist_type: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  id: order_by
  operate: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
  v_seqn: order_by
}

"""
response of any mutation on the table "blacklist_operation_record"
"""
type blacklist_operation_record_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [blacklist_operation_record!]!
}

"""
input type for inserting object relation for remote table "blacklist_operation_record"
"""
input blacklist_operation_record_obj_rel_insert_input {
  data: blacklist_operation_record_insert_input!
  on_conflict: blacklist_operation_record_on_conflict
}

"""
on conflict condition type for table "blacklist_operation_record"
"""
input blacklist_operation_record_on_conflict {
  constraint: blacklist_operation_record_constraint!
  update_columns: [blacklist_operation_record_update_column!]!
  where: blacklist_operation_record_bool_exp
}

"""
ordering options when selecting data from "blacklist_operation_record"
"""
input blacklist_operation_record_order_by {
  blacklist_record_id: order_by
  blacklist_type: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  id: order_by
  is_delete: order_by
  operate: order_by
  remarks: order_by
  update_at: order_by
  update_by: order_by
  v_seqn: order_by
}

"""
primary key columns input for table: "blacklist_operation_record"
"""
input blacklist_operation_record_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "blacklist_operation_record"
"""
enum blacklist_operation_record_select_column {
  """column name"""
  blacklist_record_id

  """column name"""
  blacklist_type

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  operate

  """column name"""
  remarks

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  v_seqn
}

"""
input type for updating data in table "blacklist_operation_record"
"""
input blacklist_operation_record_set_input {
  blacklist_record_id: String
  blacklist_type: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  id: bigint
  is_delete: Boolean
  operate: Int
  remarks: String
  update_at: timestamptz
  update_by: String
  v_seqn: String
}

"""aggregate stddev on columns"""
type blacklist_operation_record_stddev_fields {
  blacklist_type: Float
  id: Float
  operate: Float
}

"""
order by stddev() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_stddev_order_by {
  blacklist_type: order_by
  id: order_by
  operate: order_by
}

"""aggregate stddev_pop on columns"""
type blacklist_operation_record_stddev_pop_fields {
  blacklist_type: Float
  id: Float
  operate: Float
}

"""
order by stddev_pop() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_stddev_pop_order_by {
  blacklist_type: order_by
  id: order_by
  operate: order_by
}

"""aggregate stddev_samp on columns"""
type blacklist_operation_record_stddev_samp_fields {
  blacklist_type: Float
  id: Float
  operate: Float
}

"""
order by stddev_samp() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_stddev_samp_order_by {
  blacklist_type: order_by
  id: order_by
  operate: order_by
}

"""aggregate sum on columns"""
type blacklist_operation_record_sum_fields {
  blacklist_type: Int
  id: bigint
  operate: Int
}

"""
order by sum() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_sum_order_by {
  blacklist_type: order_by
  id: order_by
  operate: order_by
}

"""
update columns of table "blacklist_operation_record"
"""
enum blacklist_operation_record_update_column {
  """column name"""
  blacklist_record_id

  """column name"""
  blacklist_type

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  operate

  """column name"""
  remarks

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  v_seqn
}

"""aggregate var_pop on columns"""
type blacklist_operation_record_var_pop_fields {
  blacklist_type: Float
  id: Float
  operate: Float
}

"""
order by var_pop() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_var_pop_order_by {
  blacklist_type: order_by
  id: order_by
  operate: order_by
}

"""aggregate var_samp on columns"""
type blacklist_operation_record_var_samp_fields {
  blacklist_type: Float
  id: Float
  operate: Float
}

"""
order by var_samp() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_var_samp_order_by {
  blacklist_type: order_by
  id: order_by
  operate: order_by
}

"""aggregate variance on columns"""
type blacklist_operation_record_variance_fields {
  blacklist_type: Float
  id: Float
  operate: Float
}

"""
order by variance() on columns of table "blacklist_operation_record"
"""
input blacklist_operation_record_variance_order_by {
  blacklist_type: order_by
  id: order_by
  operate: order_by
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "blacklist_operation_record"
  """
  delete_blacklist_operation_record(
    """filter the rows which have to be deleted"""
    where: blacklist_operation_record_bool_exp!
  ): blacklist_operation_record_mutation_response

  """
  delete single row from the table: "blacklist_operation_record"
  """
  delete_blacklist_operation_record_by_pk(
    """ID"""
    id: bigint!
  ): blacklist_operation_record

  """
  insert data into the table: "blacklist_operation_record"
  """
  insert_blacklist_operation_record(
    """the rows to be inserted"""
    objects: [blacklist_operation_record_insert_input!]!

    """on conflict condition"""
    on_conflict: blacklist_operation_record_on_conflict
  ): blacklist_operation_record_mutation_response

  """
  insert a single row into the table: "blacklist_operation_record"
  """
  insert_blacklist_operation_record_one(
    """the row to be inserted"""
    object: blacklist_operation_record_insert_input!

    """on conflict condition"""
    on_conflict: blacklist_operation_record_on_conflict
  ): blacklist_operation_record

  """
  update data of the table: "blacklist_operation_record"
  """
  update_blacklist_operation_record(
    """increments the integer columns with given value of the filtered values"""
    _inc: blacklist_operation_record_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: blacklist_operation_record_set_input

    """filter the rows which have to be updated"""
    where: blacklist_operation_record_bool_exp!
  ): blacklist_operation_record_mutation_response

  """
  update single row of the table: "blacklist_operation_record"
  """
  update_blacklist_operation_record_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: blacklist_operation_record_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: blacklist_operation_record_set_input
    pk_columns: blacklist_operation_record_pk_columns_input!
  ): blacklist_operation_record
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type Query {
 t:Int
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "blacklist_operation_record"
  """
  blacklist_operation_record(
    """distinct select on columns"""
    distinct_on: [blacklist_operation_record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blacklist_operation_record_order_by!]

    """filter the rows returned"""
    where: blacklist_operation_record_bool_exp
  ): [blacklist_operation_record!]!

  """
  fetch aggregated fields from the table: "blacklist_operation_record"
  """
  blacklist_operation_record_aggregate(
    """distinct select on columns"""
    distinct_on: [blacklist_operation_record_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blacklist_operation_record_order_by!]

    """filter the rows returned"""
    where: blacklist_operation_record_bool_exp
  ): blacklist_operation_record_aggregate!

  """
  fetch data from the table: "blacklist_operation_record" using primary key columns
  """
  blacklist_operation_record_by_pk(
    """ID"""
    id: bigint!
  ): blacklist_operation_record
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_blacklist_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BlacklistOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNblacklist_operation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_blacklist_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_blacklist_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.BlacklistOperationRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNblacklist_operation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.BlacklistOperationRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOblacklist_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_blacklist_operation_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BlacklistOperationRecordInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNblacklist_operation_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.BlacklistOperationRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOblacklist_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_blacklist_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlacklistOperationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOblacklist_operation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.BlacklistOperationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOblacklist_operation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.BlacklistOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNblacklist_operation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_blacklist_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlacklistOperationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOblacklist_operation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.BlacklistOperationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOblacklist_operation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.BlacklistOperationRecordPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNblacklist_operation_record_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_blacklist_operation_record_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.BlacklistOperationRecordSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOblacklist_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_subscription_root_blacklist_operation_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.BlacklistOperationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOblacklist_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.BlacklistOperationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOblacklist_operation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.BlacklistOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOblacklist_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_blacklist_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.BlacklistOperationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOblacklist_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.BlacklistOperationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOblacklist_operation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.BlacklistOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOblacklist_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_blacklist_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_blacklist_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_blacklist_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBlacklistOperationRecord(rctx, args["where"].(model.BlacklistOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_blacklist_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_blacklist_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBlacklistOperationRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalOblacklist_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_blacklist_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_blacklist_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertBlacklistOperationRecord(rctx, args["objects"].([]*model.BlacklistOperationRecordInsertInput), args["on_conflict"].(*model.BlacklistOperationRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_blacklist_operation_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_blacklist_operation_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertBlacklistOperationRecordOne(rctx, args["object"].(model.BlacklistOperationRecordInsertInput), args["on_conflict"].(*model.BlacklistOperationRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalOblacklist_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_blacklist_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_blacklist_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBlacklistOperationRecord(rctx, args["_inc"].(*model.BlacklistOperationRecordIncInput), args["_set"].(*model.BlacklistOperationRecordSetInput), args["where"].(model.BlacklistOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_blacklist_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_blacklist_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBlacklistOperationRecordByPk(rctx, args["_inc"].(*model.BlacklistOperationRecordIncInput), args["_set"].(*model.BlacklistOperationRecordSetInput), args["pk_columns"].(model.BlacklistOperationRecordPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalOblacklist_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_t(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().T(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_blacklist_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_operate(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_v_seqn(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VSeqn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordAggregateFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalNblacklist_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordAvgFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_blacklist_operation_record_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMaxFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMinFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordStddevFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordSumFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordVarPopFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordVarSampFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordVarianceFields)
	fc.Result = res
	return ec.marshalOblacklist_operation_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_avg_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_avg_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_blacklist_record_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_max_fields_v_seqn(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VSeqn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_blacklist_record_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_min_fields_v_seqn(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VSeqn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalNblacklist_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_pop_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_pop_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_samp_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_stddev_samp_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_sum_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_sum_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_var_pop_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_var_pop_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_var_samp_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_var_samp_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_variance_fields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _blacklist_operation_record_variance_fields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "blacklist_operation_record_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_blacklist_operation_record(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_blacklist_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistOperationRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalNblacklist_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_blacklist_operation_record_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_blacklist_operation_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistOperationRecordAggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordAggregate)
	fc.Result = res
	return ec.marshalNblacklist_operation_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_blacklist_operation_record_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_blacklist_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistOperationRecordByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalOblacklist_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecord(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_aggregate_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordAggregateOrderBy, error) {
	var it model.BlacklistOperationRecordAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOblacklist_operation_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOblacklist_operation_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOblacklist_operation_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOblacklist_operation_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOblacklist_operation_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOblacklist_operation_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOblacklist_operation_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOblacklist_operation_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOblacklist_operation_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOblacklist_operation_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordArrRelInsertInput, error) {
	var it model.BlacklistOperationRecordArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNblacklist_operation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOblacklist_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_avg_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordAvgOrderBy, error) {
	var it model.BlacklistOperationRecordAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_bool_exp(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordBoolExp, error) {
	var it model.BlacklistOperationRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOblacklist_operation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOblacklist_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOblacklist_operation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_inc_input(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordIncInput, error) {
	var it model.BlacklistOperationRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_insert_input(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordInsertInput, error) {
	var it model.BlacklistOperationRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_max_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordMaxOrderBy, error) {
	var it model.BlacklistOperationRecordMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_min_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordMinOrderBy, error) {
	var it model.BlacklistOperationRecordMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordObjRelInsertInput, error) {
	var it model.BlacklistOperationRecordObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNblacklist_operation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOblacklist_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_on_conflict(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordOnConflict, error) {
	var it model.BlacklistOperationRecordOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNblacklist_operation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNblacklist_operation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOblacklist_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordOrderBy, error) {
	var it model.BlacklistOperationRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_pk_columns_input(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordPkColumnsInput, error) {
	var it model.BlacklistOperationRecordPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_set_input(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordSetInput, error) {
	var it model.BlacklistOperationRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_stddev_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordStddevOrderBy, error) {
	var it model.BlacklistOperationRecordStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordStddevPopOrderBy, error) {
	var it model.BlacklistOperationRecordStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordStddevSampOrderBy, error) {
	var it model.BlacklistOperationRecordStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_sum_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordSumOrderBy, error) {
	var it model.BlacklistOperationRecordSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_var_pop_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordVarPopOrderBy, error) {
	var it model.BlacklistOperationRecordVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_var_samp_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordVarSampOrderBy, error) {
	var it model.BlacklistOperationRecordVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputblacklist_operation_record_variance_order_by(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordVarianceOrderBy, error) {
	var it model.BlacklistOperationRecordVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_blacklist_operation_record":
			out.Values[i] = ec._Mutation_delete_blacklist_operation_record(ctx, field)
		case "delete_blacklist_operation_record_by_pk":
			out.Values[i] = ec._Mutation_delete_blacklist_operation_record_by_pk(ctx, field)
		case "insert_blacklist_operation_record":
			out.Values[i] = ec._Mutation_insert_blacklist_operation_record(ctx, field)
		case "insert_blacklist_operation_record_one":
			out.Values[i] = ec._Mutation_insert_blacklist_operation_record_one(ctx, field)
		case "update_blacklist_operation_record":
			out.Values[i] = ec._Mutation_update_blacklist_operation_record(ctx, field)
		case "update_blacklist_operation_record_by_pk":
			out.Values[i] = ec._Mutation_update_blacklist_operation_record_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "t":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_t(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_recordImplementors = []string{"blacklist_operation_record"}

func (ec *executionContext) _blacklist_operation_record(ctx context.Context, sel ast.SelectionSet, obj *model1.BlacklistOperationRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_recordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record")
		case "blacklist_record_id":
			out.Values[i] = ec._blacklist_operation_record_blacklist_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_blacklist_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._blacklist_operation_record_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._blacklist_operation_record_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._blacklist_operation_record_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._blacklist_operation_record_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._blacklist_operation_record_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_operate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._blacklist_operation_record_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._blacklist_operation_record_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._blacklist_operation_record_update_by(ctx, field, obj)
		case "v_seqn":
			out.Values[i] = ec._blacklist_operation_record_v_seqn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_aggregateImplementors = []string{"blacklist_operation_record_aggregate"}

func (ec *executionContext) _blacklist_operation_record_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_aggregate")
		case "aggregate":
			out.Values[i] = ec._blacklist_operation_record_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._blacklist_operation_record_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_aggregate_fieldsImplementors = []string{"blacklist_operation_record_aggregate_fields"}

func (ec *executionContext) _blacklist_operation_record_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_aggregate_fields")
		case "avg":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._blacklist_operation_record_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_avg_fieldsImplementors = []string{"blacklist_operation_record_avg_fields"}

func (ec *executionContext) _blacklist_operation_record_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_avg_fields")
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_avg_fields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_avg_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_avg_fields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_max_fieldsImplementors = []string{"blacklist_operation_record_max_fields"}

func (ec *executionContext) _blacklist_operation_record_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_max_fields")
		case "blacklist_record_id":
			out.Values[i] = ec._blacklist_operation_record_max_fields_blacklist_record_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_max_fields_blacklist_type(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._blacklist_operation_record_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._blacklist_operation_record_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._blacklist_operation_record_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._blacklist_operation_record_max_fields_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_max_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_max_fields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._blacklist_operation_record_max_fields_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._blacklist_operation_record_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._blacklist_operation_record_max_fields_update_by(ctx, field, obj)
		case "v_seqn":
			out.Values[i] = ec._blacklist_operation_record_max_fields_v_seqn(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_min_fieldsImplementors = []string{"blacklist_operation_record_min_fields"}

func (ec *executionContext) _blacklist_operation_record_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_min_fields")
		case "blacklist_record_id":
			out.Values[i] = ec._blacklist_operation_record_min_fields_blacklist_record_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_min_fields_blacklist_type(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._blacklist_operation_record_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._blacklist_operation_record_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._blacklist_operation_record_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._blacklist_operation_record_min_fields_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_min_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_min_fields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._blacklist_operation_record_min_fields_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._blacklist_operation_record_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._blacklist_operation_record_min_fields_update_by(ctx, field, obj)
		case "v_seqn":
			out.Values[i] = ec._blacklist_operation_record_min_fields_v_seqn(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_mutation_responseImplementors = []string{"blacklist_operation_record_mutation_response"}

func (ec *executionContext) _blacklist_operation_record_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._blacklist_operation_record_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._blacklist_operation_record_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_stddev_fieldsImplementors = []string{"blacklist_operation_record_stddev_fields"}

func (ec *executionContext) _blacklist_operation_record_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_stddev_fields")
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_stddev_fields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_stddev_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_stddev_fields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_stddev_pop_fieldsImplementors = []string{"blacklist_operation_record_stddev_pop_fields"}

func (ec *executionContext) _blacklist_operation_record_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_stddev_pop_fields")
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_stddev_pop_fields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_stddev_pop_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_stddev_pop_fields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_stddev_samp_fieldsImplementors = []string{"blacklist_operation_record_stddev_samp_fields"}

func (ec *executionContext) _blacklist_operation_record_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_stddev_samp_fields")
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_stddev_samp_fields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_stddev_samp_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_stddev_samp_fields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_sum_fieldsImplementors = []string{"blacklist_operation_record_sum_fields"}

func (ec *executionContext) _blacklist_operation_record_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_sum_fields")
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_sum_fields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_sum_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_sum_fields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_var_pop_fieldsImplementors = []string{"blacklist_operation_record_var_pop_fields"}

func (ec *executionContext) _blacklist_operation_record_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_var_pop_fields")
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_var_pop_fields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_var_pop_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_var_pop_fields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_var_samp_fieldsImplementors = []string{"blacklist_operation_record_var_samp_fields"}

func (ec *executionContext) _blacklist_operation_record_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_var_samp_fields")
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_var_samp_fields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_var_samp_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_var_samp_fields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklist_operation_record_variance_fieldsImplementors = []string{"blacklist_operation_record_variance_fields"}

func (ec *executionContext) _blacklist_operation_record_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklist_operation_record_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("blacklist_operation_record_variance_fields")
		case "blacklist_type":
			out.Values[i] = ec._blacklist_operation_record_variance_fields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._blacklist_operation_record_variance_fields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._blacklist_operation_record_variance_fields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscription_rootImplementors = []string{"subscription_root"}

func (ec *executionContext) _subscription_root(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscription_rootImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscription_root")
		case "blacklist_operation_record":
			out.Values[i] = ec._subscription_root_blacklist_operation_record(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blacklist_operation_record_aggregate":
			out.Values[i] = ec._subscription_root_blacklist_operation_record_aggregate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blacklist_operation_record_by_pk":
			out.Values[i] = ec._subscription_root_blacklist_operation_record_by_pk(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNblacklist_operation_record2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.BlacklistOperationRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNblacklist_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNblacklist_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecord(ctx context.Context, sel ast.SelectionSet, v *model1.BlacklistOperationRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._blacklist_operation_record(ctx, sel, v)
}

func (ec *executionContext) marshalNblacklist_operation_record_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._blacklist_operation_record_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNblacklist_operation_record_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx context.Context, v interface{}) (model.BlacklistOperationRecordBoolExp, error) {
	res, err := ec.unmarshalInputblacklist_operation_record_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNblacklist_operation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordConstraint(ctx context.Context, v interface{}) (model.BlacklistOperationRecordConstraint, error) {
	var res model.BlacklistOperationRecordConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNblacklist_operation_record_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordConstraint(ctx context.Context, sel ast.SelectionSet, v model.BlacklistOperationRecordConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNblacklist_operation_record_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx context.Context, v interface{}) (model.BlacklistOperationRecordInsertInput, error) {
	res, err := ec.unmarshalInputblacklist_operation_record_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNblacklist_operation_record_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.BlacklistOperationRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.BlacklistOperationRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNblacklist_operation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNblacklist_operation_record_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordInsertInput, error) {
	res, err := ec.unmarshalInputblacklist_operation_record_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNblacklist_operation_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordOrderBy, error) {
	res, err := ec.unmarshalInputblacklist_operation_record_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNblacklist_operation_record_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordPkColumnsInput(ctx context.Context, v interface{}) (model.BlacklistOperationRecordPkColumnsInput, error) {
	res, err := ec.unmarshalInputblacklist_operation_record_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNblacklist_operation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumn(ctx context.Context, v interface{}) (model.BlacklistOperationRecordSelectColumn, error) {
	var res model.BlacklistOperationRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNblacklist_operation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.BlacklistOperationRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNblacklist_operation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumn(ctx context.Context, v interface{}) (model.BlacklistOperationRecordUpdateColumn, error) {
	var res model.BlacklistOperationRecordUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNblacklist_operation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.BlacklistOperationRecordUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNblacklist_operation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.BlacklistOperationRecordUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.BlacklistOperationRecordUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNblacklist_operation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNblacklist_operation_record_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BlacklistOperationRecordUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNblacklist_operation_record_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmodelᚐBlacklistOperationRecord(ctx context.Context, sel ast.SelectionSet, v *model1.BlacklistOperationRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record(ctx, sel, v)
}

func (ec *executionContext) marshalOblacklist_operation_record_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOblacklist_operation_record_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordAvgOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx context.Context, v interface{}) ([]*model.BlacklistOperationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.BlacklistOperationRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOblacklist_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOblacklist_operation_record_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordIncInput(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMaxOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMinOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.BlacklistOperationRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.BlacklistOperationRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNblacklist_operation_record_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOblacklist_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.BlacklistOperationRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.BlacklistOperationRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNblacklist_operation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOblacklist_operation_record_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BlacklistOperationRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNblacklist_operation_record_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOblacklist_operation_record_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSetInput(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevPopOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordStddevSampOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordSumOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarPopOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarSampOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOblacklist_operation_record_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._blacklist_operation_record_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOblacklist_operation_record_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋrecordᚋmutationᚋgraphᚋmodelᚐBlacklistOperationRecordVarianceOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputblacklist_operation_record_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
