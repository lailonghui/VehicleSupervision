// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/blacklist/graph/model"
	model1 "VehicleSupervision/internal/modules/blacklist/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	BlacklistOperationRecord struct {
		BlacklistRecordID func(childComplexity int) int
		BlacklistType     func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		ID                func(childComplexity int) int
		IsDelete          func(childComplexity int) int
		Operate           func(childComplexity int) int
		Remarks           func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
		VSeqn             func(childComplexity int) int
	}

	BlacklistOperationRecordAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	BlacklistOperationRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.BlacklistOperationRecordSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	BlacklistOperationRecordAvgFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordMaxFields struct {
		BlacklistRecordID func(childComplexity int) int
		BlacklistType     func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		ID                func(childComplexity int) int
		Operate           func(childComplexity int) int
		Remarks           func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
		VSeqn             func(childComplexity int) int
	}

	BlacklistOperationRecordMinFields struct {
		BlacklistRecordID func(childComplexity int) int
		BlacklistType     func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		ID                func(childComplexity int) int
		Operate           func(childComplexity int) int
		Remarks           func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
		VSeqn             func(childComplexity int) int
	}

	BlacklistOperationRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	BlacklistOperationRecordStddevFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordStddevPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordStddevSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordSumFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordVarPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordVarSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	BlacklistOperationRecordVarianceFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	Mutation struct {
		DeleteBlacklistOperationRecord     func(childComplexity int, where model.BlacklistOperationRecordBoolExp) int
		DeleteBlacklistOperationRecordByPk func(childComplexity int, id int64) int
		InsertBlacklistOperationRecord     func(childComplexity int, objects []*model.BlacklistOperationRecordInsertInput, onConflict *model.BlacklistOperationRecordOnConflict) int
		InsertBlacklistOperationRecordOne  func(childComplexity int, object model.BlacklistOperationRecordInsertInput, onConflict *model.BlacklistOperationRecordOnConflict) int
		UpdateBlacklistOperationRecord     func(childComplexity int, inc *model.BlacklistOperationRecordIncInput, set *model.BlacklistOperationRecordSetInput, where model.BlacklistOperationRecordBoolExp) int
		UpdateBlacklistOperationRecordByPk func(childComplexity int, inc *model.BlacklistOperationRecordIncInput, set *model.BlacklistOperationRecordSetInput, pkColumns model.BlacklistOperationRecordPkColumnsInput) int
	}

	Query struct {
		BlacklistOperationRecord          func(childComplexity int, distinctOn []model.BlacklistOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.BlacklistOperationRecordOrderBy, where *model.BlacklistOperationRecordBoolExp) int
		BlacklistOperationRecordAggregate func(childComplexity int, distinctOn []model.BlacklistOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.BlacklistOperationRecordOrderBy, where *model.BlacklistOperationRecordBoolExp) int
		BlacklistOperationRecordByPk      func(childComplexity int, id int64) int
	}
}

type MutationResolver interface {
	DeleteBlacklistOperationRecord(ctx context.Context, where model.BlacklistOperationRecordBoolExp) (*model.BlacklistOperationRecordMutationResponse, error)
	DeleteBlacklistOperationRecordByPk(ctx context.Context, id int64) (*model1.BlacklistOperationRecord, error)
	InsertBlacklistOperationRecord(ctx context.Context, objects []*model.BlacklistOperationRecordInsertInput, onConflict *model.BlacklistOperationRecordOnConflict) (*model.BlacklistOperationRecordMutationResponse, error)
	InsertBlacklistOperationRecordOne(ctx context.Context, object model.BlacklistOperationRecordInsertInput, onConflict *model.BlacklistOperationRecordOnConflict) (*model1.BlacklistOperationRecord, error)
	UpdateBlacklistOperationRecord(ctx context.Context, inc *model.BlacklistOperationRecordIncInput, set *model.BlacklistOperationRecordSetInput, where model.BlacklistOperationRecordBoolExp) (*model.BlacklistOperationRecordMutationResponse, error)
	UpdateBlacklistOperationRecordByPk(ctx context.Context, inc *model.BlacklistOperationRecordIncInput, set *model.BlacklistOperationRecordSetInput, pkColumns model.BlacklistOperationRecordPkColumnsInput) (*model1.BlacklistOperationRecord, error)
}
type QueryResolver interface {
	BlacklistOperationRecord(ctx context.Context, distinctOn []model.BlacklistOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.BlacklistOperationRecordOrderBy, where *model.BlacklistOperationRecordBoolExp) ([]*model1.BlacklistOperationRecord, error)
	BlacklistOperationRecordAggregate(ctx context.Context, distinctOn []model.BlacklistOperationRecordSelectColumn, limit *int, offset *int, orderBy []*model.BlacklistOperationRecordOrderBy, where *model.BlacklistOperationRecordBoolExp) (*model.BlacklistOperationRecordAggregate, error)
	BlacklistOperationRecordByPk(ctx context.Context, id int64) (*model1.BlacklistOperationRecord, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "BlacklistOperationRecord.blacklist_record_id":
		if e.complexity.BlacklistOperationRecord.BlacklistRecordID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.BlacklistRecordID(childComplexity), true

	case "BlacklistOperationRecord.blacklist_type":
		if e.complexity.BlacklistOperationRecord.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.BlacklistType(childComplexity), true

	case "BlacklistOperationRecord.create_at":
		if e.complexity.BlacklistOperationRecord.CreateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.CreateAt(childComplexity), true

	case "BlacklistOperationRecord.create_by":
		if e.complexity.BlacklistOperationRecord.CreateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.CreateBy(childComplexity), true

	case "BlacklistOperationRecord.delete_at":
		if e.complexity.BlacklistOperationRecord.DeleteAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.DeleteAt(childComplexity), true

	case "BlacklistOperationRecord.delete_by":
		if e.complexity.BlacklistOperationRecord.DeleteBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.DeleteBy(childComplexity), true

	case "BlacklistOperationRecord.id":
		if e.complexity.BlacklistOperationRecord.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.ID(childComplexity), true

	case "BlacklistOperationRecord.is_delete":
		if e.complexity.BlacklistOperationRecord.IsDelete == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.IsDelete(childComplexity), true

	case "BlacklistOperationRecord.operate":
		if e.complexity.BlacklistOperationRecord.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.Operate(childComplexity), true

	case "BlacklistOperationRecord.remarks":
		if e.complexity.BlacklistOperationRecord.Remarks == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.Remarks(childComplexity), true

	case "BlacklistOperationRecord.update_at":
		if e.complexity.BlacklistOperationRecord.UpdateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.UpdateAt(childComplexity), true

	case "BlacklistOperationRecord.update_by":
		if e.complexity.BlacklistOperationRecord.UpdateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.UpdateBy(childComplexity), true

	case "BlacklistOperationRecord.v_seqn":
		if e.complexity.BlacklistOperationRecord.VSeqn == nil {
			break
		}

		return e.complexity.BlacklistOperationRecord.VSeqn(childComplexity), true

	case "BlacklistOperationRecordAggregate.aggregate":
		if e.complexity.BlacklistOperationRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregate.Aggregate(childComplexity), true

	case "BlacklistOperationRecordAggregate.nodes":
		if e.complexity.BlacklistOperationRecordAggregate.Nodes == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregate.Nodes(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.avg":
		if e.complexity.BlacklistOperationRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Avg(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.count":
		if e.complexity.BlacklistOperationRecordAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_BlacklistOperationRecordAggregateFields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Count(childComplexity, args["columns"].([]model.BlacklistOperationRecordSelectColumn), args["distinct"].(*bool)), true

	case "BlacklistOperationRecordAggregateFields.max":
		if e.complexity.BlacklistOperationRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Max(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.min":
		if e.complexity.BlacklistOperationRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Min(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.stddev":
		if e.complexity.BlacklistOperationRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Stddev(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.stddev_pop":
		if e.complexity.BlacklistOperationRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.StddevPop(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.stddev_samp":
		if e.complexity.BlacklistOperationRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.StddevSamp(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.sum":
		if e.complexity.BlacklistOperationRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Sum(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.var_pop":
		if e.complexity.BlacklistOperationRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.VarPop(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.var_samp":
		if e.complexity.BlacklistOperationRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.VarSamp(childComplexity), true

	case "BlacklistOperationRecordAggregateFields.variance":
		if e.complexity.BlacklistOperationRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAggregateFields.Variance(childComplexity), true

	case "BlacklistOperationRecordAvgFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordAvgFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAvgFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordAvgFields.id":
		if e.complexity.BlacklistOperationRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAvgFields.ID(childComplexity), true

	case "BlacklistOperationRecordAvgFields.operate":
		if e.complexity.BlacklistOperationRecordAvgFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordAvgFields.Operate(childComplexity), true

	case "BlacklistOperationRecordMaxFields.blacklist_record_id":
		if e.complexity.BlacklistOperationRecordMaxFields.BlacklistRecordID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.BlacklistRecordID(childComplexity), true

	case "BlacklistOperationRecordMaxFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordMaxFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordMaxFields.create_at":
		if e.complexity.BlacklistOperationRecordMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.CreateAt(childComplexity), true

	case "BlacklistOperationRecordMaxFields.create_by":
		if e.complexity.BlacklistOperationRecordMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.CreateBy(childComplexity), true

	case "BlacklistOperationRecordMaxFields.delete_at":
		if e.complexity.BlacklistOperationRecordMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.DeleteAt(childComplexity), true

	case "BlacklistOperationRecordMaxFields.delete_by":
		if e.complexity.BlacklistOperationRecordMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.DeleteBy(childComplexity), true

	case "BlacklistOperationRecordMaxFields.id":
		if e.complexity.BlacklistOperationRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.ID(childComplexity), true

	case "BlacklistOperationRecordMaxFields.operate":
		if e.complexity.BlacklistOperationRecordMaxFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.Operate(childComplexity), true

	case "BlacklistOperationRecordMaxFields.remarks":
		if e.complexity.BlacklistOperationRecordMaxFields.Remarks == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.Remarks(childComplexity), true

	case "BlacklistOperationRecordMaxFields.update_at":
		if e.complexity.BlacklistOperationRecordMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.UpdateAt(childComplexity), true

	case "BlacklistOperationRecordMaxFields.update_by":
		if e.complexity.BlacklistOperationRecordMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.UpdateBy(childComplexity), true

	case "BlacklistOperationRecordMaxFields.v_seqn":
		if e.complexity.BlacklistOperationRecordMaxFields.VSeqn == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMaxFields.VSeqn(childComplexity), true

	case "BlacklistOperationRecordMinFields.blacklist_record_id":
		if e.complexity.BlacklistOperationRecordMinFields.BlacklistRecordID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.BlacklistRecordID(childComplexity), true

	case "BlacklistOperationRecordMinFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordMinFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordMinFields.create_at":
		if e.complexity.BlacklistOperationRecordMinFields.CreateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.CreateAt(childComplexity), true

	case "BlacklistOperationRecordMinFields.create_by":
		if e.complexity.BlacklistOperationRecordMinFields.CreateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.CreateBy(childComplexity), true

	case "BlacklistOperationRecordMinFields.delete_at":
		if e.complexity.BlacklistOperationRecordMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.DeleteAt(childComplexity), true

	case "BlacklistOperationRecordMinFields.delete_by":
		if e.complexity.BlacklistOperationRecordMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.DeleteBy(childComplexity), true

	case "BlacklistOperationRecordMinFields.id":
		if e.complexity.BlacklistOperationRecordMinFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.ID(childComplexity), true

	case "BlacklistOperationRecordMinFields.operate":
		if e.complexity.BlacklistOperationRecordMinFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.Operate(childComplexity), true

	case "BlacklistOperationRecordMinFields.remarks":
		if e.complexity.BlacklistOperationRecordMinFields.Remarks == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.Remarks(childComplexity), true

	case "BlacklistOperationRecordMinFields.update_at":
		if e.complexity.BlacklistOperationRecordMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.UpdateAt(childComplexity), true

	case "BlacklistOperationRecordMinFields.update_by":
		if e.complexity.BlacklistOperationRecordMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.UpdateBy(childComplexity), true

	case "BlacklistOperationRecordMinFields.v_seqn":
		if e.complexity.BlacklistOperationRecordMinFields.VSeqn == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMinFields.VSeqn(childComplexity), true

	case "BlacklistOperationRecordMutationResponse.affected_rows":
		if e.complexity.BlacklistOperationRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMutationResponse.AffectedRows(childComplexity), true

	case "BlacklistOperationRecordMutationResponse.returning":
		if e.complexity.BlacklistOperationRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordMutationResponse.Returning(childComplexity), true

	case "BlacklistOperationRecordStddevFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordStddevFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordStddevFields.id":
		if e.complexity.BlacklistOperationRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevFields.ID(childComplexity), true

	case "BlacklistOperationRecordStddevFields.operate":
		if e.complexity.BlacklistOperationRecordStddevFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevFields.Operate(childComplexity), true

	case "BlacklistOperationRecordStddevPopFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordStddevPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevPopFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordStddevPopFields.id":
		if e.complexity.BlacklistOperationRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevPopFields.ID(childComplexity), true

	case "BlacklistOperationRecordStddevPopFields.operate":
		if e.complexity.BlacklistOperationRecordStddevPopFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevPopFields.Operate(childComplexity), true

	case "BlacklistOperationRecordStddevSampFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordStddevSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevSampFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordStddevSampFields.id":
		if e.complexity.BlacklistOperationRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevSampFields.ID(childComplexity), true

	case "BlacklistOperationRecordStddevSampFields.operate":
		if e.complexity.BlacklistOperationRecordStddevSampFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordStddevSampFields.Operate(childComplexity), true

	case "BlacklistOperationRecordSumFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordSumFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordSumFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordSumFields.id":
		if e.complexity.BlacklistOperationRecordSumFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordSumFields.ID(childComplexity), true

	case "BlacklistOperationRecordSumFields.operate":
		if e.complexity.BlacklistOperationRecordSumFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordSumFields.Operate(childComplexity), true

	case "BlacklistOperationRecordVarPopFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordVarPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarPopFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordVarPopFields.id":
		if e.complexity.BlacklistOperationRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarPopFields.ID(childComplexity), true

	case "BlacklistOperationRecordVarPopFields.operate":
		if e.complexity.BlacklistOperationRecordVarPopFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarPopFields.Operate(childComplexity), true

	case "BlacklistOperationRecordVarSampFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordVarSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarSampFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordVarSampFields.id":
		if e.complexity.BlacklistOperationRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarSampFields.ID(childComplexity), true

	case "BlacklistOperationRecordVarSampFields.operate":
		if e.complexity.BlacklistOperationRecordVarSampFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarSampFields.Operate(childComplexity), true

	case "BlacklistOperationRecordVarianceFields.blacklist_type":
		if e.complexity.BlacklistOperationRecordVarianceFields.BlacklistType == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarianceFields.BlacklistType(childComplexity), true

	case "BlacklistOperationRecordVarianceFields.id":
		if e.complexity.BlacklistOperationRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarianceFields.ID(childComplexity), true

	case "BlacklistOperationRecordVarianceFields.operate":
		if e.complexity.BlacklistOperationRecordVarianceFields.Operate == nil {
			break
		}

		return e.complexity.BlacklistOperationRecordVarianceFields.Operate(childComplexity), true

	case "Mutation.delete_blacklist_operation_record":
		if e.complexity.Mutation.DeleteBlacklistOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_blacklist_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBlacklistOperationRecord(childComplexity, args["where"].(model.BlacklistOperationRecordBoolExp)), true

	case "Mutation.delete_blacklist_operation_record_by_pk":
		if e.complexity.Mutation.DeleteBlacklistOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_blacklist_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBlacklistOperationRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_blacklist_operation_record":
		if e.complexity.Mutation.InsertBlacklistOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_blacklist_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertBlacklistOperationRecord(childComplexity, args["objects"].([]*model.BlacklistOperationRecordInsertInput), args["on_conflict"].(*model.BlacklistOperationRecordOnConflict)), true

	case "Mutation.insert_blacklist_operation_record_one":
		if e.complexity.Mutation.InsertBlacklistOperationRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_blacklist_operation_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertBlacklistOperationRecordOne(childComplexity, args["object"].(model.BlacklistOperationRecordInsertInput), args["on_conflict"].(*model.BlacklistOperationRecordOnConflict)), true

	case "Mutation.update_blacklist_operation_record":
		if e.complexity.Mutation.UpdateBlacklistOperationRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_blacklist_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBlacklistOperationRecord(childComplexity, args["_inc"].(*model.BlacklistOperationRecordIncInput), args["_set"].(*model.BlacklistOperationRecordSetInput), args["where"].(model.BlacklistOperationRecordBoolExp)), true

	case "Mutation.update_blacklist_operation_record_by_pk":
		if e.complexity.Mutation.UpdateBlacklistOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_blacklist_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBlacklistOperationRecordByPk(childComplexity, args["_inc"].(*model.BlacklistOperationRecordIncInput), args["_set"].(*model.BlacklistOperationRecordSetInput), args["pk_columns"].(model.BlacklistOperationRecordPkColumnsInput)), true

	case "Query.blacklist_operation_record":
		if e.complexity.Query.BlacklistOperationRecord == nil {
			break
		}

		args, err := ec.field_Query_blacklist_operation_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BlacklistOperationRecord(childComplexity, args["distinct_on"].([]model.BlacklistOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.BlacklistOperationRecordOrderBy), args["where"].(*model.BlacklistOperationRecordBoolExp)), true

	case "Query.blacklist_operation_record_aggregate":
		if e.complexity.Query.BlacklistOperationRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_blacklist_operation_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BlacklistOperationRecordAggregate(childComplexity, args["distinct_on"].([]model.BlacklistOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.BlacklistOperationRecordOrderBy), args["where"].(*model.BlacklistOperationRecordBoolExp)), true

	case "Query.blacklist_operation_record_by_pk":
		if e.complexity.Query.BlacklistOperationRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_blacklist_operation_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BlacklistOperationRecordByPk(childComplexity, args["id"].(int64)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/blanklist_operation_record.graphqls", Input: `"""
黑名单操作记录表


columns and relationships of "blacklist_operation_record"
"""
type BlacklistOperationRecord {
	"""
	黑名单记录ID
	"""
	blacklist_record_id: String!
	"""
	黑名单类别
	"""
	blacklist_type: Int!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	ID
	"""
	id: Bigint!
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	操作类别
	"""
	operate: Int!
	"""
	备注
	"""
	remarks: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	驾驶员ID或者企业ID或者车辆ID
	"""
	v_seqn: String!
}
"""
aggregated selection of "blacklist_operation_record"
"""
type BlacklistOperationRecordAggregate {
	aggregate: BlacklistOperationRecordAggregateFields
	nodes: [BlacklistOperationRecord!]!
}
"""
aggregate fields of "blacklist_operation_record"
"""
type BlacklistOperationRecordAggregateFields {
	avg: BlacklistOperationRecordAvgFields
	count(columns: [BlacklistOperationRecordSelectColumn!], distinct: Boolean): Int
	max: BlacklistOperationRecordMaxFields
	min: BlacklistOperationRecordMinFields
	stddev: BlacklistOperationRecordStddevFields
	stddev_pop: BlacklistOperationRecordStddevPopFields
	stddev_samp: BlacklistOperationRecordStddevSampFields
	sum: BlacklistOperationRecordSumFields
	var_pop: BlacklistOperationRecordVarPopFields
	var_samp: BlacklistOperationRecordVarSampFields
	variance: BlacklistOperationRecordVarianceFields
}
"""
order by aggregate values of table "blacklist_operation_record"
"""
input BlacklistOperationRecordAggregateOrderBy {
	avg: BlacklistOperationRecordAvgOrderBy
	count: OrderBy
	max: BlacklistOperationRecordMaxOrderBy
	min: BlacklistOperationRecordMinOrderBy
	stddev: BlacklistOperationRecordStddevOrderBy
	stddev_pop: BlacklistOperationRecordStddevPopOrderBy
	stddev_samp: BlacklistOperationRecordStddevSampOrderBy
	sum: BlacklistOperationRecordSumOrderBy
	var_pop: BlacklistOperationRecordVarPopOrderBy
	var_samp: BlacklistOperationRecordVarSampOrderBy
	variance: BlacklistOperationRecordVarianceOrderBy
}
"""
input type for inserting array relation for remote table "blacklist_operation_record"
"""
input BlacklistOperationRecordArrRelInsertInput {
	data: [BlacklistOperationRecordInsertInput!]!
	on_conflict: BlacklistOperationRecordOnConflict
}
"""
aggregate avg on columns
"""
type BlacklistOperationRecordAvgFields {
	blacklist_type: Float
	id: Float
	operate: Float
}
"""
order by avg() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordAvgOrderBy {
	blacklist_type: OrderBy
	id: OrderBy
	operate: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'AND'.
"""
input BlacklistOperationRecordBoolExp {
	_and: [BlacklistOperationRecordBoolExp]
	_not: BlacklistOperationRecordBoolExp
	_or: [BlacklistOperationRecordBoolExp]
	blacklist_record_id: StringComparisonExp
	blacklist_type: IntComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	id: BigintComparisonExp
	is_delete: BooleanComparisonExp
	operate: IntComparisonExp
	remarks: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	v_seqn: StringComparisonExp
}
"""
unique or primary key constraints on table "blacklist_operation_record"
"""
enum BlacklistOperationRecordConstraint {
	"""
	unique or primary key constraint
	"""
	blacklist_operation_record_pkey
}
"""
input type for incrementing integer column in table "blacklist_operation_record"
"""
input BlacklistOperationRecordIncInput {
	blacklist_type: Int
	id: Bigint
	operate: Int
}
"""
input type for inserting data into table "blacklist_operation_record"
"""
input BlacklistOperationRecordInsertInput {
	blacklist_record_id: String
	blacklist_type: Int
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	id: Bigint
	is_delete: Boolean
	operate: Int
	remarks: String
	update_at: Timestamptz
	update_by: String
	v_seqn: String
}
"""
aggregate max on columns
"""
type BlacklistOperationRecordMaxFields {
	blacklist_record_id: String
	blacklist_type: Int
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	id: Bigint
	operate: Int
	remarks: String
	update_at: Timestamptz
	update_by: String
	v_seqn: String
}
"""
order by max() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordMaxOrderBy {
	blacklist_record_id: OrderBy
	blacklist_type: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	id: OrderBy
	operate: OrderBy
	remarks: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	v_seqn: OrderBy
}
"""
aggregate min on columns
"""
type BlacklistOperationRecordMinFields {
	blacklist_record_id: String
	blacklist_type: Int
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	id: Bigint
	operate: Int
	remarks: String
	update_at: Timestamptz
	update_by: String
	v_seqn: String
}
"""
order by min() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordMinOrderBy {
	blacklist_record_id: OrderBy
	blacklist_type: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	id: OrderBy
	operate: OrderBy
	remarks: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	v_seqn: OrderBy
}
"""
response of any mutation on the table "blacklist_operation_record"
"""
type BlacklistOperationRecordMutationResponse {
	"""
	number of affected rows by the mutation
	"""
	affected_rows: Int!
	"""
	data of the affected rows by the mutation
	"""
	returning: [BlacklistOperationRecord!]!
}
"""
input type for inserting object relation for remote table "blacklist_operation_record"
"""
input BlacklistOperationRecordObjRelInsertInput {
	data: BlacklistOperationRecordInsertInput!
	on_conflict: BlacklistOperationRecordOnConflict
}
"""
on conflict condition type for table "blacklist_operation_record"
"""
input BlacklistOperationRecordOnConflict {
	constraint: BlacklistOperationRecordConstraint!
	update_columns: [BlacklistOperationRecordUpdateColumn!]!
	where: BlacklistOperationRecordBoolExp
}
"""
ordering options when selecting data from "blacklist_operation_record"
"""
input BlacklistOperationRecordOrderBy {
	blacklist_record_id: OrderBy
	blacklist_type: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	id: OrderBy
	is_delete: OrderBy
	operate: OrderBy
	remarks: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	v_seqn: OrderBy
}
"""
primary key columns input for table: "blacklist_operation_record"
"""
input BlacklistOperationRecordPkColumnsInput {
	"""
	ID
	"""
	id: Bigint!
}
"""
select columns of table "blacklist_operation_record"
"""
enum BlacklistOperationRecordSelectColumn {
	"""
	column name
	"""
	blacklist_record_id
	"""
	column name
	"""
	blacklist_type
	"""
	column name
	"""
	create_at
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	id
	"""
	column name
	"""
	is_delete
	"""
	column name
	"""
	operate
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
	"""
	column name
	"""
	v_seqn
}
"""
input type for updating data in table "blacklist_operation_record"
"""
input BlacklistOperationRecordSetInput {
	blacklist_record_id: String
	blacklist_type: Int
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	id: Bigint
	is_delete: Boolean
	operate: Int
	remarks: String
	update_at: Timestamptz
	update_by: String
	v_seqn: String
}
"""
aggregate stddev on columns
"""
type BlacklistOperationRecordStddevFields {
	blacklist_type: Float
	id: Float
	operate: Float
}
"""
order by stddev() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordStddevOrderBy {
	blacklist_type: OrderBy
	id: OrderBy
	operate: OrderBy
}
"""
aggregate stddev_pop on columns
"""
type BlacklistOperationRecordStddevPopFields {
	blacklist_type: Float
	id: Float
	operate: Float
}
"""
order by stddev_pop() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordStddevPopOrderBy {
	blacklist_type: OrderBy
	id: OrderBy
	operate: OrderBy
}
"""
aggregate stddev_samp on columns
"""
type BlacklistOperationRecordStddevSampFields {
	blacklist_type: Float
	id: Float
	operate: Float
}
"""
order by stddev_samp() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordStddevSampOrderBy {
	blacklist_type: OrderBy
	id: OrderBy
	operate: OrderBy
}
"""
aggregate sum on columns
"""
type BlacklistOperationRecordSumFields {
	blacklist_type: Int
	id: Bigint
	operate: Int
}
"""
order by sum() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordSumOrderBy {
	blacklist_type: OrderBy
	id: OrderBy
	operate: OrderBy
}
"""
update columns of table "blacklist_operation_record"
"""
enum BlacklistOperationRecordUpdateColumn {
	"""
	column name
	"""
	blacklist_record_id
	"""
	column name
	"""
	blacklist_type
	"""
	column name
	"""
	create_at
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	id
	"""
	column name
	"""
	is_delete
	"""
	column name
	"""
	operate
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
	"""
	column name
	"""
	v_seqn
}
"""
aggregate var_pop on columns
"""
type BlacklistOperationRecordVarPopFields {
	blacklist_type: Float
	id: Float
	operate: Float
}
"""
order by var_pop() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordVarPopOrderBy {
	blacklist_type: OrderBy
	id: OrderBy
	operate: OrderBy
}
"""
aggregate var_samp on columns
"""
type BlacklistOperationRecordVarSampFields {
	blacklist_type: Float
	id: Float
	operate: Float
}
"""
order by var_samp() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordVarSampOrderBy {
	blacklist_type: OrderBy
	id: OrderBy
	operate: OrderBy
}
"""
aggregate variance on columns
"""
type BlacklistOperationRecordVarianceFields {
	blacklist_type: Float
	id: Float
	operate: Float
}
"""
order by variance() on columns of table "blacklist_operation_record"
"""
input BlacklistOperationRecordVarianceOrderBy {
	blacklist_type: OrderBy
	id: OrderBy
	operate: OrderBy
}
extend type Mutation {
	"""
	delete data from the table: "blacklist_operation_record"
	"""
	delete_blacklist_operation_record("""
	filter the rows which have to be deleted
	"""
	where: BlacklistOperationRecordBoolExp!): BlacklistOperationRecordMutationResponse
	"""
	delete single row from the table: "blacklist_operation_record"
	"""
	delete_blacklist_operation_record_by_pk("""
	ID
	"""
	id: Bigint!): BlacklistOperationRecord
	"""
	insert data into the table: "blacklist_operation_record"
	"""
	insert_blacklist_operation_record("""
	the rows to be inserted
	"""
	objects: [BlacklistOperationRecordInsertInput!]!, """
	on conflict condition
	"""
	on_conflict: BlacklistOperationRecordOnConflict): BlacklistOperationRecordMutationResponse
	"""
	insert a single row into the table: "blacklist_operation_record"
	"""
	insert_blacklist_operation_record_one("""
	the row to be inserted
	"""
	object: BlacklistOperationRecordInsertInput!, """
	on conflict condition
	"""
	on_conflict: BlacklistOperationRecordOnConflict): BlacklistOperationRecord
	"""
	update data of the table: "blacklist_operation_record"
	"""
	update_blacklist_operation_record("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: BlacklistOperationRecordIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: BlacklistOperationRecordSetInput, """
	filter the rows which have to be updated
	"""
	where: BlacklistOperationRecordBoolExp!): BlacklistOperationRecordMutationResponse
	"""
	update single row of the table: "blacklist_operation_record"
	"""
	update_blacklist_operation_record_by_pk("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: BlacklistOperationRecordIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: BlacklistOperationRecordSetInput, pk_columns: BlacklistOperationRecordPkColumnsInput!): BlacklistOperationRecord
}
extend type Query {
	"""
	fetch data from the table: "blacklist_operation_record"
	"""
	blacklist_operation_record("""
	distinct select on columns
	"""
	distinct_on: [BlacklistOperationRecordSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [BlacklistOperationRecordOrderBy!], """
	filter the rows returned
	"""
	where: BlacklistOperationRecordBoolExp): [BlacklistOperationRecord!]!
	"""
	fetch aggregated fields from the table: "blacklist_operation_record"
	"""
	blacklist_operation_record_aggregate("""
	distinct select on columns
	"""
	distinct_on: [BlacklistOperationRecordSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [BlacklistOperationRecordOrderBy!], """
	filter the rows returned
	"""
	where: BlacklistOperationRecordBoolExp): BlacklistOperationRecordAggregate!
	"""
	fetch data from the table: "blacklist_operation_record" using primary key columns
	"""
	blacklist_operation_record_by_pk("""
	ID
	"""
	id: Bigint!): BlacklistOperationRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/common.graphqls", Input: `"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_BlacklistOperationRecordAggregateFields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.BlacklistOperationRecordSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOBlacklistOperationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_blacklist_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BlacklistOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNBlacklistOperationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_blacklist_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_blacklist_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.BlacklistOperationRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNBlacklistOperationRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.BlacklistOperationRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOBlacklistOperationRecordOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_blacklist_operation_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BlacklistOperationRecordInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNBlacklistOperationRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.BlacklistOperationRecordOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOBlacklistOperationRecordOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_blacklist_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlacklistOperationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOBlacklistOperationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.BlacklistOperationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOBlacklistOperationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.BlacklistOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNBlacklistOperationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_blacklist_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BlacklistOperationRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOBlacklistOperationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.BlacklistOperationRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOBlacklistOperationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.BlacklistOperationRecordPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNBlacklistOperationRecordPkColumnsInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_blacklist_operation_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.BlacklistOperationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOBlacklistOperationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.BlacklistOperationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOBlacklistOperationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.BlacklistOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOBlacklistOperationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_blacklist_operation_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.BlacklistOperationRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOBlacklistOperationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.BlacklistOperationRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOBlacklistOperationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.BlacklistOperationRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOBlacklistOperationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_blacklist_operation_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _BlacklistOperationRecord_blacklist_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_operate(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecord_v_seqn(ctx context.Context, field graphql.CollectedField, obj *model1.BlacklistOperationRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VSeqn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordAggregateFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalNBlacklistOperationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordAvgFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_BlacklistOperationRecordAggregateFields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMaxFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMinFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordStddevFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordSumFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordVarPopFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordVarSampFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordVarianceFields)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAvgFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordAvgFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_blacklist_record_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMaxFields_v_seqn(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VSeqn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_blacklist_record_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMinFields_v_seqn(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VSeqn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalNBlacklistOperationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevPopFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordStddevSampFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordSumFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordSumFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarPopFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarSampFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarianceFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BlacklistOperationRecordVarianceFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.BlacklistOperationRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BlacklistOperationRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_blacklist_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_blacklist_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBlacklistOperationRecord(rctx, args["where"].(model.BlacklistOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_blacklist_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_blacklist_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBlacklistOperationRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_blacklist_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_blacklist_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertBlacklistOperationRecord(rctx, args["objects"].([]*model.BlacklistOperationRecordInsertInput), args["on_conflict"].(*model.BlacklistOperationRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_blacklist_operation_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_blacklist_operation_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertBlacklistOperationRecordOne(rctx, args["object"].(model.BlacklistOperationRecordInsertInput), args["on_conflict"].(*model.BlacklistOperationRecordOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_blacklist_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_blacklist_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBlacklistOperationRecord(rctx, args["_inc"].(*model.BlacklistOperationRecordIncInput), args["_set"].(*model.BlacklistOperationRecordSetInput), args["where"].(model.BlacklistOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordMutationResponse)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_blacklist_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_blacklist_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBlacklistOperationRecordByPk(rctx, args["_inc"].(*model.BlacklistOperationRecordIncInput), args["_set"].(*model.BlacklistOperationRecordSetInput), args["pk_columns"].(model.BlacklistOperationRecordPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_blacklist_operation_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_blacklist_operation_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BlacklistOperationRecord(rctx, args["distinct_on"].([]model.BlacklistOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.BlacklistOperationRecordOrderBy), args["where"].(*model.BlacklistOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalNBlacklistOperationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_blacklist_operation_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_blacklist_operation_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BlacklistOperationRecordAggregate(rctx, args["distinct_on"].([]model.BlacklistOperationRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.BlacklistOperationRecordOrderBy), args["where"].(*model.BlacklistOperationRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BlacklistOperationRecordAggregate)
	fc.Result = res
	return ec.marshalNBlacklistOperationRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_blacklist_operation_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_blacklist_operation_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BlacklistOperationRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.BlacklistOperationRecord)
	fc.Result = res
	return ec.marshalOBlacklistOperationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordAggregateOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordAggregateOrderBy, error) {
	var it model.BlacklistOperationRecordAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOBlacklistOperationRecordAvgOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOBlacklistOperationRecordMaxOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOBlacklistOperationRecordMinOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOBlacklistOperationRecordStddevOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOBlacklistOperationRecordStddevPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOBlacklistOperationRecordStddevSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOBlacklistOperationRecordSumOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOBlacklistOperationRecordVarPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOBlacklistOperationRecordVarSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOBlacklistOperationRecordVarianceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordArrRelInsertInput(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordArrRelInsertInput, error) {
	var it model.BlacklistOperationRecordArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNBlacklistOperationRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOBlacklistOperationRecordOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordAvgOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordAvgOrderBy, error) {
	var it model.BlacklistOperationRecordAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordBoolExp(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordBoolExp, error) {
	var it model.BlacklistOperationRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOBlacklistOperationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOBlacklistOperationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOBlacklistOperationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordIncInput(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordIncInput, error) {
	var it model.BlacklistOperationRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordInsertInput(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordInsertInput, error) {
	var it model.BlacklistOperationRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordMaxOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordMaxOrderBy, error) {
	var it model.BlacklistOperationRecordMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordMinOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordMinOrderBy, error) {
	var it model.BlacklistOperationRecordMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordObjRelInsertInput(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordObjRelInsertInput, error) {
	var it model.BlacklistOperationRecordObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNBlacklistOperationRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOBlacklistOperationRecordOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordOnConflict(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordOnConflict, error) {
	var it model.BlacklistOperationRecordOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNBlacklistOperationRecordConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNBlacklistOperationRecordUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOBlacklistOperationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordOrderBy, error) {
	var it model.BlacklistOperationRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordPkColumnsInput(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordPkColumnsInput, error) {
	var it model.BlacklistOperationRecordPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNBigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordSetInput(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordSetInput, error) {
	var it model.BlacklistOperationRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_record_id"))
			it.BlacklistRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "v_seqn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v_seqn"))
			it.VSeqn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordStddevOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordStddevOrderBy, error) {
	var it model.BlacklistOperationRecordStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordStddevPopOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordStddevPopOrderBy, error) {
	var it model.BlacklistOperationRecordStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordStddevSampOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordStddevSampOrderBy, error) {
	var it model.BlacklistOperationRecordStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordSumOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordSumOrderBy, error) {
	var it model.BlacklistOperationRecordSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordVarPopOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordVarPopOrderBy, error) {
	var it model.BlacklistOperationRecordVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordVarSampOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordVarSampOrderBy, error) {
	var it model.BlacklistOperationRecordVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlacklistOperationRecordVarianceOrderBy(ctx context.Context, obj interface{}) (model.BlacklistOperationRecordVarianceOrderBy, error) {
	var it model.BlacklistOperationRecordVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var blacklistOperationRecordImplementors = []string{"BlacklistOperationRecord"}

func (ec *executionContext) _BlacklistOperationRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.BlacklistOperationRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecord")
		case "blacklist_record_id":
			out.Values[i] = ec._BlacklistOperationRecord_blacklist_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecord_blacklist_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._BlacklistOperationRecord_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._BlacklistOperationRecord_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._BlacklistOperationRecord_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._BlacklistOperationRecord_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._BlacklistOperationRecord_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecord_operate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._BlacklistOperationRecord_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._BlacklistOperationRecord_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._BlacklistOperationRecord_update_by(ctx, field, obj)
		case "v_seqn":
			out.Values[i] = ec._BlacklistOperationRecord_v_seqn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordAggregateImplementors = []string{"BlacklistOperationRecordAggregate"}

func (ec *executionContext) _BlacklistOperationRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._BlacklistOperationRecordAggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._BlacklistOperationRecordAggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordAggregateFieldsImplementors = []string{"BlacklistOperationRecordAggregateFields"}

func (ec *executionContext) _BlacklistOperationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._BlacklistOperationRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordAvgFieldsImplementors = []string{"BlacklistOperationRecordAvgFields"}

func (ec *executionContext) _BlacklistOperationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordAvgFields")
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordAvgFields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordAvgFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordAvgFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordMaxFieldsImplementors = []string{"BlacklistOperationRecordMaxFields"}

func (ec *executionContext) _BlacklistOperationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordMaxFields")
		case "blacklist_record_id":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_blacklist_record_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_blacklist_type(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_update_by(ctx, field, obj)
		case "v_seqn":
			out.Values[i] = ec._BlacklistOperationRecordMaxFields_v_seqn(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordMinFieldsImplementors = []string{"BlacklistOperationRecordMinFields"}

func (ec *executionContext) _BlacklistOperationRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordMinFields")
		case "blacklist_record_id":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_blacklist_record_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_blacklist_type(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_delete_by(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_remarks(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_update_by(ctx, field, obj)
		case "v_seqn":
			out.Values[i] = ec._BlacklistOperationRecordMinFields_v_seqn(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordMutationResponseImplementors = []string{"BlacklistOperationRecordMutationResponse"}

func (ec *executionContext) _BlacklistOperationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._BlacklistOperationRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._BlacklistOperationRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordStddevFieldsImplementors = []string{"BlacklistOperationRecordStddevFields"}

func (ec *executionContext) _BlacklistOperationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordStddevFields")
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordStddevFields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordStddevFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordStddevFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordStddevPopFieldsImplementors = []string{"BlacklistOperationRecordStddevPopFields"}

func (ec *executionContext) _BlacklistOperationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordStddevPopFields")
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordStddevPopFields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordStddevPopFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordStddevPopFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordStddevSampFieldsImplementors = []string{"BlacklistOperationRecordStddevSampFields"}

func (ec *executionContext) _BlacklistOperationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordStddevSampFields")
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordStddevSampFields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordStddevSampFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordStddevSampFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordSumFieldsImplementors = []string{"BlacklistOperationRecordSumFields"}

func (ec *executionContext) _BlacklistOperationRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordSumFields")
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordSumFields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordSumFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordSumFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordVarPopFieldsImplementors = []string{"BlacklistOperationRecordVarPopFields"}

func (ec *executionContext) _BlacklistOperationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordVarPopFields")
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordVarPopFields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordVarPopFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordVarPopFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordVarSampFieldsImplementors = []string{"BlacklistOperationRecordVarSampFields"}

func (ec *executionContext) _BlacklistOperationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordVarSampFields")
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordVarSampFields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordVarSampFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordVarSampFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blacklistOperationRecordVarianceFieldsImplementors = []string{"BlacklistOperationRecordVarianceFields"}

func (ec *executionContext) _BlacklistOperationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.BlacklistOperationRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blacklistOperationRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlacklistOperationRecordVarianceFields")
		case "blacklist_type":
			out.Values[i] = ec._BlacklistOperationRecordVarianceFields_blacklist_type(ctx, field, obj)
		case "id":
			out.Values[i] = ec._BlacklistOperationRecordVarianceFields_id(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._BlacklistOperationRecordVarianceFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_blacklist_operation_record":
			out.Values[i] = ec._Mutation_delete_blacklist_operation_record(ctx, field)
		case "delete_blacklist_operation_record_by_pk":
			out.Values[i] = ec._Mutation_delete_blacklist_operation_record_by_pk(ctx, field)
		case "insert_blacklist_operation_record":
			out.Values[i] = ec._Mutation_insert_blacklist_operation_record(ctx, field)
		case "insert_blacklist_operation_record_one":
			out.Values[i] = ec._Mutation_insert_blacklist_operation_record_one(ctx, field)
		case "update_blacklist_operation_record":
			out.Values[i] = ec._Mutation_update_blacklist_operation_record(ctx, field)
		case "update_blacklist_operation_record_by_pk":
			out.Values[i] = ec._Mutation_update_blacklist_operation_record_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "blacklist_operation_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_blacklist_operation_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "blacklist_operation_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_blacklist_operation_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "blacklist_operation_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_blacklist_operation_record_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBlacklistOperationRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.BlacklistOperationRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlacklistOperationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBlacklistOperationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecord(ctx context.Context, sel ast.SelectionSet, v *model1.BlacklistOperationRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BlacklistOperationRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNBlacklistOperationRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.BlacklistOperationRecordAggregate) graphql.Marshaler {
	return ec._BlacklistOperationRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNBlacklistOperationRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BlacklistOperationRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx context.Context, v interface{}) (model.BlacklistOperationRecordBoolExp, error) {
	res, err := ec.unmarshalInputBlacklistOperationRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordConstraint(ctx context.Context, v interface{}) (model.BlacklistOperationRecordConstraint, error) {
	var res model.BlacklistOperationRecordConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBlacklistOperationRecordConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordConstraint(ctx context.Context, sel ast.SelectionSet, v model.BlacklistOperationRecordConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx context.Context, v interface{}) (model.BlacklistOperationRecordInsertInput, error) {
	res, err := ec.unmarshalInputBlacklistOperationRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.BlacklistOperationRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.BlacklistOperationRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlacklistOperationRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordInsertInput(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordInsertInput, error) {
	res, err := ec.unmarshalInputBlacklistOperationRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordOrderBy, error) {
	res, err := ec.unmarshalInputBlacklistOperationRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordPkColumnsInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordPkColumnsInput(ctx context.Context, v interface{}) (model.BlacklistOperationRecordPkColumnsInput, error) {
	res, err := ec.unmarshalInputBlacklistOperationRecordPkColumnsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumn(ctx context.Context, v interface{}) (model.BlacklistOperationRecordSelectColumn, error) {
	var res model.BlacklistOperationRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBlacklistOperationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.BlacklistOperationRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumn(ctx context.Context, v interface{}) (model.BlacklistOperationRecordUpdateColumn, error) {
	var res model.BlacklistOperationRecordUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBlacklistOperationRecordUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.BlacklistOperationRecordUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBlacklistOperationRecordUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.BlacklistOperationRecordUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.BlacklistOperationRecordUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlacklistOperationRecordUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNBlacklistOperationRecordUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BlacklistOperationRecordUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlacklistOperationRecordUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐBlacklistOperationRecord(ctx context.Context, sel ast.SelectionSet, v *model1.BlacklistOperationRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOBlacklistOperationRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOBlacklistOperationRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordAvgOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordAvgOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordAvgOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx context.Context, v interface{}) ([]*model.BlacklistOperationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.BlacklistOperationRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBlacklistOperationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordBoolExp(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordIncInput(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordMaxOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMaxOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordMaxOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordMinOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMinOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordMinOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOnConflict(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordOnConflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.BlacklistOperationRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.BlacklistOperationRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlacklistOperationRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.BlacklistOperationRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.BlacklistOperationRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlacklistOperationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBlacklistOperationRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BlacklistOperationRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBlacklistOperationRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSetInput(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordStddevOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordStddevOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordStddevPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevPopOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordStddevPopOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordStddevSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordStddevSampOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordStddevSampOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordSumOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordSumOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordSumOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordVarPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarPopOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordVarPopOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordVarSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarSampOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordVarSampOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlacklistOperationRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.BlacklistOperationRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlacklistOperationRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlacklistOperationRecordVarianceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐBlacklistOperationRecordVarianceOrderBy(ctx context.Context, v interface{}) (*model.BlacklistOperationRecordVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlacklistOperationRecordVarianceOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
