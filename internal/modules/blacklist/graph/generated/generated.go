// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/blacklist/graph/model"
	model1 "VehicleSupervision/internal/modules/blacklist/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	DriverBlacklistApply struct {
		ApplyID       func(childComplexity int) int
		ApplyReason   func(childComplexity int) int
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		DriverID      func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		State         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	DriverBlacklistApplyAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DriverBlacklistApplyAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverBlacklistApplyAvgFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		State         func(childComplexity int) int
	}

	DriverBlacklistApplyMaxFields struct {
		ApplyID       func(childComplexity int) int
		ApplyReason   func(childComplexity int) int
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		DriverID      func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		State         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	DriverBlacklistApplyMinFields struct {
		ApplyID       func(childComplexity int) int
		ApplyReason   func(childComplexity int) int
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		DriverID      func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		State         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	DriverBlacklistApplyMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverBlacklistApplyStddevFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		State         func(childComplexity int) int
	}

	DriverBlacklistApplyStddevPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		State         func(childComplexity int) int
	}

	DriverBlacklistApplyStddevSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		State         func(childComplexity int) int
	}

	DriverBlacklistApplySumFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		State         func(childComplexity int) int
	}

	DriverBlacklistApplyVarPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		State         func(childComplexity int) int
	}

	DriverBlacklistApplyVarSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		State         func(childComplexity int) int
	}

	DriverBlacklistApplyVarianceFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		State         func(childComplexity int) int
	}

	DriverBlacklistHis struct {
		ApplyID       func(childComplexity int) int
		AttachFile    func(childComplexity int) int
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		DriverCardNum func(childComplexity int) int
		DriverID      func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		Step          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	DriverBlacklistHisAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DriverBlacklistHisAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DriverBlacklistHisAvgFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
		Step          func(childComplexity int) int
	}

	DriverBlacklistHisMaxFields struct {
		ApplyID       func(childComplexity int) int
		AttachFile    func(childComplexity int) int
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		DriverCardNum func(childComplexity int) int
		DriverID      func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		Step          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	DriverBlacklistHisMinFields struct {
		ApplyID       func(childComplexity int) int
		AttachFile    func(childComplexity int) int
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		DriverCardNum func(childComplexity int) int
		DriverID      func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		Step          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	DriverBlacklistHisMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DriverBlacklistHisStddevFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
		Step          func(childComplexity int) int
	}

	DriverBlacklistHisStddevPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
		Step          func(childComplexity int) int
	}

	DriverBlacklistHisStddevSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
		Step          func(childComplexity int) int
	}

	DriverBlacklistHisSumFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
		Step          func(childComplexity int) int
	}

	DriverBlacklistHisVarPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
		Step          func(childComplexity int) int
	}

	DriverBlacklistHisVarSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
		Step          func(childComplexity int) int
	}

	DriverBlacklistHisVarianceFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
		Step          func(childComplexity int) int
	}

	EnterpriseBlacklistAlarm struct {
		AlarmID      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsBlack      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		IsRank       func(childComplexity int) int
		Type         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmAvgFields struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		Year func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmMaxFields struct {
		AlarmID      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsBlack      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		IsRank       func(childComplexity int) int
		Type         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmMinFields struct {
		AlarmID      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		DeletedBy    func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsBlack      func(childComplexity int) int
		IsDeleted    func(childComplexity int) int
		IsRank       func(childComplexity int) int
		Type         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		UpdatedBy    func(childComplexity int) int
		Year         func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmStddevFields struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		Year func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmStddevPopFields struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		Year func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmStddevSampFields struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		Year func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmSumFields struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		Year func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmVarPopFields struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		Year func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmVarSampFields struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		Year func(childComplexity int) int
	}

	EnterpriseBlacklistAlarmVarianceFields struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		Year func(childComplexity int) int
	}

	EnterpriseBlacklistHis struct {
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		EnterpriseID  func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	EnterpriseBlacklistHisAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EnterpriseBlacklistHisAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseBlacklistHisAvgFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	EnterpriseBlacklistHisMaxFields struct {
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		EnterpriseID  func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	EnterpriseBlacklistHisMinFields struct {
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		EnterpriseID  func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
	}

	EnterpriseBlacklistHisMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseBlacklistHisStddevFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	EnterpriseBlacklistHisStddevPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	EnterpriseBlacklistHisStddevSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	EnterpriseBlacklistHisSumFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	EnterpriseBlacklistHisVarPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	EnterpriseBlacklistHisVarSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	EnterpriseBlacklistHisVarianceFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	Mutation struct {
		DeleteDriverBlacklistApply              func(childComplexity int, where model.DriverBlacklistApplyBoolExp) int
		DeleteDriverBlacklistApplyByPk          func(childComplexity int, id int64) int
		DeleteDriverBlacklistApplyByUnionPk     func(childComplexity int, applyID string) int
		DeleteDriverBlacklistHis                func(childComplexity int, where model.DriverBlacklistHisBoolExp) int
		DeleteDriverBlacklistHisByPk            func(childComplexity int, id int64) int
		DeleteDriverBlacklistHisByUnionPk       func(childComplexity int, hisID string) int
		DeleteEnterpriseBlacklistAlarm          func(childComplexity int, where model.EnterpriseBlacklistAlarmBoolExp) int
		DeleteEnterpriseBlacklistAlarmByPk      func(childComplexity int, id int64) int
		DeleteEnterpriseBlacklistAlarmByUnionPk func(childComplexity int, alarmID string) int
		DeleteEnterpriseBlacklistHis            func(childComplexity int, where model.EnterpriseBlacklistHisBoolExp) int
		DeleteEnterpriseBlacklistHisByPk        func(childComplexity int, id int64) int
		DeleteEnterpriseBlacklistHisByUnionPk   func(childComplexity int, hisID string) int
		DeleteVehicleBlacklistAlarm             func(childComplexity int, where model.VehicleBlacklistAlarmBoolExp) int
		DeleteVehicleBlacklistAlarmByPk         func(childComplexity int, id int64) int
		DeleteVehicleBlacklistAlarmByUnionPk    func(childComplexity int, alarmID string) int
		DeleteVehicleBlacklistHis               func(childComplexity int, where model.VehicleBlacklistHisBoolExp) int
		DeleteVehicleBlacklistHisByPk           func(childComplexity int, id int64) int
		DeleteVehicleBlacklistHisByUnionPk      func(childComplexity int, hisID string) int
		InsertDriverBlacklistApply              func(childComplexity int, objects []*model.DriverBlacklistApplyInsertInput) int
		InsertDriverBlacklistApplyOne           func(childComplexity int, objects model.DriverBlacklistApplyInsertInput) int
		InsertDriverBlacklistHis                func(childComplexity int, objects []*model.DriverBlacklistHisInsertInput) int
		InsertDriverBlacklistHisOne             func(childComplexity int, objects model.DriverBlacklistHisInsertInput) int
		InsertEnterpriseBlacklistAlarm          func(childComplexity int, objects []*model.EnterpriseBlacklistAlarmInsertInput) int
		InsertEnterpriseBlacklistAlarmOne       func(childComplexity int, objects model.EnterpriseBlacklistAlarmInsertInput) int
		InsertEnterpriseBlacklistHis            func(childComplexity int, objects []*model.EnterpriseBlacklistHisInsertInput) int
		InsertEnterpriseBlacklistHisOne         func(childComplexity int, objects model.EnterpriseBlacklistHisInsertInput) int
		InsertVehicleBlacklistAlarm             func(childComplexity int, objects []*model.VehicleBlacklistAlarmInsertInput) int
		InsertVehicleBlacklistAlarmOne          func(childComplexity int, objects model.VehicleBlacklistAlarmInsertInput) int
		InsertVehicleBlacklistHis               func(childComplexity int, objects []*model.VehicleBlacklistHisInsertInput) int
		InsertVehicleBlacklistHisOne            func(childComplexity int, objects model.VehicleBlacklistHisInsertInput) int
		UpdateDriverBlacklistApply              func(childComplexity int, inc *model.DriverBlacklistApplyIncInput, set *model.DriverBlacklistApplySetInput, where model.DriverBlacklistApplyBoolExp) int
		UpdateDriverBlacklistApplyByPk          func(childComplexity int, inc *model.DriverBlacklistApplyIncInput, set *model.DriverBlacklistApplySetInput, id int64) int
		UpdateDriverBlacklistApplyByUnionPk     func(childComplexity int, inc *model.DriverBlacklistApplyIncInput, set *model.DriverBlacklistApplySetInput, applyID string) int
		UpdateDriverBlacklistHis                func(childComplexity int, inc *model.DriverBlacklistHisIncInput, set *model.DriverBlacklistHisSetInput, where model.DriverBlacklistHisBoolExp) int
		UpdateDriverBlacklistHisByPk            func(childComplexity int, inc *model.DriverBlacklistHisIncInput, set *model.DriverBlacklistHisSetInput, id int64) int
		UpdateDriverBlacklistHisByUnionPk       func(childComplexity int, inc *model.DriverBlacklistHisIncInput, set *model.DriverBlacklistHisSetInput, hisID string) int
		UpdateEnterpriseBlacklistAlarm          func(childComplexity int, inc *model.EnterpriseBlacklistAlarmIncInput, set *model.EnterpriseBlacklistAlarmSetInput, where model.EnterpriseBlacklistAlarmBoolExp) int
		UpdateEnterpriseBlacklistAlarmByPk      func(childComplexity int, inc *model.EnterpriseBlacklistAlarmIncInput, set *model.EnterpriseBlacklistAlarmSetInput, id int64) int
		UpdateEnterpriseBlacklistAlarmByUnionPk func(childComplexity int, inc *model.EnterpriseBlacklistAlarmIncInput, set *model.EnterpriseBlacklistAlarmSetInput, alarmID string) int
		UpdateEnterpriseBlacklistHis            func(childComplexity int, inc *model.EnterpriseBlacklistHisIncInput, set *model.EnterpriseBlacklistHisSetInput, where model.EnterpriseBlacklistHisBoolExp) int
		UpdateEnterpriseBlacklistHisByPk        func(childComplexity int, inc *model.EnterpriseBlacklistHisIncInput, set *model.EnterpriseBlacklistHisSetInput, id int64) int
		UpdateEnterpriseBlacklistHisByUnionPk   func(childComplexity int, inc *model.EnterpriseBlacklistHisIncInput, set *model.EnterpriseBlacklistHisSetInput, hisID string) int
		UpdateVehicleBlacklistAlarm             func(childComplexity int, inc *model.VehicleBlacklistAlarmIncInput, set *model.VehicleBlacklistAlarmSetInput, where model.VehicleBlacklistAlarmBoolExp) int
		UpdateVehicleBlacklistAlarmByPk         func(childComplexity int, inc *model.VehicleBlacklistAlarmIncInput, set *model.VehicleBlacklistAlarmSetInput, id int64) int
		UpdateVehicleBlacklistAlarmByUnionPk    func(childComplexity int, inc *model.VehicleBlacklistAlarmIncInput, set *model.VehicleBlacklistAlarmSetInput, alarmID string) int
		UpdateVehicleBlacklistHis               func(childComplexity int, inc *model.VehicleBlacklistHisIncInput, set *model.VehicleBlacklistHisSetInput, where model.VehicleBlacklistHisBoolExp) int
		UpdateVehicleBlacklistHisByPk           func(childComplexity int, inc *model.VehicleBlacklistHisIncInput, set *model.VehicleBlacklistHisSetInput, id int64) int
		UpdateVehicleBlacklistHisByUnionPk      func(childComplexity int, inc *model.VehicleBlacklistHisIncInput, set *model.VehicleBlacklistHisSetInput, hisID string) int
	}

	Query struct {
		DriverBlacklistApply              func(childComplexity int, distinctOn []model.DriverBlacklistApplySelectColumn, limit *int, offset *int, orderBy []*model.DriverBlacklistApplyOrderBy, where *model.DriverBlacklistApplyBoolExp) int
		DriverBlacklistApplyAggregate     func(childComplexity int, distinctOn []model.DriverBlacklistApplySelectColumn, limit *int, offset *int, orderBy []*model.DriverBlacklistApplyOrderBy, where *model.DriverBlacklistApplyBoolExp) int
		DriverBlacklistApplyByPk          func(childComplexity int, id int64) int
		DriverBlacklistApplyByUnionPk     func(childComplexity int, applyID string) int
		DriverBlacklistHis                func(childComplexity int, distinctOn []model.DriverBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.DriverBlacklistHisOrderBy, where *model.DriverBlacklistHisBoolExp) int
		DriverBlacklistHisAggregate       func(childComplexity int, distinctOn []model.DriverBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.DriverBlacklistHisOrderBy, where *model.DriverBlacklistHisBoolExp) int
		DriverBlacklistHisByPk            func(childComplexity int, id int64) int
		DriverBlacklistHisByUnionPk       func(childComplexity int, hisID string) int
		EnterpriseBlacklistAlarm          func(childComplexity int, distinctOn []model.EnterpriseBlacklistAlarmSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseBlacklistAlarmOrderBy, where *model.EnterpriseBlacklistAlarmBoolExp) int
		EnterpriseBlacklistAlarmAggregate func(childComplexity int, distinctOn []model.EnterpriseBlacklistAlarmSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseBlacklistAlarmOrderBy, where *model.EnterpriseBlacklistAlarmBoolExp) int
		EnterpriseBlacklistAlarmByPk      func(childComplexity int, id int64) int
		EnterpriseBlacklistAlarmByUnionPk func(childComplexity int, alarmID string) int
		EnterpriseBlacklistHis            func(childComplexity int, distinctOn []model.EnterpriseBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseBlacklistHisOrderBy, where *model.EnterpriseBlacklistHisBoolExp) int
		EnterpriseBlacklistHisAggregate   func(childComplexity int, distinctOn []model.EnterpriseBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseBlacklistHisOrderBy, where *model.EnterpriseBlacklistHisBoolExp) int
		EnterpriseBlacklistHisByPk        func(childComplexity int, id int64) int
		EnterpriseBlacklistHisByUnionPk   func(childComplexity int, hisID string) int
		VehicleBlacklistAlarm             func(childComplexity int, distinctOn []model.VehicleBlacklistAlarmSelectColumn, limit *int, offset *int, orderBy []*model.VehicleBlacklistAlarmOrderBy, where *model.VehicleBlacklistAlarmBoolExp) int
		VehicleBlacklistAlarmAggregate    func(childComplexity int, distinctOn []model.VehicleBlacklistAlarmSelectColumn, limit *int, offset *int, orderBy []*model.VehicleBlacklistAlarmOrderBy, where *model.VehicleBlacklistAlarmBoolExp) int
		VehicleBlacklistAlarmByPk         func(childComplexity int, id int64) int
		VehicleBlacklistAlarmByUnionPk    func(childComplexity int, alarmID string) int
		VehicleBlacklistHis               func(childComplexity int, distinctOn []model.VehicleBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleBlacklistHisOrderBy, where *model.VehicleBlacklistHisBoolExp) int
		VehicleBlacklistHisAggregate      func(childComplexity int, distinctOn []model.VehicleBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleBlacklistHisOrderBy, where *model.VehicleBlacklistHisBoolExp) int
		VehicleBlacklistHisByPk           func(childComplexity int, id int64) int
		VehicleBlacklistHisByUnionPk      func(childComplexity int, hisID string) int
	}

	VehicleBlacklistAlarm struct {
		AlarmID            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		ScoreCount         func(childComplexity int) int
		ScoreNum           func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		Year               func(childComplexity int) int
	}

	VehicleBlacklistAlarmAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleBlacklistAlarmAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleBlacklistAlarmAvgFields struct {
		ID         func(childComplexity int) int
		ScoreCount func(childComplexity int) int
		ScoreNum   func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	VehicleBlacklistAlarmMaxFields struct {
		AlarmID            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		ScoreCount         func(childComplexity int) int
		ScoreNum           func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		Year               func(childComplexity int) int
	}

	VehicleBlacklistAlarmMinFields struct {
		AlarmID            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		LicensePlateNumber func(childComplexity int) int
		ScoreCount         func(childComplexity int) int
		ScoreNum           func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
		VehicleID          func(childComplexity int) int
		Year               func(childComplexity int) int
	}

	VehicleBlacklistAlarmMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleBlacklistAlarmStddevFields struct {
		ID         func(childComplexity int) int
		ScoreCount func(childComplexity int) int
		ScoreNum   func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	VehicleBlacklistAlarmStddevPopFields struct {
		ID         func(childComplexity int) int
		ScoreCount func(childComplexity int) int
		ScoreNum   func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	VehicleBlacklistAlarmStddevSampFields struct {
		ID         func(childComplexity int) int
		ScoreCount func(childComplexity int) int
		ScoreNum   func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	VehicleBlacklistAlarmSumFields struct {
		ID         func(childComplexity int) int
		ScoreCount func(childComplexity int) int
		ScoreNum   func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	VehicleBlacklistAlarmVarPopFields struct {
		ID         func(childComplexity int) int
		ScoreCount func(childComplexity int) int
		ScoreNum   func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	VehicleBlacklistAlarmVarSampFields struct {
		ID         func(childComplexity int) int
		ScoreCount func(childComplexity int) int
		ScoreNum   func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	VehicleBlacklistAlarmVarianceFields struct {
		ID         func(childComplexity int) int
		ScoreCount func(childComplexity int) int
		ScoreNum   func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	VehicleBlacklistHis struct {
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		VehicleID     func(childComplexity int) int
	}

	VehicleBlacklistHisAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleBlacklistHisAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleBlacklistHisAvgFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	VehicleBlacklistHisMaxFields struct {
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		VehicleID     func(childComplexity int) int
	}

	VehicleBlacklistHisMinFields struct {
		BlacklistType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DeletedBy     func(childComplexity int) int
		HisID         func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDeleted     func(childComplexity int) int
		Operate       func(childComplexity int) int
		Remarks       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UpdatedBy     func(childComplexity int) int
		VehicleID     func(childComplexity int) int
	}

	VehicleBlacklistHisMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleBlacklistHisStddevFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	VehicleBlacklistHisStddevPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	VehicleBlacklistHisStddevSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	VehicleBlacklistHisSumFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	VehicleBlacklistHisVarPopFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	VehicleBlacklistHisVarSampFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}

	VehicleBlacklistHisVarianceFields struct {
		BlacklistType func(childComplexity int) int
		ID            func(childComplexity int) int
		Operate       func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteDriverBlacklistApply(ctx context.Context, where model.DriverBlacklistApplyBoolExp) (*model.DriverBlacklistApplyMutationResponse, error)
	DeleteDriverBlacklistApplyByPk(ctx context.Context, id int64) (*model1.DriverBlacklistApply, error)
	InsertDriverBlacklistApply(ctx context.Context, objects []*model.DriverBlacklistApplyInsertInput) (*model.DriverBlacklistApplyMutationResponse, error)
	InsertDriverBlacklistApplyOne(ctx context.Context, objects model.DriverBlacklistApplyInsertInput) (*model1.DriverBlacklistApply, error)
	UpdateDriverBlacklistApply(ctx context.Context, inc *model.DriverBlacklistApplyIncInput, set *model.DriverBlacklistApplySetInput, where model.DriverBlacklistApplyBoolExp) (*model.DriverBlacklistApplyMutationResponse, error)
	UpdateDriverBlacklistApplyByPk(ctx context.Context, inc *model.DriverBlacklistApplyIncInput, set *model.DriverBlacklistApplySetInput, id int64) (*model1.DriverBlacklistApply, error)
	UpdateDriverBlacklistApplyByUnionPk(ctx context.Context, inc *model.DriverBlacklistApplyIncInput, set *model.DriverBlacklistApplySetInput, applyID string) (*model1.DriverBlacklistApply, error)
	DeleteDriverBlacklistApplyByUnionPk(ctx context.Context, applyID string) (*model1.DriverBlacklistApply, error)
	DeleteDriverBlacklistHis(ctx context.Context, where model.DriverBlacklistHisBoolExp) (*model.DriverBlacklistHisMutationResponse, error)
	DeleteDriverBlacklistHisByPk(ctx context.Context, id int64) (*model1.DriverBlacklistHis, error)
	InsertDriverBlacklistHis(ctx context.Context, objects []*model.DriverBlacklistHisInsertInput) (*model.DriverBlacklistHisMutationResponse, error)
	InsertDriverBlacklistHisOne(ctx context.Context, objects model.DriverBlacklistHisInsertInput) (*model1.DriverBlacklistHis, error)
	UpdateDriverBlacklistHis(ctx context.Context, inc *model.DriverBlacklistHisIncInput, set *model.DriverBlacklistHisSetInput, where model.DriverBlacklistHisBoolExp) (*model.DriverBlacklistHisMutationResponse, error)
	UpdateDriverBlacklistHisByPk(ctx context.Context, inc *model.DriverBlacklistHisIncInput, set *model.DriverBlacklistHisSetInput, id int64) (*model1.DriverBlacklistHis, error)
	UpdateDriverBlacklistHisByUnionPk(ctx context.Context, inc *model.DriverBlacklistHisIncInput, set *model.DriverBlacklistHisSetInput, hisID string) (*model1.DriverBlacklistHis, error)
	DeleteDriverBlacklistHisByUnionPk(ctx context.Context, hisID string) (*model1.DriverBlacklistHis, error)
	DeleteEnterpriseBlacklistAlarm(ctx context.Context, where model.EnterpriseBlacklistAlarmBoolExp) (*model.EnterpriseBlacklistAlarmMutationResponse, error)
	DeleteEnterpriseBlacklistAlarmByPk(ctx context.Context, id int64) (*model1.EnterpriseBlacklistAlarm, error)
	InsertEnterpriseBlacklistAlarm(ctx context.Context, objects []*model.EnterpriseBlacklistAlarmInsertInput) (*model.EnterpriseBlacklistAlarmMutationResponse, error)
	InsertEnterpriseBlacklistAlarmOne(ctx context.Context, objects model.EnterpriseBlacklistAlarmInsertInput) (*model1.EnterpriseBlacklistAlarm, error)
	UpdateEnterpriseBlacklistAlarm(ctx context.Context, inc *model.EnterpriseBlacklistAlarmIncInput, set *model.EnterpriseBlacklistAlarmSetInput, where model.EnterpriseBlacklistAlarmBoolExp) (*model.EnterpriseBlacklistAlarmMutationResponse, error)
	UpdateEnterpriseBlacklistAlarmByPk(ctx context.Context, inc *model.EnterpriseBlacklistAlarmIncInput, set *model.EnterpriseBlacklistAlarmSetInput, id int64) (*model1.EnterpriseBlacklistAlarm, error)
	UpdateEnterpriseBlacklistAlarmByUnionPk(ctx context.Context, inc *model.EnterpriseBlacklistAlarmIncInput, set *model.EnterpriseBlacklistAlarmSetInput, alarmID string) (*model1.EnterpriseBlacklistAlarm, error)
	DeleteEnterpriseBlacklistAlarmByUnionPk(ctx context.Context, alarmID string) (*model1.EnterpriseBlacklistAlarm, error)
	DeleteEnterpriseBlacklistHis(ctx context.Context, where model.EnterpriseBlacklistHisBoolExp) (*model.EnterpriseBlacklistHisMutationResponse, error)
	DeleteEnterpriseBlacklistHisByPk(ctx context.Context, id int64) (*model1.EnterpriseBlacklistHis, error)
	InsertEnterpriseBlacklistHis(ctx context.Context, objects []*model.EnterpriseBlacklistHisInsertInput) (*model.EnterpriseBlacklistHisMutationResponse, error)
	InsertEnterpriseBlacklistHisOne(ctx context.Context, objects model.EnterpriseBlacklistHisInsertInput) (*model1.EnterpriseBlacklistHis, error)
	UpdateEnterpriseBlacklistHis(ctx context.Context, inc *model.EnterpriseBlacklistHisIncInput, set *model.EnterpriseBlacklistHisSetInput, where model.EnterpriseBlacklistHisBoolExp) (*model.EnterpriseBlacklistHisMutationResponse, error)
	UpdateEnterpriseBlacklistHisByPk(ctx context.Context, inc *model.EnterpriseBlacklistHisIncInput, set *model.EnterpriseBlacklistHisSetInput, id int64) (*model1.EnterpriseBlacklistHis, error)
	UpdateEnterpriseBlacklistHisByUnionPk(ctx context.Context, inc *model.EnterpriseBlacklistHisIncInput, set *model.EnterpriseBlacklistHisSetInput, hisID string) (*model1.EnterpriseBlacklistHis, error)
	DeleteEnterpriseBlacklistHisByUnionPk(ctx context.Context, hisID string) (*model1.EnterpriseBlacklistHis, error)
	DeleteVehicleBlacklistAlarm(ctx context.Context, where model.VehicleBlacklistAlarmBoolExp) (*model.VehicleBlacklistAlarmMutationResponse, error)
	DeleteVehicleBlacklistAlarmByPk(ctx context.Context, id int64) (*model1.VehicleBlacklistAlarm, error)
	InsertVehicleBlacklistAlarm(ctx context.Context, objects []*model.VehicleBlacklistAlarmInsertInput) (*model.VehicleBlacklistAlarmMutationResponse, error)
	InsertVehicleBlacklistAlarmOne(ctx context.Context, objects model.VehicleBlacklistAlarmInsertInput) (*model1.VehicleBlacklistAlarm, error)
	UpdateVehicleBlacklistAlarm(ctx context.Context, inc *model.VehicleBlacklistAlarmIncInput, set *model.VehicleBlacklistAlarmSetInput, where model.VehicleBlacklistAlarmBoolExp) (*model.VehicleBlacklistAlarmMutationResponse, error)
	UpdateVehicleBlacklistAlarmByPk(ctx context.Context, inc *model.VehicleBlacklistAlarmIncInput, set *model.VehicleBlacklistAlarmSetInput, id int64) (*model1.VehicleBlacklistAlarm, error)
	UpdateVehicleBlacklistAlarmByUnionPk(ctx context.Context, inc *model.VehicleBlacklistAlarmIncInput, set *model.VehicleBlacklistAlarmSetInput, alarmID string) (*model1.VehicleBlacklistAlarm, error)
	DeleteVehicleBlacklistAlarmByUnionPk(ctx context.Context, alarmID string) (*model1.VehicleBlacklistAlarm, error)
	DeleteVehicleBlacklistHis(ctx context.Context, where model.VehicleBlacklistHisBoolExp) (*model.VehicleBlacklistHisMutationResponse, error)
	DeleteVehicleBlacklistHisByPk(ctx context.Context, id int64) (*model1.VehicleBlacklistHis, error)
	InsertVehicleBlacklistHis(ctx context.Context, objects []*model.VehicleBlacklistHisInsertInput) (*model.VehicleBlacklistHisMutationResponse, error)
	InsertVehicleBlacklistHisOne(ctx context.Context, objects model.VehicleBlacklistHisInsertInput) (*model1.VehicleBlacklistHis, error)
	UpdateVehicleBlacklistHis(ctx context.Context, inc *model.VehicleBlacklistHisIncInput, set *model.VehicleBlacklistHisSetInput, where model.VehicleBlacklistHisBoolExp) (*model.VehicleBlacklistHisMutationResponse, error)
	UpdateVehicleBlacklistHisByPk(ctx context.Context, inc *model.VehicleBlacklistHisIncInput, set *model.VehicleBlacklistHisSetInput, id int64) (*model1.VehicleBlacklistHis, error)
	UpdateVehicleBlacklistHisByUnionPk(ctx context.Context, inc *model.VehicleBlacklistHisIncInput, set *model.VehicleBlacklistHisSetInput, hisID string) (*model1.VehicleBlacklistHis, error)
	DeleteVehicleBlacklistHisByUnionPk(ctx context.Context, hisID string) (*model1.VehicleBlacklistHis, error)
}
type QueryResolver interface {
	DriverBlacklistApply(ctx context.Context, distinctOn []model.DriverBlacklistApplySelectColumn, limit *int, offset *int, orderBy []*model.DriverBlacklistApplyOrderBy, where *model.DriverBlacklistApplyBoolExp) ([]*model1.DriverBlacklistApply, error)
	DriverBlacklistApplyAggregate(ctx context.Context, distinctOn []model.DriverBlacklistApplySelectColumn, limit *int, offset *int, orderBy []*model.DriverBlacklistApplyOrderBy, where *model.DriverBlacklistApplyBoolExp) (*model.DriverBlacklistApplyAggregate, error)
	DriverBlacklistApplyByPk(ctx context.Context, id int64) (*model1.DriverBlacklistApply, error)
	DriverBlacklistApplyByUnionPk(ctx context.Context, applyID string) (*model1.DriverBlacklistApply, error)
	DriverBlacklistHis(ctx context.Context, distinctOn []model.DriverBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.DriverBlacklistHisOrderBy, where *model.DriverBlacklistHisBoolExp) ([]*model1.DriverBlacklistHis, error)
	DriverBlacklistHisAggregate(ctx context.Context, distinctOn []model.DriverBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.DriverBlacklistHisOrderBy, where *model.DriverBlacklistHisBoolExp) (*model.DriverBlacklistHisAggregate, error)
	DriverBlacklistHisByPk(ctx context.Context, id int64) (*model1.DriverBlacklistHis, error)
	DriverBlacklistHisByUnionPk(ctx context.Context, hisID string) (*model1.DriverBlacklistHis, error)
	EnterpriseBlacklistAlarm(ctx context.Context, distinctOn []model.EnterpriseBlacklistAlarmSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseBlacklistAlarmOrderBy, where *model.EnterpriseBlacklistAlarmBoolExp) ([]*model1.EnterpriseBlacklistAlarm, error)
	EnterpriseBlacklistAlarmAggregate(ctx context.Context, distinctOn []model.EnterpriseBlacklistAlarmSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseBlacklistAlarmOrderBy, where *model.EnterpriseBlacklistAlarmBoolExp) (*model.EnterpriseBlacklistAlarmAggregate, error)
	EnterpriseBlacklistAlarmByPk(ctx context.Context, id int64) (*model1.EnterpriseBlacklistAlarm, error)
	EnterpriseBlacklistAlarmByUnionPk(ctx context.Context, alarmID string) (*model1.EnterpriseBlacklistAlarm, error)
	EnterpriseBlacklistHis(ctx context.Context, distinctOn []model.EnterpriseBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseBlacklistHisOrderBy, where *model.EnterpriseBlacklistHisBoolExp) ([]*model1.EnterpriseBlacklistHis, error)
	EnterpriseBlacklistHisAggregate(ctx context.Context, distinctOn []model.EnterpriseBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseBlacklistHisOrderBy, where *model.EnterpriseBlacklistHisBoolExp) (*model.EnterpriseBlacklistHisAggregate, error)
	EnterpriseBlacklistHisByPk(ctx context.Context, id int64) (*model1.EnterpriseBlacklistHis, error)
	EnterpriseBlacklistHisByUnionPk(ctx context.Context, hisID string) (*model1.EnterpriseBlacklistHis, error)
	VehicleBlacklistAlarm(ctx context.Context, distinctOn []model.VehicleBlacklistAlarmSelectColumn, limit *int, offset *int, orderBy []*model.VehicleBlacklistAlarmOrderBy, where *model.VehicleBlacklistAlarmBoolExp) ([]*model1.VehicleBlacklistAlarm, error)
	VehicleBlacklistAlarmAggregate(ctx context.Context, distinctOn []model.VehicleBlacklistAlarmSelectColumn, limit *int, offset *int, orderBy []*model.VehicleBlacklistAlarmOrderBy, where *model.VehicleBlacklistAlarmBoolExp) (*model.VehicleBlacklistAlarmAggregate, error)
	VehicleBlacklistAlarmByPk(ctx context.Context, id int64) (*model1.VehicleBlacklistAlarm, error)
	VehicleBlacklistAlarmByUnionPk(ctx context.Context, alarmID string) (*model1.VehicleBlacklistAlarm, error)
	VehicleBlacklistHis(ctx context.Context, distinctOn []model.VehicleBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleBlacklistHisOrderBy, where *model.VehicleBlacklistHisBoolExp) ([]*model1.VehicleBlacklistHis, error)
	VehicleBlacklistHisAggregate(ctx context.Context, distinctOn []model.VehicleBlacklistHisSelectColumn, limit *int, offset *int, orderBy []*model.VehicleBlacklistHisOrderBy, where *model.VehicleBlacklistHisBoolExp) (*model.VehicleBlacklistHisAggregate, error)
	VehicleBlacklistHisByPk(ctx context.Context, id int64) (*model1.VehicleBlacklistHis, error)
	VehicleBlacklistHisByUnionPk(ctx context.Context, hisID string) (*model1.VehicleBlacklistHis, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "DriverBlacklistApply.apply_id":
		if e.complexity.DriverBlacklistApply.ApplyID == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.ApplyID(childComplexity), true

	case "DriverBlacklistApply.apply_reason":
		if e.complexity.DriverBlacklistApply.ApplyReason == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.ApplyReason(childComplexity), true

	case "DriverBlacklistApply.blacklist_type":
		if e.complexity.DriverBlacklistApply.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.BlacklistType(childComplexity), true

	case "DriverBlacklistApply.created_at":
		if e.complexity.DriverBlacklistApply.CreatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.CreatedAt(childComplexity), true

	case "DriverBlacklistApply.created_by":
		if e.complexity.DriverBlacklistApply.CreatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.CreatedBy(childComplexity), true

	case "DriverBlacklistApply.deleted_at":
		if e.complexity.DriverBlacklistApply.DeletedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.DeletedAt(childComplexity), true

	case "DriverBlacklistApply.deleted_by":
		if e.complexity.DriverBlacklistApply.DeletedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.DeletedBy(childComplexity), true

	case "DriverBlacklistApply.driver_id":
		if e.complexity.DriverBlacklistApply.DriverID == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.DriverID(childComplexity), true

	case "DriverBlacklistApply.id":
		if e.complexity.DriverBlacklistApply.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.ID(childComplexity), true

	case "DriverBlacklistApply.is_deleted":
		if e.complexity.DriverBlacklistApply.IsDeleted == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.IsDeleted(childComplexity), true

	case "DriverBlacklistApply.state":
		if e.complexity.DriverBlacklistApply.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.State(childComplexity), true

	case "DriverBlacklistApply.updated_at":
		if e.complexity.DriverBlacklistApply.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.UpdatedAt(childComplexity), true

	case "DriverBlacklistApply.updated_by":
		if e.complexity.DriverBlacklistApply.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApply.UpdatedBy(childComplexity), true

	case "DriverBlacklistApplyAggregate.aggregate":
		if e.complexity.DriverBlacklistApplyAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregate.Aggregate(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.avg":
		if e.complexity.DriverBlacklistApplyAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.Avg(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.count":
		if e.complexity.DriverBlacklistApplyAggregateFields.Count == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.Count(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.max":
		if e.complexity.DriverBlacklistApplyAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.Max(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.min":
		if e.complexity.DriverBlacklistApplyAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.Min(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.stddev":
		if e.complexity.DriverBlacklistApplyAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.Stddev(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.stddev_pop":
		if e.complexity.DriverBlacklistApplyAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.StddevPop(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.stddev_samp":
		if e.complexity.DriverBlacklistApplyAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.StddevSamp(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.sum":
		if e.complexity.DriverBlacklistApplyAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.Sum(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.var_pop":
		if e.complexity.DriverBlacklistApplyAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.VarPop(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.var_samp":
		if e.complexity.DriverBlacklistApplyAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.VarSamp(childComplexity), true

	case "DriverBlacklistApplyAggregateFields.variance":
		if e.complexity.DriverBlacklistApplyAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAggregateFields.Variance(childComplexity), true

	case "DriverBlacklistApplyAvgFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyAvgFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAvgFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyAvgFields.id":
		if e.complexity.DriverBlacklistApplyAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAvgFields.ID(childComplexity), true

	case "DriverBlacklistApplyAvgFields.state":
		if e.complexity.DriverBlacklistApplyAvgFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyAvgFields.State(childComplexity), true

	case "DriverBlacklistApplyMaxFields.apply_id":
		if e.complexity.DriverBlacklistApplyMaxFields.ApplyID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.ApplyID(childComplexity), true

	case "DriverBlacklistApplyMaxFields.apply_reason":
		if e.complexity.DriverBlacklistApplyMaxFields.ApplyReason == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.ApplyReason(childComplexity), true

	case "DriverBlacklistApplyMaxFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyMaxFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyMaxFields.created_at":
		if e.complexity.DriverBlacklistApplyMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.CreatedAt(childComplexity), true

	case "DriverBlacklistApplyMaxFields.created_by":
		if e.complexity.DriverBlacklistApplyMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.CreatedBy(childComplexity), true

	case "DriverBlacklistApplyMaxFields.deleted_at":
		if e.complexity.DriverBlacklistApplyMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.DeletedAt(childComplexity), true

	case "DriverBlacklistApplyMaxFields.deleted_by":
		if e.complexity.DriverBlacklistApplyMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.DeletedBy(childComplexity), true

	case "DriverBlacklistApplyMaxFields.driver_id":
		if e.complexity.DriverBlacklistApplyMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.DriverID(childComplexity), true

	case "DriverBlacklistApplyMaxFields.id":
		if e.complexity.DriverBlacklistApplyMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.ID(childComplexity), true

	case "DriverBlacklistApplyMaxFields.is_deleted":
		if e.complexity.DriverBlacklistApplyMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.IsDeleted(childComplexity), true

	case "DriverBlacklistApplyMaxFields.state":
		if e.complexity.DriverBlacklistApplyMaxFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.State(childComplexity), true

	case "DriverBlacklistApplyMaxFields.updated_at":
		if e.complexity.DriverBlacklistApplyMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.UpdatedAt(childComplexity), true

	case "DriverBlacklistApplyMaxFields.updated_by":
		if e.complexity.DriverBlacklistApplyMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMaxFields.UpdatedBy(childComplexity), true

	case "DriverBlacklistApplyMinFields.apply_id":
		if e.complexity.DriverBlacklistApplyMinFields.ApplyID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.ApplyID(childComplexity), true

	case "DriverBlacklistApplyMinFields.apply_reason":
		if e.complexity.DriverBlacklistApplyMinFields.ApplyReason == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.ApplyReason(childComplexity), true

	case "DriverBlacklistApplyMinFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyMinFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyMinFields.created_at":
		if e.complexity.DriverBlacklistApplyMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.CreatedAt(childComplexity), true

	case "DriverBlacklistApplyMinFields.created_by":
		if e.complexity.DriverBlacklistApplyMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.CreatedBy(childComplexity), true

	case "DriverBlacklistApplyMinFields.deleted_at":
		if e.complexity.DriverBlacklistApplyMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.DeletedAt(childComplexity), true

	case "DriverBlacklistApplyMinFields.deleted_by":
		if e.complexity.DriverBlacklistApplyMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.DeletedBy(childComplexity), true

	case "DriverBlacklistApplyMinFields.driver_id":
		if e.complexity.DriverBlacklistApplyMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.DriverID(childComplexity), true

	case "DriverBlacklistApplyMinFields.id":
		if e.complexity.DriverBlacklistApplyMinFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.ID(childComplexity), true

	case "DriverBlacklistApplyMinFields.is_deleted":
		if e.complexity.DriverBlacklistApplyMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.IsDeleted(childComplexity), true

	case "DriverBlacklistApplyMinFields.state":
		if e.complexity.DriverBlacklistApplyMinFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.State(childComplexity), true

	case "DriverBlacklistApplyMinFields.updated_at":
		if e.complexity.DriverBlacklistApplyMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.UpdatedAt(childComplexity), true

	case "DriverBlacklistApplyMinFields.updated_by":
		if e.complexity.DriverBlacklistApplyMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMinFields.UpdatedBy(childComplexity), true

	case "DriverBlacklistApplyMutationResponse.affected_rows":
		if e.complexity.DriverBlacklistApplyMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMutationResponse.AffectedRows(childComplexity), true

	case "DriverBlacklistApplyMutationResponse.returning":
		if e.complexity.DriverBlacklistApplyMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyMutationResponse.Returning(childComplexity), true

	case "DriverBlacklistApplyStddevFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyStddevFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyStddevFields.id":
		if e.complexity.DriverBlacklistApplyStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevFields.ID(childComplexity), true

	case "DriverBlacklistApplyStddevFields.state":
		if e.complexity.DriverBlacklistApplyStddevFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevFields.State(childComplexity), true

	case "DriverBlacklistApplyStddevPopFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyStddevPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevPopFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyStddevPopFields.id":
		if e.complexity.DriverBlacklistApplyStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevPopFields.ID(childComplexity), true

	case "DriverBlacklistApplyStddevPopFields.state":
		if e.complexity.DriverBlacklistApplyStddevPopFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevPopFields.State(childComplexity), true

	case "DriverBlacklistApplyStddevSampFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyStddevSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevSampFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyStddevSampFields.id":
		if e.complexity.DriverBlacklistApplyStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevSampFields.ID(childComplexity), true

	case "DriverBlacklistApplyStddevSampFields.state":
		if e.complexity.DriverBlacklistApplyStddevSampFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyStddevSampFields.State(childComplexity), true

	case "DriverBlacklistApplySumFields.blacklist_type":
		if e.complexity.DriverBlacklistApplySumFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplySumFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplySumFields.id":
		if e.complexity.DriverBlacklistApplySumFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplySumFields.ID(childComplexity), true

	case "DriverBlacklistApplySumFields.state":
		if e.complexity.DriverBlacklistApplySumFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplySumFields.State(childComplexity), true

	case "DriverBlacklistApplyVarPopFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyVarPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarPopFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyVarPopFields.id":
		if e.complexity.DriverBlacklistApplyVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarPopFields.ID(childComplexity), true

	case "DriverBlacklistApplyVarPopFields.state":
		if e.complexity.DriverBlacklistApplyVarPopFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarPopFields.State(childComplexity), true

	case "DriverBlacklistApplyVarSampFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyVarSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarSampFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyVarSampFields.id":
		if e.complexity.DriverBlacklistApplyVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarSampFields.ID(childComplexity), true

	case "DriverBlacklistApplyVarSampFields.state":
		if e.complexity.DriverBlacklistApplyVarSampFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarSampFields.State(childComplexity), true

	case "DriverBlacklistApplyVarianceFields.blacklist_type":
		if e.complexity.DriverBlacklistApplyVarianceFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarianceFields.BlacklistType(childComplexity), true

	case "DriverBlacklistApplyVarianceFields.id":
		if e.complexity.DriverBlacklistApplyVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarianceFields.ID(childComplexity), true

	case "DriverBlacklistApplyVarianceFields.state":
		if e.complexity.DriverBlacklistApplyVarianceFields.State == nil {
			break
		}

		return e.complexity.DriverBlacklistApplyVarianceFields.State(childComplexity), true

	case "DriverBlacklistHis.apply_id":
		if e.complexity.DriverBlacklistHis.ApplyID == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.ApplyID(childComplexity), true

	case "DriverBlacklistHis.attach_file":
		if e.complexity.DriverBlacklistHis.AttachFile == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.AttachFile(childComplexity), true

	case "DriverBlacklistHis.blacklist_type":
		if e.complexity.DriverBlacklistHis.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.BlacklistType(childComplexity), true

	case "DriverBlacklistHis.created_at":
		if e.complexity.DriverBlacklistHis.CreatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.CreatedAt(childComplexity), true

	case "DriverBlacklistHis.created_by":
		if e.complexity.DriverBlacklistHis.CreatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.CreatedBy(childComplexity), true

	case "DriverBlacklistHis.deleted_at":
		if e.complexity.DriverBlacklistHis.DeletedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.DeletedAt(childComplexity), true

	case "DriverBlacklistHis.deleted_by":
		if e.complexity.DriverBlacklistHis.DeletedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.DeletedBy(childComplexity), true

	case "DriverBlacklistHis.driver_card_num":
		if e.complexity.DriverBlacklistHis.DriverCardNum == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.DriverCardNum(childComplexity), true

	case "DriverBlacklistHis.driver_id":
		if e.complexity.DriverBlacklistHis.DriverID == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.DriverID(childComplexity), true

	case "DriverBlacklistHis.his_id":
		if e.complexity.DriverBlacklistHis.HisID == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.HisID(childComplexity), true

	case "DriverBlacklistHis.id":
		if e.complexity.DriverBlacklistHis.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.ID(childComplexity), true

	case "DriverBlacklistHis.is_deleted":
		if e.complexity.DriverBlacklistHis.IsDeleted == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.IsDeleted(childComplexity), true

	case "DriverBlacklistHis.operate":
		if e.complexity.DriverBlacklistHis.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.Operate(childComplexity), true

	case "DriverBlacklistHis.remarks":
		if e.complexity.DriverBlacklistHis.Remarks == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.Remarks(childComplexity), true

	case "DriverBlacklistHis.step":
		if e.complexity.DriverBlacklistHis.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.Step(childComplexity), true

	case "DriverBlacklistHis.updated_at":
		if e.complexity.DriverBlacklistHis.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.UpdatedAt(childComplexity), true

	case "DriverBlacklistHis.updated_by":
		if e.complexity.DriverBlacklistHis.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHis.UpdatedBy(childComplexity), true

	case "DriverBlacklistHisAggregate.aggregate":
		if e.complexity.DriverBlacklistHisAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregate.Aggregate(childComplexity), true

	case "DriverBlacklistHisAggregateFields.avg":
		if e.complexity.DriverBlacklistHisAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.Avg(childComplexity), true

	case "DriverBlacklistHisAggregateFields.count":
		if e.complexity.DriverBlacklistHisAggregateFields.Count == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.Count(childComplexity), true

	case "DriverBlacklistHisAggregateFields.max":
		if e.complexity.DriverBlacklistHisAggregateFields.Max == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.Max(childComplexity), true

	case "DriverBlacklistHisAggregateFields.min":
		if e.complexity.DriverBlacklistHisAggregateFields.Min == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.Min(childComplexity), true

	case "DriverBlacklistHisAggregateFields.stddev":
		if e.complexity.DriverBlacklistHisAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.Stddev(childComplexity), true

	case "DriverBlacklistHisAggregateFields.stddev_pop":
		if e.complexity.DriverBlacklistHisAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.StddevPop(childComplexity), true

	case "DriverBlacklistHisAggregateFields.stddev_samp":
		if e.complexity.DriverBlacklistHisAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.StddevSamp(childComplexity), true

	case "DriverBlacklistHisAggregateFields.sum":
		if e.complexity.DriverBlacklistHisAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.Sum(childComplexity), true

	case "DriverBlacklistHisAggregateFields.var_pop":
		if e.complexity.DriverBlacklistHisAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.VarPop(childComplexity), true

	case "DriverBlacklistHisAggregateFields.var_samp":
		if e.complexity.DriverBlacklistHisAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.VarSamp(childComplexity), true

	case "DriverBlacklistHisAggregateFields.variance":
		if e.complexity.DriverBlacklistHisAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAggregateFields.Variance(childComplexity), true

	case "DriverBlacklistHisAvgFields.blacklist_type":
		if e.complexity.DriverBlacklistHisAvgFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAvgFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisAvgFields.id":
		if e.complexity.DriverBlacklistHisAvgFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAvgFields.ID(childComplexity), true

	case "DriverBlacklistHisAvgFields.operate":
		if e.complexity.DriverBlacklistHisAvgFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAvgFields.Operate(childComplexity), true

	case "DriverBlacklistHisAvgFields.step":
		if e.complexity.DriverBlacklistHisAvgFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisAvgFields.Step(childComplexity), true

	case "DriverBlacklistHisMaxFields.apply_id":
		if e.complexity.DriverBlacklistHisMaxFields.ApplyID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.ApplyID(childComplexity), true

	case "DriverBlacklistHisMaxFields.attach_file":
		if e.complexity.DriverBlacklistHisMaxFields.AttachFile == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.AttachFile(childComplexity), true

	case "DriverBlacklistHisMaxFields.blacklist_type":
		if e.complexity.DriverBlacklistHisMaxFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisMaxFields.created_at":
		if e.complexity.DriverBlacklistHisMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.CreatedAt(childComplexity), true

	case "DriverBlacklistHisMaxFields.created_by":
		if e.complexity.DriverBlacklistHisMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.CreatedBy(childComplexity), true

	case "DriverBlacklistHisMaxFields.deleted_at":
		if e.complexity.DriverBlacklistHisMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.DeletedAt(childComplexity), true

	case "DriverBlacklistHisMaxFields.deleted_by":
		if e.complexity.DriverBlacklistHisMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.DeletedBy(childComplexity), true

	case "DriverBlacklistHisMaxFields.driver_card_num":
		if e.complexity.DriverBlacklistHisMaxFields.DriverCardNum == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.DriverCardNum(childComplexity), true

	case "DriverBlacklistHisMaxFields.driver_id":
		if e.complexity.DriverBlacklistHisMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.DriverID(childComplexity), true

	case "DriverBlacklistHisMaxFields.his_id":
		if e.complexity.DriverBlacklistHisMaxFields.HisID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.HisID(childComplexity), true

	case "DriverBlacklistHisMaxFields.id":
		if e.complexity.DriverBlacklistHisMaxFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.ID(childComplexity), true

	case "DriverBlacklistHisMaxFields.is_deleted":
		if e.complexity.DriverBlacklistHisMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.IsDeleted(childComplexity), true

	case "DriverBlacklistHisMaxFields.operate":
		if e.complexity.DriverBlacklistHisMaxFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.Operate(childComplexity), true

	case "DriverBlacklistHisMaxFields.remarks":
		if e.complexity.DriverBlacklistHisMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.Remarks(childComplexity), true

	case "DriverBlacklistHisMaxFields.step":
		if e.complexity.DriverBlacklistHisMaxFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.Step(childComplexity), true

	case "DriverBlacklistHisMaxFields.updated_at":
		if e.complexity.DriverBlacklistHisMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.UpdatedAt(childComplexity), true

	case "DriverBlacklistHisMaxFields.updated_by":
		if e.complexity.DriverBlacklistHisMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMaxFields.UpdatedBy(childComplexity), true

	case "DriverBlacklistHisMinFields.apply_id":
		if e.complexity.DriverBlacklistHisMinFields.ApplyID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.ApplyID(childComplexity), true

	case "DriverBlacklistHisMinFields.attach_file":
		if e.complexity.DriverBlacklistHisMinFields.AttachFile == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.AttachFile(childComplexity), true

	case "DriverBlacklistHisMinFields.blacklist_type":
		if e.complexity.DriverBlacklistHisMinFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisMinFields.created_at":
		if e.complexity.DriverBlacklistHisMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.CreatedAt(childComplexity), true

	case "DriverBlacklistHisMinFields.created_by":
		if e.complexity.DriverBlacklistHisMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.CreatedBy(childComplexity), true

	case "DriverBlacklistHisMinFields.deleted_at":
		if e.complexity.DriverBlacklistHisMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.DeletedAt(childComplexity), true

	case "DriverBlacklistHisMinFields.deleted_by":
		if e.complexity.DriverBlacklistHisMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.DeletedBy(childComplexity), true

	case "DriverBlacklistHisMinFields.driver_card_num":
		if e.complexity.DriverBlacklistHisMinFields.DriverCardNum == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.DriverCardNum(childComplexity), true

	case "DriverBlacklistHisMinFields.driver_id":
		if e.complexity.DriverBlacklistHisMinFields.DriverID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.DriverID(childComplexity), true

	case "DriverBlacklistHisMinFields.his_id":
		if e.complexity.DriverBlacklistHisMinFields.HisID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.HisID(childComplexity), true

	case "DriverBlacklistHisMinFields.id":
		if e.complexity.DriverBlacklistHisMinFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.ID(childComplexity), true

	case "DriverBlacklistHisMinFields.is_deleted":
		if e.complexity.DriverBlacklistHisMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.IsDeleted(childComplexity), true

	case "DriverBlacklistHisMinFields.operate":
		if e.complexity.DriverBlacklistHisMinFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.Operate(childComplexity), true

	case "DriverBlacklistHisMinFields.remarks":
		if e.complexity.DriverBlacklistHisMinFields.Remarks == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.Remarks(childComplexity), true

	case "DriverBlacklistHisMinFields.step":
		if e.complexity.DriverBlacklistHisMinFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.Step(childComplexity), true

	case "DriverBlacklistHisMinFields.updated_at":
		if e.complexity.DriverBlacklistHisMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.UpdatedAt(childComplexity), true

	case "DriverBlacklistHisMinFields.updated_by":
		if e.complexity.DriverBlacklistHisMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMinFields.UpdatedBy(childComplexity), true

	case "DriverBlacklistHisMutationResponse.affected_rows":
		if e.complexity.DriverBlacklistHisMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMutationResponse.AffectedRows(childComplexity), true

	case "DriverBlacklistHisMutationResponse.returning":
		if e.complexity.DriverBlacklistHisMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DriverBlacklistHisMutationResponse.Returning(childComplexity), true

	case "DriverBlacklistHisStddevFields.blacklist_type":
		if e.complexity.DriverBlacklistHisStddevFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisStddevFields.id":
		if e.complexity.DriverBlacklistHisStddevFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevFields.ID(childComplexity), true

	case "DriverBlacklistHisStddevFields.operate":
		if e.complexity.DriverBlacklistHisStddevFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevFields.Operate(childComplexity), true

	case "DriverBlacklistHisStddevFields.step":
		if e.complexity.DriverBlacklistHisStddevFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevFields.Step(childComplexity), true

	case "DriverBlacklistHisStddevPopFields.blacklist_type":
		if e.complexity.DriverBlacklistHisStddevPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevPopFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisStddevPopFields.id":
		if e.complexity.DriverBlacklistHisStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevPopFields.ID(childComplexity), true

	case "DriverBlacklistHisStddevPopFields.operate":
		if e.complexity.DriverBlacklistHisStddevPopFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevPopFields.Operate(childComplexity), true

	case "DriverBlacklistHisStddevPopFields.step":
		if e.complexity.DriverBlacklistHisStddevPopFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevPopFields.Step(childComplexity), true

	case "DriverBlacklistHisStddevSampFields.blacklist_type":
		if e.complexity.DriverBlacklistHisStddevSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevSampFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisStddevSampFields.id":
		if e.complexity.DriverBlacklistHisStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevSampFields.ID(childComplexity), true

	case "DriverBlacklistHisStddevSampFields.operate":
		if e.complexity.DriverBlacklistHisStddevSampFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevSampFields.Operate(childComplexity), true

	case "DriverBlacklistHisStddevSampFields.step":
		if e.complexity.DriverBlacklistHisStddevSampFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisStddevSampFields.Step(childComplexity), true

	case "DriverBlacklistHisSumFields.blacklist_type":
		if e.complexity.DriverBlacklistHisSumFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisSumFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisSumFields.id":
		if e.complexity.DriverBlacklistHisSumFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisSumFields.ID(childComplexity), true

	case "DriverBlacklistHisSumFields.operate":
		if e.complexity.DriverBlacklistHisSumFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisSumFields.Operate(childComplexity), true

	case "DriverBlacklistHisSumFields.step":
		if e.complexity.DriverBlacklistHisSumFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisSumFields.Step(childComplexity), true

	case "DriverBlacklistHisVarPopFields.blacklist_type":
		if e.complexity.DriverBlacklistHisVarPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarPopFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisVarPopFields.id":
		if e.complexity.DriverBlacklistHisVarPopFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarPopFields.ID(childComplexity), true

	case "DriverBlacklistHisVarPopFields.operate":
		if e.complexity.DriverBlacklistHisVarPopFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarPopFields.Operate(childComplexity), true

	case "DriverBlacklistHisVarPopFields.step":
		if e.complexity.DriverBlacklistHisVarPopFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarPopFields.Step(childComplexity), true

	case "DriverBlacklistHisVarSampFields.blacklist_type":
		if e.complexity.DriverBlacklistHisVarSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarSampFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisVarSampFields.id":
		if e.complexity.DriverBlacklistHisVarSampFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarSampFields.ID(childComplexity), true

	case "DriverBlacklistHisVarSampFields.operate":
		if e.complexity.DriverBlacklistHisVarSampFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarSampFields.Operate(childComplexity), true

	case "DriverBlacklistHisVarSampFields.step":
		if e.complexity.DriverBlacklistHisVarSampFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarSampFields.Step(childComplexity), true

	case "DriverBlacklistHisVarianceFields.blacklist_type":
		if e.complexity.DriverBlacklistHisVarianceFields.BlacklistType == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarianceFields.BlacklistType(childComplexity), true

	case "DriverBlacklistHisVarianceFields.id":
		if e.complexity.DriverBlacklistHisVarianceFields.ID == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarianceFields.ID(childComplexity), true

	case "DriverBlacklistHisVarianceFields.operate":
		if e.complexity.DriverBlacklistHisVarianceFields.Operate == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarianceFields.Operate(childComplexity), true

	case "DriverBlacklistHisVarianceFields.step":
		if e.complexity.DriverBlacklistHisVarianceFields.Step == nil {
			break
		}

		return e.complexity.DriverBlacklistHisVarianceFields.Step(childComplexity), true

	case "EnterpriseBlacklistAlarm.alarm_id":
		if e.complexity.EnterpriseBlacklistAlarm.AlarmID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.AlarmID(childComplexity), true

	case "EnterpriseBlacklistAlarm.created_at":
		if e.complexity.EnterpriseBlacklistAlarm.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.CreatedAt(childComplexity), true

	case "EnterpriseBlacklistAlarm.created_by":
		if e.complexity.EnterpriseBlacklistAlarm.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.CreatedBy(childComplexity), true

	case "EnterpriseBlacklistAlarm.deleted_at":
		if e.complexity.EnterpriseBlacklistAlarm.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.DeletedAt(childComplexity), true

	case "EnterpriseBlacklistAlarm.deleted_by":
		if e.complexity.EnterpriseBlacklistAlarm.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.DeletedBy(childComplexity), true

	case "EnterpriseBlacklistAlarm.enterprise_id":
		if e.complexity.EnterpriseBlacklistAlarm.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.EnterpriseID(childComplexity), true

	case "EnterpriseBlacklistAlarm.id":
		if e.complexity.EnterpriseBlacklistAlarm.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.ID(childComplexity), true

	case "EnterpriseBlacklistAlarm.is_black":
		if e.complexity.EnterpriseBlacklistAlarm.IsBlack == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.IsBlack(childComplexity), true

	case "EnterpriseBlacklistAlarm.is_deleted":
		if e.complexity.EnterpriseBlacklistAlarm.IsDeleted == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.IsDeleted(childComplexity), true

	case "EnterpriseBlacklistAlarm.is_rank":
		if e.complexity.EnterpriseBlacklistAlarm.IsRank == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.IsRank(childComplexity), true

	case "EnterpriseBlacklistAlarm.type":
		if e.complexity.EnterpriseBlacklistAlarm.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.Type(childComplexity), true

	case "EnterpriseBlacklistAlarm.updated_at":
		if e.complexity.EnterpriseBlacklistAlarm.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.UpdatedAt(childComplexity), true

	case "EnterpriseBlacklistAlarm.updated_by":
		if e.complexity.EnterpriseBlacklistAlarm.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.UpdatedBy(childComplexity), true

	case "EnterpriseBlacklistAlarm.year":
		if e.complexity.EnterpriseBlacklistAlarm.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarm.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregate.aggregate":
		if e.complexity.EnterpriseBlacklistAlarmAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregate.Aggregate(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.avg":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.Avg(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.count":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.Count(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.max":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.Max(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.min":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.Min(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.stddev":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.Stddev(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.stddev_pop":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.stddev_samp":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.sum":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.Sum(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.var_pop":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.VarPop(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.var_samp":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseBlacklistAlarmAggregateFields.variance":
		if e.complexity.EnterpriseBlacklistAlarmAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAggregateFields.Variance(childComplexity), true

	case "EnterpriseBlacklistAlarmAvgFields.id":
		if e.complexity.EnterpriseBlacklistAlarmAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAvgFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmAvgFields.type":
		if e.complexity.EnterpriseBlacklistAlarmAvgFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAvgFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmAvgFields.year":
		if e.complexity.EnterpriseBlacklistAlarmAvgFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmAvgFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.alarm_id":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.AlarmID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.AlarmID(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.created_at":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.CreatedAt(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.created_by":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.CreatedBy(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.deleted_at":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.DeletedAt(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.deleted_by":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.DeletedBy(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.enterprise_id":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.id":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.is_black":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.IsBlack == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.IsBlack(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.is_deleted":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.IsDeleted(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.is_rank":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.IsRank == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.IsRank(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.type":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.updated_at":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.UpdatedAt(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.updated_by":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.UpdatedBy(childComplexity), true

	case "EnterpriseBlacklistAlarmMaxFields.year":
		if e.complexity.EnterpriseBlacklistAlarmMaxFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMaxFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.alarm_id":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.AlarmID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.AlarmID(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.created_at":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.CreatedAt(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.created_by":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.CreatedBy(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.deleted_at":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.DeletedAt(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.deleted_by":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.DeletedBy(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.enterprise_id":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.id":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.is_black":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.IsBlack == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.IsBlack(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.is_deleted":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.IsDeleted(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.is_rank":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.IsRank == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.IsRank(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.type":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.updated_at":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.UpdatedAt(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.updated_by":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.UpdatedBy(childComplexity), true

	case "EnterpriseBlacklistAlarmMinFields.year":
		if e.complexity.EnterpriseBlacklistAlarmMinFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMinFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmMutationResponse.affected_rows":
		if e.complexity.EnterpriseBlacklistAlarmMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseBlacklistAlarmMutationResponse.returning":
		if e.complexity.EnterpriseBlacklistAlarmMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmMutationResponse.Returning(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevFields.id":
		if e.complexity.EnterpriseBlacklistAlarmStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevFields.type":
		if e.complexity.EnterpriseBlacklistAlarmStddevFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevFields.year":
		if e.complexity.EnterpriseBlacklistAlarmStddevFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevPopFields.id":
		if e.complexity.EnterpriseBlacklistAlarmStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevPopFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevPopFields.type":
		if e.complexity.EnterpriseBlacklistAlarmStddevPopFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevPopFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevPopFields.year":
		if e.complexity.EnterpriseBlacklistAlarmStddevPopFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevPopFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevSampFields.id":
		if e.complexity.EnterpriseBlacklistAlarmStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevSampFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevSampFields.type":
		if e.complexity.EnterpriseBlacklistAlarmStddevSampFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevSampFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmStddevSampFields.year":
		if e.complexity.EnterpriseBlacklistAlarmStddevSampFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmStddevSampFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmSumFields.id":
		if e.complexity.EnterpriseBlacklistAlarmSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmSumFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmSumFields.type":
		if e.complexity.EnterpriseBlacklistAlarmSumFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmSumFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmSumFields.year":
		if e.complexity.EnterpriseBlacklistAlarmSumFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmSumFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmVarPopFields.id":
		if e.complexity.EnterpriseBlacklistAlarmVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarPopFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmVarPopFields.type":
		if e.complexity.EnterpriseBlacklistAlarmVarPopFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarPopFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmVarPopFields.year":
		if e.complexity.EnterpriseBlacklistAlarmVarPopFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarPopFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmVarSampFields.id":
		if e.complexity.EnterpriseBlacklistAlarmVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarSampFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmVarSampFields.type":
		if e.complexity.EnterpriseBlacklistAlarmVarSampFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarSampFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmVarSampFields.year":
		if e.complexity.EnterpriseBlacklistAlarmVarSampFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarSampFields.Year(childComplexity), true

	case "EnterpriseBlacklistAlarmVarianceFields.id":
		if e.complexity.EnterpriseBlacklistAlarmVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarianceFields.ID(childComplexity), true

	case "EnterpriseBlacklistAlarmVarianceFields.type":
		if e.complexity.EnterpriseBlacklistAlarmVarianceFields.Type == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarianceFields.Type(childComplexity), true

	case "EnterpriseBlacklistAlarmVarianceFields.year":
		if e.complexity.EnterpriseBlacklistAlarmVarianceFields.Year == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistAlarmVarianceFields.Year(childComplexity), true

	case "EnterpriseBlacklistHis.blacklist_type":
		if e.complexity.EnterpriseBlacklistHis.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHis.created_at":
		if e.complexity.EnterpriseBlacklistHis.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.CreatedAt(childComplexity), true

	case "EnterpriseBlacklistHis.created_by":
		if e.complexity.EnterpriseBlacklistHis.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.CreatedBy(childComplexity), true

	case "EnterpriseBlacklistHis.deleted_at":
		if e.complexity.EnterpriseBlacklistHis.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.DeletedAt(childComplexity), true

	case "EnterpriseBlacklistHis.deleted_by":
		if e.complexity.EnterpriseBlacklistHis.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.DeletedBy(childComplexity), true

	case "EnterpriseBlacklistHis.enterprise_id":
		if e.complexity.EnterpriseBlacklistHis.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.EnterpriseID(childComplexity), true

	case "EnterpriseBlacklistHis.his_id":
		if e.complexity.EnterpriseBlacklistHis.HisID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.HisID(childComplexity), true

	case "EnterpriseBlacklistHis.id":
		if e.complexity.EnterpriseBlacklistHis.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.ID(childComplexity), true

	case "EnterpriseBlacklistHis.is_deleted":
		if e.complexity.EnterpriseBlacklistHis.IsDeleted == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.IsDeleted(childComplexity), true

	case "EnterpriseBlacklistHis.operate":
		if e.complexity.EnterpriseBlacklistHis.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.Operate(childComplexity), true

	case "EnterpriseBlacklistHis.remarks":
		if e.complexity.EnterpriseBlacklistHis.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.Remarks(childComplexity), true

	case "EnterpriseBlacklistHis.updated_at":
		if e.complexity.EnterpriseBlacklistHis.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.UpdatedAt(childComplexity), true

	case "EnterpriseBlacklistHis.updated_by":
		if e.complexity.EnterpriseBlacklistHis.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHis.UpdatedBy(childComplexity), true

	case "EnterpriseBlacklistHisAggregate.aggregate":
		if e.complexity.EnterpriseBlacklistHisAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregate.Aggregate(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.avg":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.Avg(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.count":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.Count == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.Count(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.max":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.Max(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.min":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.Min(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.stddev":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.Stddev(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.stddev_pop":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.stddev_samp":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.sum":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.Sum(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.var_pop":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.VarPop(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.var_samp":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseBlacklistHisAggregateFields.variance":
		if e.complexity.EnterpriseBlacklistHisAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAggregateFields.Variance(childComplexity), true

	case "EnterpriseBlacklistHisAvgFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisAvgFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAvgFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisAvgFields.id":
		if e.complexity.EnterpriseBlacklistHisAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAvgFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisAvgFields.operate":
		if e.complexity.EnterpriseBlacklistHisAvgFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisAvgFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisMaxFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.created_at":
		if e.complexity.EnterpriseBlacklistHisMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.CreatedAt(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.created_by":
		if e.complexity.EnterpriseBlacklistHisMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.CreatedBy(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.deleted_at":
		if e.complexity.EnterpriseBlacklistHisMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.DeletedAt(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.deleted_by":
		if e.complexity.EnterpriseBlacklistHisMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.DeletedBy(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.enterprise_id":
		if e.complexity.EnterpriseBlacklistHisMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.his_id":
		if e.complexity.EnterpriseBlacklistHisMaxFields.HisID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.HisID(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.id":
		if e.complexity.EnterpriseBlacklistHisMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.is_deleted":
		if e.complexity.EnterpriseBlacklistHisMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.IsDeleted(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.operate":
		if e.complexity.EnterpriseBlacklistHisMaxFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.remarks":
		if e.complexity.EnterpriseBlacklistHisMaxFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.Remarks(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.updated_at":
		if e.complexity.EnterpriseBlacklistHisMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.UpdatedAt(childComplexity), true

	case "EnterpriseBlacklistHisMaxFields.updated_by":
		if e.complexity.EnterpriseBlacklistHisMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMaxFields.UpdatedBy(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisMinFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.created_at":
		if e.complexity.EnterpriseBlacklistHisMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.CreatedAt(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.created_by":
		if e.complexity.EnterpriseBlacklistHisMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.CreatedBy(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.deleted_at":
		if e.complexity.EnterpriseBlacklistHisMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.DeletedAt(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.deleted_by":
		if e.complexity.EnterpriseBlacklistHisMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.DeletedBy(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.enterprise_id":
		if e.complexity.EnterpriseBlacklistHisMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.his_id":
		if e.complexity.EnterpriseBlacklistHisMinFields.HisID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.HisID(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.id":
		if e.complexity.EnterpriseBlacklistHisMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.is_deleted":
		if e.complexity.EnterpriseBlacklistHisMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.IsDeleted(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.operate":
		if e.complexity.EnterpriseBlacklistHisMinFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.remarks":
		if e.complexity.EnterpriseBlacklistHisMinFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.Remarks(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.updated_at":
		if e.complexity.EnterpriseBlacklistHisMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.UpdatedAt(childComplexity), true

	case "EnterpriseBlacklistHisMinFields.updated_by":
		if e.complexity.EnterpriseBlacklistHisMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMinFields.UpdatedBy(childComplexity), true

	case "EnterpriseBlacklistHisMutationResponse.affected_rows":
		if e.complexity.EnterpriseBlacklistHisMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseBlacklistHisMutationResponse.returning":
		if e.complexity.EnterpriseBlacklistHisMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisMutationResponse.Returning(childComplexity), true

	case "EnterpriseBlacklistHisStddevFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisStddevFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisStddevFields.id":
		if e.complexity.EnterpriseBlacklistHisStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisStddevFields.operate":
		if e.complexity.EnterpriseBlacklistHisStddevFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisStddevPopFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisStddevPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevPopFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisStddevPopFields.id":
		if e.complexity.EnterpriseBlacklistHisStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevPopFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisStddevPopFields.operate":
		if e.complexity.EnterpriseBlacklistHisStddevPopFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevPopFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisStddevSampFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisStddevSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevSampFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisStddevSampFields.id":
		if e.complexity.EnterpriseBlacklistHisStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevSampFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisStddevSampFields.operate":
		if e.complexity.EnterpriseBlacklistHisStddevSampFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisStddevSampFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisSumFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisSumFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisSumFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisSumFields.id":
		if e.complexity.EnterpriseBlacklistHisSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisSumFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisSumFields.operate":
		if e.complexity.EnterpriseBlacklistHisSumFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisSumFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisVarPopFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisVarPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarPopFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisVarPopFields.id":
		if e.complexity.EnterpriseBlacklistHisVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarPopFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisVarPopFields.operate":
		if e.complexity.EnterpriseBlacklistHisVarPopFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarPopFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisVarSampFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisVarSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarSampFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisVarSampFields.id":
		if e.complexity.EnterpriseBlacklistHisVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarSampFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisVarSampFields.operate":
		if e.complexity.EnterpriseBlacklistHisVarSampFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarSampFields.Operate(childComplexity), true

	case "EnterpriseBlacklistHisVarianceFields.blacklist_type":
		if e.complexity.EnterpriseBlacklistHisVarianceFields.BlacklistType == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarianceFields.BlacklistType(childComplexity), true

	case "EnterpriseBlacklistHisVarianceFields.id":
		if e.complexity.EnterpriseBlacklistHisVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarianceFields.ID(childComplexity), true

	case "EnterpriseBlacklistHisVarianceFields.operate":
		if e.complexity.EnterpriseBlacklistHisVarianceFields.Operate == nil {
			break
		}

		return e.complexity.EnterpriseBlacklistHisVarianceFields.Operate(childComplexity), true

	case "Mutation.delete_driver_blacklist_apply":
		if e.complexity.Mutation.DeleteDriverBlacklistApply == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_blacklist_apply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverBlacklistApply(childComplexity, args["where"].(model.DriverBlacklistApplyBoolExp)), true

	case "Mutation.delete_driver_blacklist_apply_by_pk":
		if e.complexity.Mutation.DeleteDriverBlacklistApplyByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_blacklist_apply_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverBlacklistApplyByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driver_blacklist_apply_by_union_pk":
		if e.complexity.Mutation.DeleteDriverBlacklistApplyByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_blacklist_apply_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverBlacklistApplyByUnionPk(childComplexity, args["apply_id"].(string)), true

	case "Mutation.delete_driver_blacklist_his":
		if e.complexity.Mutation.DeleteDriverBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverBlacklistHis(childComplexity, args["where"].(model.DriverBlacklistHisBoolExp)), true

	case "Mutation.delete_driver_blacklist_his_by_pk":
		if e.complexity.Mutation.DeleteDriverBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverBlacklistHisByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_driver_blacklist_his_by_union_pk":
		if e.complexity.Mutation.DeleteDriverBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driver_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDriverBlacklistHisByUnionPk(childComplexity, args["his_id"].(string)), true

	case "Mutation.delete_enterprise_blacklist_alarm":
		if e.complexity.Mutation.DeleteEnterpriseBlacklistAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_blacklist_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseBlacklistAlarm(childComplexity, args["where"].(model.EnterpriseBlacklistAlarmBoolExp)), true

	case "Mutation.delete_enterprise_blacklist_alarm_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseBlacklistAlarmByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_blacklist_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseBlacklistAlarmByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_blacklist_alarm_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseBlacklistAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_blacklist_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseBlacklistAlarmByUnionPk(childComplexity, args["alarm_id"].(string)), true

	case "Mutation.delete_enterprise_blacklist_his":
		if e.complexity.Mutation.DeleteEnterpriseBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseBlacklistHis(childComplexity, args["where"].(model.EnterpriseBlacklistHisBoolExp)), true

	case "Mutation.delete_enterprise_blacklist_his_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseBlacklistHisByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise_blacklist_his_by_union_pk":
		if e.complexity.Mutation.DeleteEnterpriseBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseBlacklistHisByUnionPk(childComplexity, args["his_id"].(string)), true

	case "Mutation.delete_vehicle_blacklist_alarm":
		if e.complexity.Mutation.DeleteVehicleBlacklistAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_blacklist_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleBlacklistAlarm(childComplexity, args["where"].(model.VehicleBlacklistAlarmBoolExp)), true

	case "Mutation.delete_vehicle_blacklist_alarm_by_pk":
		if e.complexity.Mutation.DeleteVehicleBlacklistAlarmByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_blacklist_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleBlacklistAlarmByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_blacklist_alarm_by_union_pk":
		if e.complexity.Mutation.DeleteVehicleBlacklistAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_blacklist_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleBlacklistAlarmByUnionPk(childComplexity, args["alarm_id"].(string)), true

	case "Mutation.delete_vehicle_blacklist_his":
		if e.complexity.Mutation.DeleteVehicleBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleBlacklistHis(childComplexity, args["where"].(model.VehicleBlacklistHisBoolExp)), true

	case "Mutation.delete_vehicle_blacklist_his_by_pk":
		if e.complexity.Mutation.DeleteVehicleBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleBlacklistHisByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_blacklist_his_by_union_pk":
		if e.complexity.Mutation.DeleteVehicleBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleBlacklistHisByUnionPk(childComplexity, args["his_id"].(string)), true

	case "Mutation.insert_driver_blacklist_apply":
		if e.complexity.Mutation.InsertDriverBlacklistApply == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_blacklist_apply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverBlacklistApply(childComplexity, args["objects"].([]*model.DriverBlacklistApplyInsertInput)), true

	case "Mutation.insert_driver_blacklist_apply_one":
		if e.complexity.Mutation.InsertDriverBlacklistApplyOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_blacklist_apply_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverBlacklistApplyOne(childComplexity, args["objects"].(model.DriverBlacklistApplyInsertInput)), true

	case "Mutation.insert_driver_blacklist_his":
		if e.complexity.Mutation.InsertDriverBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverBlacklistHis(childComplexity, args["objects"].([]*model.DriverBlacklistHisInsertInput)), true

	case "Mutation.insert_driver_blacklist_his_one":
		if e.complexity.Mutation.InsertDriverBlacklistHisOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driver_blacklist_his_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDriverBlacklistHisOne(childComplexity, args["objects"].(model.DriverBlacklistHisInsertInput)), true

	case "Mutation.insert_enterprise_blacklist_alarm":
		if e.complexity.Mutation.InsertEnterpriseBlacklistAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_blacklist_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseBlacklistAlarm(childComplexity, args["objects"].([]*model.EnterpriseBlacklistAlarmInsertInput)), true

	case "Mutation.insert_enterprise_blacklist_alarm_one":
		if e.complexity.Mutation.InsertEnterpriseBlacklistAlarmOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_blacklist_alarm_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseBlacklistAlarmOne(childComplexity, args["objects"].(model.EnterpriseBlacklistAlarmInsertInput)), true

	case "Mutation.insert_enterprise_blacklist_his":
		if e.complexity.Mutation.InsertEnterpriseBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseBlacklistHis(childComplexity, args["objects"].([]*model.EnterpriseBlacklistHisInsertInput)), true

	case "Mutation.insert_enterprise_blacklist_his_one":
		if e.complexity.Mutation.InsertEnterpriseBlacklistHisOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_blacklist_his_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseBlacklistHisOne(childComplexity, args["objects"].(model.EnterpriseBlacklistHisInsertInput)), true

	case "Mutation.insert_vehicle_blacklist_alarm":
		if e.complexity.Mutation.InsertVehicleBlacklistAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_blacklist_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleBlacklistAlarm(childComplexity, args["objects"].([]*model.VehicleBlacklistAlarmInsertInput)), true

	case "Mutation.insert_vehicle_blacklist_alarm_one":
		if e.complexity.Mutation.InsertVehicleBlacklistAlarmOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_blacklist_alarm_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleBlacklistAlarmOne(childComplexity, args["objects"].(model.VehicleBlacklistAlarmInsertInput)), true

	case "Mutation.insert_vehicle_blacklist_his":
		if e.complexity.Mutation.InsertVehicleBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleBlacklistHis(childComplexity, args["objects"].([]*model.VehicleBlacklistHisInsertInput)), true

	case "Mutation.insert_vehicle_blacklist_his_one":
		if e.complexity.Mutation.InsertVehicleBlacklistHisOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_blacklist_his_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleBlacklistHisOne(childComplexity, args["objects"].(model.VehicleBlacklistHisInsertInput)), true

	case "Mutation.update_driver_blacklist_apply":
		if e.complexity.Mutation.UpdateDriverBlacklistApply == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_blacklist_apply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverBlacklistApply(childComplexity, args["_inc"].(*model.DriverBlacklistApplyIncInput), args["_set"].(*model.DriverBlacklistApplySetInput), args["where"].(model.DriverBlacklistApplyBoolExp)), true

	case "Mutation.update_driver_blacklist_apply_by_pk":
		if e.complexity.Mutation.UpdateDriverBlacklistApplyByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_blacklist_apply_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverBlacklistApplyByPk(childComplexity, args["_inc"].(*model.DriverBlacklistApplyIncInput), args["_set"].(*model.DriverBlacklistApplySetInput), args["id"].(int64)), true

	case "Mutation.update_driver_blacklist_apply_by_union_pk":
		if e.complexity.Mutation.UpdateDriverBlacklistApplyByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_blacklist_apply_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverBlacklistApplyByUnionPk(childComplexity, args["_inc"].(*model.DriverBlacklistApplyIncInput), args["_set"].(*model.DriverBlacklistApplySetInput), args["apply_id"].(string)), true

	case "Mutation.update_driver_blacklist_his":
		if e.complexity.Mutation.UpdateDriverBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverBlacklistHis(childComplexity, args["_inc"].(*model.DriverBlacklistHisIncInput), args["_set"].(*model.DriverBlacklistHisSetInput), args["where"].(model.DriverBlacklistHisBoolExp)), true

	case "Mutation.update_driver_blacklist_his_by_pk":
		if e.complexity.Mutation.UpdateDriverBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverBlacklistHisByPk(childComplexity, args["_inc"].(*model.DriverBlacklistHisIncInput), args["_set"].(*model.DriverBlacklistHisSetInput), args["id"].(int64)), true

	case "Mutation.update_driver_blacklist_his_by_union_pk":
		if e.complexity.Mutation.UpdateDriverBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driver_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriverBlacklistHisByUnionPk(childComplexity, args["_inc"].(*model.DriverBlacklistHisIncInput), args["_set"].(*model.DriverBlacklistHisSetInput), args["his_id"].(string)), true

	case "Mutation.update_enterprise_blacklist_alarm":
		if e.complexity.Mutation.UpdateEnterpriseBlacklistAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_blacklist_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseBlacklistAlarm(childComplexity, args["_inc"].(*model.EnterpriseBlacklistAlarmIncInput), args["_set"].(*model.EnterpriseBlacklistAlarmSetInput), args["where"].(model.EnterpriseBlacklistAlarmBoolExp)), true

	case "Mutation.update_enterprise_blacklist_alarm_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseBlacklistAlarmByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_blacklist_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseBlacklistAlarmByPk(childComplexity, args["_inc"].(*model.EnterpriseBlacklistAlarmIncInput), args["_set"].(*model.EnterpriseBlacklistAlarmSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_blacklist_alarm_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseBlacklistAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_blacklist_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseBlacklistAlarmByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseBlacklistAlarmIncInput), args["_set"].(*model.EnterpriseBlacklistAlarmSetInput), args["alarm_id"].(string)), true

	case "Mutation.update_enterprise_blacklist_his":
		if e.complexity.Mutation.UpdateEnterpriseBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseBlacklistHis(childComplexity, args["_inc"].(*model.EnterpriseBlacklistHisIncInput), args["_set"].(*model.EnterpriseBlacklistHisSetInput), args["where"].(model.EnterpriseBlacklistHisBoolExp)), true

	case "Mutation.update_enterprise_blacklist_his_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseBlacklistHisByPk(childComplexity, args["_inc"].(*model.EnterpriseBlacklistHisIncInput), args["_set"].(*model.EnterpriseBlacklistHisSetInput), args["id"].(int64)), true

	case "Mutation.update_enterprise_blacklist_his_by_union_pk":
		if e.complexity.Mutation.UpdateEnterpriseBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseBlacklistHisByUnionPk(childComplexity, args["_inc"].(*model.EnterpriseBlacklistHisIncInput), args["_set"].(*model.EnterpriseBlacklistHisSetInput), args["his_id"].(string)), true

	case "Mutation.update_vehicle_blacklist_alarm":
		if e.complexity.Mutation.UpdateVehicleBlacklistAlarm == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_blacklist_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleBlacklistAlarm(childComplexity, args["_inc"].(*model.VehicleBlacklistAlarmIncInput), args["_set"].(*model.VehicleBlacklistAlarmSetInput), args["where"].(model.VehicleBlacklistAlarmBoolExp)), true

	case "Mutation.update_vehicle_blacklist_alarm_by_pk":
		if e.complexity.Mutation.UpdateVehicleBlacklistAlarmByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_blacklist_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleBlacklistAlarmByPk(childComplexity, args["_inc"].(*model.VehicleBlacklistAlarmIncInput), args["_set"].(*model.VehicleBlacklistAlarmSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_blacklist_alarm_by_union_pk":
		if e.complexity.Mutation.UpdateVehicleBlacklistAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_blacklist_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleBlacklistAlarmByUnionPk(childComplexity, args["_inc"].(*model.VehicleBlacklistAlarmIncInput), args["_set"].(*model.VehicleBlacklistAlarmSetInput), args["alarm_id"].(string)), true

	case "Mutation.update_vehicle_blacklist_his":
		if e.complexity.Mutation.UpdateVehicleBlacklistHis == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleBlacklistHis(childComplexity, args["_inc"].(*model.VehicleBlacklistHisIncInput), args["_set"].(*model.VehicleBlacklistHisSetInput), args["where"].(model.VehicleBlacklistHisBoolExp)), true

	case "Mutation.update_vehicle_blacklist_his_by_pk":
		if e.complexity.Mutation.UpdateVehicleBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleBlacklistHisByPk(childComplexity, args["_inc"].(*model.VehicleBlacklistHisIncInput), args["_set"].(*model.VehicleBlacklistHisSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_blacklist_his_by_union_pk":
		if e.complexity.Mutation.UpdateVehicleBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleBlacklistHisByUnionPk(childComplexity, args["_inc"].(*model.VehicleBlacklistHisIncInput), args["_set"].(*model.VehicleBlacklistHisSetInput), args["his_id"].(string)), true

	case "Query.driver_blacklist_apply":
		if e.complexity.Query.DriverBlacklistApply == nil {
			break
		}

		args, err := ec.field_Query_driver_blacklist_apply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverBlacklistApply(childComplexity, args["distinct_on"].([]model.DriverBlacklistApplySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverBlacklistApplyOrderBy), args["where"].(*model.DriverBlacklistApplyBoolExp)), true

	case "Query.driver_blacklist_apply_aggregate":
		if e.complexity.Query.DriverBlacklistApplyAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_blacklist_apply_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverBlacklistApplyAggregate(childComplexity, args["distinct_on"].([]model.DriverBlacklistApplySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverBlacklistApplyOrderBy), args["where"].(*model.DriverBlacklistApplyBoolExp)), true

	case "Query.driver_blacklist_apply_by_pk":
		if e.complexity.Query.DriverBlacklistApplyByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_blacklist_apply_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverBlacklistApplyByPk(childComplexity, args["id"].(int64)), true

	case "Query.driver_blacklist_apply_by_union_pk":
		if e.complexity.Query.DriverBlacklistApplyByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_driver_blacklist_apply_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverBlacklistApplyByUnionPk(childComplexity, args["apply_id"].(string)), true

	case "Query.driver_blacklist_his":
		if e.complexity.Query.DriverBlacklistHis == nil {
			break
		}

		args, err := ec.field_Query_driver_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverBlacklistHis(childComplexity, args["distinct_on"].([]model.DriverBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverBlacklistHisOrderBy), args["where"].(*model.DriverBlacklistHisBoolExp)), true

	case "Query.driver_blacklist_his_aggregate":
		if e.complexity.Query.DriverBlacklistHisAggregate == nil {
			break
		}

		args, err := ec.field_Query_driver_blacklist_his_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverBlacklistHisAggregate(childComplexity, args["distinct_on"].([]model.DriverBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverBlacklistHisOrderBy), args["where"].(*model.DriverBlacklistHisBoolExp)), true

	case "Query.driver_blacklist_his_by_pk":
		if e.complexity.Query.DriverBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Query_driver_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverBlacklistHisByPk(childComplexity, args["id"].(int64)), true

	case "Query.driver_blacklist_his_by_union_pk":
		if e.complexity.Query.DriverBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_driver_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverBlacklistHisByUnionPk(childComplexity, args["his_id"].(string)), true

	case "Query.enterprise_blacklist_alarm":
		if e.complexity.Query.EnterpriseBlacklistAlarm == nil {
			break
		}

		args, err := ec.field_Query_enterprise_blacklist_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseBlacklistAlarm(childComplexity, args["distinct_on"].([]model.EnterpriseBlacklistAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseBlacklistAlarmOrderBy), args["where"].(*model.EnterpriseBlacklistAlarmBoolExp)), true

	case "Query.enterprise_blacklist_alarm_aggregate":
		if e.complexity.Query.EnterpriseBlacklistAlarmAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_blacklist_alarm_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseBlacklistAlarmAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseBlacklistAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseBlacklistAlarmOrderBy), args["where"].(*model.EnterpriseBlacklistAlarmBoolExp)), true

	case "Query.enterprise_blacklist_alarm_by_pk":
		if e.complexity.Query.EnterpriseBlacklistAlarmByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_blacklist_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseBlacklistAlarmByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_blacklist_alarm_by_union_pk":
		if e.complexity.Query.EnterpriseBlacklistAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_blacklist_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseBlacklistAlarmByUnionPk(childComplexity, args["alarm_id"].(string)), true

	case "Query.enterprise_blacklist_his":
		if e.complexity.Query.EnterpriseBlacklistHis == nil {
			break
		}

		args, err := ec.field_Query_enterprise_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseBlacklistHis(childComplexity, args["distinct_on"].([]model.EnterpriseBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseBlacklistHisOrderBy), args["where"].(*model.EnterpriseBlacklistHisBoolExp)), true

	case "Query.enterprise_blacklist_his_aggregate":
		if e.complexity.Query.EnterpriseBlacklistHisAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_blacklist_his_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseBlacklistHisAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseBlacklistHisOrderBy), args["where"].(*model.EnterpriseBlacklistHisBoolExp)), true

	case "Query.enterprise_blacklist_his_by_pk":
		if e.complexity.Query.EnterpriseBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseBlacklistHisByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise_blacklist_his_by_union_pk":
		if e.complexity.Query.EnterpriseBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseBlacklistHisByUnionPk(childComplexity, args["his_id"].(string)), true

	case "Query.vehicle_blacklist_alarm":
		if e.complexity.Query.VehicleBlacklistAlarm == nil {
			break
		}

		args, err := ec.field_Query_vehicle_blacklist_alarm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleBlacklistAlarm(childComplexity, args["distinct_on"].([]model.VehicleBlacklistAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleBlacklistAlarmOrderBy), args["where"].(*model.VehicleBlacklistAlarmBoolExp)), true

	case "Query.vehicle_blacklist_alarm_aggregate":
		if e.complexity.Query.VehicleBlacklistAlarmAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_blacklist_alarm_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleBlacklistAlarmAggregate(childComplexity, args["distinct_on"].([]model.VehicleBlacklistAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleBlacklistAlarmOrderBy), args["where"].(*model.VehicleBlacklistAlarmBoolExp)), true

	case "Query.vehicle_blacklist_alarm_by_pk":
		if e.complexity.Query.VehicleBlacklistAlarmByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_blacklist_alarm_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleBlacklistAlarmByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_blacklist_alarm_by_union_pk":
		if e.complexity.Query.VehicleBlacklistAlarmByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_blacklist_alarm_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleBlacklistAlarmByUnionPk(childComplexity, args["alarm_id"].(string)), true

	case "Query.vehicle_blacklist_his":
		if e.complexity.Query.VehicleBlacklistHis == nil {
			break
		}

		args, err := ec.field_Query_vehicle_blacklist_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleBlacklistHis(childComplexity, args["distinct_on"].([]model.VehicleBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleBlacklistHisOrderBy), args["where"].(*model.VehicleBlacklistHisBoolExp)), true

	case "Query.vehicle_blacklist_his_aggregate":
		if e.complexity.Query.VehicleBlacklistHisAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_blacklist_his_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleBlacklistHisAggregate(childComplexity, args["distinct_on"].([]model.VehicleBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleBlacklistHisOrderBy), args["where"].(*model.VehicleBlacklistHisBoolExp)), true

	case "Query.vehicle_blacklist_his_by_pk":
		if e.complexity.Query.VehicleBlacklistHisByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_blacklist_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleBlacklistHisByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_blacklist_his_by_union_pk":
		if e.complexity.Query.VehicleBlacklistHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_blacklist_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleBlacklistHisByUnionPk(childComplexity, args["his_id"].(string)), true

	case "VehicleBlacklistAlarm.alarm_id":
		if e.complexity.VehicleBlacklistAlarm.AlarmID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.AlarmID(childComplexity), true

	case "VehicleBlacklistAlarm.created_at":
		if e.complexity.VehicleBlacklistAlarm.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.CreatedAt(childComplexity), true

	case "VehicleBlacklistAlarm.created_by":
		if e.complexity.VehicleBlacklistAlarm.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.CreatedBy(childComplexity), true

	case "VehicleBlacklistAlarm.deleted_at":
		if e.complexity.VehicleBlacklistAlarm.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.DeletedAt(childComplexity), true

	case "VehicleBlacklistAlarm.deleted_by":
		if e.complexity.VehicleBlacklistAlarm.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.DeletedBy(childComplexity), true

	case "VehicleBlacklistAlarm.id":
		if e.complexity.VehicleBlacklistAlarm.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.ID(childComplexity), true

	case "VehicleBlacklistAlarm.is_deleted":
		if e.complexity.VehicleBlacklistAlarm.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.IsDeleted(childComplexity), true

	case "VehicleBlacklistAlarm.license_plate_number":
		if e.complexity.VehicleBlacklistAlarm.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.LicensePlateNumber(childComplexity), true

	case "VehicleBlacklistAlarm.score_count":
		if e.complexity.VehicleBlacklistAlarm.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarm.score_num":
		if e.complexity.VehicleBlacklistAlarm.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarm.updated_at":
		if e.complexity.VehicleBlacklistAlarm.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.UpdatedAt(childComplexity), true

	case "VehicleBlacklistAlarm.updated_by":
		if e.complexity.VehicleBlacklistAlarm.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.UpdatedBy(childComplexity), true

	case "VehicleBlacklistAlarm.vehicle_id":
		if e.complexity.VehicleBlacklistAlarm.VehicleID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.VehicleID(childComplexity), true

	case "VehicleBlacklistAlarm.year":
		if e.complexity.VehicleBlacklistAlarm.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarm.Year(childComplexity), true

	case "VehicleBlacklistAlarmAggregate.aggregate":
		if e.complexity.VehicleBlacklistAlarmAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregate.Aggregate(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.avg":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.Avg(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.count":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.Count(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.max":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.Max(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.min":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.Min(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.stddev":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.Stddev(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.stddev_pop":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.StddevPop(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.stddev_samp":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.StddevSamp(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.sum":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.Sum(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.var_pop":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.VarPop(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.var_samp":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.VarSamp(childComplexity), true

	case "VehicleBlacklistAlarmAggregateFields.variance":
		if e.complexity.VehicleBlacklistAlarmAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAggregateFields.Variance(childComplexity), true

	case "VehicleBlacklistAlarmAvgFields.id":
		if e.complexity.VehicleBlacklistAlarmAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAvgFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmAvgFields.score_count":
		if e.complexity.VehicleBlacklistAlarmAvgFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAvgFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmAvgFields.score_num":
		if e.complexity.VehicleBlacklistAlarmAvgFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAvgFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmAvgFields.year":
		if e.complexity.VehicleBlacklistAlarmAvgFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmAvgFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.alarm_id":
		if e.complexity.VehicleBlacklistAlarmMaxFields.AlarmID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.AlarmID(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.created_at":
		if e.complexity.VehicleBlacklistAlarmMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.CreatedAt(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.created_by":
		if e.complexity.VehicleBlacklistAlarmMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.CreatedBy(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.deleted_at":
		if e.complexity.VehicleBlacklistAlarmMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.DeletedAt(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.deleted_by":
		if e.complexity.VehicleBlacklistAlarmMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.DeletedBy(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.id":
		if e.complexity.VehicleBlacklistAlarmMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.is_deleted":
		if e.complexity.VehicleBlacklistAlarmMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.IsDeleted(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.license_plate_number":
		if e.complexity.VehicleBlacklistAlarmMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.LicensePlateNumber(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.score_count":
		if e.complexity.VehicleBlacklistAlarmMaxFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.score_num":
		if e.complexity.VehicleBlacklistAlarmMaxFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.updated_at":
		if e.complexity.VehicleBlacklistAlarmMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.UpdatedAt(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.updated_by":
		if e.complexity.VehicleBlacklistAlarmMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.UpdatedBy(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.vehicle_id":
		if e.complexity.VehicleBlacklistAlarmMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.VehicleID(childComplexity), true

	case "VehicleBlacklistAlarmMaxFields.year":
		if e.complexity.VehicleBlacklistAlarmMaxFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMaxFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.alarm_id":
		if e.complexity.VehicleBlacklistAlarmMinFields.AlarmID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.AlarmID(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.created_at":
		if e.complexity.VehicleBlacklistAlarmMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.CreatedAt(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.created_by":
		if e.complexity.VehicleBlacklistAlarmMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.CreatedBy(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.deleted_at":
		if e.complexity.VehicleBlacklistAlarmMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.DeletedAt(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.deleted_by":
		if e.complexity.VehicleBlacklistAlarmMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.DeletedBy(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.id":
		if e.complexity.VehicleBlacklistAlarmMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.is_deleted":
		if e.complexity.VehicleBlacklistAlarmMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.IsDeleted(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.license_plate_number":
		if e.complexity.VehicleBlacklistAlarmMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.LicensePlateNumber(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.score_count":
		if e.complexity.VehicleBlacklistAlarmMinFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.score_num":
		if e.complexity.VehicleBlacklistAlarmMinFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.updated_at":
		if e.complexity.VehicleBlacklistAlarmMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.UpdatedAt(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.updated_by":
		if e.complexity.VehicleBlacklistAlarmMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.UpdatedBy(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.vehicle_id":
		if e.complexity.VehicleBlacklistAlarmMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.VehicleID(childComplexity), true

	case "VehicleBlacklistAlarmMinFields.year":
		if e.complexity.VehicleBlacklistAlarmMinFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMinFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmMutationResponse.affected_rows":
		if e.complexity.VehicleBlacklistAlarmMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMutationResponse.AffectedRows(childComplexity), true

	case "VehicleBlacklistAlarmMutationResponse.returning":
		if e.complexity.VehicleBlacklistAlarmMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmMutationResponse.Returning(childComplexity), true

	case "VehicleBlacklistAlarmStddevFields.id":
		if e.complexity.VehicleBlacklistAlarmStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmStddevFields.score_count":
		if e.complexity.VehicleBlacklistAlarmStddevFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmStddevFields.score_num":
		if e.complexity.VehicleBlacklistAlarmStddevFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmStddevFields.year":
		if e.complexity.VehicleBlacklistAlarmStddevFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmStddevPopFields.id":
		if e.complexity.VehicleBlacklistAlarmStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevPopFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmStddevPopFields.score_count":
		if e.complexity.VehicleBlacklistAlarmStddevPopFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevPopFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmStddevPopFields.score_num":
		if e.complexity.VehicleBlacklistAlarmStddevPopFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevPopFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmStddevPopFields.year":
		if e.complexity.VehicleBlacklistAlarmStddevPopFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevPopFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmStddevSampFields.id":
		if e.complexity.VehicleBlacklistAlarmStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevSampFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmStddevSampFields.score_count":
		if e.complexity.VehicleBlacklistAlarmStddevSampFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevSampFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmStddevSampFields.score_num":
		if e.complexity.VehicleBlacklistAlarmStddevSampFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevSampFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmStddevSampFields.year":
		if e.complexity.VehicleBlacklistAlarmStddevSampFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmStddevSampFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmSumFields.id":
		if e.complexity.VehicleBlacklistAlarmSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmSumFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmSumFields.score_count":
		if e.complexity.VehicleBlacklistAlarmSumFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmSumFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmSumFields.score_num":
		if e.complexity.VehicleBlacklistAlarmSumFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmSumFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmSumFields.year":
		if e.complexity.VehicleBlacklistAlarmSumFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmSumFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmVarPopFields.id":
		if e.complexity.VehicleBlacklistAlarmVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarPopFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmVarPopFields.score_count":
		if e.complexity.VehicleBlacklistAlarmVarPopFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarPopFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmVarPopFields.score_num":
		if e.complexity.VehicleBlacklistAlarmVarPopFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarPopFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmVarPopFields.year":
		if e.complexity.VehicleBlacklistAlarmVarPopFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarPopFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmVarSampFields.id":
		if e.complexity.VehicleBlacklistAlarmVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarSampFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmVarSampFields.score_count":
		if e.complexity.VehicleBlacklistAlarmVarSampFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarSampFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmVarSampFields.score_num":
		if e.complexity.VehicleBlacklistAlarmVarSampFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarSampFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmVarSampFields.year":
		if e.complexity.VehicleBlacklistAlarmVarSampFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarSampFields.Year(childComplexity), true

	case "VehicleBlacklistAlarmVarianceFields.id":
		if e.complexity.VehicleBlacklistAlarmVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarianceFields.ID(childComplexity), true

	case "VehicleBlacklistAlarmVarianceFields.score_count":
		if e.complexity.VehicleBlacklistAlarmVarianceFields.ScoreCount == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarianceFields.ScoreCount(childComplexity), true

	case "VehicleBlacklistAlarmVarianceFields.score_num":
		if e.complexity.VehicleBlacklistAlarmVarianceFields.ScoreNum == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarianceFields.ScoreNum(childComplexity), true

	case "VehicleBlacklistAlarmVarianceFields.year":
		if e.complexity.VehicleBlacklistAlarmVarianceFields.Year == nil {
			break
		}

		return e.complexity.VehicleBlacklistAlarmVarianceFields.Year(childComplexity), true

	case "VehicleBlacklistHis.blacklist_type":
		if e.complexity.VehicleBlacklistHis.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.BlacklistType(childComplexity), true

	case "VehicleBlacklistHis.created_at":
		if e.complexity.VehicleBlacklistHis.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.CreatedAt(childComplexity), true

	case "VehicleBlacklistHis.created_by":
		if e.complexity.VehicleBlacklistHis.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.CreatedBy(childComplexity), true

	case "VehicleBlacklistHis.deleted_at":
		if e.complexity.VehicleBlacklistHis.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.DeletedAt(childComplexity), true

	case "VehicleBlacklistHis.deleted_by":
		if e.complexity.VehicleBlacklistHis.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.DeletedBy(childComplexity), true

	case "VehicleBlacklistHis.his_id":
		if e.complexity.VehicleBlacklistHis.HisID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.HisID(childComplexity), true

	case "VehicleBlacklistHis.id":
		if e.complexity.VehicleBlacklistHis.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.ID(childComplexity), true

	case "VehicleBlacklistHis.is_deleted":
		if e.complexity.VehicleBlacklistHis.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.IsDeleted(childComplexity), true

	case "VehicleBlacklistHis.operate":
		if e.complexity.VehicleBlacklistHis.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.Operate(childComplexity), true

	case "VehicleBlacklistHis.remarks":
		if e.complexity.VehicleBlacklistHis.Remarks == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.Remarks(childComplexity), true

	case "VehicleBlacklistHis.updated_at":
		if e.complexity.VehicleBlacklistHis.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.UpdatedAt(childComplexity), true

	case "VehicleBlacklistHis.updated_by":
		if e.complexity.VehicleBlacklistHis.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.UpdatedBy(childComplexity), true

	case "VehicleBlacklistHis.vehicle_id":
		if e.complexity.VehicleBlacklistHis.VehicleID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHis.VehicleID(childComplexity), true

	case "VehicleBlacklistHisAggregate.aggregate":
		if e.complexity.VehicleBlacklistHisAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregate.Aggregate(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.avg":
		if e.complexity.VehicleBlacklistHisAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.Avg(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.count":
		if e.complexity.VehicleBlacklistHisAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.Count(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.max":
		if e.complexity.VehicleBlacklistHisAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.Max(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.min":
		if e.complexity.VehicleBlacklistHisAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.Min(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.stddev":
		if e.complexity.VehicleBlacklistHisAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.Stddev(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.stddev_pop":
		if e.complexity.VehicleBlacklistHisAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.StddevPop(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.stddev_samp":
		if e.complexity.VehicleBlacklistHisAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.StddevSamp(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.sum":
		if e.complexity.VehicleBlacklistHisAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.Sum(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.var_pop":
		if e.complexity.VehicleBlacklistHisAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.VarPop(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.var_samp":
		if e.complexity.VehicleBlacklistHisAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.VarSamp(childComplexity), true

	case "VehicleBlacklistHisAggregateFields.variance":
		if e.complexity.VehicleBlacklistHisAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAggregateFields.Variance(childComplexity), true

	case "VehicleBlacklistHisAvgFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisAvgFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAvgFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisAvgFields.id":
		if e.complexity.VehicleBlacklistHisAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAvgFields.ID(childComplexity), true

	case "VehicleBlacklistHisAvgFields.operate":
		if e.complexity.VehicleBlacklistHisAvgFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisAvgFields.Operate(childComplexity), true

	case "VehicleBlacklistHisMaxFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisMaxFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisMaxFields.created_at":
		if e.complexity.VehicleBlacklistHisMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.CreatedAt(childComplexity), true

	case "VehicleBlacklistHisMaxFields.created_by":
		if e.complexity.VehicleBlacklistHisMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.CreatedBy(childComplexity), true

	case "VehicleBlacklistHisMaxFields.deleted_at":
		if e.complexity.VehicleBlacklistHisMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.DeletedAt(childComplexity), true

	case "VehicleBlacklistHisMaxFields.deleted_by":
		if e.complexity.VehicleBlacklistHisMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.DeletedBy(childComplexity), true

	case "VehicleBlacklistHisMaxFields.his_id":
		if e.complexity.VehicleBlacklistHisMaxFields.HisID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.HisID(childComplexity), true

	case "VehicleBlacklistHisMaxFields.id":
		if e.complexity.VehicleBlacklistHisMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.ID(childComplexity), true

	case "VehicleBlacklistHisMaxFields.is_deleted":
		if e.complexity.VehicleBlacklistHisMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.IsDeleted(childComplexity), true

	case "VehicleBlacklistHisMaxFields.operate":
		if e.complexity.VehicleBlacklistHisMaxFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.Operate(childComplexity), true

	case "VehicleBlacklistHisMaxFields.remarks":
		if e.complexity.VehicleBlacklistHisMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.Remarks(childComplexity), true

	case "VehicleBlacklistHisMaxFields.updated_at":
		if e.complexity.VehicleBlacklistHisMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.UpdatedAt(childComplexity), true

	case "VehicleBlacklistHisMaxFields.updated_by":
		if e.complexity.VehicleBlacklistHisMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.UpdatedBy(childComplexity), true

	case "VehicleBlacklistHisMaxFields.vehicle_id":
		if e.complexity.VehicleBlacklistHisMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMaxFields.VehicleID(childComplexity), true

	case "VehicleBlacklistHisMinFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisMinFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisMinFields.created_at":
		if e.complexity.VehicleBlacklistHisMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.CreatedAt(childComplexity), true

	case "VehicleBlacklistHisMinFields.created_by":
		if e.complexity.VehicleBlacklistHisMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.CreatedBy(childComplexity), true

	case "VehicleBlacklistHisMinFields.deleted_at":
		if e.complexity.VehicleBlacklistHisMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.DeletedAt(childComplexity), true

	case "VehicleBlacklistHisMinFields.deleted_by":
		if e.complexity.VehicleBlacklistHisMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.DeletedBy(childComplexity), true

	case "VehicleBlacklistHisMinFields.his_id":
		if e.complexity.VehicleBlacklistHisMinFields.HisID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.HisID(childComplexity), true

	case "VehicleBlacklistHisMinFields.id":
		if e.complexity.VehicleBlacklistHisMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.ID(childComplexity), true

	case "VehicleBlacklistHisMinFields.is_deleted":
		if e.complexity.VehicleBlacklistHisMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.IsDeleted(childComplexity), true

	case "VehicleBlacklistHisMinFields.operate":
		if e.complexity.VehicleBlacklistHisMinFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.Operate(childComplexity), true

	case "VehicleBlacklistHisMinFields.remarks":
		if e.complexity.VehicleBlacklistHisMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.Remarks(childComplexity), true

	case "VehicleBlacklistHisMinFields.updated_at":
		if e.complexity.VehicleBlacklistHisMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.UpdatedAt(childComplexity), true

	case "VehicleBlacklistHisMinFields.updated_by":
		if e.complexity.VehicleBlacklistHisMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.UpdatedBy(childComplexity), true

	case "VehicleBlacklistHisMinFields.vehicle_id":
		if e.complexity.VehicleBlacklistHisMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMinFields.VehicleID(childComplexity), true

	case "VehicleBlacklistHisMutationResponse.affected_rows":
		if e.complexity.VehicleBlacklistHisMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMutationResponse.AffectedRows(childComplexity), true

	case "VehicleBlacklistHisMutationResponse.returning":
		if e.complexity.VehicleBlacklistHisMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisMutationResponse.Returning(childComplexity), true

	case "VehicleBlacklistHisStddevFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisStddevFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisStddevFields.id":
		if e.complexity.VehicleBlacklistHisStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevFields.ID(childComplexity), true

	case "VehicleBlacklistHisStddevFields.operate":
		if e.complexity.VehicleBlacklistHisStddevFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevFields.Operate(childComplexity), true

	case "VehicleBlacklistHisStddevPopFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisStddevPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevPopFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisStddevPopFields.id":
		if e.complexity.VehicleBlacklistHisStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevPopFields.ID(childComplexity), true

	case "VehicleBlacklistHisStddevPopFields.operate":
		if e.complexity.VehicleBlacklistHisStddevPopFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevPopFields.Operate(childComplexity), true

	case "VehicleBlacklistHisStddevSampFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisStddevSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevSampFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisStddevSampFields.id":
		if e.complexity.VehicleBlacklistHisStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevSampFields.ID(childComplexity), true

	case "VehicleBlacklistHisStddevSampFields.operate":
		if e.complexity.VehicleBlacklistHisStddevSampFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisStddevSampFields.Operate(childComplexity), true

	case "VehicleBlacklistHisSumFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisSumFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisSumFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisSumFields.id":
		if e.complexity.VehicleBlacklistHisSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisSumFields.ID(childComplexity), true

	case "VehicleBlacklistHisSumFields.operate":
		if e.complexity.VehicleBlacklistHisSumFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisSumFields.Operate(childComplexity), true

	case "VehicleBlacklistHisVarPopFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisVarPopFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarPopFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisVarPopFields.id":
		if e.complexity.VehicleBlacklistHisVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarPopFields.ID(childComplexity), true

	case "VehicleBlacklistHisVarPopFields.operate":
		if e.complexity.VehicleBlacklistHisVarPopFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarPopFields.Operate(childComplexity), true

	case "VehicleBlacklistHisVarSampFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisVarSampFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarSampFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisVarSampFields.id":
		if e.complexity.VehicleBlacklistHisVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarSampFields.ID(childComplexity), true

	case "VehicleBlacklistHisVarSampFields.operate":
		if e.complexity.VehicleBlacklistHisVarSampFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarSampFields.Operate(childComplexity), true

	case "VehicleBlacklistHisVarianceFields.blacklist_type":
		if e.complexity.VehicleBlacklistHisVarianceFields.BlacklistType == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarianceFields.BlacklistType(childComplexity), true

	case "VehicleBlacklistHisVarianceFields.id":
		if e.complexity.VehicleBlacklistHisVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarianceFields.ID(childComplexity), true

	case "VehicleBlacklistHisVarianceFields.operate":
		if e.complexity.VehicleBlacklistHisVarianceFields.Operate == nil {
			break
		}

		return e.complexity.VehicleBlacklistHisVarianceFields.Operate(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/driver_blacklist_apply.graphqls", Input: `"""
驾驶员黑名单申请
"""
type DriverBlacklistApply {
	"""
	ID
	"""
	id: Bigint!
	"""
	驾驶员黑名单申请ID
	"""
	apply_id: String!
	"""
	驾驶员ID
	"""
	driver_id: String!
	"""
	申请原因
	"""
	apply_reason: String
	"""
	黑名单类型
	"""
	blacklist_type: Int
	"""
	状态（1：待交警大队审批2：待交警支队审批，3：退回，4：完成
	"""
	state: Int
	"""
	创建时间
	"""
	created_at: Timestamptz!
	"""
	创建人
	"""
	created_by: String
	"""
	更新时间
	"""
	updated_at: Timestamptz
	"""
	更新人
	"""
	updated_by: String
	"""
	删除时间
	"""
	deleted_at: Timestamptz
	"""
	删除人
	"""
	deleted_by: String
	"""
	是否删除
	"""
	is_deleted: Boolean!
}
"""
aggregated selection of "driver_blacklist_apply"
"""
type DriverBlacklistApplyAggregate {
	aggregate: DriverBlacklistApplyAggregateFields
}
"""
aggregate fields of "driver_blacklist_apply"
"""
type DriverBlacklistApplyAggregateFields {
	avg: DriverBlacklistApplyAvgFields
	count: Int
	max: DriverBlacklistApplyMaxFields
	min: DriverBlacklistApplyMinFields
	stddev: DriverBlacklistApplyStddevFields
	stddev_pop: DriverBlacklistApplyStddevPopFields
	stddev_samp: DriverBlacklistApplyStddevSampFields
	sum: DriverBlacklistApplySumFields
	var_pop: DriverBlacklistApplyVarPopFields
	var_samp: DriverBlacklistApplyVarSampFields
	variance: DriverBlacklistApplyVarianceFields
}
"""
aggregate avg on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyAvgFields {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
aggregate max on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyMaxFields {
	id: Bigint
	apply_id: String
	driver_id: String
	apply_reason: String
	blacklist_type: Int
	state: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyMinFields {
	id: Bigint
	apply_id: String
	driver_id: String
	apply_reason: String
	blacklist_type: Int
	state: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyStddevFields {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
aggregate stddev_pop on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyStddevPopFields {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
aggregate stddev_samp on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyStddevSampFields {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
aggregate sum on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplySumFields {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
aggregate var_pop on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyVarPopFields {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
aggregate var_samp on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyVarSampFields {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
aggregate variance on columns of table "driver_blacklist_apply"
"""
type DriverBlacklistApplyVarianceFields {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
response of any mutation on the table "driver_blacklist_apply"
"""
type DriverBlacklistApplyMutationResponse {
	affected_rows: Int!
	returning: [DriverBlacklistApply!]!
}
"""
ordering options when selecting data from "driver_blacklist_apply"
"""
input DriverBlacklistApplyOrderBy {
	id: OrderBy
	apply_id: OrderBy
	driver_id: OrderBy
	apply_reason: OrderBy
	blacklist_type: OrderBy
	state: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_blacklist_apply'.
"""
input DriverBlacklistApplyBoolExp {
	_and: [DriverBlacklistApplyBoolExp]
	_not: DriverBlacklistApplyBoolExp
	_or: [DriverBlacklistApplyBoolExp]
	id: BigintComparisonExp
	apply_id: StringComparisonExp
	driver_id: StringComparisonExp
	apply_reason: StringComparisonExp
	blacklist_type: IntComparisonExp
	state: IntComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "driver_blacklist_apply"
"""
input DriverBlacklistApplyInsertInput {
	apply_id: String!
	driver_id: String!
	apply_reason: String
	blacklist_type: Int
	state: Int
	created_at: Timestamptz!
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean!
}
"""
input type for incrementing integer column in table "driver_blacklist_apply"
"""
input DriverBlacklistApplyIncInput {
	id: Bigint
	blacklist_type: Int
	state: Int
}
"""
input type for updating data in table "driver_blacklist_apply"
"""
input DriverBlacklistApplySetInput {
	id: Bigint
	apply_id: String
	driver_id: String
	apply_reason: String
	blacklist_type: Int
	state: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum DriverBlacklistApplySelectColumn {
	"""
	ID
	"""
	id
	"""
	驾驶员黑名单申请ID
	"""
	apply_id
	"""
	驾驶员ID
	"""
	driver_id
	"""
	申请原因
	"""
	apply_reason
	"""
	黑名单类型
	"""
	blacklist_type
	"""
	状态（1：待交警大队审批2：待交警支队审批，3：退回，4：完成
	"""
	state
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	created_by
	"""
	更新时间
	"""
	updated_at
	"""
	更新人
	"""
	updated_by
	"""
	删除时间
	"""
	deleted_at
	"""
	删除人
	"""
	deleted_by
	"""
	是否删除
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	driver_blacklist_apply(distinct_on: [DriverBlacklistApplySelectColumn!], limit: Int, offset: Int, order_by: [DriverBlacklistApplyOrderBy!], where: DriverBlacklistApplyBoolExp): [DriverBlacklistApply!]!
	"""
	聚合查询
	"""
	driver_blacklist_apply_aggregate(distinct_on: [DriverBlacklistApplySelectColumn!], limit: Int, offset: Int, order_by: [DriverBlacklistApplyOrderBy!], where: DriverBlacklistApplyBoolExp): DriverBlacklistApplyAggregate!
	"""
	主键查询
	"""
	driver_blacklist_apply_by_pk(id: Bigint!): DriverBlacklistApply
	"""
	联合主键查询
	"""
	driver_blacklist_apply_by_union_pk(apply_id: String!): DriverBlacklistApply
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driver_blacklist_apply(where: DriverBlacklistApplyBoolExp!): DriverBlacklistApplyMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driver_blacklist_apply_by_pk(id: Bigint!): DriverBlacklistApply
	"""
	插入
	"""
	insert_driver_blacklist_apply(objects: [DriverBlacklistApplyInsertInput!]!): DriverBlacklistApplyMutationResponse
	"""
	插入一条记录
	"""
	insert_driver_blacklist_apply_one(objects: DriverBlacklistApplyInsertInput!): DriverBlacklistApply
	"""
	更新
	"""
	update_driver_blacklist_apply(_inc: DriverBlacklistApplyIncInput, _set: DriverBlacklistApplySetInput, where: DriverBlacklistApplyBoolExp!): DriverBlacklistApplyMutationResponse
	"""
	根据主键更新
	"""
	update_driver_blacklist_apply_by_pk(_inc: DriverBlacklistApplyIncInput, _set: DriverBlacklistApplySetInput, id: Bigint!): DriverBlacklistApply
	"""
	根据联合主键更新
	"""
	update_driver_blacklist_apply_by_union_pk(_inc: DriverBlacklistApplyIncInput, _set: DriverBlacklistApplySetInput, apply_id: String!): DriverBlacklistApply
	"""
	根据联合主键删除记录
	"""
	delete_driver_blacklist_apply_by_union_pk(apply_id: String!): DriverBlacklistApply
}
`, BuiltIn: false},
	{Name: "graph/graphqls/driver_blacklist_his.graphqls", Input: `"""
驾驶员黑名单历史记录
"""
type DriverBlacklistHis {
	"""
	ID
	"""
	id: Bigint!
	"""
	黑名单记录ID
	"""
	his_id: String!
	"""
	驾驶员ID
	"""
	driver_id: String!
	"""
	黑名单类别
	"""
	blacklist_type: Int!
	"""
	操作类别
	"""
	operate: Int!
	"""
	备注
	"""
	remarks: String
	"""
	创建时间
	"""
	created_at: Timestamptz!
	"""
	创建人
	"""
	created_by: String
	"""
	修改时间
	"""
	updated_at: Timestamptz
	"""
	修改人
	"""
	updated_by: String
	"""
	删除时间
	"""
	deleted_at: Timestamptz
	"""
	删除人
	"""
	deleted_by: String
	"""
	是否删除
	"""
	is_deleted: Boolean!
	"""
	附件链接
	"""
	attach_file: String
	"""
	进度，执行到哪一步流程
	"""
	step: Int
	"""
	驾驶员黑名单申请ID
	"""
	apply_id: String
	"""
	驾驶证号码
	"""
	driver_card_num: String
}
"""
aggregated selection of "driver_blacklist_his"
"""
type DriverBlacklistHisAggregate {
	aggregate: DriverBlacklistHisAggregateFields
}
"""
aggregate fields of "driver_blacklist_his"
"""
type DriverBlacklistHisAggregateFields {
	avg: DriverBlacklistHisAvgFields
	count: Int
	max: DriverBlacklistHisMaxFields
	min: DriverBlacklistHisMinFields
	stddev: DriverBlacklistHisStddevFields
	stddev_pop: DriverBlacklistHisStddevPopFields
	stddev_samp: DriverBlacklistHisStddevSampFields
	sum: DriverBlacklistHisSumFields
	var_pop: DriverBlacklistHisVarPopFields
	var_samp: DriverBlacklistHisVarSampFields
	variance: DriverBlacklistHisVarianceFields
}
"""
aggregate avg on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisAvgFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
aggregate max on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisMaxFields {
	id: Bigint
	his_id: String
	driver_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
	attach_file: String
	step: Int
	apply_id: String
	driver_card_num: String
}
"""
aggregate min on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisMinFields {
	id: Bigint
	his_id: String
	driver_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
	attach_file: String
	step: Int
	apply_id: String
	driver_card_num: String
}
"""
aggregate stddev on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisStddevFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
aggregate stddev_pop on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisStddevPopFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
aggregate stddev_samp on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisStddevSampFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
aggregate sum on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisSumFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
aggregate var_pop on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisVarPopFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
aggregate var_samp on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisVarSampFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
aggregate variance on columns of table "driver_blacklist_his"
"""
type DriverBlacklistHisVarianceFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
response of any mutation on the table "driver_blacklist_his"
"""
type DriverBlacklistHisMutationResponse {
	affected_rows: Int!
	returning: [DriverBlacklistHis!]!
}
"""
ordering options when selecting data from "driver_blacklist_his"
"""
input DriverBlacklistHisOrderBy {
	id: OrderBy
	his_id: OrderBy
	driver_id: OrderBy
	blacklist_type: OrderBy
	operate: OrderBy
	remarks: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
	attach_file: OrderBy
	step: OrderBy
	apply_id: OrderBy
	driver_card_num: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_blacklist_his'.
"""
input DriverBlacklistHisBoolExp {
	_and: [DriverBlacklistHisBoolExp]
	_not: DriverBlacklistHisBoolExp
	_or: [DriverBlacklistHisBoolExp]
	id: BigintComparisonExp
	his_id: StringComparisonExp
	driver_id: StringComparisonExp
	blacklist_type: IntComparisonExp
	operate: IntComparisonExp
	remarks: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
	attach_file: StringComparisonExp
	step: IntComparisonExp
	apply_id: StringComparisonExp
	driver_card_num: StringComparisonExp
}
"""
input type for inserting data into table "driver_blacklist_his"
"""
input DriverBlacklistHisInsertInput {
	his_id: String!
	driver_id: String!
	blacklist_type: Int!
	operate: Int!
	remarks: String
	created_at: Timestamptz!
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean!
	attach_file: String
	step: Int
	apply_id: String
	driver_card_num: String
}
"""
input type for incrementing integer column in table "driver_blacklist_his"
"""
input DriverBlacklistHisIncInput {
	id: Bigint
	blacklist_type: Int
	operate: Int
	step: Int
}
"""
input type for updating data in table "driver_blacklist_his"
"""
input DriverBlacklistHisSetInput {
	id: Bigint
	his_id: String
	driver_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
	attach_file: String
	step: Int
	apply_id: String
	driver_card_num: String
}
"""
可选select
"""
enum DriverBlacklistHisSelectColumn {
	"""
	ID
	"""
	id
	"""
	黑名单记录ID
	"""
	his_id
	"""
	驾驶员ID
	"""
	driver_id
	"""
	黑名单类别
	"""
	blacklist_type
	"""
	操作类别
	"""
	operate
	"""
	备注
	"""
	remarks
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	created_by
	"""
	修改时间
	"""
	updated_at
	"""
	修改人
	"""
	updated_by
	"""
	删除时间
	"""
	deleted_at
	"""
	删除人
	"""
	deleted_by
	"""
	是否删除
	"""
	is_deleted
	"""
	附件链接
	"""
	attach_file
	"""
	进度，执行到哪一步流程
	"""
	step
	"""
	驾驶员黑名单申请ID
	"""
	apply_id
	"""
	驾驶证号码
	"""
	driver_card_num
}
extend type Query {
	"""
	列表查询
	"""
	driver_blacklist_his(distinct_on: [DriverBlacklistHisSelectColumn!], limit: Int, offset: Int, order_by: [DriverBlacklistHisOrderBy!], where: DriverBlacklistHisBoolExp): [DriverBlacklistHis!]!
	"""
	聚合查询
	"""
	driver_blacklist_his_aggregate(distinct_on: [DriverBlacklistHisSelectColumn!], limit: Int, offset: Int, order_by: [DriverBlacklistHisOrderBy!], where: DriverBlacklistHisBoolExp): DriverBlacklistHisAggregate!
	"""
	主键查询
	"""
	driver_blacklist_his_by_pk(id: Bigint!): DriverBlacklistHis
	"""
	联合主键查询
	"""
	driver_blacklist_his_by_union_pk(his_id: String!): DriverBlacklistHis
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_driver_blacklist_his(where: DriverBlacklistHisBoolExp!): DriverBlacklistHisMutationResponse
	"""
	根据主键删除记录
	"""
	delete_driver_blacklist_his_by_pk(id: Bigint!): DriverBlacklistHis
	"""
	插入
	"""
	insert_driver_blacklist_his(objects: [DriverBlacklistHisInsertInput!]!): DriverBlacklistHisMutationResponse
	"""
	插入一条记录
	"""
	insert_driver_blacklist_his_one(objects: DriverBlacklistHisInsertInput!): DriverBlacklistHis
	"""
	更新
	"""
	update_driver_blacklist_his(_inc: DriverBlacklistHisIncInput, _set: DriverBlacklistHisSetInput, where: DriverBlacklistHisBoolExp!): DriverBlacklistHisMutationResponse
	"""
	根据主键更新
	"""
	update_driver_blacklist_his_by_pk(_inc: DriverBlacklistHisIncInput, _set: DriverBlacklistHisSetInput, id: Bigint!): DriverBlacklistHis
	"""
	根据联合主键更新
	"""
	update_driver_blacklist_his_by_union_pk(_inc: DriverBlacklistHisIncInput, _set: DriverBlacklistHisSetInput, his_id: String!): DriverBlacklistHis
	"""
	根据联合主键删除记录
	"""
	delete_driver_blacklist_his_by_union_pk(his_id: String!): DriverBlacklistHis
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_blacklist_alarm.graphqls", Input: `"""
企业黑名单预警表
"""
type EnterpriseBlacklistAlarm {
	"""
	ID
	"""
	id: Bigint!
	"""
	企业黑名单预警表ID
	"""
	alarm_id: String!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	类型
	"""
	type: Int!
	"""
	年份
	"""
	year: Int!
	"""
	企业的车辆是否10%以上的车进入黑名单
	"""
	is_black: Boolean!
	"""
	企业是否连续两个季度违规记分排名前十
	"""
	is_rank: Boolean!
	"""
	创建时间
	"""
	created_at: Timestamptz!
	"""
	创建人
	"""
	created_by: String
	"""
	更新时间
	"""
	updated_at: Timestamptz
	"""
	更新人
	"""
	updated_by: String
	"""
	删除时间
	"""
	deleted_at: Timestamptz
	"""
	删除人
	"""
	deleted_by: String
	"""
	是否删除
	"""
	is_deleted: Boolean
}
"""
aggregated selection of "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmAggregate {
	aggregate: EnterpriseBlacklistAlarmAggregateFields
}
"""
aggregate fields of "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmAggregateFields {
	avg: EnterpriseBlacklistAlarmAvgFields
	count: Int
	max: EnterpriseBlacklistAlarmMaxFields
	min: EnterpriseBlacklistAlarmMinFields
	stddev: EnterpriseBlacklistAlarmStddevFields
	stddev_pop: EnterpriseBlacklistAlarmStddevPopFields
	stddev_samp: EnterpriseBlacklistAlarmStddevSampFields
	sum: EnterpriseBlacklistAlarmSumFields
	var_pop: EnterpriseBlacklistAlarmVarPopFields
	var_samp: EnterpriseBlacklistAlarmVarSampFields
	variance: EnterpriseBlacklistAlarmVarianceFields
}
"""
aggregate avg on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmAvgFields {
	id: Bigint
	type: Int
	year: Int
}
"""
aggregate max on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmMaxFields {
	id: Bigint
	alarm_id: String
	enterprise_id: String
	type: Int
	year: Int
	is_black: Boolean
	is_rank: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmMinFields {
	id: Bigint
	alarm_id: String
	enterprise_id: String
	type: Int
	year: Int
	is_black: Boolean
	is_rank: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmStddevFields {
	id: Bigint
	type: Int
	year: Int
}
"""
aggregate stddev_pop on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmStddevPopFields {
	id: Bigint
	type: Int
	year: Int
}
"""
aggregate stddev_samp on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmStddevSampFields {
	id: Bigint
	type: Int
	year: Int
}
"""
aggregate sum on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmSumFields {
	id: Bigint
	type: Int
	year: Int
}
"""
aggregate var_pop on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmVarPopFields {
	id: Bigint
	type: Int
	year: Int
}
"""
aggregate var_samp on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmVarSampFields {
	id: Bigint
	type: Int
	year: Int
}
"""
aggregate variance on columns of table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmVarianceFields {
	id: Bigint
	type: Int
	year: Int
}
"""
response of any mutation on the table "enterprise_blacklist_alarm"
"""
type EnterpriseBlacklistAlarmMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseBlacklistAlarm!]!
}
"""
ordering options when selecting data from "enterprise_blacklist_alarm"
"""
input EnterpriseBlacklistAlarmOrderBy {
	id: OrderBy
	alarm_id: OrderBy
	enterprise_id: OrderBy
	type: OrderBy
	year: OrderBy
	is_black: OrderBy
	is_rank: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_blacklist_alarm'.
"""
input EnterpriseBlacklistAlarmBoolExp {
	_and: [EnterpriseBlacklistAlarmBoolExp]
	_not: EnterpriseBlacklistAlarmBoolExp
	_or: [EnterpriseBlacklistAlarmBoolExp]
	id: BigintComparisonExp
	alarm_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	type: IntComparisonExp
	year: IntComparisonExp
	is_black: BooleanComparisonExp
	is_rank: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "enterprise_blacklist_alarm"
"""
input EnterpriseBlacklistAlarmInsertInput {
	alarm_id: String!
	enterprise_id: String!
	type: Int!
	year: Int!
	is_black: Boolean!
	is_rank: Boolean!
	created_at: Timestamptz!
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
input type for incrementing integer column in table "enterprise_blacklist_alarm"
"""
input EnterpriseBlacklistAlarmIncInput {
	id: Bigint
	type: Int
	year: Int
}
"""
input type for updating data in table "enterprise_blacklist_alarm"
"""
input EnterpriseBlacklistAlarmSetInput {
	id: Bigint
	alarm_id: String
	enterprise_id: String
	type: Int
	year: Int
	is_black: Boolean
	is_rank: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum EnterpriseBlacklistAlarmSelectColumn {
	"""
	ID
	"""
	id
	"""
	企业黑名单预警表ID
	"""
	alarm_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	类型
	"""
	type
	"""
	年份
	"""
	year
	"""
	企业的车辆是否10%以上的车进入黑名单
	"""
	is_black
	"""
	企业是否连续两个季度违规记分排名前十
	"""
	is_rank
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	created_by
	"""
	更新时间
	"""
	updated_at
	"""
	更新人
	"""
	updated_by
	"""
	删除时间
	"""
	deleted_at
	"""
	删除人
	"""
	deleted_by
	"""
	是否删除
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_blacklist_alarm(distinct_on: [EnterpriseBlacklistAlarmSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseBlacklistAlarmOrderBy!], where: EnterpriseBlacklistAlarmBoolExp): [EnterpriseBlacklistAlarm!]!
	"""
	聚合查询
	"""
	enterprise_blacklist_alarm_aggregate(distinct_on: [EnterpriseBlacklistAlarmSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseBlacklistAlarmOrderBy!], where: EnterpriseBlacklistAlarmBoolExp): EnterpriseBlacklistAlarmAggregate!
	"""
	主键查询
	"""
	enterprise_blacklist_alarm_by_pk(id: Bigint!): EnterpriseBlacklistAlarm
	"""
	联合主键查询
	"""
	enterprise_blacklist_alarm_by_union_pk(alarm_id: String!): EnterpriseBlacklistAlarm
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_blacklist_alarm(where: EnterpriseBlacklistAlarmBoolExp!): EnterpriseBlacklistAlarmMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_blacklist_alarm_by_pk(id: Bigint!): EnterpriseBlacklistAlarm
	"""
	插入
	"""
	insert_enterprise_blacklist_alarm(objects: [EnterpriseBlacklistAlarmInsertInput!]!): EnterpriseBlacklistAlarmMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_blacklist_alarm_one(objects: EnterpriseBlacklistAlarmInsertInput!): EnterpriseBlacklistAlarm
	"""
	更新
	"""
	update_enterprise_blacklist_alarm(_inc: EnterpriseBlacklistAlarmIncInput, _set: EnterpriseBlacklistAlarmSetInput, where: EnterpriseBlacklistAlarmBoolExp!): EnterpriseBlacklistAlarmMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_blacklist_alarm_by_pk(_inc: EnterpriseBlacklistAlarmIncInput, _set: EnterpriseBlacklistAlarmSetInput, id: Bigint!): EnterpriseBlacklistAlarm
	"""
	根据联合主键更新
	"""
	update_enterprise_blacklist_alarm_by_union_pk(_inc: EnterpriseBlacklistAlarmIncInput, _set: EnterpriseBlacklistAlarmSetInput, alarm_id: String!): EnterpriseBlacklistAlarm
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_blacklist_alarm_by_union_pk(alarm_id: String!): EnterpriseBlacklistAlarm
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise_blacklist_his.graphqls", Input: `"""
企业黑名单操作纪录
"""
type EnterpriseBlacklistHis {
	"""
	ID
	"""
	id: Bigint!
	"""
	黑名单记录ID
	"""
	his_id: String!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	黑名单类别
	"""
	blacklist_type: Int!
	"""
	操作类别
	"""
	operate: Int!
	"""
	备注
	"""
	remarks: String
	"""
	创建时间
	"""
	created_at: Timestamptz!
	"""
	创建人
	"""
	created_by: String
	"""
	修改时间
	"""
	updated_at: Timestamptz
	"""
	修改人
	"""
	updated_by: String
	"""
	删除时间
	"""
	deleted_at: Timestamptz
	"""
	删除人
	"""
	deleted_by: String
	"""
	是否删除
	"""
	is_deleted: Boolean!
}
"""
aggregated selection of "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisAggregate {
	aggregate: EnterpriseBlacklistHisAggregateFields
}
"""
aggregate fields of "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisAggregateFields {
	avg: EnterpriseBlacklistHisAvgFields
	count: Int
	max: EnterpriseBlacklistHisMaxFields
	min: EnterpriseBlacklistHisMinFields
	stddev: EnterpriseBlacklistHisStddevFields
	stddev_pop: EnterpriseBlacklistHisStddevPopFields
	stddev_samp: EnterpriseBlacklistHisStddevSampFields
	sum: EnterpriseBlacklistHisSumFields
	var_pop: EnterpriseBlacklistHisVarPopFields
	var_samp: EnterpriseBlacklistHisVarSampFields
	variance: EnterpriseBlacklistHisVarianceFields
}
"""
aggregate avg on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisAvgFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate max on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisMaxFields {
	id: Bigint
	his_id: String
	enterprise_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisMinFields {
	id: Bigint
	his_id: String
	enterprise_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisStddevFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate stddev_pop on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisStddevPopFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate stddev_samp on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisStddevSampFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate sum on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisSumFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate var_pop on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisVarPopFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate var_samp on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisVarSampFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate variance on columns of table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisVarianceFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
response of any mutation on the table "enterprise_blacklist_his"
"""
type EnterpriseBlacklistHisMutationResponse {
	affected_rows: Int!
	returning: [EnterpriseBlacklistHis!]!
}
"""
ordering options when selecting data from "enterprise_blacklist_his"
"""
input EnterpriseBlacklistHisOrderBy {
	id: OrderBy
	his_id: OrderBy
	enterprise_id: OrderBy
	blacklist_type: OrderBy
	operate: OrderBy
	remarks: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_blacklist_his'.
"""
input EnterpriseBlacklistHisBoolExp {
	_and: [EnterpriseBlacklistHisBoolExp]
	_not: EnterpriseBlacklistHisBoolExp
	_or: [EnterpriseBlacklistHisBoolExp]
	id: BigintComparisonExp
	his_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	blacklist_type: IntComparisonExp
	operate: IntComparisonExp
	remarks: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "enterprise_blacklist_his"
"""
input EnterpriseBlacklistHisInsertInput {
	his_id: String!
	enterprise_id: String!
	blacklist_type: Int!
	operate: Int!
	remarks: String
	created_at: Timestamptz!
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean!
}
"""
input type for incrementing integer column in table "enterprise_blacklist_his"
"""
input EnterpriseBlacklistHisIncInput {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
input type for updating data in table "enterprise_blacklist_his"
"""
input EnterpriseBlacklistHisSetInput {
	id: Bigint
	his_id: String
	enterprise_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum EnterpriseBlacklistHisSelectColumn {
	"""
	ID
	"""
	id
	"""
	黑名单记录ID
	"""
	his_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	黑名单类别
	"""
	blacklist_type
	"""
	操作类别
	"""
	operate
	"""
	备注
	"""
	remarks
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	created_by
	"""
	修改时间
	"""
	updated_at
	"""
	修改人
	"""
	updated_by
	"""
	删除时间
	"""
	deleted_at
	"""
	删除人
	"""
	deleted_by
	"""
	是否删除
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	enterprise_blacklist_his(distinct_on: [EnterpriseBlacklistHisSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseBlacklistHisOrderBy!], where: EnterpriseBlacklistHisBoolExp): [EnterpriseBlacklistHis!]!
	"""
	聚合查询
	"""
	enterprise_blacklist_his_aggregate(distinct_on: [EnterpriseBlacklistHisSelectColumn!], limit: Int, offset: Int, order_by: [EnterpriseBlacklistHisOrderBy!], where: EnterpriseBlacklistHisBoolExp): EnterpriseBlacklistHisAggregate!
	"""
	主键查询
	"""
	enterprise_blacklist_his_by_pk(id: Bigint!): EnterpriseBlacklistHis
	"""
	联合主键查询
	"""
	enterprise_blacklist_his_by_union_pk(his_id: String!): EnterpriseBlacklistHis
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_enterprise_blacklist_his(where: EnterpriseBlacklistHisBoolExp!): EnterpriseBlacklistHisMutationResponse
	"""
	根据主键删除记录
	"""
	delete_enterprise_blacklist_his_by_pk(id: Bigint!): EnterpriseBlacklistHis
	"""
	插入
	"""
	insert_enterprise_blacklist_his(objects: [EnterpriseBlacklistHisInsertInput!]!): EnterpriseBlacklistHisMutationResponse
	"""
	插入一条记录
	"""
	insert_enterprise_blacklist_his_one(objects: EnterpriseBlacklistHisInsertInput!): EnterpriseBlacklistHis
	"""
	更新
	"""
	update_enterprise_blacklist_his(_inc: EnterpriseBlacklistHisIncInput, _set: EnterpriseBlacklistHisSetInput, where: EnterpriseBlacklistHisBoolExp!): EnterpriseBlacklistHisMutationResponse
	"""
	根据主键更新
	"""
	update_enterprise_blacklist_his_by_pk(_inc: EnterpriseBlacklistHisIncInput, _set: EnterpriseBlacklistHisSetInput, id: Bigint!): EnterpriseBlacklistHis
	"""
	根据联合主键更新
	"""
	update_enterprise_blacklist_his_by_union_pk(_inc: EnterpriseBlacklistHisIncInput, _set: EnterpriseBlacklistHisSetInput, his_id: String!): EnterpriseBlacklistHis
	"""
	根据联合主键删除记录
	"""
	delete_enterprise_blacklist_his_by_union_pk(his_id: String!): EnterpriseBlacklistHis
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_blacklist_alarm.graphqls", Input: `"""
车辆黑名单预警
"""
type VehicleBlacklistAlarm {
	"""
	ID
	"""
	id: Bigint!
	"""
	车辆黑名单警告ID
	"""
	alarm_id: String!
	"""
	车辆ID
	"""
	vehicle_id: String!
	"""
	车牌号
	"""
	license_plate_number: String
	"""
	年份
	"""
	year: Int
	"""
	扣分数量
	"""
	score_num: Int
	"""
	扣分次数
	"""
	score_count: Int
	"""
	创建时间
	"""
	created_at: Timestamptz!
	"""
	创建人
	"""
	created_by: String
	"""
	更新时间
	"""
	updated_at: Timestamptz
	"""
	更新人
	"""
	updated_by: String
	"""
	删除时间
	"""
	deleted_at: Timestamptz
	"""
	删除人
	"""
	deleted_by: String
	"""
	是否删除
	"""
	is_deleted: Boolean!
}
"""
aggregated selection of "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmAggregate {
	aggregate: VehicleBlacklistAlarmAggregateFields
}
"""
aggregate fields of "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmAggregateFields {
	avg: VehicleBlacklistAlarmAvgFields
	count: Int
	max: VehicleBlacklistAlarmMaxFields
	min: VehicleBlacklistAlarmMinFields
	stddev: VehicleBlacklistAlarmStddevFields
	stddev_pop: VehicleBlacklistAlarmStddevPopFields
	stddev_samp: VehicleBlacklistAlarmStddevSampFields
	sum: VehicleBlacklistAlarmSumFields
	var_pop: VehicleBlacklistAlarmVarPopFields
	var_samp: VehicleBlacklistAlarmVarSampFields
	variance: VehicleBlacklistAlarmVarianceFields
}
"""
aggregate avg on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmAvgFields {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
aggregate max on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmMaxFields {
	id: Bigint
	alarm_id: String
	vehicle_id: String
	license_plate_number: String
	year: Int
	score_num: Int
	score_count: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmMinFields {
	id: Bigint
	alarm_id: String
	vehicle_id: String
	license_plate_number: String
	year: Int
	score_num: Int
	score_count: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmStddevFields {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
aggregate stddev_pop on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmStddevPopFields {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
aggregate stddev_samp on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmStddevSampFields {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
aggregate sum on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmSumFields {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
aggregate var_pop on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmVarPopFields {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
aggregate var_samp on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmVarSampFields {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
aggregate variance on columns of table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmVarianceFields {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
response of any mutation on the table "vehicle_blacklist_alarm"
"""
type VehicleBlacklistAlarmMutationResponse {
	affected_rows: Int!
	returning: [VehicleBlacklistAlarm!]!
}
"""
ordering options when selecting data from "vehicle_blacklist_alarm"
"""
input VehicleBlacklistAlarmOrderBy {
	id: OrderBy
	alarm_id: OrderBy
	vehicle_id: OrderBy
	license_plate_number: OrderBy
	year: OrderBy
	score_num: OrderBy
	score_count: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_blacklist_alarm'.
"""
input VehicleBlacklistAlarmBoolExp {
	_and: [VehicleBlacklistAlarmBoolExp]
	_not: VehicleBlacklistAlarmBoolExp
	_or: [VehicleBlacklistAlarmBoolExp]
	id: BigintComparisonExp
	alarm_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	license_plate_number: StringComparisonExp
	year: IntComparisonExp
	score_num: IntComparisonExp
	score_count: IntComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "vehicle_blacklist_alarm"
"""
input VehicleBlacklistAlarmInsertInput {
	alarm_id: String!
	vehicle_id: String!
	license_plate_number: String
	year: Int
	score_num: Int
	score_count: Int
	created_at: Timestamptz!
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean!
}
"""
input type for incrementing integer column in table "vehicle_blacklist_alarm"
"""
input VehicleBlacklistAlarmIncInput {
	id: Bigint
	year: Int
	score_num: Int
	score_count: Int
}
"""
input type for updating data in table "vehicle_blacklist_alarm"
"""
input VehicleBlacklistAlarmSetInput {
	id: Bigint
	alarm_id: String
	vehicle_id: String
	license_plate_number: String
	year: Int
	score_num: Int
	score_count: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum VehicleBlacklistAlarmSelectColumn {
	"""
	ID
	"""
	id
	"""
	车辆黑名单警告ID
	"""
	alarm_id
	"""
	车辆ID
	"""
	vehicle_id
	"""
	车牌号
	"""
	license_plate_number
	"""
	年份
	"""
	year
	"""
	扣分数量
	"""
	score_num
	"""
	扣分次数
	"""
	score_count
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	created_by
	"""
	更新时间
	"""
	updated_at
	"""
	更新人
	"""
	updated_by
	"""
	删除时间
	"""
	deleted_at
	"""
	删除人
	"""
	deleted_by
	"""
	是否删除
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_blacklist_alarm(distinct_on: [VehicleBlacklistAlarmSelectColumn!], limit: Int, offset: Int, order_by: [VehicleBlacklistAlarmOrderBy!], where: VehicleBlacklistAlarmBoolExp): [VehicleBlacklistAlarm!]!
	"""
	聚合查询
	"""
	vehicle_blacklist_alarm_aggregate(distinct_on: [VehicleBlacklistAlarmSelectColumn!], limit: Int, offset: Int, order_by: [VehicleBlacklistAlarmOrderBy!], where: VehicleBlacklistAlarmBoolExp): VehicleBlacklistAlarmAggregate!
	"""
	主键查询
	"""
	vehicle_blacklist_alarm_by_pk(id: Bigint!): VehicleBlacklistAlarm
	"""
	联合主键查询
	"""
	vehicle_blacklist_alarm_by_union_pk(alarm_id: String!): VehicleBlacklistAlarm
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_blacklist_alarm(where: VehicleBlacklistAlarmBoolExp!): VehicleBlacklistAlarmMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_blacklist_alarm_by_pk(id: Bigint!): VehicleBlacklistAlarm
	"""
	插入
	"""
	insert_vehicle_blacklist_alarm(objects: [VehicleBlacklistAlarmInsertInput!]!): VehicleBlacklistAlarmMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_blacklist_alarm_one(objects: VehicleBlacklistAlarmInsertInput!): VehicleBlacklistAlarm
	"""
	更新
	"""
	update_vehicle_blacklist_alarm(_inc: VehicleBlacklistAlarmIncInput, _set: VehicleBlacklistAlarmSetInput, where: VehicleBlacklistAlarmBoolExp!): VehicleBlacklistAlarmMutationResponse
	"""
	根据主键更新
	"""
	update_vehicle_blacklist_alarm_by_pk(_inc: VehicleBlacklistAlarmIncInput, _set: VehicleBlacklistAlarmSetInput, id: Bigint!): VehicleBlacklistAlarm
	"""
	根据联合主键更新
	"""
	update_vehicle_blacklist_alarm_by_union_pk(_inc: VehicleBlacklistAlarmIncInput, _set: VehicleBlacklistAlarmSetInput, alarm_id: String!): VehicleBlacklistAlarm
	"""
	根据联合主键删除记录
	"""
	delete_vehicle_blacklist_alarm_by_union_pk(alarm_id: String!): VehicleBlacklistAlarm
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_blacklist_his.graphqls", Input: `"""
车辆黑名单操作纪录
"""
type VehicleBlacklistHis {
	"""
	ID
	"""
	id: Bigint!
	"""
	黑名单记录ID
	"""
	his_id: String!
	"""
	车辆ID
	"""
	vehicle_id: String!
	"""
	黑名单类别
	"""
	blacklist_type: Int!
	"""
	操作类别
	"""
	operate: Int!
	"""
	备注
	"""
	remarks: String
	"""
	创建时间
	"""
	created_at: Timestamptz!
	"""
	创建人
	"""
	created_by: String
	"""
	修改时间
	"""
	updated_at: Timestamptz
	"""
	修改人
	"""
	updated_by: String
	"""
	删除时间
	"""
	deleted_at: Timestamptz
	"""
	删除人
	"""
	deleted_by: String
	"""
	是否删除
	"""
	is_deleted: Boolean!
}
"""
aggregated selection of "vehicle_blacklist_his"
"""
type VehicleBlacklistHisAggregate {
	aggregate: VehicleBlacklistHisAggregateFields
}
"""
aggregate fields of "vehicle_blacklist_his"
"""
type VehicleBlacklistHisAggregateFields {
	avg: VehicleBlacklistHisAvgFields
	count: Int
	max: VehicleBlacklistHisMaxFields
	min: VehicleBlacklistHisMinFields
	stddev: VehicleBlacklistHisStddevFields
	stddev_pop: VehicleBlacklistHisStddevPopFields
	stddev_samp: VehicleBlacklistHisStddevSampFields
	sum: VehicleBlacklistHisSumFields
	var_pop: VehicleBlacklistHisVarPopFields
	var_samp: VehicleBlacklistHisVarSampFields
	variance: VehicleBlacklistHisVarianceFields
}
"""
aggregate avg on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisAvgFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate max on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisMaxFields {
	id: Bigint
	his_id: String
	vehicle_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisMinFields {
	id: Bigint
	his_id: String
	vehicle_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisStddevFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate stddev_pop on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisStddevPopFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate stddev_samp on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisStddevSampFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate sum on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisSumFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate var_pop on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisVarPopFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate var_samp on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisVarSampFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
aggregate variance on columns of table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisVarianceFields {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
response of any mutation on the table "vehicle_blacklist_his"
"""
type VehicleBlacklistHisMutationResponse {
	affected_rows: Int!
	returning: [VehicleBlacklistHis!]!
}
"""
ordering options when selecting data from "vehicle_blacklist_his"
"""
input VehicleBlacklistHisOrderBy {
	id: OrderBy
	his_id: OrderBy
	vehicle_id: OrderBy
	blacklist_type: OrderBy
	operate: OrderBy
	remarks: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_blacklist_his'.
"""
input VehicleBlacklistHisBoolExp {
	_and: [VehicleBlacklistHisBoolExp]
	_not: VehicleBlacklistHisBoolExp
	_or: [VehicleBlacklistHisBoolExp]
	id: BigintComparisonExp
	his_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	blacklist_type: IntComparisonExp
	operate: IntComparisonExp
	remarks: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "vehicle_blacklist_his"
"""
input VehicleBlacklistHisInsertInput {
	his_id: String!
	vehicle_id: String!
	blacklist_type: Int!
	operate: Int!
	remarks: String
	created_at: Timestamptz!
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean!
}
"""
input type for incrementing integer column in table "vehicle_blacklist_his"
"""
input VehicleBlacklistHisIncInput {
	id: Bigint
	blacklist_type: Int
	operate: Int
}
"""
input type for updating data in table "vehicle_blacklist_his"
"""
input VehicleBlacklistHisSetInput {
	id: Bigint
	his_id: String
	vehicle_id: String
	blacklist_type: Int
	operate: Int
	remarks: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum VehicleBlacklistHisSelectColumn {
	"""
	ID
	"""
	id
	"""
	黑名单记录ID
	"""
	his_id
	"""
	车辆ID
	"""
	vehicle_id
	"""
	黑名单类别
	"""
	blacklist_type
	"""
	操作类别
	"""
	operate
	"""
	备注
	"""
	remarks
	"""
	创建时间
	"""
	created_at
	"""
	创建人
	"""
	created_by
	"""
	修改时间
	"""
	updated_at
	"""
	修改人
	"""
	updated_by
	"""
	删除时间
	"""
	deleted_at
	"""
	删除人
	"""
	deleted_by
	"""
	是否删除
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_blacklist_his(distinct_on: [VehicleBlacklistHisSelectColumn!], limit: Int, offset: Int, order_by: [VehicleBlacklistHisOrderBy!], where: VehicleBlacklistHisBoolExp): [VehicleBlacklistHis!]!
	"""
	聚合查询
	"""
	vehicle_blacklist_his_aggregate(distinct_on: [VehicleBlacklistHisSelectColumn!], limit: Int, offset: Int, order_by: [VehicleBlacklistHisOrderBy!], where: VehicleBlacklistHisBoolExp): VehicleBlacklistHisAggregate!
	"""
	主键查询
	"""
	vehicle_blacklist_his_by_pk(id: Bigint!): VehicleBlacklistHis
	"""
	联合主键查询
	"""
	vehicle_blacklist_his_by_union_pk(his_id: String!): VehicleBlacklistHis
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_blacklist_his(where: VehicleBlacklistHisBoolExp!): VehicleBlacklistHisMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_blacklist_his_by_pk(id: Bigint!): VehicleBlacklistHis
	"""
	插入
	"""
	insert_vehicle_blacklist_his(objects: [VehicleBlacklistHisInsertInput!]!): VehicleBlacklistHisMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_blacklist_his_one(objects: VehicleBlacklistHisInsertInput!): VehicleBlacklistHis
	"""
	更新
	"""
	update_vehicle_blacklist_his(_inc: VehicleBlacklistHisIncInput, _set: VehicleBlacklistHisSetInput, where: VehicleBlacklistHisBoolExp!): VehicleBlacklistHisMutationResponse
	"""
	根据主键更新
	"""
	update_vehicle_blacklist_his_by_pk(_inc: VehicleBlacklistHisIncInput, _set: VehicleBlacklistHisSetInput, id: Bigint!): VehicleBlacklistHis
	"""
	根据联合主键更新
	"""
	update_vehicle_blacklist_his_by_union_pk(_inc: VehicleBlacklistHisIncInput, _set: VehicleBlacklistHisSetInput, his_id: String!): VehicleBlacklistHis
	"""
	根据联合主键删除记录
	"""
	delete_vehicle_blacklist_his_by_union_pk(his_id: String!): VehicleBlacklistHis
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_driver_blacklist_apply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverBlacklistApplyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDriverBlacklistApplyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_blacklist_apply_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_blacklist_apply_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["apply_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apply_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDriverBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driver_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_blacklist_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseBlacklistAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseBlacklistAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_blacklist_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_blacklist_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["alarm_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_blacklist_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleBlacklistAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleBlacklistAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_blacklist_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_blacklist_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["alarm_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_blacklist_apply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverBlacklistApplyInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverBlacklistApplyInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_blacklist_apply_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverBlacklistApplyInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverBlacklistApplyInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DriverBlacklistHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverBlacklistHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driver_blacklist_his_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DriverBlacklistHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDriverBlacklistHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_blacklist_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseBlacklistAlarmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseBlacklistAlarmInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_blacklist_alarm_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseBlacklistAlarmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseBlacklistAlarmInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseBlacklistHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseBlacklistHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_blacklist_his_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseBlacklistHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseBlacklistHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_blacklist_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleBlacklistAlarmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleBlacklistAlarmInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_blacklist_alarm_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleBlacklistAlarmInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleBlacklistAlarmInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleBlacklistHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleBlacklistHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_blacklist_his_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleBlacklistHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleBlacklistHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_blacklist_apply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverBlacklistApplyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverBlacklistApplyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverBlacklistApplySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverBlacklistApplySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverBlacklistApplyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDriverBlacklistApplyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_blacklist_apply_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverBlacklistApplyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverBlacklistApplyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverBlacklistApplySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverBlacklistApplySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_blacklist_apply_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverBlacklistApplyIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverBlacklistApplyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverBlacklistApplySetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverBlacklistApplySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["apply_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apply_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DriverBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDriverBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driver_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DriverBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODriverBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DriverBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODriverBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_blacklist_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseBlacklistAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseBlacklistAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseBlacklistAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseBlacklistAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseBlacklistAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_blacklist_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseBlacklistAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseBlacklistAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseBlacklistAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_blacklist_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseBlacklistAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseBlacklistAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseBlacklistAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["alarm_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_blacklist_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleBlacklistAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleBlacklistAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleBlacklistAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleBlacklistAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleBlacklistAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleBlacklistAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_blacklist_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleBlacklistAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleBlacklistAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleBlacklistAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleBlacklistAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_blacklist_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleBlacklistAlarmIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleBlacklistAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleBlacklistAlarmSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleBlacklistAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["alarm_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleBlacklistHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleBlacklistHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_blacklist_apply_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverBlacklistApplySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverBlacklistApplySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverBlacklistApplyOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverBlacklistApplyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverBlacklistApplyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverBlacklistApplyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_blacklist_apply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverBlacklistApplySelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverBlacklistApplySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverBlacklistApplyOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverBlacklistApplyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverBlacklistApplyBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverBlacklistApplyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_blacklist_apply_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_blacklist_apply_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["apply_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apply_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_blacklist_his_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverBlacklistHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverBlacklistHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DriverBlacklistHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODriverBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DriverBlacklistHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODriverBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DriverBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODriverBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_driver_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_blacklist_alarm_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseBlacklistAlarmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseBlacklistAlarmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseBlacklistAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBlacklistAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_blacklist_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseBlacklistAlarmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseBlacklistAlarmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseBlacklistAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBlacklistAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_blacklist_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_blacklist_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["alarm_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_blacklist_his_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseBlacklistHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseBlacklistHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseBlacklistHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseBlacklistHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_blacklist_alarm_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleBlacklistAlarmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleBlacklistAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleBlacklistAlarmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleBlacklistAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleBlacklistAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_blacklist_alarm_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleBlacklistAlarmSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleBlacklistAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleBlacklistAlarmOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleBlacklistAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleBlacklistAlarmBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_blacklist_alarm_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_blacklist_alarm_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["alarm_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["alarm_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_blacklist_his_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleBlacklistHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleBlacklistHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_blacklist_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleBlacklistHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleBlacklistHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleBlacklistHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_blacklist_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_blacklist_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _DriverBlacklistApply_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_apply_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_state(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApply_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistApply) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApply",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyAggregateFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyAvgFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyMaxFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyMinFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyStddevFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyStddevPopFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyStddevSampFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplySumFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyVarPopFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyVarSampFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyVarianceFields)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAvgFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyAvgFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_apply_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_apply_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalNDriverBlacklistApply2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApplyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevPopFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyStddevSampFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplySumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplySumFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplySumFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplySumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplySumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarPopFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarSampFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarianceFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistApplyVarianceFields_state(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistApplyVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistApplyVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_his_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_operate(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_attach_file(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttachFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_step(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_apply_id(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHis_driver_card_num(ctx context.Context, field graphql.CollectedField, obj *model1.DriverBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisAggregateFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisAvgFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisMaxFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisMinFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisStddevFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisStddevPopFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisStddevSampFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisSumFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisVarPopFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisVarSampFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisVarianceFields)
	fc.Result = res
	return ec.marshalODriverBlacklistHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAvgFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAvgFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisAvgFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_his_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_attach_file(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttachFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_apply_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMaxFields_driver_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_his_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_attach_file(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttachFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_apply_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMinFields_driver_card_num(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverCardNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalNDriverBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevPopFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevPopFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevSampFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisStddevSampFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisSumFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisSumFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisSumFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarPopFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarPopFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarSampFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarSampFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarianceFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarianceFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DriverBlacklistHisVarianceFields_step(ctx context.Context, field graphql.CollectedField, obj *model.DriverBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DriverBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_year(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_is_black(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_is_rank(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarm_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAvgFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmAvgFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_is_black(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_is_rank(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_is_black(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_is_rank(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalNEnterpriseBlacklistAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevPopFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevPopFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevSampFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevSampFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmSumFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmSumFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarPopFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarPopFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarSampFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarSampFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarianceFields_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarianceFields_year(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_his_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_operate(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHis_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.EnterpriseBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAvgFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisAvgFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_his_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_his_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalNEnterpriseBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevPopFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisStddevSampFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisSumFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisSumFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarPopFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarSampFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarianceFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseBlacklistHisVarianceFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_blacklist_apply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_blacklist_apply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverBlacklistApply(rctx, args["where"].(model.DriverBlacklistApplyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyMutationResponse)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_blacklist_apply_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_blacklist_apply_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverBlacklistApplyByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalODriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_blacklist_apply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_blacklist_apply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverBlacklistApply(rctx, args["objects"].([]*model.DriverBlacklistApplyInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyMutationResponse)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_blacklist_apply_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_blacklist_apply_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverBlacklistApplyOne(rctx, args["objects"].(model.DriverBlacklistApplyInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalODriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_blacklist_apply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_blacklist_apply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverBlacklistApply(rctx, args["_inc"].(*model.DriverBlacklistApplyIncInput), args["_set"].(*model.DriverBlacklistApplySetInput), args["where"].(model.DriverBlacklistApplyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyMutationResponse)
	fc.Result = res
	return ec.marshalODriverBlacklistApplyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_blacklist_apply_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_blacklist_apply_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverBlacklistApplyByPk(rctx, args["_inc"].(*model.DriverBlacklistApplyIncInput), args["_set"].(*model.DriverBlacklistApplySetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalODriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_blacklist_apply_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_blacklist_apply_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverBlacklistApplyByUnionPk(rctx, args["_inc"].(*model.DriverBlacklistApplyIncInput), args["_set"].(*model.DriverBlacklistApplySetInput), args["apply_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalODriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_blacklist_apply_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_blacklist_apply_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverBlacklistApplyByUnionPk(rctx, args["apply_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalODriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverBlacklistHis(rctx, args["where"].(model.DriverBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalODriverBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverBlacklistHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalODriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverBlacklistHis(rctx, args["objects"].([]*model.DriverBlacklistHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalODriverBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driver_blacklist_his_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driver_blacklist_his_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDriverBlacklistHisOne(rctx, args["objects"].(model.DriverBlacklistHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalODriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverBlacklistHis(rctx, args["_inc"].(*model.DriverBlacklistHisIncInput), args["_set"].(*model.DriverBlacklistHisSetInput), args["where"].(model.DriverBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalODriverBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverBlacklistHisByPk(rctx, args["_inc"].(*model.DriverBlacklistHisIncInput), args["_set"].(*model.DriverBlacklistHisSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalODriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driver_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driver_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDriverBlacklistHisByUnionPk(rctx, args["_inc"].(*model.DriverBlacklistHisIncInput), args["_set"].(*model.DriverBlacklistHisSetInput), args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalODriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driver_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driver_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDriverBlacklistHisByUnionPk(rctx, args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalODriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_blacklist_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_blacklist_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseBlacklistAlarm(rctx, args["where"].(model.EnterpriseBlacklistAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_blacklist_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_blacklist_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseBlacklistAlarmByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_blacklist_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_blacklist_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseBlacklistAlarm(rctx, args["objects"].([]*model.EnterpriseBlacklistAlarmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_blacklist_alarm_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_blacklist_alarm_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseBlacklistAlarmOne(rctx, args["objects"].(model.EnterpriseBlacklistAlarmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_blacklist_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_blacklist_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseBlacklistAlarm(rctx, args["_inc"].(*model.EnterpriseBlacklistAlarmIncInput), args["_set"].(*model.EnterpriseBlacklistAlarmSetInput), args["where"].(model.EnterpriseBlacklistAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_blacklist_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_blacklist_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseBlacklistAlarmByPk(rctx, args["_inc"].(*model.EnterpriseBlacklistAlarmIncInput), args["_set"].(*model.EnterpriseBlacklistAlarmSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_blacklist_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_blacklist_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseBlacklistAlarmByUnionPk(rctx, args["_inc"].(*model.EnterpriseBlacklistAlarmIncInput), args["_set"].(*model.EnterpriseBlacklistAlarmSetInput), args["alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_blacklist_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_blacklist_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseBlacklistAlarmByUnionPk(rctx, args["alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseBlacklistHis(rctx, args["where"].(model.EnterpriseBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseBlacklistHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseBlacklistHis(rctx, args["objects"].([]*model.EnterpriseBlacklistHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_blacklist_his_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_blacklist_his_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseBlacklistHisOne(rctx, args["objects"].(model.EnterpriseBlacklistHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseBlacklistHis(rctx, args["_inc"].(*model.EnterpriseBlacklistHisIncInput), args["_set"].(*model.EnterpriseBlacklistHisSetInput), args["where"].(model.EnterpriseBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseBlacklistHisByPk(rctx, args["_inc"].(*model.EnterpriseBlacklistHisIncInput), args["_set"].(*model.EnterpriseBlacklistHisSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseBlacklistHisByUnionPk(rctx, args["_inc"].(*model.EnterpriseBlacklistHisIncInput), args["_set"].(*model.EnterpriseBlacklistHisSetInput), args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseBlacklistHisByUnionPk(rctx, args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_blacklist_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_blacklist_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleBlacklistAlarm(rctx, args["where"].(model.VehicleBlacklistAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_blacklist_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_blacklist_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleBlacklistAlarmByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_blacklist_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_blacklist_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleBlacklistAlarm(rctx, args["objects"].([]*model.VehicleBlacklistAlarmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_blacklist_alarm_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_blacklist_alarm_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleBlacklistAlarmOne(rctx, args["objects"].(model.VehicleBlacklistAlarmInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_blacklist_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_blacklist_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleBlacklistAlarm(rctx, args["_inc"].(*model.VehicleBlacklistAlarmIncInput), args["_set"].(*model.VehicleBlacklistAlarmSetInput), args["where"].(model.VehicleBlacklistAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_blacklist_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_blacklist_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleBlacklistAlarmByPk(rctx, args["_inc"].(*model.VehicleBlacklistAlarmIncInput), args["_set"].(*model.VehicleBlacklistAlarmSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_blacklist_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_blacklist_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleBlacklistAlarmByUnionPk(rctx, args["_inc"].(*model.VehicleBlacklistAlarmIncInput), args["_set"].(*model.VehicleBlacklistAlarmSetInput), args["alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_blacklist_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_blacklist_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleBlacklistAlarmByUnionPk(rctx, args["alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleBlacklistHis(rctx, args["where"].(model.VehicleBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleBlacklistHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleBlacklistHis(rctx, args["objects"].([]*model.VehicleBlacklistHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_blacklist_his_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_blacklist_his_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleBlacklistHisOne(rctx, args["objects"].(model.VehicleBlacklistHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleBlacklistHis(rctx, args["_inc"].(*model.VehicleBlacklistHisIncInput), args["_set"].(*model.VehicleBlacklistHisSetInput), args["where"].(model.VehicleBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleBlacklistHisByPk(rctx, args["_inc"].(*model.VehicleBlacklistHisIncInput), args["_set"].(*model.VehicleBlacklistHisSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleBlacklistHisByUnionPk(rctx, args["_inc"].(*model.VehicleBlacklistHisIncInput), args["_set"].(*model.VehicleBlacklistHisSetInput), args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleBlacklistHisByUnionPk(rctx, args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_blacklist_apply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_blacklist_apply_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverBlacklistApply(rctx, args["distinct_on"].([]model.DriverBlacklistApplySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverBlacklistApplyOrderBy), args["where"].(*model.DriverBlacklistApplyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalNDriverBlacklistApply2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApplyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_blacklist_apply_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_blacklist_apply_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverBlacklistApplyAggregate(rctx, args["distinct_on"].([]model.DriverBlacklistApplySelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverBlacklistApplyOrderBy), args["where"].(*model.DriverBlacklistApplyBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistApplyAggregate)
	fc.Result = res
	return ec.marshalNDriverBlacklistApplyAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_blacklist_apply_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_blacklist_apply_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverBlacklistApplyByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalODriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_blacklist_apply_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_blacklist_apply_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverBlacklistApplyByUnionPk(rctx, args["apply_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistApply)
	fc.Result = res
	return ec.marshalODriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverBlacklistHis(rctx, args["distinct_on"].([]model.DriverBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverBlacklistHisOrderBy), args["where"].(*model.DriverBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalNDriverBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_blacklist_his_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_blacklist_his_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverBlacklistHisAggregate(rctx, args["distinct_on"].([]model.DriverBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DriverBlacklistHisOrderBy), args["where"].(*model.DriverBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DriverBlacklistHisAggregate)
	fc.Result = res
	return ec.marshalNDriverBlacklistHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverBlacklistHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalODriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_driver_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_driver_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverBlacklistHisByUnionPk(rctx, args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DriverBlacklistHis)
	fc.Result = res
	return ec.marshalODriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_blacklist_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_blacklist_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseBlacklistAlarm(rctx, args["distinct_on"].([]model.EnterpriseBlacklistAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseBlacklistAlarmOrderBy), args["where"].(*model.EnterpriseBlacklistAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalNEnterpriseBlacklistAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_blacklist_alarm_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_blacklist_alarm_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseBlacklistAlarmAggregate(rctx, args["distinct_on"].([]model.EnterpriseBlacklistAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseBlacklistAlarmOrderBy), args["where"].(*model.EnterpriseBlacklistAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistAlarmAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseBlacklistAlarmAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_blacklist_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_blacklist_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseBlacklistAlarmByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_blacklist_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_blacklist_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseBlacklistAlarmByUnionPk(rctx, args["alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistAlarm)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseBlacklistHis(rctx, args["distinct_on"].([]model.EnterpriseBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseBlacklistHisOrderBy), args["where"].(*model.EnterpriseBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalNEnterpriseBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_blacklist_his_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_blacklist_his_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseBlacklistHisAggregate(rctx, args["distinct_on"].([]model.EnterpriseBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseBlacklistHisOrderBy), args["where"].(*model.EnterpriseBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseBlacklistHisAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseBlacklistHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseBlacklistHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseBlacklistHisByUnionPk(rctx, args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EnterpriseBlacklistHis)
	fc.Result = res
	return ec.marshalOEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_blacklist_alarm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_blacklist_alarm_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleBlacklistAlarm(rctx, args["distinct_on"].([]model.VehicleBlacklistAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleBlacklistAlarmOrderBy), args["where"].(*model.VehicleBlacklistAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalNVehicleBlacklistAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_blacklist_alarm_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_blacklist_alarm_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleBlacklistAlarmAggregate(rctx, args["distinct_on"].([]model.VehicleBlacklistAlarmSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleBlacklistAlarmOrderBy), args["where"].(*model.VehicleBlacklistAlarmBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmAggregate)
	fc.Result = res
	return ec.marshalNVehicleBlacklistAlarmAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_blacklist_alarm_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_blacklist_alarm_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleBlacklistAlarmByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_blacklist_alarm_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_blacklist_alarm_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleBlacklistAlarmByUnionPk(rctx, args["alarm_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_blacklist_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_blacklist_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleBlacklistHis(rctx, args["distinct_on"].([]model.VehicleBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleBlacklistHisOrderBy), args["where"].(*model.VehicleBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalNVehicleBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_blacklist_his_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_blacklist_his_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleBlacklistHisAggregate(rctx, args["distinct_on"].([]model.VehicleBlacklistHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleBlacklistHisOrderBy), args["where"].(*model.VehicleBlacklistHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisAggregate)
	fc.Result = res
	return ec.marshalNVehicleBlacklistHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_blacklist_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_blacklist_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleBlacklistHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_blacklist_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_blacklist_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleBlacklistHisByUnionPk(rctx, args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_year(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_score_num(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_score_count(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarm_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistAlarm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmAvgFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmMaxFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmMinFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmStddevFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmSumFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistAlarmVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistAlarmVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAvgFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAvgFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmAvgFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_alarm_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleBlacklistAlarm)
	fc.Result = res
	return ec.marshalNVehicleBlacklistAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarmᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevPopFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevPopFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevPopFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevSampFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevSampFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmStddevSampFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmSumFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmSumFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmSumFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarPopFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarPopFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarPopFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarSampFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarSampFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarSampFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarianceFields_year(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarianceFields_score_num(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistAlarmVarianceFields_score_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistAlarmVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistAlarmVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_his_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_operate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHis_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleBlacklistHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisAvgFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisMaxFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisMinFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisStddevFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisSumFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleBlacklistHisVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleBlacklistHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAvgFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisAvgFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_his_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_his_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleBlacklistHis)
	fc.Result = res
	return ec.marshalNVehicleBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevPopFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisStddevSampFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisSumFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisSumFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarPopFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarPopFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarSampFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarSampFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarianceFields_blacklist_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlacklistType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleBlacklistHisVarianceFields_operate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleBlacklistHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleBlacklistHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistApplyBoolExp(ctx context.Context, obj interface{}) (model.DriverBlacklistApplyBoolExp, error) {
	var it model.DriverBlacklistApplyBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODriverBlacklistApplyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODriverBlacklistApplyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODriverBlacklistApplyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
			it.ApplyID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistApplyIncInput(ctx context.Context, obj interface{}) (model.DriverBlacklistApplyIncInput, error) {
	var it model.DriverBlacklistApplyIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistApplyInsertInput(ctx context.Context, obj interface{}) (model.DriverBlacklistApplyInsertInput, error) {
	var it model.DriverBlacklistApplyInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "apply_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
			it.ApplyID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistApplyOrderBy(ctx context.Context, obj interface{}) (model.DriverBlacklistApplyOrderBy, error) {
	var it model.DriverBlacklistApplyOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
			it.ApplyID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistApplySetInput(ctx context.Context, obj interface{}) (model.DriverBlacklistApplySetInput, error) {
	var it model.DriverBlacklistApplySetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
			it.ApplyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistHisBoolExp(ctx context.Context, obj interface{}) (model.DriverBlacklistHisBoolExp, error) {
	var it model.DriverBlacklistHisBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODriverBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODriverBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODriverBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "attach_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attach_file"))
			it.AttachFile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
			it.ApplyID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_card_num"))
			it.DriverCardNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistHisIncInput(ctx context.Context, obj interface{}) (model.DriverBlacklistHisIncInput, error) {
	var it model.DriverBlacklistHisIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistHisInsertInput(ctx context.Context, obj interface{}) (model.DriverBlacklistHisInsertInput, error) {
	var it model.DriverBlacklistHisInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "attach_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attach_file"))
			it.AttachFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
			it.ApplyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_card_num"))
			it.DriverCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistHisOrderBy(ctx context.Context, obj interface{}) (model.DriverBlacklistHisOrderBy, error) {
	var it model.DriverBlacklistHisOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "attach_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attach_file"))
			it.AttachFile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
			it.ApplyID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_card_num"))
			it.DriverCardNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDriverBlacklistHisSetInput(ctx context.Context, obj interface{}) (model.DriverBlacklistHisSetInput, error) {
	var it model.DriverBlacklistHisSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "attach_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attach_file"))
			it.AttachFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "step":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("step"))
			it.Step, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_id"))
			it.ApplyID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_card_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_card_num"))
			it.DriverCardNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistAlarmBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistAlarmBoolExp, error) {
	var it model.EnterpriseBlacklistAlarmBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseBlacklistAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseBlacklistAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_rank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_rank"))
			it.IsRank, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistAlarmIncInput(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistAlarmIncInput, error) {
	var it model.EnterpriseBlacklistAlarmIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistAlarmInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistAlarmInsertInput, error) {
	var it model.EnterpriseBlacklistAlarmInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_rank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_rank"))
			it.IsRank, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistAlarmOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistAlarmOrderBy, error) {
	var it model.EnterpriseBlacklistAlarmOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_rank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_rank"))
			it.IsRank, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistAlarmSetInput(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistAlarmSetInput, error) {
	var it model.EnterpriseBlacklistAlarmSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_rank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_rank"))
			it.IsRank, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistHisBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistHisBoolExp, error) {
	var it model.EnterpriseBlacklistHisBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistHisIncInput(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistHisIncInput, error) {
	var it model.EnterpriseBlacklistHisIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistHisInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistHisInsertInput, error) {
	var it model.EnterpriseBlacklistHisInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistHisOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistHisOrderBy, error) {
	var it model.EnterpriseBlacklistHisOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBlacklistHisSetInput(ctx context.Context, obj interface{}) (model.EnterpriseBlacklistHisSetInput, error) {
	var it model.EnterpriseBlacklistHisSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistAlarmBoolExp(ctx context.Context, obj interface{}) (model.VehicleBlacklistAlarmBoolExp, error) {
	var it model.VehicleBlacklistAlarmBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleBlacklistAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleBlacklistAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_num"))
			it.ScoreNum, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_count"))
			it.ScoreCount, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistAlarmIncInput(ctx context.Context, obj interface{}) (model.VehicleBlacklistAlarmIncInput, error) {
	var it model.VehicleBlacklistAlarmIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_num"))
			it.ScoreNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_count"))
			it.ScoreCount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistAlarmInsertInput(ctx context.Context, obj interface{}) (model.VehicleBlacklistAlarmInsertInput, error) {
	var it model.VehicleBlacklistAlarmInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_num"))
			it.ScoreNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_count"))
			it.ScoreCount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistAlarmOrderBy(ctx context.Context, obj interface{}) (model.VehicleBlacklistAlarmOrderBy, error) {
	var it model.VehicleBlacklistAlarmOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_num"))
			it.ScoreNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_count"))
			it.ScoreCount, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistAlarmSetInput(ctx context.Context, obj interface{}) (model.VehicleBlacklistAlarmSetInput, error) {
	var it model.VehicleBlacklistAlarmSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_id"))
			it.AlarmID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_num"))
			it.ScoreNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "score_count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score_count"))
			it.ScoreCount, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistHisBoolExp(ctx context.Context, obj interface{}) (model.VehicleBlacklistHisBoolExp, error) {
	var it model.VehicleBlacklistHisBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistHisIncInput(ctx context.Context, obj interface{}) (model.VehicleBlacklistHisIncInput, error) {
	var it model.VehicleBlacklistHisIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistHisInsertInput(ctx context.Context, obj interface{}) (model.VehicleBlacklistHisInsertInput, error) {
	var it model.VehicleBlacklistHisInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistHisOrderBy(ctx context.Context, obj interface{}) (model.VehicleBlacklistHisOrderBy, error) {
	var it model.VehicleBlacklistHisOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleBlacklistHisSetInput(ctx context.Context, obj interface{}) (model.VehicleBlacklistHisSetInput, error) {
	var it model.VehicleBlacklistHisSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blacklist_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blacklist_type"))
			it.BlacklistType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operate"))
			it.Operate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var driverBlacklistApplyImplementors = []string{"DriverBlacklistApply"}

func (ec *executionContext) _DriverBlacklistApply(ctx context.Context, sel ast.SelectionSet, obj *model1.DriverBlacklistApply) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApply")
		case "id":
			out.Values[i] = ec._DriverBlacklistApply_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apply_id":
			out.Values[i] = ec._DriverBlacklistApply_apply_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._DriverBlacklistApply_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apply_reason":
			out.Values[i] = ec._DriverBlacklistApply_apply_reason(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApply_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApply_state(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverBlacklistApply_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DriverBlacklistApply_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverBlacklistApply_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverBlacklistApply_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverBlacklistApply_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverBlacklistApply_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverBlacklistApply_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyAggregateImplementors = []string{"DriverBlacklistApplyAggregate"}

func (ec *executionContext) _DriverBlacklistApplyAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyAggregate")
		case "aggregate":
			out.Values[i] = ec._DriverBlacklistApplyAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyAggregateFieldsImplementors = []string{"DriverBlacklistApplyAggregateFields"}

func (ec *executionContext) _DriverBlacklistApplyAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyAggregateFields")
		case "avg":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DriverBlacklistApplyAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyAvgFieldsImplementors = []string{"DriverBlacklistApplyAvgFields"}

func (ec *executionContext) _DriverBlacklistApplyAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyAvgFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyAvgFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyAvgFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyAvgFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyMaxFieldsImplementors = []string{"DriverBlacklistApplyMaxFields"}

func (ec *executionContext) _DriverBlacklistApplyMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyMaxFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_id(ctx, field, obj)
		case "apply_id":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_apply_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_driver_id(ctx, field, obj)
		case "apply_reason":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_apply_reason(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_state(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverBlacklistApplyMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyMinFieldsImplementors = []string{"DriverBlacklistApplyMinFields"}

func (ec *executionContext) _DriverBlacklistApplyMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyMinFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_id(ctx, field, obj)
		case "apply_id":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_apply_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_driver_id(ctx, field, obj)
		case "apply_reason":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_apply_reason(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_state(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverBlacklistApplyMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyMutationResponseImplementors = []string{"DriverBlacklistApplyMutationResponse"}

func (ec *executionContext) _DriverBlacklistApplyMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DriverBlacklistApplyMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DriverBlacklistApplyMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyStddevFieldsImplementors = []string{"DriverBlacklistApplyStddevFields"}

func (ec *executionContext) _DriverBlacklistApplyStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyStddevFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyStddevFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyStddevFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyStddevFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyStddevPopFieldsImplementors = []string{"DriverBlacklistApplyStddevPopFields"}

func (ec *executionContext) _DriverBlacklistApplyStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyStddevPopFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyStddevPopFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyStddevPopFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyStddevPopFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyStddevSampFieldsImplementors = []string{"DriverBlacklistApplyStddevSampFields"}

func (ec *executionContext) _DriverBlacklistApplyStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyStddevSampFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyStddevSampFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyStddevSampFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyStddevSampFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplySumFieldsImplementors = []string{"DriverBlacklistApplySumFields"}

func (ec *executionContext) _DriverBlacklistApplySumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplySumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplySumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplySumFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplySumFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplySumFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplySumFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyVarPopFieldsImplementors = []string{"DriverBlacklistApplyVarPopFields"}

func (ec *executionContext) _DriverBlacklistApplyVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyVarPopFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyVarPopFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyVarPopFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyVarPopFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyVarSampFieldsImplementors = []string{"DriverBlacklistApplyVarSampFields"}

func (ec *executionContext) _DriverBlacklistApplyVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyVarSampFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyVarSampFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyVarSampFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyVarSampFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistApplyVarianceFieldsImplementors = []string{"DriverBlacklistApplyVarianceFields"}

func (ec *executionContext) _DriverBlacklistApplyVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistApplyVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistApplyVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistApplyVarianceFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistApplyVarianceFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistApplyVarianceFields_blacklist_type(ctx, field, obj)
		case "state":
			out.Values[i] = ec._DriverBlacklistApplyVarianceFields_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisImplementors = []string{"DriverBlacklistHis"}

func (ec *executionContext) _DriverBlacklistHis(ctx context.Context, sel ast.SelectionSet, obj *model1.DriverBlacklistHis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHis")
		case "id":
			out.Values[i] = ec._DriverBlacklistHis_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "his_id":
			out.Values[i] = ec._DriverBlacklistHis_his_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driver_id":
			out.Values[i] = ec._DriverBlacklistHis_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHis_blacklist_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operate":
			out.Values[i] = ec._DriverBlacklistHis_operate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._DriverBlacklistHis_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverBlacklistHis_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DriverBlacklistHis_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverBlacklistHis_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverBlacklistHis_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverBlacklistHis_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverBlacklistHis_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverBlacklistHis_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attach_file":
			out.Values[i] = ec._DriverBlacklistHis_attach_file(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHis_step(ctx, field, obj)
		case "apply_id":
			out.Values[i] = ec._DriverBlacklistHis_apply_id(ctx, field, obj)
		case "driver_card_num":
			out.Values[i] = ec._DriverBlacklistHis_driver_card_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisAggregateImplementors = []string{"DriverBlacklistHisAggregate"}

func (ec *executionContext) _DriverBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisAggregate")
		case "aggregate":
			out.Values[i] = ec._DriverBlacklistHisAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisAggregateFieldsImplementors = []string{"DriverBlacklistHisAggregateFields"}

func (ec *executionContext) _DriverBlacklistHisAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisAggregateFields")
		case "avg":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DriverBlacklistHisAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisAvgFieldsImplementors = []string{"DriverBlacklistHisAvgFields"}

func (ec *executionContext) _DriverBlacklistHisAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisAvgFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisAvgFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisAvgFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisAvgFields_operate(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisAvgFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisMaxFieldsImplementors = []string{"DriverBlacklistHisMaxFields"}

func (ec *executionContext) _DriverBlacklistHisMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisMaxFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_id(ctx, field, obj)
		case "his_id":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_his_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_driver_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_is_deleted(ctx, field, obj)
		case "attach_file":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_attach_file(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_step(ctx, field, obj)
		case "apply_id":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_apply_id(ctx, field, obj)
		case "driver_card_num":
			out.Values[i] = ec._DriverBlacklistHisMaxFields_driver_card_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisMinFieldsImplementors = []string{"DriverBlacklistHisMinFields"}

func (ec *executionContext) _DriverBlacklistHisMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisMinFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisMinFields_id(ctx, field, obj)
		case "his_id":
			out.Values[i] = ec._DriverBlacklistHisMinFields_his_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DriverBlacklistHisMinFields_driver_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisMinFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisMinFields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DriverBlacklistHisMinFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DriverBlacklistHisMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DriverBlacklistHisMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DriverBlacklistHisMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DriverBlacklistHisMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DriverBlacklistHisMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DriverBlacklistHisMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DriverBlacklistHisMinFields_is_deleted(ctx, field, obj)
		case "attach_file":
			out.Values[i] = ec._DriverBlacklistHisMinFields_attach_file(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisMinFields_step(ctx, field, obj)
		case "apply_id":
			out.Values[i] = ec._DriverBlacklistHisMinFields_apply_id(ctx, field, obj)
		case "driver_card_num":
			out.Values[i] = ec._DriverBlacklistHisMinFields_driver_card_num(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisMutationResponseImplementors = []string{"DriverBlacklistHisMutationResponse"}

func (ec *executionContext) _DriverBlacklistHisMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DriverBlacklistHisMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DriverBlacklistHisMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisStddevFieldsImplementors = []string{"DriverBlacklistHisStddevFields"}

func (ec *executionContext) _DriverBlacklistHisStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisStddevFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisStddevFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisStddevFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisStddevFields_operate(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisStddevFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisStddevPopFieldsImplementors = []string{"DriverBlacklistHisStddevPopFields"}

func (ec *executionContext) _DriverBlacklistHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisStddevPopFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisStddevPopFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisStddevPopFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisStddevPopFields_operate(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisStddevPopFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisStddevSampFieldsImplementors = []string{"DriverBlacklistHisStddevSampFields"}

func (ec *executionContext) _DriverBlacklistHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisStddevSampFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisStddevSampFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisStddevSampFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisStddevSampFields_operate(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisStddevSampFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisSumFieldsImplementors = []string{"DriverBlacklistHisSumFields"}

func (ec *executionContext) _DriverBlacklistHisSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisSumFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisSumFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisSumFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisSumFields_operate(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisSumFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisVarPopFieldsImplementors = []string{"DriverBlacklistHisVarPopFields"}

func (ec *executionContext) _DriverBlacklistHisVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisVarPopFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisVarPopFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisVarPopFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisVarPopFields_operate(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisVarPopFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisVarSampFieldsImplementors = []string{"DriverBlacklistHisVarSampFields"}

func (ec *executionContext) _DriverBlacklistHisVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisVarSampFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisVarSampFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisVarSampFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisVarSampFields_operate(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisVarSampFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverBlacklistHisVarianceFieldsImplementors = []string{"DriverBlacklistHisVarianceFields"}

func (ec *executionContext) _DriverBlacklistHisVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DriverBlacklistHisVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverBlacklistHisVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverBlacklistHisVarianceFields")
		case "id":
			out.Values[i] = ec._DriverBlacklistHisVarianceFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._DriverBlacklistHisVarianceFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._DriverBlacklistHisVarianceFields_operate(ctx, field, obj)
		case "step":
			out.Values[i] = ec._DriverBlacklistHisVarianceFields_step(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmImplementors = []string{"EnterpriseBlacklistAlarm"}

func (ec *executionContext) _EnterpriseBlacklistAlarm(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseBlacklistAlarm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarm")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_id":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_alarm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_black":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_is_black(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_rank":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_is_rank(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._EnterpriseBlacklistAlarm_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmAggregateImplementors = []string{"EnterpriseBlacklistAlarmAggregate"}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmAggregateFieldsImplementors = []string{"EnterpriseBlacklistAlarmAggregateFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmAvgFieldsImplementors = []string{"EnterpriseBlacklistAlarmAvgFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAvgFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAvgFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmAvgFields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmMaxFieldsImplementors = []string{"EnterpriseBlacklistAlarmMaxFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_id(ctx, field, obj)
		case "alarm_id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_alarm_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_enterprise_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_year(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_is_black(ctx, field, obj)
		case "is_rank":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_is_rank(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmMinFieldsImplementors = []string{"EnterpriseBlacklistAlarmMinFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_id(ctx, field, obj)
		case "alarm_id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_alarm_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_enterprise_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_year(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_is_black(ctx, field, obj)
		case "is_rank":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_is_rank(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmMutationResponseImplementors = []string{"EnterpriseBlacklistAlarmMutationResponse"}

func (ec *executionContext) _EnterpriseBlacklistAlarmMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseBlacklistAlarmMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmStddevFieldsImplementors = []string{"EnterpriseBlacklistAlarmStddevFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevFields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmStddevPopFieldsImplementors = []string{"EnterpriseBlacklistAlarmStddevPopFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevPopFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevPopFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevPopFields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmStddevSampFieldsImplementors = []string{"EnterpriseBlacklistAlarmStddevSampFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevSampFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevSampFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmStddevSampFields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmSumFieldsImplementors = []string{"EnterpriseBlacklistAlarmSumFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmSumFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmSumFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmSumFields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmVarPopFieldsImplementors = []string{"EnterpriseBlacklistAlarmVarPopFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarPopFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarPopFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarPopFields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmVarSampFieldsImplementors = []string{"EnterpriseBlacklistAlarmVarSampFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarSampFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarSampFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarSampFields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistAlarmVarianceFieldsImplementors = []string{"EnterpriseBlacklistAlarmVarianceFields"}

func (ec *executionContext) _EnterpriseBlacklistAlarmVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistAlarmVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistAlarmVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistAlarmVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarianceFields_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarianceFields_type(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EnterpriseBlacklistAlarmVarianceFields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisImplementors = []string{"EnterpriseBlacklistHis"}

func (ec *executionContext) _EnterpriseBlacklistHis(ctx context.Context, sel ast.SelectionSet, obj *model1.EnterpriseBlacklistHis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHis")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHis_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "his_id":
			out.Values[i] = ec._EnterpriseBlacklistHis_his_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseBlacklistHis_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHis_blacklist_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHis_operate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._EnterpriseBlacklistHis_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseBlacklistHis_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._EnterpriseBlacklistHis_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseBlacklistHis_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseBlacklistHis_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseBlacklistHis_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseBlacklistHis_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._EnterpriseBlacklistHis_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisAggregateImplementors = []string{"EnterpriseBlacklistHisAggregate"}

func (ec *executionContext) _EnterpriseBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisAggregateFieldsImplementors = []string{"EnterpriseBlacklistHisAggregateFields"}

func (ec *executionContext) _EnterpriseBlacklistHisAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseBlacklistHisAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisAvgFieldsImplementors = []string{"EnterpriseBlacklistHisAvgFields"}

func (ec *executionContext) _EnterpriseBlacklistHisAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisAvgFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisAvgFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisAvgFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisAvgFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisMaxFieldsImplementors = []string{"EnterpriseBlacklistHisMaxFields"}

func (ec *executionContext) _EnterpriseBlacklistHisMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisMaxFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_id(ctx, field, obj)
		case "his_id":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_his_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_enterprise_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._EnterpriseBlacklistHisMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisMinFieldsImplementors = []string{"EnterpriseBlacklistHisMinFields"}

func (ec *executionContext) _EnterpriseBlacklistHisMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisMinFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_id(ctx, field, obj)
		case "his_id":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_his_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_enterprise_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._EnterpriseBlacklistHisMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisMutationResponseImplementors = []string{"EnterpriseBlacklistHisMutationResponse"}

func (ec *executionContext) _EnterpriseBlacklistHisMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseBlacklistHisMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseBlacklistHisMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisStddevFieldsImplementors = []string{"EnterpriseBlacklistHisStddevFields"}

func (ec *executionContext) _EnterpriseBlacklistHisStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisStddevFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisStddevPopFieldsImplementors = []string{"EnterpriseBlacklistHisStddevPopFields"}

func (ec *executionContext) _EnterpriseBlacklistHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisStddevPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevPopFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevPopFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevPopFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisStddevSampFieldsImplementors = []string{"EnterpriseBlacklistHisStddevSampFields"}

func (ec *executionContext) _EnterpriseBlacklistHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisStddevSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevSampFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevSampFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisStddevSampFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisSumFieldsImplementors = []string{"EnterpriseBlacklistHisSumFields"}

func (ec *executionContext) _EnterpriseBlacklistHisSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisSumFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisSumFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisSumFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisSumFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisVarPopFieldsImplementors = []string{"EnterpriseBlacklistHisVarPopFields"}

func (ec *executionContext) _EnterpriseBlacklistHisVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisVarPopFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisVarPopFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisVarPopFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisVarPopFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisVarSampFieldsImplementors = []string{"EnterpriseBlacklistHisVarSampFields"}

func (ec *executionContext) _EnterpriseBlacklistHisVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisVarSampFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisVarSampFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisVarSampFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisVarSampFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseBlacklistHisVarianceFieldsImplementors = []string{"EnterpriseBlacklistHisVarianceFields"}

func (ec *executionContext) _EnterpriseBlacklistHisVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseBlacklistHisVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseBlacklistHisVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseBlacklistHisVarianceFields")
		case "id":
			out.Values[i] = ec._EnterpriseBlacklistHisVarianceFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._EnterpriseBlacklistHisVarianceFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._EnterpriseBlacklistHisVarianceFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_driver_blacklist_apply":
			out.Values[i] = ec._Mutation_delete_driver_blacklist_apply(ctx, field)
		case "delete_driver_blacklist_apply_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_blacklist_apply_by_pk(ctx, field)
		case "insert_driver_blacklist_apply":
			out.Values[i] = ec._Mutation_insert_driver_blacklist_apply(ctx, field)
		case "insert_driver_blacklist_apply_one":
			out.Values[i] = ec._Mutation_insert_driver_blacklist_apply_one(ctx, field)
		case "update_driver_blacklist_apply":
			out.Values[i] = ec._Mutation_update_driver_blacklist_apply(ctx, field)
		case "update_driver_blacklist_apply_by_pk":
			out.Values[i] = ec._Mutation_update_driver_blacklist_apply_by_pk(ctx, field)
		case "update_driver_blacklist_apply_by_union_pk":
			out.Values[i] = ec._Mutation_update_driver_blacklist_apply_by_union_pk(ctx, field)
		case "delete_driver_blacklist_apply_by_union_pk":
			out.Values[i] = ec._Mutation_delete_driver_blacklist_apply_by_union_pk(ctx, field)
		case "delete_driver_blacklist_his":
			out.Values[i] = ec._Mutation_delete_driver_blacklist_his(ctx, field)
		case "delete_driver_blacklist_his_by_pk":
			out.Values[i] = ec._Mutation_delete_driver_blacklist_his_by_pk(ctx, field)
		case "insert_driver_blacklist_his":
			out.Values[i] = ec._Mutation_insert_driver_blacklist_his(ctx, field)
		case "insert_driver_blacklist_his_one":
			out.Values[i] = ec._Mutation_insert_driver_blacklist_his_one(ctx, field)
		case "update_driver_blacklist_his":
			out.Values[i] = ec._Mutation_update_driver_blacklist_his(ctx, field)
		case "update_driver_blacklist_his_by_pk":
			out.Values[i] = ec._Mutation_update_driver_blacklist_his_by_pk(ctx, field)
		case "update_driver_blacklist_his_by_union_pk":
			out.Values[i] = ec._Mutation_update_driver_blacklist_his_by_union_pk(ctx, field)
		case "delete_driver_blacklist_his_by_union_pk":
			out.Values[i] = ec._Mutation_delete_driver_blacklist_his_by_union_pk(ctx, field)
		case "delete_enterprise_blacklist_alarm":
			out.Values[i] = ec._Mutation_delete_enterprise_blacklist_alarm(ctx, field)
		case "delete_enterprise_blacklist_alarm_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_blacklist_alarm_by_pk(ctx, field)
		case "insert_enterprise_blacklist_alarm":
			out.Values[i] = ec._Mutation_insert_enterprise_blacklist_alarm(ctx, field)
		case "insert_enterprise_blacklist_alarm_one":
			out.Values[i] = ec._Mutation_insert_enterprise_blacklist_alarm_one(ctx, field)
		case "update_enterprise_blacklist_alarm":
			out.Values[i] = ec._Mutation_update_enterprise_blacklist_alarm(ctx, field)
		case "update_enterprise_blacklist_alarm_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_blacklist_alarm_by_pk(ctx, field)
		case "update_enterprise_blacklist_alarm_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_blacklist_alarm_by_union_pk(ctx, field)
		case "delete_enterprise_blacklist_alarm_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_blacklist_alarm_by_union_pk(ctx, field)
		case "delete_enterprise_blacklist_his":
			out.Values[i] = ec._Mutation_delete_enterprise_blacklist_his(ctx, field)
		case "delete_enterprise_blacklist_his_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_blacklist_his_by_pk(ctx, field)
		case "insert_enterprise_blacklist_his":
			out.Values[i] = ec._Mutation_insert_enterprise_blacklist_his(ctx, field)
		case "insert_enterprise_blacklist_his_one":
			out.Values[i] = ec._Mutation_insert_enterprise_blacklist_his_one(ctx, field)
		case "update_enterprise_blacklist_his":
			out.Values[i] = ec._Mutation_update_enterprise_blacklist_his(ctx, field)
		case "update_enterprise_blacklist_his_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_blacklist_his_by_pk(ctx, field)
		case "update_enterprise_blacklist_his_by_union_pk":
			out.Values[i] = ec._Mutation_update_enterprise_blacklist_his_by_union_pk(ctx, field)
		case "delete_enterprise_blacklist_his_by_union_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_blacklist_his_by_union_pk(ctx, field)
		case "delete_vehicle_blacklist_alarm":
			out.Values[i] = ec._Mutation_delete_vehicle_blacklist_alarm(ctx, field)
		case "delete_vehicle_blacklist_alarm_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_blacklist_alarm_by_pk(ctx, field)
		case "insert_vehicle_blacklist_alarm":
			out.Values[i] = ec._Mutation_insert_vehicle_blacklist_alarm(ctx, field)
		case "insert_vehicle_blacklist_alarm_one":
			out.Values[i] = ec._Mutation_insert_vehicle_blacklist_alarm_one(ctx, field)
		case "update_vehicle_blacklist_alarm":
			out.Values[i] = ec._Mutation_update_vehicle_blacklist_alarm(ctx, field)
		case "update_vehicle_blacklist_alarm_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_blacklist_alarm_by_pk(ctx, field)
		case "update_vehicle_blacklist_alarm_by_union_pk":
			out.Values[i] = ec._Mutation_update_vehicle_blacklist_alarm_by_union_pk(ctx, field)
		case "delete_vehicle_blacklist_alarm_by_union_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_blacklist_alarm_by_union_pk(ctx, field)
		case "delete_vehicle_blacklist_his":
			out.Values[i] = ec._Mutation_delete_vehicle_blacklist_his(ctx, field)
		case "delete_vehicle_blacklist_his_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_blacklist_his_by_pk(ctx, field)
		case "insert_vehicle_blacklist_his":
			out.Values[i] = ec._Mutation_insert_vehicle_blacklist_his(ctx, field)
		case "insert_vehicle_blacklist_his_one":
			out.Values[i] = ec._Mutation_insert_vehicle_blacklist_his_one(ctx, field)
		case "update_vehicle_blacklist_his":
			out.Values[i] = ec._Mutation_update_vehicle_blacklist_his(ctx, field)
		case "update_vehicle_blacklist_his_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_blacklist_his_by_pk(ctx, field)
		case "update_vehicle_blacklist_his_by_union_pk":
			out.Values[i] = ec._Mutation_update_vehicle_blacklist_his_by_union_pk(ctx, field)
		case "delete_vehicle_blacklist_his_by_union_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_blacklist_his_by_union_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "driver_blacklist_apply":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_blacklist_apply(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_blacklist_apply_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_blacklist_apply_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_blacklist_apply_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_blacklist_apply_by_pk(ctx, field)
				return res
			})
		case "driver_blacklist_apply_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_blacklist_apply_by_union_pk(ctx, field)
				return res
			})
		case "driver_blacklist_his":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_blacklist_his(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_blacklist_his_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_blacklist_his_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "driver_blacklist_his_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_blacklist_his_by_pk(ctx, field)
				return res
			})
		case "driver_blacklist_his_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver_blacklist_his_by_union_pk(ctx, field)
				return res
			})
		case "enterprise_blacklist_alarm":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_blacklist_alarm(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_blacklist_alarm_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_blacklist_alarm_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_blacklist_alarm_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_blacklist_alarm_by_pk(ctx, field)
				return res
			})
		case "enterprise_blacklist_alarm_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_blacklist_alarm_by_union_pk(ctx, field)
				return res
			})
		case "enterprise_blacklist_his":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_blacklist_his(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_blacklist_his_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_blacklist_his_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_blacklist_his_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_blacklist_his_by_pk(ctx, field)
				return res
			})
		case "enterprise_blacklist_his_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_blacklist_his_by_union_pk(ctx, field)
				return res
			})
		case "vehicle_blacklist_alarm":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_blacklist_alarm(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_blacklist_alarm_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_blacklist_alarm_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_blacklist_alarm_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_blacklist_alarm_by_pk(ctx, field)
				return res
			})
		case "vehicle_blacklist_alarm_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_blacklist_alarm_by_union_pk(ctx, field)
				return res
			})
		case "vehicle_blacklist_his":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_blacklist_his(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_blacklist_his_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_blacklist_his_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_blacklist_his_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_blacklist_his_by_pk(ctx, field)
				return res
			})
		case "vehicle_blacklist_his_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_blacklist_his_by_union_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmImplementors = []string{"VehicleBlacklistAlarm"}

func (ec *executionContext) _VehicleBlacklistAlarm(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleBlacklistAlarm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarm")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_id":
			out.Values[i] = ec._VehicleBlacklistAlarm_alarm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleBlacklistAlarm_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "license_plate_number":
			out.Values[i] = ec._VehicleBlacklistAlarm_license_plate_number(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarm_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarm_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarm_score_count(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleBlacklistAlarm_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleBlacklistAlarm_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleBlacklistAlarm_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleBlacklistAlarm_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleBlacklistAlarm_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleBlacklistAlarm_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleBlacklistAlarm_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmAggregateImplementors = []string{"VehicleBlacklistAlarmAggregate"}

func (ec *executionContext) _VehicleBlacklistAlarmAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmAggregateFieldsImplementors = []string{"VehicleBlacklistAlarmAggregateFields"}

func (ec *executionContext) _VehicleBlacklistAlarmAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleBlacklistAlarmAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmAvgFieldsImplementors = []string{"VehicleBlacklistAlarmAvgFields"}

func (ec *executionContext) _VehicleBlacklistAlarmAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmAvgFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmAvgFields_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmAvgFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmAvgFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmAvgFields_score_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmMaxFieldsImplementors = []string{"VehicleBlacklistAlarmMaxFields"}

func (ec *executionContext) _VehicleBlacklistAlarmMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmMaxFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_id(ctx, field, obj)
		case "alarm_id":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_alarm_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_license_plate_number(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_score_count(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleBlacklistAlarmMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmMinFieldsImplementors = []string{"VehicleBlacklistAlarmMinFields"}

func (ec *executionContext) _VehicleBlacklistAlarmMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmMinFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_id(ctx, field, obj)
		case "alarm_id":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_alarm_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_vehicle_id(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_license_plate_number(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_score_count(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleBlacklistAlarmMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmMutationResponseImplementors = []string{"VehicleBlacklistAlarmMutationResponse"}

func (ec *executionContext) _VehicleBlacklistAlarmMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleBlacklistAlarmMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleBlacklistAlarmMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmStddevFieldsImplementors = []string{"VehicleBlacklistAlarmStddevFields"}

func (ec *executionContext) _VehicleBlacklistAlarmStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmStddevFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevFields_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevFields_score_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmStddevPopFieldsImplementors = []string{"VehicleBlacklistAlarmStddevPopFields"}

func (ec *executionContext) _VehicleBlacklistAlarmStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevPopFields_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevPopFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevPopFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevPopFields_score_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmStddevSampFieldsImplementors = []string{"VehicleBlacklistAlarmStddevSampFields"}

func (ec *executionContext) _VehicleBlacklistAlarmStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevSampFields_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevSampFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevSampFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmStddevSampFields_score_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmSumFieldsImplementors = []string{"VehicleBlacklistAlarmSumFields"}

func (ec *executionContext) _VehicleBlacklistAlarmSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmSumFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmSumFields_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmSumFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmSumFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmSumFields_score_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmVarPopFieldsImplementors = []string{"VehicleBlacklistAlarmVarPopFields"}

func (ec *executionContext) _VehicleBlacklistAlarmVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmVarPopFields_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmVarPopFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmVarPopFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmVarPopFields_score_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmVarSampFieldsImplementors = []string{"VehicleBlacklistAlarmVarSampFields"}

func (ec *executionContext) _VehicleBlacklistAlarmVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmVarSampFields_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmVarSampFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmVarSampFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmVarSampFields_score_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistAlarmVarianceFieldsImplementors = []string{"VehicleBlacklistAlarmVarianceFields"}

func (ec *executionContext) _VehicleBlacklistAlarmVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistAlarmVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistAlarmVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistAlarmVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistAlarmVarianceFields_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._VehicleBlacklistAlarmVarianceFields_year(ctx, field, obj)
		case "score_num":
			out.Values[i] = ec._VehicleBlacklistAlarmVarianceFields_score_num(ctx, field, obj)
		case "score_count":
			out.Values[i] = ec._VehicleBlacklistAlarmVarianceFields_score_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisImplementors = []string{"VehicleBlacklistHis"}

func (ec *executionContext) _VehicleBlacklistHis(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleBlacklistHis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHis")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHis_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "his_id":
			out.Values[i] = ec._VehicleBlacklistHis_his_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleBlacklistHis_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHis_blacklist_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHis_operate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._VehicleBlacklistHis_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleBlacklistHis_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleBlacklistHis_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleBlacklistHis_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleBlacklistHis_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleBlacklistHis_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleBlacklistHis_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleBlacklistHis_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisAggregateImplementors = []string{"VehicleBlacklistHisAggregate"}

func (ec *executionContext) _VehicleBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleBlacklistHisAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisAggregateFieldsImplementors = []string{"VehicleBlacklistHisAggregateFields"}

func (ec *executionContext) _VehicleBlacklistHisAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleBlacklistHisAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisAvgFieldsImplementors = []string{"VehicleBlacklistHisAvgFields"}

func (ec *executionContext) _VehicleBlacklistHisAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisAvgFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisAvgFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisAvgFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisAvgFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisMaxFieldsImplementors = []string{"VehicleBlacklistHisMaxFields"}

func (ec *executionContext) _VehicleBlacklistHisMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisMaxFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_id(ctx, field, obj)
		case "his_id":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_his_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_vehicle_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleBlacklistHisMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisMinFieldsImplementors = []string{"VehicleBlacklistHisMinFields"}

func (ec *executionContext) _VehicleBlacklistHisMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisMinFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_id(ctx, field, obj)
		case "his_id":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_his_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_vehicle_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_operate(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_remarks(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleBlacklistHisMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisMutationResponseImplementors = []string{"VehicleBlacklistHisMutationResponse"}

func (ec *executionContext) _VehicleBlacklistHisMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleBlacklistHisMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleBlacklistHisMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisStddevFieldsImplementors = []string{"VehicleBlacklistHisStddevFields"}

func (ec *executionContext) _VehicleBlacklistHisStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisStddevFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisStddevFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisStddevFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisStddevFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisStddevPopFieldsImplementors = []string{"VehicleBlacklistHisStddevPopFields"}

func (ec *executionContext) _VehicleBlacklistHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisStddevPopFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisStddevPopFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisStddevPopFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisStddevSampFieldsImplementors = []string{"VehicleBlacklistHisStddevSampFields"}

func (ec *executionContext) _VehicleBlacklistHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisStddevSampFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisStddevSampFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisStddevSampFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisSumFieldsImplementors = []string{"VehicleBlacklistHisSumFields"}

func (ec *executionContext) _VehicleBlacklistHisSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisSumFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisSumFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisSumFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisSumFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisVarPopFieldsImplementors = []string{"VehicleBlacklistHisVarPopFields"}

func (ec *executionContext) _VehicleBlacklistHisVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisVarPopFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisVarPopFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisVarPopFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisVarSampFieldsImplementors = []string{"VehicleBlacklistHisVarSampFields"}

func (ec *executionContext) _VehicleBlacklistHisVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisVarSampFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisVarSampFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisVarSampFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleBlacklistHisVarianceFieldsImplementors = []string{"VehicleBlacklistHisVarianceFields"}

func (ec *executionContext) _VehicleBlacklistHisVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleBlacklistHisVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleBlacklistHisVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleBlacklistHisVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleBlacklistHisVarianceFields_id(ctx, field, obj)
		case "blacklist_type":
			out.Values[i] = ec._VehicleBlacklistHisVarianceFields_blacklist_type(ctx, field, obj)
		case "operate":
			out.Values[i] = ec._VehicleBlacklistHisVarianceFields_operate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDriverBlacklistApply2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApplyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DriverBlacklistApply) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx context.Context, sel ast.SelectionSet, v *model1.DriverBlacklistApply) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverBlacklistApply(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverBlacklistApplyAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverBlacklistApplyAggregate) graphql.Marshaler {
	return ec._DriverBlacklistApplyAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverBlacklistApplyAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverBlacklistApplyAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDriverBlacklistApplyBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx context.Context, v interface{}) (model.DriverBlacklistApplyBoolExp, error) {
	res, err := ec.unmarshalInputDriverBlacklistApplyBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverBlacklistApplyInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyInsertInput(ctx context.Context, v interface{}) (model.DriverBlacklistApplyInsertInput, error) {
	res, err := ec.unmarshalInputDriverBlacklistApplyInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverBlacklistApplyInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverBlacklistApplyInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverBlacklistApplyInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverBlacklistApplyInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDriverBlacklistApplyInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyInsertInput(ctx context.Context, v interface{}) (*model.DriverBlacklistApplyInsertInput, error) {
	res, err := ec.unmarshalInputDriverBlacklistApplyInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverBlacklistApplyOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyOrderBy(ctx context.Context, v interface{}) (*model.DriverBlacklistApplyOrderBy, error) {
	res, err := ec.unmarshalInputDriverBlacklistApplyOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverBlacklistApplySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySelectColumn(ctx context.Context, v interface{}) (model.DriverBlacklistApplySelectColumn, error) {
	var res model.DriverBlacklistApplySelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverBlacklistApplySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverBlacklistApplySelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDriverBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHisᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DriverBlacklistHis) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx context.Context, sel ast.SelectionSet, v *model1.DriverBlacklistHis) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverBlacklistHis(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverBlacklistHisAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, v model.DriverBlacklistHisAggregate) graphql.Marshaler {
	return ec._DriverBlacklistHisAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriverBlacklistHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DriverBlacklistHisAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDriverBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx context.Context, v interface{}) (model.DriverBlacklistHisBoolExp, error) {
	res, err := ec.unmarshalInputDriverBlacklistHisBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverBlacklistHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisInsertInput(ctx context.Context, v interface{}) (model.DriverBlacklistHisInsertInput, error) {
	res, err := ec.unmarshalInputDriverBlacklistHisInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverBlacklistHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DriverBlacklistHisInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverBlacklistHisInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverBlacklistHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDriverBlacklistHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisInsertInput(ctx context.Context, v interface{}) (*model.DriverBlacklistHisInsertInput, error) {
	res, err := ec.unmarshalInputDriverBlacklistHisInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverBlacklistHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisOrderBy(ctx context.Context, v interface{}) (*model.DriverBlacklistHisOrderBy, error) {
	res, err := ec.unmarshalInputDriverBlacklistHisOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDriverBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSelectColumn(ctx context.Context, v interface{}) (model.DriverBlacklistHisSelectColumn, error) {
	var res model.DriverBlacklistHisSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DriverBlacklistHisSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEnterpriseBlacklistAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarmᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseBlacklistAlarm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseBlacklistAlarm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarm(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseBlacklistAlarmAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseBlacklistAlarmAggregate) graphql.Marshaler {
	return ec._EnterpriseBlacklistAlarmAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseBlacklistAlarmAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx context.Context, v interface{}) (model.EnterpriseBlacklistAlarmBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseBlacklistAlarmBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistAlarmInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmInsertInput(ctx context.Context, v interface{}) (model.EnterpriseBlacklistAlarmInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseBlacklistAlarmInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistAlarmInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseBlacklistAlarmInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBlacklistAlarmInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseBlacklistAlarmInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistAlarmInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistAlarmInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseBlacklistAlarmInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistAlarmOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistAlarmOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseBlacklistAlarmOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseBlacklistAlarmSelectColumn, error) {
	var res model.EnterpriseBlacklistAlarmSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseBlacklistAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseBlacklistAlarmSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEnterpriseBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHisᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EnterpriseBlacklistHis) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseBlacklistHis) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHis(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseBlacklistHisAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseBlacklistHisAggregate) graphql.Marshaler {
	return ec._EnterpriseBlacklistHisAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseBlacklistHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx context.Context, v interface{}) (model.EnterpriseBlacklistHisBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseBlacklistHisBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisInsertInput(ctx context.Context, v interface{}) (model.EnterpriseBlacklistHisInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseBlacklistHisInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseBlacklistHisInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBlacklistHisInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseBlacklistHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistHisInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseBlacklistHisInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistHisOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseBlacklistHisOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseBlacklistHisSelectColumn, error) {
	var res model.EnterpriseBlacklistHisSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseBlacklistHisSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleBlacklistAlarm2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarmᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleBlacklistAlarm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleBlacklistAlarm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarm(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleBlacklistAlarmAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleBlacklistAlarmAggregate) graphql.Marshaler {
	return ec._VehicleBlacklistAlarmAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleBlacklistAlarmAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleBlacklistAlarmBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx context.Context, v interface{}) (model.VehicleBlacklistAlarmBoolExp, error) {
	res, err := ec.unmarshalInputVehicleBlacklistAlarmBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleBlacklistAlarmInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmInsertInput(ctx context.Context, v interface{}) (model.VehicleBlacklistAlarmInsertInput, error) {
	res, err := ec.unmarshalInputVehicleBlacklistAlarmInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleBlacklistAlarmInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleBlacklistAlarmInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleBlacklistAlarmInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleBlacklistAlarmInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleBlacklistAlarmInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmInsertInput(ctx context.Context, v interface{}) (*model.VehicleBlacklistAlarmInsertInput, error) {
	res, err := ec.unmarshalInputVehicleBlacklistAlarmInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleBlacklistAlarmOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmOrderBy(ctx context.Context, v interface{}) (*model.VehicleBlacklistAlarmOrderBy, error) {
	res, err := ec.unmarshalInputVehicleBlacklistAlarmOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleBlacklistAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSelectColumn(ctx context.Context, v interface{}) (model.VehicleBlacklistAlarmSelectColumn, error) {
	var res model.VehicleBlacklistAlarmSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleBlacklistAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleBlacklistAlarmSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVehicleBlacklistHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHisᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleBlacklistHis) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleBlacklistHis) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleBlacklistHis(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleBlacklistHisAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleBlacklistHisAggregate) graphql.Marshaler {
	return ec._VehicleBlacklistHisAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleBlacklistHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleBlacklistHisAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleBlacklistHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx context.Context, v interface{}) (model.VehicleBlacklistHisBoolExp, error) {
	res, err := ec.unmarshalInputVehicleBlacklistHisBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleBlacklistHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisInsertInput(ctx context.Context, v interface{}) (model.VehicleBlacklistHisInsertInput, error) {
	res, err := ec.unmarshalInputVehicleBlacklistHisInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleBlacklistHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleBlacklistHisInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleBlacklistHisInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleBlacklistHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleBlacklistHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisInsertInput(ctx context.Context, v interface{}) (*model.VehicleBlacklistHisInsertInput, error) {
	res, err := ec.unmarshalInputVehicleBlacklistHisInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleBlacklistHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisOrderBy(ctx context.Context, v interface{}) (*model.VehicleBlacklistHisOrderBy, error) {
	res, err := ec.unmarshalInputVehicleBlacklistHisOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSelectColumn(ctx context.Context, v interface{}) (model.VehicleBlacklistHisSelectColumn, error) {
	var res model.VehicleBlacklistHisSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleBlacklistHisSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverBlacklistApply2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistApply(ctx context.Context, sel ast.SelectionSet, v *model1.DriverBlacklistApply) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApply(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverBlacklistApplyBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx context.Context, v interface{}) ([]*model.DriverBlacklistApplyBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverBlacklistApplyBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODriverBlacklistApplyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverBlacklistApplyBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyBoolExp(ctx context.Context, v interface{}) (*model.DriverBlacklistApplyBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverBlacklistApplyBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverBlacklistApplyIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyIncInput(ctx context.Context, v interface{}) (*model.DriverBlacklistApplyIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverBlacklistApplyIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverBlacklistApplyMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverBlacklistApplyOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverBlacklistApplyOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverBlacklistApplyOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverBlacklistApplyOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverBlacklistApplySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverBlacklistApplySelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverBlacklistApplySelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverBlacklistApplySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODriverBlacklistApplySelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverBlacklistApplySelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverBlacklistApplySelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODriverBlacklistApplySetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySetInput(ctx context.Context, v interface{}) (*model.DriverBlacklistApplySetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverBlacklistApplySetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverBlacklistApplyStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplySumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplySumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplySumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplySumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistApplyVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistApplyVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistApplyVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistApplyVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐDriverBlacklistHis(ctx context.Context, sel ast.SelectionSet, v *model1.DriverBlacklistHis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHis(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx context.Context, v interface{}) ([]*model.DriverBlacklistHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverBlacklistHisBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODriverBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisBoolExp(ctx context.Context, v interface{}) (*model.DriverBlacklistHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverBlacklistHisBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODriverBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisIncInput(ctx context.Context, v interface{}) (*model.DriverBlacklistHisIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverBlacklistHisIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverBlacklistHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DriverBlacklistHisOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DriverBlacklistHisOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverBlacklistHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODriverBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DriverBlacklistHisSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DriverBlacklistHisSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDriverBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODriverBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DriverBlacklistHisSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODriverBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSetInput(ctx context.Context, v interface{}) (*model.DriverBlacklistHisSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDriverBlacklistHisSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverBlacklistHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODriverBlacklistHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐDriverBlacklistHisVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DriverBlacklistHisVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverBlacklistHisVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistAlarm(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseBlacklistAlarm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarm(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseBlacklistAlarmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBlacklistAlarmBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistAlarmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseBlacklistAlarmBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmIncInput(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistAlarmIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseBlacklistAlarmIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseBlacklistAlarmOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBlacklistAlarmOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseBlacklistAlarmOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseBlacklistAlarmSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseBlacklistAlarmSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseBlacklistAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseBlacklistAlarmSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseBlacklistAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSetInput(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistAlarmSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseBlacklistAlarmSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistAlarmVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistAlarmVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistAlarmVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistAlarmVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐEnterpriseBlacklistHis(ctx context.Context, sel ast.SelectionSet, v *model1.EnterpriseBlacklistHis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHis(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseBlacklistHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBlacklistHisBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseBlacklistHisBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisIncInput(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistHisIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseBlacklistHisIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseBlacklistHisOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBlacklistHisOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseBlacklistHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseBlacklistHisSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseBlacklistHisSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseBlacklistHisSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSetInput(ctx context.Context, v interface{}) (*model.EnterpriseBlacklistHisSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseBlacklistHisSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseBlacklistHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐEnterpriseBlacklistHisVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseBlacklistHisVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseBlacklistHisVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarm2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistAlarm(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleBlacklistAlarm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarm(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleBlacklistAlarmBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleBlacklistAlarmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleBlacklistAlarmBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleBlacklistAlarmBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmBoolExp(ctx context.Context, v interface{}) (*model.VehicleBlacklistAlarmBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleBlacklistAlarmBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleBlacklistAlarmIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmIncInput(ctx context.Context, v interface{}) (*model.VehicleBlacklistAlarmIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleBlacklistAlarmIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleBlacklistAlarmOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleBlacklistAlarmOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleBlacklistAlarmOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleBlacklistAlarmOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleBlacklistAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleBlacklistAlarmSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleBlacklistAlarmSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleBlacklistAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleBlacklistAlarmSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleBlacklistAlarmSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleBlacklistAlarmSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSetInput(ctx context.Context, v interface{}) (*model.VehicleBlacklistAlarmSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleBlacklistAlarmSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistAlarmVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistAlarmVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistAlarmVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistAlarmVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋmodelᚐVehicleBlacklistHis(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleBlacklistHis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHis(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleBlacklistHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleBlacklistHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleBlacklistHisBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleBlacklistHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisBoolExp(ctx context.Context, v interface{}) (*model.VehicleBlacklistHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleBlacklistHisBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleBlacklistHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisIncInput(ctx context.Context, v interface{}) (*model.VehicleBlacklistHisIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleBlacklistHisIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleBlacklistHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleBlacklistHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleBlacklistHisOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleBlacklistHisOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleBlacklistHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleBlacklistHisSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleBlacklistHisSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleBlacklistHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleBlacklistHisSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleBlacklistHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleBlacklistHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSetInput(ctx context.Context, v interface{}) (*model.VehicleBlacklistHisSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleBlacklistHisSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleBlacklistHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleBlacklistHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋblacklistᚋgraphᚋmodelᚐVehicleBlacklistHisVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleBlacklistHisVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleBlacklistHisVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
