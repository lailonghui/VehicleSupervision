// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/blacklist/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "driver_blacklist_apply"
type DriverBlacklistApplyAggregate struct {
	Aggregate *DriverBlacklistApplyAggregateFields `json:"aggregate"`
}

// aggregate fields of "driver_blacklist_apply"
type DriverBlacklistApplyAggregateFields struct {
	Avg        *DriverBlacklistApplyAvgFields        `json:"avg"`
	Count      *int                                  `json:"count"`
	Max        *DriverBlacklistApplyMaxFields        `json:"max"`
	Min        *DriverBlacklistApplyMinFields        `json:"min"`
	Stddev     *DriverBlacklistApplyStddevFields     `json:"stddev"`
	StddevPop  *DriverBlacklistApplyStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverBlacklistApplyStddevSampFields `json:"stddev_samp"`
	Sum        *DriverBlacklistApplySumFields        `json:"sum"`
	VarPop     *DriverBlacklistApplyVarPopFields     `json:"var_pop"`
	VarSamp    *DriverBlacklistApplyVarSampFields    `json:"var_samp"`
	Variance   *DriverBlacklistApplyVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyAvgFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_blacklist_apply'.
type DriverBlacklistApplyBoolExp struct {
	And           []*DriverBlacklistApplyBoolExp  `json:"_and"`
	Not           *DriverBlacklistApplyBoolExp    `json:"_not"`
	Or            []*DriverBlacklistApplyBoolExp  `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	ApplyID       *model.StringComparisonExp      `json:"apply_id"`
	DriverID      *model.StringComparisonExp      `json:"driver_id"`
	ApplyReason   *model.StringComparisonExp      `json:"apply_reason"`
	BlacklistType *model.IntComparisonExp         `json:"blacklist_type"`
	State         *model.IntComparisonExp         `json:"state"`
	CreatedAt     *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy     *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt     *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy     *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt     *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy     *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted     *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "driver_blacklist_apply"
type DriverBlacklistApplyIncInput struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// input type for inserting data into table "driver_blacklist_apply"
type DriverBlacklistApplyInsertInput struct {
	ApplyID       string     `json:"apply_id"`
	DriverID      string     `json:"driver_id"`
	ApplyReason   *string    `json:"apply_reason"`
	BlacklistType *int       `json:"blacklist_type"`
	State         *int       `json:"state"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     bool       `json:"is_deleted"`
}

// aggregate max on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyMaxFields struct {
	ID            *int64     `json:"id"`
	ApplyID       *string    `json:"apply_id"`
	DriverID      *string    `json:"driver_id"`
	ApplyReason   *string    `json:"apply_reason"`
	BlacklistType *int       `json:"blacklist_type"`
	State         *int       `json:"state"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyMinFields struct {
	ID            *int64     `json:"id"`
	ApplyID       *string    `json:"apply_id"`
	DriverID      *string    `json:"driver_id"`
	ApplyReason   *string    `json:"apply_reason"`
	BlacklistType *int       `json:"blacklist_type"`
	State         *int       `json:"state"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// response of any mutation on the table "driver_blacklist_apply"
type DriverBlacklistApplyMutationResponse struct {
	AffectedRows int                            `json:"affected_rows"`
	Returning    []*model1.DriverBlacklistApply `json:"returning"`
}

// ordering options when selecting data from "driver_blacklist_apply"
type DriverBlacklistApplyOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	ApplyID       *model.OrderBy `json:"apply_id"`
	DriverID      *model.OrderBy `json:"driver_id"`
	ApplyReason   *model.OrderBy `json:"apply_reason"`
	BlacklistType *model.OrderBy `json:"blacklist_type"`
	State         *model.OrderBy `json:"state"`
	CreatedAt     *model.OrderBy `json:"created_at"`
	CreatedBy     *model.OrderBy `json:"created_by"`
	UpdatedAt     *model.OrderBy `json:"updated_at"`
	UpdatedBy     *model.OrderBy `json:"updated_by"`
	DeletedAt     *model.OrderBy `json:"deleted_at"`
	DeletedBy     *model.OrderBy `json:"deleted_by"`
	IsDeleted     *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "driver_blacklist_apply"
type DriverBlacklistApplySetInput struct {
	ID            *int64     `json:"id"`
	ApplyID       *string    `json:"apply_id"`
	DriverID      *string    `json:"driver_id"`
	ApplyReason   *string    `json:"apply_reason"`
	BlacklistType *int       `json:"blacklist_type"`
	State         *int       `json:"state"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyStddevFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// aggregate stddev_pop on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyStddevPopFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// aggregate stddev_samp on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyStddevSampFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// aggregate sum on columns of table "driver_blacklist_apply"
type DriverBlacklistApplySumFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// aggregate var_pop on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyVarPopFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// aggregate var_samp on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyVarSampFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// aggregate variance on columns of table "driver_blacklist_apply"
type DriverBlacklistApplyVarianceFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	State         *int   `json:"state"`
}

// aggregated selection of "driver_blacklist_his"
type DriverBlacklistHisAggregate struct {
	Aggregate *DriverBlacklistHisAggregateFields `json:"aggregate"`
}

// aggregate fields of "driver_blacklist_his"
type DriverBlacklistHisAggregateFields struct {
	Avg        *DriverBlacklistHisAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *DriverBlacklistHisMaxFields        `json:"max"`
	Min        *DriverBlacklistHisMinFields        `json:"min"`
	Stddev     *DriverBlacklistHisStddevFields     `json:"stddev"`
	StddevPop  *DriverBlacklistHisStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DriverBlacklistHisStddevSampFields `json:"stddev_samp"`
	Sum        *DriverBlacklistHisSumFields        `json:"sum"`
	VarPop     *DriverBlacklistHisVarPopFields     `json:"var_pop"`
	VarSamp    *DriverBlacklistHisVarSampFields    `json:"var_samp"`
	Variance   *DriverBlacklistHisVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driver_blacklist_his"
type DriverBlacklistHisAvgFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driver_blacklist_his'.
type DriverBlacklistHisBoolExp struct {
	And           []*DriverBlacklistHisBoolExp    `json:"_and"`
	Not           *DriverBlacklistHisBoolExp      `json:"_not"`
	Or            []*DriverBlacklistHisBoolExp    `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	HisID         *model.StringComparisonExp      `json:"his_id"`
	DriverID      *model.StringComparisonExp      `json:"driver_id"`
	BlacklistType *model.IntComparisonExp         `json:"blacklist_type"`
	Operate       *model.IntComparisonExp         `json:"operate"`
	Remarks       *model.StringComparisonExp      `json:"remarks"`
	CreatedAt     *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy     *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt     *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy     *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt     *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy     *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted     *model.BooleanComparisonExp     `json:"is_deleted"`
	AttachFile    *model.StringComparisonExp      `json:"attach_file"`
	Step          *model.IntComparisonExp         `json:"step"`
	ApplyID       *model.StringComparisonExp      `json:"apply_id"`
	DriverCardNum *model.StringComparisonExp      `json:"driver_card_num"`
}

// input type for incrementing integer column in table "driver_blacklist_his"
type DriverBlacklistHisIncInput struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// input type for inserting data into table "driver_blacklist_his"
type DriverBlacklistHisInsertInput struct {
	HisID         string     `json:"his_id"`
	DriverID      string     `json:"driver_id"`
	BlacklistType int        `json:"blacklist_type"`
	Operate       int        `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     bool       `json:"is_deleted"`
	AttachFile    *string    `json:"attach_file"`
	Step          *int       `json:"step"`
	ApplyID       *string    `json:"apply_id"`
	DriverCardNum *string    `json:"driver_card_num"`
}

// aggregate max on columns of table "driver_blacklist_his"
type DriverBlacklistHisMaxFields struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	DriverID      *string    `json:"driver_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	AttachFile    *string    `json:"attach_file"`
	Step          *int       `json:"step"`
	ApplyID       *string    `json:"apply_id"`
	DriverCardNum *string    `json:"driver_card_num"`
}

// aggregate min on columns of table "driver_blacklist_his"
type DriverBlacklistHisMinFields struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	DriverID      *string    `json:"driver_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	AttachFile    *string    `json:"attach_file"`
	Step          *int       `json:"step"`
	ApplyID       *string    `json:"apply_id"`
	DriverCardNum *string    `json:"driver_card_num"`
}

// response of any mutation on the table "driver_blacklist_his"
type DriverBlacklistHisMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.DriverBlacklistHis `json:"returning"`
}

// ordering options when selecting data from "driver_blacklist_his"
type DriverBlacklistHisOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	HisID         *model.OrderBy `json:"his_id"`
	DriverID      *model.OrderBy `json:"driver_id"`
	BlacklistType *model.OrderBy `json:"blacklist_type"`
	Operate       *model.OrderBy `json:"operate"`
	Remarks       *model.OrderBy `json:"remarks"`
	CreatedAt     *model.OrderBy `json:"created_at"`
	CreatedBy     *model.OrderBy `json:"created_by"`
	UpdatedAt     *model.OrderBy `json:"updated_at"`
	UpdatedBy     *model.OrderBy `json:"updated_by"`
	DeletedAt     *model.OrderBy `json:"deleted_at"`
	DeletedBy     *model.OrderBy `json:"deleted_by"`
	IsDeleted     *model.OrderBy `json:"is_deleted"`
	AttachFile    *model.OrderBy `json:"attach_file"`
	Step          *model.OrderBy `json:"step"`
	ApplyID       *model.OrderBy `json:"apply_id"`
	DriverCardNum *model.OrderBy `json:"driver_card_num"`
}

// input type for updating data in table "driver_blacklist_his"
type DriverBlacklistHisSetInput struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	DriverID      *string    `json:"driver_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	AttachFile    *string    `json:"attach_file"`
	Step          *int       `json:"step"`
	ApplyID       *string    `json:"apply_id"`
	DriverCardNum *string    `json:"driver_card_num"`
}

// aggregate stddev on columns of table "driver_blacklist_his"
type DriverBlacklistHisStddevFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// aggregate stddev_pop on columns of table "driver_blacklist_his"
type DriverBlacklistHisStddevPopFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// aggregate stddev_samp on columns of table "driver_blacklist_his"
type DriverBlacklistHisStddevSampFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// aggregate sum on columns of table "driver_blacklist_his"
type DriverBlacklistHisSumFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// aggregate var_pop on columns of table "driver_blacklist_his"
type DriverBlacklistHisVarPopFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// aggregate var_samp on columns of table "driver_blacklist_his"
type DriverBlacklistHisVarSampFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// aggregate variance on columns of table "driver_blacklist_his"
type DriverBlacklistHisVarianceFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
	Step          *int   `json:"step"`
}

// aggregated selection of "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmAggregate struct {
	Aggregate *EnterpriseBlacklistAlarmAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmAggregateFields struct {
	Avg        *EnterpriseBlacklistAlarmAvgFields        `json:"avg"`
	Count      *int                                      `json:"count"`
	Max        *EnterpriseBlacklistAlarmMaxFields        `json:"max"`
	Min        *EnterpriseBlacklistAlarmMinFields        `json:"min"`
	Stddev     *EnterpriseBlacklistAlarmStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseBlacklistAlarmStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseBlacklistAlarmStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseBlacklistAlarmSumFields        `json:"sum"`
	VarPop     *EnterpriseBlacklistAlarmVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseBlacklistAlarmVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseBlacklistAlarmVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmAvgFields struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_blacklist_alarm'.
type EnterpriseBlacklistAlarmBoolExp struct {
	And          []*EnterpriseBlacklistAlarmBoolExp `json:"_and"`
	Not          *EnterpriseBlacklistAlarmBoolExp   `json:"_not"`
	Or           []*EnterpriseBlacklistAlarmBoolExp `json:"_or"`
	ID           *model.BigintComparisonExp         `json:"id"`
	AlarmID      *model.StringComparisonExp         `json:"alarm_id"`
	EnterpriseID *model.StringComparisonExp         `json:"enterprise_id"`
	Type         *model.IntComparisonExp            `json:"type"`
	Year         *model.IntComparisonExp            `json:"year"`
	IsBlack      *model.BooleanComparisonExp        `json:"is_black"`
	IsRank       *model.BooleanComparisonExp        `json:"is_rank"`
	CreatedAt    *model.TimestamptzComparisonExp    `json:"created_at"`
	CreatedBy    *model.StringComparisonExp         `json:"created_by"`
	UpdatedAt    *model.TimestamptzComparisonExp    `json:"updated_at"`
	UpdatedBy    *model.StringComparisonExp         `json:"updated_by"`
	DeletedAt    *model.TimestamptzComparisonExp    `json:"deleted_at"`
	DeletedBy    *model.StringComparisonExp         `json:"deleted_by"`
	IsDeleted    *model.BooleanComparisonExp        `json:"is_deleted"`
}

// input type for incrementing integer column in table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmIncInput struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// input type for inserting data into table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmInsertInput struct {
	AlarmID      string     `json:"alarm_id"`
	EnterpriseID string     `json:"enterprise_id"`
	Type         int        `json:"type"`
	Year         int        `json:"year"`
	IsBlack      bool       `json:"is_black"`
	IsRank       bool       `json:"is_rank"`
	CreatedAt    time.Time  `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
	IsDeleted    *bool      `json:"is_deleted"`
}

// aggregate max on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmMaxFields struct {
	ID           *int64     `json:"id"`
	AlarmID      *string    `json:"alarm_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Type         *int       `json:"type"`
	Year         *int       `json:"year"`
	IsBlack      *bool      `json:"is_black"`
	IsRank       *bool      `json:"is_rank"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
	IsDeleted    *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmMinFields struct {
	ID           *int64     `json:"id"`
	AlarmID      *string    `json:"alarm_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Type         *int       `json:"type"`
	Year         *int       `json:"year"`
	IsBlack      *bool      `json:"is_black"`
	IsRank       *bool      `json:"is_rank"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
	IsDeleted    *bool      `json:"is_deleted"`
}

// response of any mutation on the table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmMutationResponse struct {
	AffectedRows int                                `json:"affected_rows"`
	Returning    []*model1.EnterpriseBlacklistAlarm `json:"returning"`
}

// ordering options when selecting data from "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	AlarmID      *model.OrderBy `json:"alarm_id"`
	EnterpriseID *model.OrderBy `json:"enterprise_id"`
	Type         *model.OrderBy `json:"type"`
	Year         *model.OrderBy `json:"year"`
	IsBlack      *model.OrderBy `json:"is_black"`
	IsRank       *model.OrderBy `json:"is_rank"`
	CreatedAt    *model.OrderBy `json:"created_at"`
	CreatedBy    *model.OrderBy `json:"created_by"`
	UpdatedAt    *model.OrderBy `json:"updated_at"`
	UpdatedBy    *model.OrderBy `json:"updated_by"`
	DeletedAt    *model.OrderBy `json:"deleted_at"`
	DeletedBy    *model.OrderBy `json:"deleted_by"`
	IsDeleted    *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmSetInput struct {
	ID           *int64     `json:"id"`
	AlarmID      *string    `json:"alarm_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Type         *int       `json:"type"`
	Year         *int       `json:"year"`
	IsBlack      *bool      `json:"is_black"`
	IsRank       *bool      `json:"is_rank"`
	CreatedAt    *time.Time `json:"created_at"`
	CreatedBy    *string    `json:"created_by"`
	UpdatedAt    *time.Time `json:"updated_at"`
	UpdatedBy    *string    `json:"updated_by"`
	DeletedAt    *time.Time `json:"deleted_at"`
	DeletedBy    *string    `json:"deleted_by"`
	IsDeleted    *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmStddevFields struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// aggregate stddev_pop on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmStddevPopFields struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// aggregate stddev_samp on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmStddevSampFields struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// aggregate sum on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmSumFields struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// aggregate var_pop on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmVarPopFields struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// aggregate var_samp on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmVarSampFields struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// aggregate variance on columns of table "enterprise_blacklist_alarm"
type EnterpriseBlacklistAlarmVarianceFields struct {
	ID   *int64 `json:"id"`
	Type *int   `json:"type"`
	Year *int   `json:"year"`
}

// aggregated selection of "enterprise_blacklist_his"
type EnterpriseBlacklistHisAggregate struct {
	Aggregate *EnterpriseBlacklistHisAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_blacklist_his"
type EnterpriseBlacklistHisAggregateFields struct {
	Avg        *EnterpriseBlacklistHisAvgFields        `json:"avg"`
	Count      *int                                    `json:"count"`
	Max        *EnterpriseBlacklistHisMaxFields        `json:"max"`
	Min        *EnterpriseBlacklistHisMinFields        `json:"min"`
	Stddev     *EnterpriseBlacklistHisStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseBlacklistHisStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseBlacklistHisStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseBlacklistHisSumFields        `json:"sum"`
	VarPop     *EnterpriseBlacklistHisVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseBlacklistHisVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseBlacklistHisVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisAvgFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_blacklist_his'.
type EnterpriseBlacklistHisBoolExp struct {
	And           []*EnterpriseBlacklistHisBoolExp `json:"_and"`
	Not           *EnterpriseBlacklistHisBoolExp   `json:"_not"`
	Or            []*EnterpriseBlacklistHisBoolExp `json:"_or"`
	ID            *model.BigintComparisonExp       `json:"id"`
	HisID         *model.StringComparisonExp       `json:"his_id"`
	EnterpriseID  *model.StringComparisonExp       `json:"enterprise_id"`
	BlacklistType *model.IntComparisonExp          `json:"blacklist_type"`
	Operate       *model.IntComparisonExp          `json:"operate"`
	Remarks       *model.StringComparisonExp       `json:"remarks"`
	CreatedAt     *model.TimestamptzComparisonExp  `json:"created_at"`
	CreatedBy     *model.StringComparisonExp       `json:"created_by"`
	UpdatedAt     *model.TimestamptzComparisonExp  `json:"updated_at"`
	UpdatedBy     *model.StringComparisonExp       `json:"updated_by"`
	DeletedAt     *model.TimestamptzComparisonExp  `json:"deleted_at"`
	DeletedBy     *model.StringComparisonExp       `json:"deleted_by"`
	IsDeleted     *model.BooleanComparisonExp      `json:"is_deleted"`
}

// input type for incrementing integer column in table "enterprise_blacklist_his"
type EnterpriseBlacklistHisIncInput struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// input type for inserting data into table "enterprise_blacklist_his"
type EnterpriseBlacklistHisInsertInput struct {
	HisID         string     `json:"his_id"`
	EnterpriseID  string     `json:"enterprise_id"`
	BlacklistType int        `json:"blacklist_type"`
	Operate       int        `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     bool       `json:"is_deleted"`
}

// aggregate max on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisMaxFields struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	EnterpriseID  *string    `json:"enterprise_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisMinFields struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	EnterpriseID  *string    `json:"enterprise_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// response of any mutation on the table "enterprise_blacklist_his"
type EnterpriseBlacklistHisMutationResponse struct {
	AffectedRows int                              `json:"affected_rows"`
	Returning    []*model1.EnterpriseBlacklistHis `json:"returning"`
}

// ordering options when selecting data from "enterprise_blacklist_his"
type EnterpriseBlacklistHisOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	HisID         *model.OrderBy `json:"his_id"`
	EnterpriseID  *model.OrderBy `json:"enterprise_id"`
	BlacklistType *model.OrderBy `json:"blacklist_type"`
	Operate       *model.OrderBy `json:"operate"`
	Remarks       *model.OrderBy `json:"remarks"`
	CreatedAt     *model.OrderBy `json:"created_at"`
	CreatedBy     *model.OrderBy `json:"created_by"`
	UpdatedAt     *model.OrderBy `json:"updated_at"`
	UpdatedBy     *model.OrderBy `json:"updated_by"`
	DeletedAt     *model.OrderBy `json:"deleted_at"`
	DeletedBy     *model.OrderBy `json:"deleted_by"`
	IsDeleted     *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "enterprise_blacklist_his"
type EnterpriseBlacklistHisSetInput struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	EnterpriseID  *string    `json:"enterprise_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisStddevFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate stddev_pop on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisStddevPopFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate stddev_samp on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisStddevSampFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate sum on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisSumFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate var_pop on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisVarPopFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate var_samp on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisVarSampFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate variance on columns of table "enterprise_blacklist_his"
type EnterpriseBlacklistHisVarianceFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregated selection of "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmAggregate struct {
	Aggregate *VehicleBlacklistAlarmAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmAggregateFields struct {
	Avg        *VehicleBlacklistAlarmAvgFields        `json:"avg"`
	Count      *int                                   `json:"count"`
	Max        *VehicleBlacklistAlarmMaxFields        `json:"max"`
	Min        *VehicleBlacklistAlarmMinFields        `json:"min"`
	Stddev     *VehicleBlacklistAlarmStddevFields     `json:"stddev"`
	StddevPop  *VehicleBlacklistAlarmStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleBlacklistAlarmStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleBlacklistAlarmSumFields        `json:"sum"`
	VarPop     *VehicleBlacklistAlarmVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleBlacklistAlarmVarSampFields    `json:"var_samp"`
	Variance   *VehicleBlacklistAlarmVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmAvgFields struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_blacklist_alarm'.
type VehicleBlacklistAlarmBoolExp struct {
	And                []*VehicleBlacklistAlarmBoolExp `json:"_and"`
	Not                *VehicleBlacklistAlarmBoolExp   `json:"_not"`
	Or                 []*VehicleBlacklistAlarmBoolExp `json:"_or"`
	ID                 *model.BigintComparisonExp      `json:"id"`
	AlarmID            *model.StringComparisonExp      `json:"alarm_id"`
	VehicleID          *model.StringComparisonExp      `json:"vehicle_id"`
	LicensePlateNumber *model.StringComparisonExp      `json:"license_plate_number"`
	Year               *model.IntComparisonExp         `json:"year"`
	ScoreNum           *model.IntComparisonExp         `json:"score_num"`
	ScoreCount         *model.IntComparisonExp         `json:"score_count"`
	CreatedAt          *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy          *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt          *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy          *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt          *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy          *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted          *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmIncInput struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// input type for inserting data into table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmInsertInput struct {
	AlarmID            string     `json:"alarm_id"`
	VehicleID          string     `json:"vehicle_id"`
	LicensePlateNumber *string    `json:"license_plate_number"`
	Year               *int       `json:"year"`
	ScoreNum           *int       `json:"score_num"`
	ScoreCount         *int       `json:"score_count"`
	CreatedAt          time.Time  `json:"created_at"`
	CreatedBy          *string    `json:"created_by"`
	UpdatedAt          *time.Time `json:"updated_at"`
	UpdatedBy          *string    `json:"updated_by"`
	DeletedAt          *time.Time `json:"deleted_at"`
	DeletedBy          *string    `json:"deleted_by"`
	IsDeleted          bool       `json:"is_deleted"`
}

// aggregate max on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmMaxFields struct {
	ID                 *int64     `json:"id"`
	AlarmID            *string    `json:"alarm_id"`
	VehicleID          *string    `json:"vehicle_id"`
	LicensePlateNumber *string    `json:"license_plate_number"`
	Year               *int       `json:"year"`
	ScoreNum           *int       `json:"score_num"`
	ScoreCount         *int       `json:"score_count"`
	CreatedAt          *time.Time `json:"created_at"`
	CreatedBy          *string    `json:"created_by"`
	UpdatedAt          *time.Time `json:"updated_at"`
	UpdatedBy          *string    `json:"updated_by"`
	DeletedAt          *time.Time `json:"deleted_at"`
	DeletedBy          *string    `json:"deleted_by"`
	IsDeleted          *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmMinFields struct {
	ID                 *int64     `json:"id"`
	AlarmID            *string    `json:"alarm_id"`
	VehicleID          *string    `json:"vehicle_id"`
	LicensePlateNumber *string    `json:"license_plate_number"`
	Year               *int       `json:"year"`
	ScoreNum           *int       `json:"score_num"`
	ScoreCount         *int       `json:"score_count"`
	CreatedAt          *time.Time `json:"created_at"`
	CreatedBy          *string    `json:"created_by"`
	UpdatedAt          *time.Time `json:"updated_at"`
	UpdatedBy          *string    `json:"updated_by"`
	DeletedAt          *time.Time `json:"deleted_at"`
	DeletedBy          *string    `json:"deleted_by"`
	IsDeleted          *bool      `json:"is_deleted"`
}

// response of any mutation on the table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmMutationResponse struct {
	AffectedRows int                             `json:"affected_rows"`
	Returning    []*model1.VehicleBlacklistAlarm `json:"returning"`
}

// ordering options when selecting data from "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmOrderBy struct {
	ID                 *model.OrderBy `json:"id"`
	AlarmID            *model.OrderBy `json:"alarm_id"`
	VehicleID          *model.OrderBy `json:"vehicle_id"`
	LicensePlateNumber *model.OrderBy `json:"license_plate_number"`
	Year               *model.OrderBy `json:"year"`
	ScoreNum           *model.OrderBy `json:"score_num"`
	ScoreCount         *model.OrderBy `json:"score_count"`
	CreatedAt          *model.OrderBy `json:"created_at"`
	CreatedBy          *model.OrderBy `json:"created_by"`
	UpdatedAt          *model.OrderBy `json:"updated_at"`
	UpdatedBy          *model.OrderBy `json:"updated_by"`
	DeletedAt          *model.OrderBy `json:"deleted_at"`
	DeletedBy          *model.OrderBy `json:"deleted_by"`
	IsDeleted          *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmSetInput struct {
	ID                 *int64     `json:"id"`
	AlarmID            *string    `json:"alarm_id"`
	VehicleID          *string    `json:"vehicle_id"`
	LicensePlateNumber *string    `json:"license_plate_number"`
	Year               *int       `json:"year"`
	ScoreNum           *int       `json:"score_num"`
	ScoreCount         *int       `json:"score_count"`
	CreatedAt          *time.Time `json:"created_at"`
	CreatedBy          *string    `json:"created_by"`
	UpdatedAt          *time.Time `json:"updated_at"`
	UpdatedBy          *string    `json:"updated_by"`
	DeletedAt          *time.Time `json:"deleted_at"`
	DeletedBy          *string    `json:"deleted_by"`
	IsDeleted          *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmStddevFields struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// aggregate stddev_pop on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmStddevPopFields struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// aggregate stddev_samp on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmStddevSampFields struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// aggregate sum on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmSumFields struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// aggregate var_pop on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmVarPopFields struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// aggregate var_samp on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmVarSampFields struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// aggregate variance on columns of table "vehicle_blacklist_alarm"
type VehicleBlacklistAlarmVarianceFields struct {
	ID         *int64 `json:"id"`
	Year       *int   `json:"year"`
	ScoreNum   *int   `json:"score_num"`
	ScoreCount *int   `json:"score_count"`
}

// aggregated selection of "vehicle_blacklist_his"
type VehicleBlacklistHisAggregate struct {
	Aggregate *VehicleBlacklistHisAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_blacklist_his"
type VehicleBlacklistHisAggregateFields struct {
	Avg        *VehicleBlacklistHisAvgFields        `json:"avg"`
	Count      *int                                 `json:"count"`
	Max        *VehicleBlacklistHisMaxFields        `json:"max"`
	Min        *VehicleBlacklistHisMinFields        `json:"min"`
	Stddev     *VehicleBlacklistHisStddevFields     `json:"stddev"`
	StddevPop  *VehicleBlacklistHisStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleBlacklistHisStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleBlacklistHisSumFields        `json:"sum"`
	VarPop     *VehicleBlacklistHisVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleBlacklistHisVarSampFields    `json:"var_samp"`
	Variance   *VehicleBlacklistHisVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisAvgFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_blacklist_his'.
type VehicleBlacklistHisBoolExp struct {
	And           []*VehicleBlacklistHisBoolExp   `json:"_and"`
	Not           *VehicleBlacklistHisBoolExp     `json:"_not"`
	Or            []*VehicleBlacklistHisBoolExp   `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	HisID         *model.StringComparisonExp      `json:"his_id"`
	VehicleID     *model.StringComparisonExp      `json:"vehicle_id"`
	BlacklistType *model.IntComparisonExp         `json:"blacklist_type"`
	Operate       *model.IntComparisonExp         `json:"operate"`
	Remarks       *model.StringComparisonExp      `json:"remarks"`
	CreatedAt     *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy     *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt     *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy     *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt     *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy     *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted     *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "vehicle_blacklist_his"
type VehicleBlacklistHisIncInput struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// input type for inserting data into table "vehicle_blacklist_his"
type VehicleBlacklistHisInsertInput struct {
	HisID         string     `json:"his_id"`
	VehicleID     string     `json:"vehicle_id"`
	BlacklistType int        `json:"blacklist_type"`
	Operate       int        `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     bool       `json:"is_deleted"`
}

// aggregate max on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisMaxFields struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	VehicleID     *string    `json:"vehicle_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisMinFields struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	VehicleID     *string    `json:"vehicle_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// response of any mutation on the table "vehicle_blacklist_his"
type VehicleBlacklistHisMutationResponse struct {
	AffectedRows int                           `json:"affected_rows"`
	Returning    []*model1.VehicleBlacklistHis `json:"returning"`
}

// ordering options when selecting data from "vehicle_blacklist_his"
type VehicleBlacklistHisOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	HisID         *model.OrderBy `json:"his_id"`
	VehicleID     *model.OrderBy `json:"vehicle_id"`
	BlacklistType *model.OrderBy `json:"blacklist_type"`
	Operate       *model.OrderBy `json:"operate"`
	Remarks       *model.OrderBy `json:"remarks"`
	CreatedAt     *model.OrderBy `json:"created_at"`
	CreatedBy     *model.OrderBy `json:"created_by"`
	UpdatedAt     *model.OrderBy `json:"updated_at"`
	UpdatedBy     *model.OrderBy `json:"updated_by"`
	DeletedAt     *model.OrderBy `json:"deleted_at"`
	DeletedBy     *model.OrderBy `json:"deleted_by"`
	IsDeleted     *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "vehicle_blacklist_his"
type VehicleBlacklistHisSetInput struct {
	ID            *int64     `json:"id"`
	HisID         *string    `json:"his_id"`
	VehicleID     *string    `json:"vehicle_id"`
	BlacklistType *int       `json:"blacklist_type"`
	Operate       *int       `json:"operate"`
	Remarks       *string    `json:"remarks"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisStddevFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate stddev_pop on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisStddevPopFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate stddev_samp on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisStddevSampFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate sum on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisSumFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate var_pop on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisVarPopFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate var_samp on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisVarSampFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// aggregate variance on columns of table "vehicle_blacklist_his"
type VehicleBlacklistHisVarianceFields struct {
	ID            *int64 `json:"id"`
	BlacklistType *int   `json:"blacklist_type"`
	Operate       *int   `json:"operate"`
}

// 可选select
type DriverBlacklistApplySelectColumn string

const (
	// ID
	DriverBlacklistApplySelectColumnID DriverBlacklistApplySelectColumn = "id"
	// 驾驶员黑名单申请ID
	DriverBlacklistApplySelectColumnApplyID DriverBlacklistApplySelectColumn = "apply_id"
	// 驾驶员ID
	DriverBlacklistApplySelectColumnDriverID DriverBlacklistApplySelectColumn = "driver_id"
	// 申请原因
	DriverBlacklistApplySelectColumnApplyReason DriverBlacklistApplySelectColumn = "apply_reason"
	// 黑名单类型
	DriverBlacklistApplySelectColumnBlacklistType DriverBlacklistApplySelectColumn = "blacklist_type"
	// 状态（1：待交警大队审批2：待交警支队审批，3：退回，4：完成
	DriverBlacklistApplySelectColumnState DriverBlacklistApplySelectColumn = "state"
	// 创建时间
	DriverBlacklistApplySelectColumnCreatedAt DriverBlacklistApplySelectColumn = "created_at"
	// 创建人
	DriverBlacklistApplySelectColumnCreatedBy DriverBlacklistApplySelectColumn = "created_by"
	// 更新时间
	DriverBlacklistApplySelectColumnUpdatedAt DriverBlacklistApplySelectColumn = "updated_at"
	// 更新人
	DriverBlacklistApplySelectColumnUpdatedBy DriverBlacklistApplySelectColumn = "updated_by"
	// 删除时间
	DriverBlacklistApplySelectColumnDeletedAt DriverBlacklistApplySelectColumn = "deleted_at"
	// 删除人
	DriverBlacklistApplySelectColumnDeletedBy DriverBlacklistApplySelectColumn = "deleted_by"
	// 是否删除
	DriverBlacklistApplySelectColumnIsDeleted DriverBlacklistApplySelectColumn = "is_deleted"
)

var AllDriverBlacklistApplySelectColumn = []DriverBlacklistApplySelectColumn{
	DriverBlacklistApplySelectColumnID,
	DriverBlacklistApplySelectColumnApplyID,
	DriverBlacklistApplySelectColumnDriverID,
	DriverBlacklistApplySelectColumnApplyReason,
	DriverBlacklistApplySelectColumnBlacklistType,
	DriverBlacklistApplySelectColumnState,
	DriverBlacklistApplySelectColumnCreatedAt,
	DriverBlacklistApplySelectColumnCreatedBy,
	DriverBlacklistApplySelectColumnUpdatedAt,
	DriverBlacklistApplySelectColumnUpdatedBy,
	DriverBlacklistApplySelectColumnDeletedAt,
	DriverBlacklistApplySelectColumnDeletedBy,
	DriverBlacklistApplySelectColumnIsDeleted,
}

func (e DriverBlacklistApplySelectColumn) IsValid() bool {
	switch e {
	case DriverBlacklistApplySelectColumnID, DriverBlacklistApplySelectColumnApplyID, DriverBlacklistApplySelectColumnDriverID, DriverBlacklistApplySelectColumnApplyReason, DriverBlacklistApplySelectColumnBlacklistType, DriverBlacklistApplySelectColumnState, DriverBlacklistApplySelectColumnCreatedAt, DriverBlacklistApplySelectColumnCreatedBy, DriverBlacklistApplySelectColumnUpdatedAt, DriverBlacklistApplySelectColumnUpdatedBy, DriverBlacklistApplySelectColumnDeletedAt, DriverBlacklistApplySelectColumnDeletedBy, DriverBlacklistApplySelectColumnIsDeleted:
		return true
	}
	return false
}

func (e DriverBlacklistApplySelectColumn) String() string {
	return string(e)
}

func (e *DriverBlacklistApplySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverBlacklistApplySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverBlacklistApplySelectColumn", str)
	}
	return nil
}

func (e DriverBlacklistApplySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DriverBlacklistHisSelectColumn string

const (
	// ID
	DriverBlacklistHisSelectColumnID DriverBlacklistHisSelectColumn = "id"
	// 黑名单记录ID
	DriverBlacklistHisSelectColumnHisID DriverBlacklistHisSelectColumn = "his_id"
	// 驾驶员ID
	DriverBlacklistHisSelectColumnDriverID DriverBlacklistHisSelectColumn = "driver_id"
	// 黑名单类别
	DriverBlacklistHisSelectColumnBlacklistType DriverBlacklistHisSelectColumn = "blacklist_type"
	// 操作类别
	DriverBlacklistHisSelectColumnOperate DriverBlacklistHisSelectColumn = "operate"
	// 备注
	DriverBlacklistHisSelectColumnRemarks DriverBlacklistHisSelectColumn = "remarks"
	// 创建时间
	DriverBlacklistHisSelectColumnCreatedAt DriverBlacklistHisSelectColumn = "created_at"
	// 创建人
	DriverBlacklistHisSelectColumnCreatedBy DriverBlacklistHisSelectColumn = "created_by"
	// 修改时间
	DriverBlacklistHisSelectColumnUpdatedAt DriverBlacklistHisSelectColumn = "updated_at"
	// 修改人
	DriverBlacklistHisSelectColumnUpdatedBy DriverBlacklistHisSelectColumn = "updated_by"
	// 删除时间
	DriverBlacklistHisSelectColumnDeletedAt DriverBlacklistHisSelectColumn = "deleted_at"
	// 删除人
	DriverBlacklistHisSelectColumnDeletedBy DriverBlacklistHisSelectColumn = "deleted_by"
	// 是否删除
	DriverBlacklistHisSelectColumnIsDeleted DriverBlacklistHisSelectColumn = "is_deleted"
	// 附件链接
	DriverBlacklistHisSelectColumnAttachFile DriverBlacklistHisSelectColumn = "attach_file"
	// 进度，执行到哪一步流程
	DriverBlacklistHisSelectColumnStep DriverBlacklistHisSelectColumn = "step"
	// 驾驶员黑名单申请ID
	DriverBlacklistHisSelectColumnApplyID DriverBlacklistHisSelectColumn = "apply_id"
	// 驾驶证号码
	DriverBlacklistHisSelectColumnDriverCardNum DriverBlacklistHisSelectColumn = "driver_card_num"
)

var AllDriverBlacklistHisSelectColumn = []DriverBlacklistHisSelectColumn{
	DriverBlacklistHisSelectColumnID,
	DriverBlacklistHisSelectColumnHisID,
	DriverBlacklistHisSelectColumnDriverID,
	DriverBlacklistHisSelectColumnBlacklistType,
	DriverBlacklistHisSelectColumnOperate,
	DriverBlacklistHisSelectColumnRemarks,
	DriverBlacklistHisSelectColumnCreatedAt,
	DriverBlacklistHisSelectColumnCreatedBy,
	DriverBlacklistHisSelectColumnUpdatedAt,
	DriverBlacklistHisSelectColumnUpdatedBy,
	DriverBlacklistHisSelectColumnDeletedAt,
	DriverBlacklistHisSelectColumnDeletedBy,
	DriverBlacklistHisSelectColumnIsDeleted,
	DriverBlacklistHisSelectColumnAttachFile,
	DriverBlacklistHisSelectColumnStep,
	DriverBlacklistHisSelectColumnApplyID,
	DriverBlacklistHisSelectColumnDriverCardNum,
}

func (e DriverBlacklistHisSelectColumn) IsValid() bool {
	switch e {
	case DriverBlacklistHisSelectColumnID, DriverBlacklistHisSelectColumnHisID, DriverBlacklistHisSelectColumnDriverID, DriverBlacklistHisSelectColumnBlacklistType, DriverBlacklistHisSelectColumnOperate, DriverBlacklistHisSelectColumnRemarks, DriverBlacklistHisSelectColumnCreatedAt, DriverBlacklistHisSelectColumnCreatedBy, DriverBlacklistHisSelectColumnUpdatedAt, DriverBlacklistHisSelectColumnUpdatedBy, DriverBlacklistHisSelectColumnDeletedAt, DriverBlacklistHisSelectColumnDeletedBy, DriverBlacklistHisSelectColumnIsDeleted, DriverBlacklistHisSelectColumnAttachFile, DriverBlacklistHisSelectColumnStep, DriverBlacklistHisSelectColumnApplyID, DriverBlacklistHisSelectColumnDriverCardNum:
		return true
	}
	return false
}

func (e DriverBlacklistHisSelectColumn) String() string {
	return string(e)
}

func (e *DriverBlacklistHisSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverBlacklistHisSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverBlacklistHisSelectColumn", str)
	}
	return nil
}

func (e DriverBlacklistHisSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseBlacklistAlarmSelectColumn string

const (
	// ID
	EnterpriseBlacklistAlarmSelectColumnID EnterpriseBlacklistAlarmSelectColumn = "id"
	// 企业黑名单预警表ID
	EnterpriseBlacklistAlarmSelectColumnAlarmID EnterpriseBlacklistAlarmSelectColumn = "alarm_id"
	// 企业ID
	EnterpriseBlacklistAlarmSelectColumnEnterpriseID EnterpriseBlacklistAlarmSelectColumn = "enterprise_id"
	// 类型
	EnterpriseBlacklistAlarmSelectColumnType EnterpriseBlacklistAlarmSelectColumn = "type"
	// 年份
	EnterpriseBlacklistAlarmSelectColumnYear EnterpriseBlacklistAlarmSelectColumn = "year"
	// 企业的车辆是否10%以上的车进入黑名单
	EnterpriseBlacklistAlarmSelectColumnIsBlack EnterpriseBlacklistAlarmSelectColumn = "is_black"
	// 企业是否连续两个季度违规记分排名前十
	EnterpriseBlacklistAlarmSelectColumnIsRank EnterpriseBlacklistAlarmSelectColumn = "is_rank"
	// 创建时间
	EnterpriseBlacklistAlarmSelectColumnCreatedAt EnterpriseBlacklistAlarmSelectColumn = "created_at"
	// 创建人
	EnterpriseBlacklistAlarmSelectColumnCreatedBy EnterpriseBlacklistAlarmSelectColumn = "created_by"
	// 更新时间
	EnterpriseBlacklistAlarmSelectColumnUpdatedAt EnterpriseBlacklistAlarmSelectColumn = "updated_at"
	// 更新人
	EnterpriseBlacklistAlarmSelectColumnUpdatedBy EnterpriseBlacklistAlarmSelectColumn = "updated_by"
	// 删除时间
	EnterpriseBlacklistAlarmSelectColumnDeletedAt EnterpriseBlacklistAlarmSelectColumn = "deleted_at"
	// 删除人
	EnterpriseBlacklistAlarmSelectColumnDeletedBy EnterpriseBlacklistAlarmSelectColumn = "deleted_by"
	// 是否删除
	EnterpriseBlacklistAlarmSelectColumnIsDeleted EnterpriseBlacklistAlarmSelectColumn = "is_deleted"
)

var AllEnterpriseBlacklistAlarmSelectColumn = []EnterpriseBlacklistAlarmSelectColumn{
	EnterpriseBlacklistAlarmSelectColumnID,
	EnterpriseBlacklistAlarmSelectColumnAlarmID,
	EnterpriseBlacklistAlarmSelectColumnEnterpriseID,
	EnterpriseBlacklistAlarmSelectColumnType,
	EnterpriseBlacklistAlarmSelectColumnYear,
	EnterpriseBlacklistAlarmSelectColumnIsBlack,
	EnterpriseBlacklistAlarmSelectColumnIsRank,
	EnterpriseBlacklistAlarmSelectColumnCreatedAt,
	EnterpriseBlacklistAlarmSelectColumnCreatedBy,
	EnterpriseBlacklistAlarmSelectColumnUpdatedAt,
	EnterpriseBlacklistAlarmSelectColumnUpdatedBy,
	EnterpriseBlacklistAlarmSelectColumnDeletedAt,
	EnterpriseBlacklistAlarmSelectColumnDeletedBy,
	EnterpriseBlacklistAlarmSelectColumnIsDeleted,
}

func (e EnterpriseBlacklistAlarmSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseBlacklistAlarmSelectColumnID, EnterpriseBlacklistAlarmSelectColumnAlarmID, EnterpriseBlacklistAlarmSelectColumnEnterpriseID, EnterpriseBlacklistAlarmSelectColumnType, EnterpriseBlacklistAlarmSelectColumnYear, EnterpriseBlacklistAlarmSelectColumnIsBlack, EnterpriseBlacklistAlarmSelectColumnIsRank, EnterpriseBlacklistAlarmSelectColumnCreatedAt, EnterpriseBlacklistAlarmSelectColumnCreatedBy, EnterpriseBlacklistAlarmSelectColumnUpdatedAt, EnterpriseBlacklistAlarmSelectColumnUpdatedBy, EnterpriseBlacklistAlarmSelectColumnDeletedAt, EnterpriseBlacklistAlarmSelectColumnDeletedBy, EnterpriseBlacklistAlarmSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e EnterpriseBlacklistAlarmSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseBlacklistAlarmSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseBlacklistAlarmSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseBlacklistAlarmSelectColumn", str)
	}
	return nil
}

func (e EnterpriseBlacklistAlarmSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseBlacklistHisSelectColumn string

const (
	// ID
	EnterpriseBlacklistHisSelectColumnID EnterpriseBlacklistHisSelectColumn = "id"
	// 黑名单记录ID
	EnterpriseBlacklistHisSelectColumnHisID EnterpriseBlacklistHisSelectColumn = "his_id"
	// 企业ID
	EnterpriseBlacklistHisSelectColumnEnterpriseID EnterpriseBlacklistHisSelectColumn = "enterprise_id"
	// 黑名单类别
	EnterpriseBlacklistHisSelectColumnBlacklistType EnterpriseBlacklistHisSelectColumn = "blacklist_type"
	// 操作类别
	EnterpriseBlacklistHisSelectColumnOperate EnterpriseBlacklistHisSelectColumn = "operate"
	// 备注
	EnterpriseBlacklistHisSelectColumnRemarks EnterpriseBlacklistHisSelectColumn = "remarks"
	// 创建时间
	EnterpriseBlacklistHisSelectColumnCreatedAt EnterpriseBlacklistHisSelectColumn = "created_at"
	// 创建人
	EnterpriseBlacklistHisSelectColumnCreatedBy EnterpriseBlacklistHisSelectColumn = "created_by"
	// 修改时间
	EnterpriseBlacklistHisSelectColumnUpdatedAt EnterpriseBlacklistHisSelectColumn = "updated_at"
	// 修改人
	EnterpriseBlacklistHisSelectColumnUpdatedBy EnterpriseBlacklistHisSelectColumn = "updated_by"
	// 删除时间
	EnterpriseBlacklistHisSelectColumnDeletedAt EnterpriseBlacklistHisSelectColumn = "deleted_at"
	// 删除人
	EnterpriseBlacklistHisSelectColumnDeletedBy EnterpriseBlacklistHisSelectColumn = "deleted_by"
	// 是否删除
	EnterpriseBlacklistHisSelectColumnIsDeleted EnterpriseBlacklistHisSelectColumn = "is_deleted"
)

var AllEnterpriseBlacklistHisSelectColumn = []EnterpriseBlacklistHisSelectColumn{
	EnterpriseBlacklistHisSelectColumnID,
	EnterpriseBlacklistHisSelectColumnHisID,
	EnterpriseBlacklistHisSelectColumnEnterpriseID,
	EnterpriseBlacklistHisSelectColumnBlacklistType,
	EnterpriseBlacklistHisSelectColumnOperate,
	EnterpriseBlacklistHisSelectColumnRemarks,
	EnterpriseBlacklistHisSelectColumnCreatedAt,
	EnterpriseBlacklistHisSelectColumnCreatedBy,
	EnterpriseBlacklistHisSelectColumnUpdatedAt,
	EnterpriseBlacklistHisSelectColumnUpdatedBy,
	EnterpriseBlacklistHisSelectColumnDeletedAt,
	EnterpriseBlacklistHisSelectColumnDeletedBy,
	EnterpriseBlacklistHisSelectColumnIsDeleted,
}

func (e EnterpriseBlacklistHisSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseBlacklistHisSelectColumnID, EnterpriseBlacklistHisSelectColumnHisID, EnterpriseBlacklistHisSelectColumnEnterpriseID, EnterpriseBlacklistHisSelectColumnBlacklistType, EnterpriseBlacklistHisSelectColumnOperate, EnterpriseBlacklistHisSelectColumnRemarks, EnterpriseBlacklistHisSelectColumnCreatedAt, EnterpriseBlacklistHisSelectColumnCreatedBy, EnterpriseBlacklistHisSelectColumnUpdatedAt, EnterpriseBlacklistHisSelectColumnUpdatedBy, EnterpriseBlacklistHisSelectColumnDeletedAt, EnterpriseBlacklistHisSelectColumnDeletedBy, EnterpriseBlacklistHisSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e EnterpriseBlacklistHisSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseBlacklistHisSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseBlacklistHisSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseBlacklistHisSelectColumn", str)
	}
	return nil
}

func (e EnterpriseBlacklistHisSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleBlacklistAlarmSelectColumn string

const (
	// ID
	VehicleBlacklistAlarmSelectColumnID VehicleBlacklistAlarmSelectColumn = "id"
	// 车辆黑名单警告ID
	VehicleBlacklistAlarmSelectColumnAlarmID VehicleBlacklistAlarmSelectColumn = "alarm_id"
	// 车辆ID
	VehicleBlacklistAlarmSelectColumnVehicleID VehicleBlacklistAlarmSelectColumn = "vehicle_id"
	// 车牌号
	VehicleBlacklistAlarmSelectColumnLicensePlateNumber VehicleBlacklistAlarmSelectColumn = "license_plate_number"
	// 年份
	VehicleBlacklistAlarmSelectColumnYear VehicleBlacklistAlarmSelectColumn = "year"
	// 扣分数量
	VehicleBlacklistAlarmSelectColumnScoreNum VehicleBlacklistAlarmSelectColumn = "score_num"
	// 扣分次数
	VehicleBlacklistAlarmSelectColumnScoreCount VehicleBlacklistAlarmSelectColumn = "score_count"
	// 创建时间
	VehicleBlacklistAlarmSelectColumnCreatedAt VehicleBlacklistAlarmSelectColumn = "created_at"
	// 创建人
	VehicleBlacklistAlarmSelectColumnCreatedBy VehicleBlacklistAlarmSelectColumn = "created_by"
	// 更新时间
	VehicleBlacklistAlarmSelectColumnUpdatedAt VehicleBlacklistAlarmSelectColumn = "updated_at"
	// 更新人
	VehicleBlacklistAlarmSelectColumnUpdatedBy VehicleBlacklistAlarmSelectColumn = "updated_by"
	// 删除时间
	VehicleBlacklistAlarmSelectColumnDeletedAt VehicleBlacklistAlarmSelectColumn = "deleted_at"
	// 删除人
	VehicleBlacklistAlarmSelectColumnDeletedBy VehicleBlacklistAlarmSelectColumn = "deleted_by"
	// 是否删除
	VehicleBlacklistAlarmSelectColumnIsDeleted VehicleBlacklistAlarmSelectColumn = "is_deleted"
)

var AllVehicleBlacklistAlarmSelectColumn = []VehicleBlacklistAlarmSelectColumn{
	VehicleBlacklistAlarmSelectColumnID,
	VehicleBlacklistAlarmSelectColumnAlarmID,
	VehicleBlacklistAlarmSelectColumnVehicleID,
	VehicleBlacklistAlarmSelectColumnLicensePlateNumber,
	VehicleBlacklistAlarmSelectColumnYear,
	VehicleBlacklistAlarmSelectColumnScoreNum,
	VehicleBlacklistAlarmSelectColumnScoreCount,
	VehicleBlacklistAlarmSelectColumnCreatedAt,
	VehicleBlacklistAlarmSelectColumnCreatedBy,
	VehicleBlacklistAlarmSelectColumnUpdatedAt,
	VehicleBlacklistAlarmSelectColumnUpdatedBy,
	VehicleBlacklistAlarmSelectColumnDeletedAt,
	VehicleBlacklistAlarmSelectColumnDeletedBy,
	VehicleBlacklistAlarmSelectColumnIsDeleted,
}

func (e VehicleBlacklistAlarmSelectColumn) IsValid() bool {
	switch e {
	case VehicleBlacklistAlarmSelectColumnID, VehicleBlacklistAlarmSelectColumnAlarmID, VehicleBlacklistAlarmSelectColumnVehicleID, VehicleBlacklistAlarmSelectColumnLicensePlateNumber, VehicleBlacklistAlarmSelectColumnYear, VehicleBlacklistAlarmSelectColumnScoreNum, VehicleBlacklistAlarmSelectColumnScoreCount, VehicleBlacklistAlarmSelectColumnCreatedAt, VehicleBlacklistAlarmSelectColumnCreatedBy, VehicleBlacklistAlarmSelectColumnUpdatedAt, VehicleBlacklistAlarmSelectColumnUpdatedBy, VehicleBlacklistAlarmSelectColumnDeletedAt, VehicleBlacklistAlarmSelectColumnDeletedBy, VehicleBlacklistAlarmSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e VehicleBlacklistAlarmSelectColumn) String() string {
	return string(e)
}

func (e *VehicleBlacklistAlarmSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleBlacklistAlarmSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleBlacklistAlarmSelectColumn", str)
	}
	return nil
}

func (e VehicleBlacklistAlarmSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleBlacklistHisSelectColumn string

const (
	// ID
	VehicleBlacklistHisSelectColumnID VehicleBlacklistHisSelectColumn = "id"
	// 黑名单记录ID
	VehicleBlacklistHisSelectColumnHisID VehicleBlacklistHisSelectColumn = "his_id"
	// 车辆ID
	VehicleBlacklistHisSelectColumnVehicleID VehicleBlacklistHisSelectColumn = "vehicle_id"
	// 黑名单类别
	VehicleBlacklistHisSelectColumnBlacklistType VehicleBlacklistHisSelectColumn = "blacklist_type"
	// 操作类别
	VehicleBlacklistHisSelectColumnOperate VehicleBlacklistHisSelectColumn = "operate"
	// 备注
	VehicleBlacklistHisSelectColumnRemarks VehicleBlacklistHisSelectColumn = "remarks"
	// 创建时间
	VehicleBlacklistHisSelectColumnCreatedAt VehicleBlacklistHisSelectColumn = "created_at"
	// 创建人
	VehicleBlacklistHisSelectColumnCreatedBy VehicleBlacklistHisSelectColumn = "created_by"
	// 修改时间
	VehicleBlacklistHisSelectColumnUpdatedAt VehicleBlacklistHisSelectColumn = "updated_at"
	// 修改人
	VehicleBlacklistHisSelectColumnUpdatedBy VehicleBlacklistHisSelectColumn = "updated_by"
	// 删除时间
	VehicleBlacklistHisSelectColumnDeletedAt VehicleBlacklistHisSelectColumn = "deleted_at"
	// 删除人
	VehicleBlacklistHisSelectColumnDeletedBy VehicleBlacklistHisSelectColumn = "deleted_by"
	// 是否删除
	VehicleBlacklistHisSelectColumnIsDeleted VehicleBlacklistHisSelectColumn = "is_deleted"
)

var AllVehicleBlacklistHisSelectColumn = []VehicleBlacklistHisSelectColumn{
	VehicleBlacklistHisSelectColumnID,
	VehicleBlacklistHisSelectColumnHisID,
	VehicleBlacklistHisSelectColumnVehicleID,
	VehicleBlacklistHisSelectColumnBlacklistType,
	VehicleBlacklistHisSelectColumnOperate,
	VehicleBlacklistHisSelectColumnRemarks,
	VehicleBlacklistHisSelectColumnCreatedAt,
	VehicleBlacklistHisSelectColumnCreatedBy,
	VehicleBlacklistHisSelectColumnUpdatedAt,
	VehicleBlacklistHisSelectColumnUpdatedBy,
	VehicleBlacklistHisSelectColumnDeletedAt,
	VehicleBlacklistHisSelectColumnDeletedBy,
	VehicleBlacklistHisSelectColumnIsDeleted,
}

func (e VehicleBlacklistHisSelectColumn) IsValid() bool {
	switch e {
	case VehicleBlacklistHisSelectColumnID, VehicleBlacklistHisSelectColumnHisID, VehicleBlacklistHisSelectColumnVehicleID, VehicleBlacklistHisSelectColumnBlacklistType, VehicleBlacklistHisSelectColumnOperate, VehicleBlacklistHisSelectColumnRemarks, VehicleBlacklistHisSelectColumnCreatedAt, VehicleBlacklistHisSelectColumnCreatedBy, VehicleBlacklistHisSelectColumnUpdatedAt, VehicleBlacklistHisSelectColumnUpdatedBy, VehicleBlacklistHisSelectColumnDeletedAt, VehicleBlacklistHisSelectColumnDeletedBy, VehicleBlacklistHisSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e VehicleBlacklistHisSelectColumn) String() string {
	return string(e)
}

func (e *VehicleBlacklistHisSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleBlacklistHisSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleBlacklistHisSelectColumn", str)
	}
	return nil
}

func (e VehicleBlacklistHisSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
