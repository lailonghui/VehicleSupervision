// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	model1 "VehicleSupervision/internal/modules/sim/flow/model"
	"VehicleSupervision/internal/modules/sim/flow/query/graph/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Query struct {
		SimCardFlow          func(childComplexity int, distinctOn []model.SimCardFlowSelectColumn, limit *int, offset *int, orderBy []*model.SimCardFlowOrderBy, where *model.SimCardFlowBoolExp) int
		SimCardFlowAggregate func(childComplexity int, distinctOn []model.SimCardFlowSelectColumn, limit *int, offset *int, orderBy []*model.SimCardFlowOrderBy, where *model.SimCardFlowBoolExp) int
		SimCardFlowByPk      func(childComplexity int, id int64) int
	}

	MutationRoot struct {
		DeleteSimCardFlow     func(childComplexity int, where model.SimCardFlowBoolExp) int
		DeleteSimCardFlowByPk func(childComplexity int, id int64) int
		InsertSimCardFlow     func(childComplexity int, objects []*model.SimCardFlowInsertInput, onConflict *model.SimCardFlowOnConflict) int
		InsertSimCardFlowOne  func(childComplexity int, object model.SimCardFlowInsertInput, onConflict *model.SimCardFlowOnConflict) int
		UpdateSimCardFlow     func(childComplexity int, inc *model.SimCardFlowIncInput, set *model.SimCardFlowSetInput, where model.SimCardFlowBoolExp) int
		UpdateSimCardFlowByPk func(childComplexity int, inc *model.SimCardFlowIncInput, set *model.SimCardFlowSetInput, pkColumns model.SimCardFlowPkColumnsInput) int
	}

	SimCardFlow struct {
		CardAvgFlow    func(childComplexity int) int
		CardNoRemark   func(childComplexity int) int
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		EnterpriseID   func(childComplexity int) int
		ID             func(childComplexity int) int
		Iccid          func(childComplexity int) int
		IotCardNo      func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		IsSharePool    func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SimCardFlowID  func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	SimCardFlowAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.SimCardFlowSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	SimCardFlowAvgFields struct {
		CardAvgFlow    func(childComplexity int) int
		ID             func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowMaxFields struct {
		CardAvgFlow    func(childComplexity int) int
		CardNoRemark   func(childComplexity int) int
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		EnterpriseID   func(childComplexity int) int
		ID             func(childComplexity int) int
		Iccid          func(childComplexity int) int
		IotCardNo      func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SimCardFlowID  func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowMinFields struct {
		CardAvgFlow    func(childComplexity int) int
		CardNoRemark   func(childComplexity int) int
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		EnterpriseID   func(childComplexity int) int
		ID             func(childComplexity int) int
		Iccid          func(childComplexity int) int
		IotCardNo      func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SimCardFlowID  func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	SimCardFlowStddevFields struct {
		CardAvgFlow    func(childComplexity int) int
		ID             func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowStddevPopFields struct {
		CardAvgFlow    func(childComplexity int) int
		ID             func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowStddevSampFields struct {
		CardAvgFlow    func(childComplexity int) int
		ID             func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowSumFields struct {
		CardAvgFlow    func(childComplexity int) int
		ID             func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowVarPopFields struct {
		CardAvgFlow    func(childComplexity int) int
		ID             func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowVarSampFields struct {
		CardAvgFlow    func(childComplexity int) int
		ID             func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SimCardFlowVarianceFields struct {
		CardAvgFlow    func(childComplexity int) int
		ID             func(childComplexity int) int
		PoolAvgFlow    func(childComplexity int) int
		SuitFlow       func(childComplexity int) int
		SuitLeftFlow   func(childComplexity int) int
		SuitOverFlow   func(childComplexity int) int
		SuitSmsLeftNum func(childComplexity int) int
		SuitSmsNum     func(childComplexity int) int
		SuitSmsOverNum func(childComplexity int) int
		SuitUseSmsNum  func(childComplexity int) int
		UseFlow        func(childComplexity int) int
	}

	SubscriptionRoot struct {
		SimCardFlow          func(childComplexity int, distinctOn []model.SimCardFlowSelectColumn, limit *int, offset *int, orderBy []*model.SimCardFlowOrderBy, where *model.SimCardFlowBoolExp) int
		SimCardFlowAggregate func(childComplexity int, distinctOn []model.SimCardFlowSelectColumn, limit *int, offset *int, orderBy []*model.SimCardFlowOrderBy, where *model.SimCardFlowBoolExp) int
		SimCardFlowByPk      func(childComplexity int, id int64) int
	}
}

type QueryResolver interface {
	SimCardFlow(ctx context.Context, distinctOn []model.SimCardFlowSelectColumn, limit *int, offset *int, orderBy []*model.SimCardFlowOrderBy, where *model.SimCardFlowBoolExp) ([]*model1.SimCardFlow, error)
	SimCardFlowAggregate(ctx context.Context, distinctOn []model.SimCardFlowSelectColumn, limit *int, offset *int, orderBy []*model.SimCardFlowOrderBy, where *model.SimCardFlowBoolExp) (*model.SimCardFlowAggregate, error)
	SimCardFlowByPk(ctx context.Context, id int64) (*model1.SimCardFlow, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Query.sim_card_flow":
		if e.complexity.Query.SimCardFlow == nil {
			break
		}

		args, err := ec.field_Query_sim_card_flow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SimCardFlow(childComplexity, args["distinct_on"].([]model.SimCardFlowSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SimCardFlowOrderBy), args["where"].(*model.SimCardFlowBoolExp)), true

	case "Query.sim_card_flow_aggregate":
		if e.complexity.Query.SimCardFlowAggregate == nil {
			break
		}

		args, err := ec.field_Query_sim_card_flow_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SimCardFlowAggregate(childComplexity, args["distinct_on"].([]model.SimCardFlowSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SimCardFlowOrderBy), args["where"].(*model.SimCardFlowBoolExp)), true

	case "Query.sim_card_flow_by_pk":
		if e.complexity.Query.SimCardFlowByPk == nil {
			break
		}

		args, err := ec.field_Query_sim_card_flow_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SimCardFlowByPk(childComplexity, args["id"].(int64)), true

	case "mutation_root.delete_sim_card_flow":
		if e.complexity.MutationRoot.DeleteSimCardFlow == nil {
			break
		}

		args, err := ec.field_mutation_root_delete_sim_card_flow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.DeleteSimCardFlow(childComplexity, args["where"].(model.SimCardFlowBoolExp)), true

	case "mutation_root.delete_sim_card_flow_by_pk":
		if e.complexity.MutationRoot.DeleteSimCardFlowByPk == nil {
			break
		}

		args, err := ec.field_mutation_root_delete_sim_card_flow_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.DeleteSimCardFlowByPk(childComplexity, args["id"].(int64)), true

	case "mutation_root.insert_sim_card_flow":
		if e.complexity.MutationRoot.InsertSimCardFlow == nil {
			break
		}

		args, err := ec.field_mutation_root_insert_sim_card_flow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.InsertSimCardFlow(childComplexity, args["objects"].([]*model.SimCardFlowInsertInput), args["on_conflict"].(*model.SimCardFlowOnConflict)), true

	case "mutation_root.insert_sim_card_flow_one":
		if e.complexity.MutationRoot.InsertSimCardFlowOne == nil {
			break
		}

		args, err := ec.field_mutation_root_insert_sim_card_flow_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.InsertSimCardFlowOne(childComplexity, args["object"].(model.SimCardFlowInsertInput), args["on_conflict"].(*model.SimCardFlowOnConflict)), true

	case "mutation_root.update_sim_card_flow":
		if e.complexity.MutationRoot.UpdateSimCardFlow == nil {
			break
		}

		args, err := ec.field_mutation_root_update_sim_card_flow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateSimCardFlow(childComplexity, args["_inc"].(*model.SimCardFlowIncInput), args["_set"].(*model.SimCardFlowSetInput), args["where"].(model.SimCardFlowBoolExp)), true

	case "mutation_root.update_sim_card_flow_by_pk":
		if e.complexity.MutationRoot.UpdateSimCardFlowByPk == nil {
			break
		}

		args, err := ec.field_mutation_root_update_sim_card_flow_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MutationRoot.UpdateSimCardFlowByPk(childComplexity, args["_inc"].(*model.SimCardFlowIncInput), args["_set"].(*model.SimCardFlowSetInput), args["pk_columns"].(model.SimCardFlowPkColumnsInput)), true

	case "sim_card_flow.card_avg_flow":
		if e.complexity.SimCardFlow.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlow.CardAvgFlow(childComplexity), true

	case "sim_card_flow.card_no_remark":
		if e.complexity.SimCardFlow.CardNoRemark == nil {
			break
		}

		return e.complexity.SimCardFlow.CardNoRemark(childComplexity), true

	case "sim_card_flow.create_at":
		if e.complexity.SimCardFlow.CreateAt == nil {
			break
		}

		return e.complexity.SimCardFlow.CreateAt(childComplexity), true

	case "sim_card_flow.create_by":
		if e.complexity.SimCardFlow.CreateBy == nil {
			break
		}

		return e.complexity.SimCardFlow.CreateBy(childComplexity), true

	case "sim_card_flow.delete_at":
		if e.complexity.SimCardFlow.DeleteAt == nil {
			break
		}

		return e.complexity.SimCardFlow.DeleteAt(childComplexity), true

	case "sim_card_flow.delete_by":
		if e.complexity.SimCardFlow.DeleteBy == nil {
			break
		}

		return e.complexity.SimCardFlow.DeleteBy(childComplexity), true

	case "sim_card_flow.enterprise_id":
		if e.complexity.SimCardFlow.EnterpriseID == nil {
			break
		}

		return e.complexity.SimCardFlow.EnterpriseID(childComplexity), true

	case "sim_card_flow.id":
		if e.complexity.SimCardFlow.ID == nil {
			break
		}

		return e.complexity.SimCardFlow.ID(childComplexity), true

	case "sim_card_flow.iccid":
		if e.complexity.SimCardFlow.Iccid == nil {
			break
		}

		return e.complexity.SimCardFlow.Iccid(childComplexity), true

	case "sim_card_flow.iot_card_no":
		if e.complexity.SimCardFlow.IotCardNo == nil {
			break
		}

		return e.complexity.SimCardFlow.IotCardNo(childComplexity), true

	case "sim_card_flow.is_delete":
		if e.complexity.SimCardFlow.IsDelete == nil {
			break
		}

		return e.complexity.SimCardFlow.IsDelete(childComplexity), true

	case "sim_card_flow.is_share_pool":
		if e.complexity.SimCardFlow.IsSharePool == nil {
			break
		}

		return e.complexity.SimCardFlow.IsSharePool(childComplexity), true

	case "sim_card_flow.pool_avg_flow":
		if e.complexity.SimCardFlow.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlow.PoolAvgFlow(childComplexity), true

	case "sim_card_flow.sim_card_flow_id":
		if e.complexity.SimCardFlow.SimCardFlowID == nil {
			break
		}

		return e.complexity.SimCardFlow.SimCardFlowID(childComplexity), true

	case "sim_card_flow.suit_flow":
		if e.complexity.SimCardFlow.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlow.SuitFlow(childComplexity), true

	case "sim_card_flow.suit_left_flow":
		if e.complexity.SimCardFlow.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlow.SuitLeftFlow(childComplexity), true

	case "sim_card_flow.suit_over_flow":
		if e.complexity.SimCardFlow.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlow.SuitOverFlow(childComplexity), true

	case "sim_card_flow.suit_sms_left_num":
		if e.complexity.SimCardFlow.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlow.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow.suit_sms_num":
		if e.complexity.SimCardFlow.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlow.SuitSmsNum(childComplexity), true

	case "sim_card_flow.suit_sms_over_num":
		if e.complexity.SimCardFlow.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlow.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow.suit_use_sms_num":
		if e.complexity.SimCardFlow.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlow.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow.update_at":
		if e.complexity.SimCardFlow.UpdateAt == nil {
			break
		}

		return e.complexity.SimCardFlow.UpdateAt(childComplexity), true

	case "sim_card_flow.update_by":
		if e.complexity.SimCardFlow.UpdateBy == nil {
			break
		}

		return e.complexity.SimCardFlow.UpdateBy(childComplexity), true

	case "sim_card_flow.use_flow":
		if e.complexity.SimCardFlow.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlow.UseFlow(childComplexity), true

	case "sim_card_flow_aggregate.aggregate":
		if e.complexity.SimCardFlowAggregate.Aggregate == nil {
			break
		}

		return e.complexity.SimCardFlowAggregate.Aggregate(childComplexity), true

	case "sim_card_flow_aggregate.nodes":
		if e.complexity.SimCardFlowAggregate.Nodes == nil {
			break
		}

		return e.complexity.SimCardFlowAggregate.Nodes(childComplexity), true

	case "sim_card_flow_aggregate_fields.avg":
		if e.complexity.SimCardFlowAggregateFields.Avg == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.Avg(childComplexity), true

	case "sim_card_flow_aggregate_fields.count":
		if e.complexity.SimCardFlowAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_sim_card_flow_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SimCardFlowAggregateFields.Count(childComplexity, args["columns"].([]model.SimCardFlowSelectColumn), args["distinct"].(*bool)), true

	case "sim_card_flow_aggregate_fields.max":
		if e.complexity.SimCardFlowAggregateFields.Max == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.Max(childComplexity), true

	case "sim_card_flow_aggregate_fields.min":
		if e.complexity.SimCardFlowAggregateFields.Min == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.Min(childComplexity), true

	case "sim_card_flow_aggregate_fields.stddev":
		if e.complexity.SimCardFlowAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.Stddev(childComplexity), true

	case "sim_card_flow_aggregate_fields.stddev_pop":
		if e.complexity.SimCardFlowAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.StddevPop(childComplexity), true

	case "sim_card_flow_aggregate_fields.stddev_samp":
		if e.complexity.SimCardFlowAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.StddevSamp(childComplexity), true

	case "sim_card_flow_aggregate_fields.sum":
		if e.complexity.SimCardFlowAggregateFields.Sum == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.Sum(childComplexity), true

	case "sim_card_flow_aggregate_fields.var_pop":
		if e.complexity.SimCardFlowAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.VarPop(childComplexity), true

	case "sim_card_flow_aggregate_fields.var_samp":
		if e.complexity.SimCardFlowAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.VarSamp(childComplexity), true

	case "sim_card_flow_aggregate_fields.variance":
		if e.complexity.SimCardFlowAggregateFields.Variance == nil {
			break
		}

		return e.complexity.SimCardFlowAggregateFields.Variance(childComplexity), true

	case "sim_card_flow_avg_fields.card_avg_flow":
		if e.complexity.SimCardFlowAvgFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_avg_fields.id":
		if e.complexity.SimCardFlowAvgFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.ID(childComplexity), true

	case "sim_card_flow_avg_fields.pool_avg_flow":
		if e.complexity.SimCardFlowAvgFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_avg_fields.suit_flow":
		if e.complexity.SimCardFlowAvgFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.SuitFlow(childComplexity), true

	case "sim_card_flow_avg_fields.suit_left_flow":
		if e.complexity.SimCardFlowAvgFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_avg_fields.suit_over_flow":
		if e.complexity.SimCardFlowAvgFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_avg_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowAvgFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_avg_fields.suit_sms_num":
		if e.complexity.SimCardFlowAvgFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_avg_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowAvgFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_avg_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowAvgFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_avg_fields.use_flow":
		if e.complexity.SimCardFlowAvgFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowAvgFields.UseFlow(childComplexity), true

	case "sim_card_flow_max_fields.card_avg_flow":
		if e.complexity.SimCardFlowMaxFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_max_fields.card_no_remark":
		if e.complexity.SimCardFlowMaxFields.CardNoRemark == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.CardNoRemark(childComplexity), true

	case "sim_card_flow_max_fields.create_at":
		if e.complexity.SimCardFlowMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.CreateAt(childComplexity), true

	case "sim_card_flow_max_fields.create_by":
		if e.complexity.SimCardFlowMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.CreateBy(childComplexity), true

	case "sim_card_flow_max_fields.delete_at":
		if e.complexity.SimCardFlowMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.DeleteAt(childComplexity), true

	case "sim_card_flow_max_fields.delete_by":
		if e.complexity.SimCardFlowMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.DeleteBy(childComplexity), true

	case "sim_card_flow_max_fields.enterprise_id":
		if e.complexity.SimCardFlowMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.EnterpriseID(childComplexity), true

	case "sim_card_flow_max_fields.id":
		if e.complexity.SimCardFlowMaxFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.ID(childComplexity), true

	case "sim_card_flow_max_fields.iccid":
		if e.complexity.SimCardFlowMaxFields.Iccid == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.Iccid(childComplexity), true

	case "sim_card_flow_max_fields.iot_card_no":
		if e.complexity.SimCardFlowMaxFields.IotCardNo == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.IotCardNo(childComplexity), true

	case "sim_card_flow_max_fields.pool_avg_flow":
		if e.complexity.SimCardFlowMaxFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_max_fields.sim_card_flow_id":
		if e.complexity.SimCardFlowMaxFields.SimCardFlowID == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.SimCardFlowID(childComplexity), true

	case "sim_card_flow_max_fields.suit_flow":
		if e.complexity.SimCardFlowMaxFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.SuitFlow(childComplexity), true

	case "sim_card_flow_max_fields.suit_left_flow":
		if e.complexity.SimCardFlowMaxFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_max_fields.suit_over_flow":
		if e.complexity.SimCardFlowMaxFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_max_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowMaxFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_max_fields.suit_sms_num":
		if e.complexity.SimCardFlowMaxFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_max_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowMaxFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_max_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowMaxFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_max_fields.update_at":
		if e.complexity.SimCardFlowMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.UpdateAt(childComplexity), true

	case "sim_card_flow_max_fields.update_by":
		if e.complexity.SimCardFlowMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.UpdateBy(childComplexity), true

	case "sim_card_flow_max_fields.use_flow":
		if e.complexity.SimCardFlowMaxFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMaxFields.UseFlow(childComplexity), true

	case "sim_card_flow_min_fields.card_avg_flow":
		if e.complexity.SimCardFlowMinFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_min_fields.card_no_remark":
		if e.complexity.SimCardFlowMinFields.CardNoRemark == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.CardNoRemark(childComplexity), true

	case "sim_card_flow_min_fields.create_at":
		if e.complexity.SimCardFlowMinFields.CreateAt == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.CreateAt(childComplexity), true

	case "sim_card_flow_min_fields.create_by":
		if e.complexity.SimCardFlowMinFields.CreateBy == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.CreateBy(childComplexity), true

	case "sim_card_flow_min_fields.delete_at":
		if e.complexity.SimCardFlowMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.DeleteAt(childComplexity), true

	case "sim_card_flow_min_fields.delete_by":
		if e.complexity.SimCardFlowMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.DeleteBy(childComplexity), true

	case "sim_card_flow_min_fields.enterprise_id":
		if e.complexity.SimCardFlowMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.EnterpriseID(childComplexity), true

	case "sim_card_flow_min_fields.id":
		if e.complexity.SimCardFlowMinFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.ID(childComplexity), true

	case "sim_card_flow_min_fields.iccid":
		if e.complexity.SimCardFlowMinFields.Iccid == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.Iccid(childComplexity), true

	case "sim_card_flow_min_fields.iot_card_no":
		if e.complexity.SimCardFlowMinFields.IotCardNo == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.IotCardNo(childComplexity), true

	case "sim_card_flow_min_fields.pool_avg_flow":
		if e.complexity.SimCardFlowMinFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_min_fields.sim_card_flow_id":
		if e.complexity.SimCardFlowMinFields.SimCardFlowID == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.SimCardFlowID(childComplexity), true

	case "sim_card_flow_min_fields.suit_flow":
		if e.complexity.SimCardFlowMinFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.SuitFlow(childComplexity), true

	case "sim_card_flow_min_fields.suit_left_flow":
		if e.complexity.SimCardFlowMinFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_min_fields.suit_over_flow":
		if e.complexity.SimCardFlowMinFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_min_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowMinFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_min_fields.suit_sms_num":
		if e.complexity.SimCardFlowMinFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_min_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowMinFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_min_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowMinFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_min_fields.update_at":
		if e.complexity.SimCardFlowMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.UpdateAt(childComplexity), true

	case "sim_card_flow_min_fields.update_by":
		if e.complexity.SimCardFlowMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.UpdateBy(childComplexity), true

	case "sim_card_flow_min_fields.use_flow":
		if e.complexity.SimCardFlowMinFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowMinFields.UseFlow(childComplexity), true

	case "sim_card_flow_mutation_response.affected_rows":
		if e.complexity.SimCardFlowMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.SimCardFlowMutationResponse.AffectedRows(childComplexity), true

	case "sim_card_flow_mutation_response.returning":
		if e.complexity.SimCardFlowMutationResponse.Returning == nil {
			break
		}

		return e.complexity.SimCardFlowMutationResponse.Returning(childComplexity), true

	case "sim_card_flow_stddev_fields.card_avg_flow":
		if e.complexity.SimCardFlowStddevFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_stddev_fields.id":
		if e.complexity.SimCardFlowStddevFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.ID(childComplexity), true

	case "sim_card_flow_stddev_fields.pool_avg_flow":
		if e.complexity.SimCardFlowStddevFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_stddev_fields.suit_flow":
		if e.complexity.SimCardFlowStddevFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.SuitFlow(childComplexity), true

	case "sim_card_flow_stddev_fields.suit_left_flow":
		if e.complexity.SimCardFlowStddevFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_stddev_fields.suit_over_flow":
		if e.complexity.SimCardFlowStddevFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_stddev_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowStddevFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_stddev_fields.suit_sms_num":
		if e.complexity.SimCardFlowStddevFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_stddev_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowStddevFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_stddev_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowStddevFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_stddev_fields.use_flow":
		if e.complexity.SimCardFlowStddevFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevFields.UseFlow(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.card_avg_flow":
		if e.complexity.SimCardFlowStddevPopFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.id":
		if e.complexity.SimCardFlowStddevPopFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.ID(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.pool_avg_flow":
		if e.complexity.SimCardFlowStddevPopFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.suit_flow":
		if e.complexity.SimCardFlowStddevPopFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.SuitFlow(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.suit_left_flow":
		if e.complexity.SimCardFlowStddevPopFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.suit_over_flow":
		if e.complexity.SimCardFlowStddevPopFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowStddevPopFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.suit_sms_num":
		if e.complexity.SimCardFlowStddevPopFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowStddevPopFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowStddevPopFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_stddev_pop_fields.use_flow":
		if e.complexity.SimCardFlowStddevPopFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevPopFields.UseFlow(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.card_avg_flow":
		if e.complexity.SimCardFlowStddevSampFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.id":
		if e.complexity.SimCardFlowStddevSampFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.ID(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.pool_avg_flow":
		if e.complexity.SimCardFlowStddevSampFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.suit_flow":
		if e.complexity.SimCardFlowStddevSampFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.SuitFlow(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.suit_left_flow":
		if e.complexity.SimCardFlowStddevSampFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.suit_over_flow":
		if e.complexity.SimCardFlowStddevSampFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowStddevSampFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.suit_sms_num":
		if e.complexity.SimCardFlowStddevSampFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowStddevSampFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowStddevSampFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_stddev_samp_fields.use_flow":
		if e.complexity.SimCardFlowStddevSampFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowStddevSampFields.UseFlow(childComplexity), true

	case "sim_card_flow_sum_fields.card_avg_flow":
		if e.complexity.SimCardFlowSumFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_sum_fields.id":
		if e.complexity.SimCardFlowSumFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.ID(childComplexity), true

	case "sim_card_flow_sum_fields.pool_avg_flow":
		if e.complexity.SimCardFlowSumFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_sum_fields.suit_flow":
		if e.complexity.SimCardFlowSumFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.SuitFlow(childComplexity), true

	case "sim_card_flow_sum_fields.suit_left_flow":
		if e.complexity.SimCardFlowSumFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_sum_fields.suit_over_flow":
		if e.complexity.SimCardFlowSumFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_sum_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowSumFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_sum_fields.suit_sms_num":
		if e.complexity.SimCardFlowSumFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_sum_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowSumFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_sum_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowSumFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_sum_fields.use_flow":
		if e.complexity.SimCardFlowSumFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowSumFields.UseFlow(childComplexity), true

	case "sim_card_flow_var_pop_fields.card_avg_flow":
		if e.complexity.SimCardFlowVarPopFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_var_pop_fields.id":
		if e.complexity.SimCardFlowVarPopFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.ID(childComplexity), true

	case "sim_card_flow_var_pop_fields.pool_avg_flow":
		if e.complexity.SimCardFlowVarPopFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_var_pop_fields.suit_flow":
		if e.complexity.SimCardFlowVarPopFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.SuitFlow(childComplexity), true

	case "sim_card_flow_var_pop_fields.suit_left_flow":
		if e.complexity.SimCardFlowVarPopFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_var_pop_fields.suit_over_flow":
		if e.complexity.SimCardFlowVarPopFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_var_pop_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowVarPopFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_var_pop_fields.suit_sms_num":
		if e.complexity.SimCardFlowVarPopFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_var_pop_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowVarPopFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_var_pop_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowVarPopFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_var_pop_fields.use_flow":
		if e.complexity.SimCardFlowVarPopFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarPopFields.UseFlow(childComplexity), true

	case "sim_card_flow_var_samp_fields.card_avg_flow":
		if e.complexity.SimCardFlowVarSampFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_var_samp_fields.id":
		if e.complexity.SimCardFlowVarSampFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.ID(childComplexity), true

	case "sim_card_flow_var_samp_fields.pool_avg_flow":
		if e.complexity.SimCardFlowVarSampFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_var_samp_fields.suit_flow":
		if e.complexity.SimCardFlowVarSampFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.SuitFlow(childComplexity), true

	case "sim_card_flow_var_samp_fields.suit_left_flow":
		if e.complexity.SimCardFlowVarSampFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_var_samp_fields.suit_over_flow":
		if e.complexity.SimCardFlowVarSampFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_var_samp_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowVarSampFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_var_samp_fields.suit_sms_num":
		if e.complexity.SimCardFlowVarSampFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_var_samp_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowVarSampFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_var_samp_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowVarSampFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_var_samp_fields.use_flow":
		if e.complexity.SimCardFlowVarSampFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarSampFields.UseFlow(childComplexity), true

	case "sim_card_flow_variance_fields.card_avg_flow":
		if e.complexity.SimCardFlowVarianceFields.CardAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.CardAvgFlow(childComplexity), true

	case "sim_card_flow_variance_fields.id":
		if e.complexity.SimCardFlowVarianceFields.ID == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.ID(childComplexity), true

	case "sim_card_flow_variance_fields.pool_avg_flow":
		if e.complexity.SimCardFlowVarianceFields.PoolAvgFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.PoolAvgFlow(childComplexity), true

	case "sim_card_flow_variance_fields.suit_flow":
		if e.complexity.SimCardFlowVarianceFields.SuitFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.SuitFlow(childComplexity), true

	case "sim_card_flow_variance_fields.suit_left_flow":
		if e.complexity.SimCardFlowVarianceFields.SuitLeftFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.SuitLeftFlow(childComplexity), true

	case "sim_card_flow_variance_fields.suit_over_flow":
		if e.complexity.SimCardFlowVarianceFields.SuitOverFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.SuitOverFlow(childComplexity), true

	case "sim_card_flow_variance_fields.suit_sms_left_num":
		if e.complexity.SimCardFlowVarianceFields.SuitSmsLeftNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.SuitSmsLeftNum(childComplexity), true

	case "sim_card_flow_variance_fields.suit_sms_num":
		if e.complexity.SimCardFlowVarianceFields.SuitSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.SuitSmsNum(childComplexity), true

	case "sim_card_flow_variance_fields.suit_sms_over_num":
		if e.complexity.SimCardFlowVarianceFields.SuitSmsOverNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.SuitSmsOverNum(childComplexity), true

	case "sim_card_flow_variance_fields.suit_use_sms_num":
		if e.complexity.SimCardFlowVarianceFields.SuitUseSmsNum == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.SuitUseSmsNum(childComplexity), true

	case "sim_card_flow_variance_fields.use_flow":
		if e.complexity.SimCardFlowVarianceFields.UseFlow == nil {
			break
		}

		return e.complexity.SimCardFlowVarianceFields.UseFlow(childComplexity), true

	case "subscription_root.sim_card_flow":
		if e.complexity.SubscriptionRoot.SimCardFlow == nil {
			break
		}

		args, err := ec.field_subscription_root_sim_card_flow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.SimCardFlow(childComplexity, args["distinct_on"].([]model.SimCardFlowSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SimCardFlowOrderBy), args["where"].(*model.SimCardFlowBoolExp)), true

	case "subscription_root.sim_card_flow_aggregate":
		if e.complexity.SubscriptionRoot.SimCardFlowAggregate == nil {
			break
		}

		args, err := ec.field_subscription_root_sim_card_flow_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.SimCardFlowAggregate(childComplexity, args["distinct_on"].([]model.SimCardFlowSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SimCardFlowOrderBy), args["where"].(*model.SimCardFlowBoolExp)), true

	case "subscription_root.sim_card_flow_by_pk":
		if e.complexity.SubscriptionRoot.SimCardFlowByPk == nil {
			break
		}

		args, err := ec.field_subscription_root_sim_card_flow_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.SimCardFlowByPk(childComplexity, args["id"].(int64)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/generate.graphqls", Input: `
scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "sim_card_flow"
  """
  delete_sim_card_flow(
    """filter the rows which have to be deleted"""
    where: sim_card_flow_bool_exp!
  ): sim_card_flow_mutation_response

  """
  delete single row from the table: "sim_card_flow"
  """
  delete_sim_card_flow_by_pk(
    """ID"""
    id: bigint!
  ): sim_card_flow

  """
  insert data into the table: "sim_card_flow"
  """
  insert_sim_card_flow(
    """the rows to be inserted"""
    objects: [sim_card_flow_insert_input!]!

    """on conflict condition"""
    on_conflict: sim_card_flow_on_conflict
  ): sim_card_flow_mutation_response

  """
  insert a single row into the table: "sim_card_flow"
  """
  insert_sim_card_flow_one(
    """the row to be inserted"""
    object: sim_card_flow_insert_input!

    """on conflict condition"""
    on_conflict: sim_card_flow_on_conflict
  ): sim_card_flow

  """
  update data of the table: "sim_card_flow"
  """
  update_sim_card_flow(
    """increments the integer columns with given value of the filtered values"""
    _inc: sim_card_flow_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sim_card_flow_set_input

    """filter the rows which have to be updated"""
    where: sim_card_flow_bool_exp!
  ): sim_card_flow_mutation_response

  """
  update single row of the table: "sim_card_flow"
  """
  update_sim_card_flow_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: sim_card_flow_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sim_card_flow_set_input
    pk_columns: sim_card_flow_pk_columns_input!
  ): sim_card_flow
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type Query {
  """
  fetch data from the table: "sim_card_flow"
  """
  sim_card_flow(
    """distinct select on columns"""
    distinct_on: [sim_card_flow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sim_card_flow_order_by!]

    """filter the rows returned"""
    where: sim_card_flow_bool_exp
  ): [sim_card_flow!]!

  """
  fetch aggregated fields from the table: "sim_card_flow"
  """
  sim_card_flow_aggregate(
    """distinct select on columns"""
    distinct_on: [sim_card_flow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sim_card_flow_order_by!]

    """filter the rows returned"""
    where: sim_card_flow_bool_exp
  ): sim_card_flow_aggregate!

  """fetch data from the table: "sim_card_flow" using primary key columns"""
  sim_card_flow_by_pk(
    """ID"""
    id: bigint!
  ): sim_card_flow
}

"""
sim卡流量信息


columns and relationships of "sim_card_flow"

"""
type sim_card_flow {
  """已产生流量卡均流量(KB)"""
  card_avg_flow: numeric

  """卡号备注"""
  card_no_remark: String

  """创建时间"""
  create_at: timestamptz!

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """企业ID"""
  enterprise_id: String

  """ICCID"""
  iccid: String

  """ID"""
  id: bigint!

  """物联卡号"""
  iot_card_no: String!

  """是否删除"""
  is_delete: Boolean!

  """是否共享池"""
  is_share_pool: Boolean!

  """流量池卡均流量(KB)"""
  pool_avg_flow: numeric

  """SIM卡流量ID"""
  sim_card_flow_id: String!

  """套餐流量(MB)"""
  suit_flow: numeric

  """套餐剩余流量(MB)"""
  suit_left_flow: numeric

  """已超套餐流量(MB)"""
  suit_over_flow: numeric

  """套餐剩余短信条数"""
  suit_sms_left_num: Int

  """套餐短信条数"""
  suit_sms_num: Int

  """已超套餐短信条数"""
  suit_sms_over_num: Int

  """上行短信已用条数"""
  suit_use_sms_num: Int

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String

  """数据服务已用流量(KB)"""
  use_flow: numeric
}

"""
aggregated selection of "sim_card_flow"
"""
type sim_card_flow_aggregate {
  aggregate: sim_card_flow_aggregate_fields
  nodes: [sim_card_flow!]!
}

"""
aggregate fields of "sim_card_flow"
"""
type sim_card_flow_aggregate_fields {
  avg: sim_card_flow_avg_fields
  count(columns: [sim_card_flow_select_column!], distinct: Boolean): Int
  max: sim_card_flow_max_fields
  min: sim_card_flow_min_fields
  stddev: sim_card_flow_stddev_fields
  stddev_pop: sim_card_flow_stddev_pop_fields
  stddev_samp: sim_card_flow_stddev_samp_fields
  sum: sim_card_flow_sum_fields
  var_pop: sim_card_flow_var_pop_fields
  var_samp: sim_card_flow_var_samp_fields
  variance: sim_card_flow_variance_fields
}

"""
order by aggregate values of table "sim_card_flow"
"""
input sim_card_flow_aggregate_order_by {
  avg: sim_card_flow_avg_order_by
  count: order_by
  max: sim_card_flow_max_order_by
  min: sim_card_flow_min_order_by
  stddev: sim_card_flow_stddev_order_by
  stddev_pop: sim_card_flow_stddev_pop_order_by
  stddev_samp: sim_card_flow_stddev_samp_order_by
  sum: sim_card_flow_sum_order_by
  var_pop: sim_card_flow_var_pop_order_by
  var_samp: sim_card_flow_var_samp_order_by
  variance: sim_card_flow_variance_order_by
}

"""
input type for inserting array relation for remote table "sim_card_flow"
"""
input sim_card_flow_arr_rel_insert_input {
  data: [sim_card_flow_insert_input!]!
  on_conflict: sim_card_flow_on_conflict
}

"""aggregate avg on columns"""
type sim_card_flow_avg_fields {
  card_avg_flow: Float
  id: Float
  pool_avg_flow: Float
  suit_flow: Float
  suit_left_flow: Float
  suit_over_flow: Float
  suit_sms_left_num: Float
  suit_sms_num: Float
  suit_sms_over_num: Float
  suit_use_sms_num: Float
  use_flow: Float
}

"""
order by avg() on columns of table "sim_card_flow"
"""
input sim_card_flow_avg_order_by {
  card_avg_flow: order_by
  id: order_by
  pool_avg_flow: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  use_flow: order_by
}

"""
Boolean expression to filter rows from the table "sim_card_flow". All fields are combined with a logical 'AND'.
"""
input sim_card_flow_bool_exp {
  _and: [sim_card_flow_bool_exp]
  _not: sim_card_flow_bool_exp
  _or: [sim_card_flow_bool_exp]
  card_avg_flow: numeric_comparison_exp
  card_no_remark: String_comparison_exp
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  enterprise_id: String_comparison_exp
  iccid: String_comparison_exp
  id: bigint_comparison_exp
  iot_card_no: String_comparison_exp
  is_delete: Boolean_comparison_exp
  is_share_pool: Boolean_comparison_exp
  pool_avg_flow: numeric_comparison_exp
  sim_card_flow_id: String_comparison_exp
  suit_flow: numeric_comparison_exp
  suit_left_flow: numeric_comparison_exp
  suit_over_flow: numeric_comparison_exp
  suit_sms_left_num: Int_comparison_exp
  suit_sms_num: Int_comparison_exp
  suit_sms_over_num: Int_comparison_exp
  suit_use_sms_num: Int_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  use_flow: numeric_comparison_exp
}

"""
unique or primary key constraints on table "sim_card_flow"
"""
enum sim_card_flow_constraint {
  """unique or primary key constraint"""
  sim_card_flow_pkey
}

"""
input type for incrementing integer column in table "sim_card_flow"
"""
input sim_card_flow_inc_input {
  card_avg_flow: numeric
  id: bigint
  pool_avg_flow: numeric
  suit_flow: numeric
  suit_left_flow: numeric
  suit_over_flow: numeric
  suit_sms_left_num: Int
  suit_sms_num: Int
  suit_sms_over_num: Int
  suit_use_sms_num: Int
  use_flow: numeric
}

"""
input type for inserting data into table "sim_card_flow"
"""
input sim_card_flow_insert_input {
  card_avg_flow: numeric
  card_no_remark: String
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  enterprise_id: String
  iccid: String
  id: bigint
  iot_card_no: String
  is_delete: Boolean
  is_share_pool: Boolean
  pool_avg_flow: numeric
  sim_card_flow_id: String
  suit_flow: numeric
  suit_left_flow: numeric
  suit_over_flow: numeric
  suit_sms_left_num: Int
  suit_sms_num: Int
  suit_sms_over_num: Int
  suit_use_sms_num: Int
  update_at: timestamptz
  update_by: String
  use_flow: numeric
}

"""aggregate max on columns"""
type sim_card_flow_max_fields {
  card_avg_flow: numeric
  card_no_remark: String
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  enterprise_id: String
  iccid: String
  id: bigint
  iot_card_no: String
  pool_avg_flow: numeric
  sim_card_flow_id: String
  suit_flow: numeric
  suit_left_flow: numeric
  suit_over_flow: numeric
  suit_sms_left_num: Int
  suit_sms_num: Int
  suit_sms_over_num: Int
  suit_use_sms_num: Int
  update_at: timestamptz
  update_by: String
  use_flow: numeric
}

"""
order by max() on columns of table "sim_card_flow"
"""
input sim_card_flow_max_order_by {
  card_avg_flow: order_by
  card_no_remark: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  enterprise_id: order_by
  iccid: order_by
  id: order_by
  iot_card_no: order_by
  pool_avg_flow: order_by
  sim_card_flow_id: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  update_at: order_by
  update_by: order_by
  use_flow: order_by
}

"""aggregate min on columns"""
type sim_card_flow_min_fields {
  card_avg_flow: numeric
  card_no_remark: String
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  enterprise_id: String
  iccid: String
  id: bigint
  iot_card_no: String
  pool_avg_flow: numeric
  sim_card_flow_id: String
  suit_flow: numeric
  suit_left_flow: numeric
  suit_over_flow: numeric
  suit_sms_left_num: Int
  suit_sms_num: Int
  suit_sms_over_num: Int
  suit_use_sms_num: Int
  update_at: timestamptz
  update_by: String
  use_flow: numeric
}

"""
order by min() on columns of table "sim_card_flow"
"""
input sim_card_flow_min_order_by {
  card_avg_flow: order_by
  card_no_remark: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  enterprise_id: order_by
  iccid: order_by
  id: order_by
  iot_card_no: order_by
  pool_avg_flow: order_by
  sim_card_flow_id: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  update_at: order_by
  update_by: order_by
  use_flow: order_by
}

"""
response of any mutation on the table "sim_card_flow"
"""
type sim_card_flow_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [sim_card_flow!]!
}

"""
input type for inserting object relation for remote table "sim_card_flow"
"""
input sim_card_flow_obj_rel_insert_input {
  data: sim_card_flow_insert_input!
  on_conflict: sim_card_flow_on_conflict
}

"""
on conflict condition type for table "sim_card_flow"
"""
input sim_card_flow_on_conflict {
  constraint: sim_card_flow_constraint!
  update_columns: [sim_card_flow_update_column!]!
  where: sim_card_flow_bool_exp
}

"""
ordering options when selecting data from "sim_card_flow"
"""
input sim_card_flow_order_by {
  card_avg_flow: order_by
  card_no_remark: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  enterprise_id: order_by
  iccid: order_by
  id: order_by
  iot_card_no: order_by
  is_delete: order_by
  is_share_pool: order_by
  pool_avg_flow: order_by
  sim_card_flow_id: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  update_at: order_by
  update_by: order_by
  use_flow: order_by
}

"""
primary key columns input for table: "sim_card_flow"
"""
input sim_card_flow_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "sim_card_flow"
"""
enum sim_card_flow_select_column {
  """column name"""
  card_avg_flow

  """column name"""
  card_no_remark

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  enterprise_id

  """column name"""
  iccid

  """column name"""
  id

  """column name"""
  iot_card_no

  """column name"""
  is_delete

  """column name"""
  is_share_pool

  """column name"""
  pool_avg_flow

  """column name"""
  sim_card_flow_id

  """column name"""
  suit_flow

  """column name"""
  suit_left_flow

  """column name"""
  suit_over_flow

  """column name"""
  suit_sms_left_num

  """column name"""
  suit_sms_num

  """column name"""
  suit_sms_over_num

  """column name"""
  suit_use_sms_num

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  use_flow
}

"""
input type for updating data in table "sim_card_flow"
"""
input sim_card_flow_set_input {
  card_avg_flow: numeric
  card_no_remark: String
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  enterprise_id: String
  iccid: String
  id: bigint
  iot_card_no: String
  is_delete: Boolean
  is_share_pool: Boolean
  pool_avg_flow: numeric
  sim_card_flow_id: String
  suit_flow: numeric
  suit_left_flow: numeric
  suit_over_flow: numeric
  suit_sms_left_num: Int
  suit_sms_num: Int
  suit_sms_over_num: Int
  suit_use_sms_num: Int
  update_at: timestamptz
  update_by: String
  use_flow: numeric
}

"""aggregate stddev on columns"""
type sim_card_flow_stddev_fields {
  card_avg_flow: Float
  id: Float
  pool_avg_flow: Float
  suit_flow: Float
  suit_left_flow: Float
  suit_over_flow: Float
  suit_sms_left_num: Float
  suit_sms_num: Float
  suit_sms_over_num: Float
  suit_use_sms_num: Float
  use_flow: Float
}

"""
order by stddev() on columns of table "sim_card_flow"
"""
input sim_card_flow_stddev_order_by {
  card_avg_flow: order_by
  id: order_by
  pool_avg_flow: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  use_flow: order_by
}

"""aggregate stddev_pop on columns"""
type sim_card_flow_stddev_pop_fields {
  card_avg_flow: Float
  id: Float
  pool_avg_flow: Float
  suit_flow: Float
  suit_left_flow: Float
  suit_over_flow: Float
  suit_sms_left_num: Float
  suit_sms_num: Float
  suit_sms_over_num: Float
  suit_use_sms_num: Float
  use_flow: Float
}

"""
order by stddev_pop() on columns of table "sim_card_flow"
"""
input sim_card_flow_stddev_pop_order_by {
  card_avg_flow: order_by
  id: order_by
  pool_avg_flow: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  use_flow: order_by
}

"""aggregate stddev_samp on columns"""
type sim_card_flow_stddev_samp_fields {
  card_avg_flow: Float
  id: Float
  pool_avg_flow: Float
  suit_flow: Float
  suit_left_flow: Float
  suit_over_flow: Float
  suit_sms_left_num: Float
  suit_sms_num: Float
  suit_sms_over_num: Float
  suit_use_sms_num: Float
  use_flow: Float
}

"""
order by stddev_samp() on columns of table "sim_card_flow"
"""
input sim_card_flow_stddev_samp_order_by {
  card_avg_flow: order_by
  id: order_by
  pool_avg_flow: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  use_flow: order_by
}

"""aggregate sum on columns"""
type sim_card_flow_sum_fields {
  card_avg_flow: numeric
  id: bigint
  pool_avg_flow: numeric
  suit_flow: numeric
  suit_left_flow: numeric
  suit_over_flow: numeric
  suit_sms_left_num: Int
  suit_sms_num: Int
  suit_sms_over_num: Int
  suit_use_sms_num: Int
  use_flow: numeric
}

"""
order by sum() on columns of table "sim_card_flow"
"""
input sim_card_flow_sum_order_by {
  card_avg_flow: order_by
  id: order_by
  pool_avg_flow: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  use_flow: order_by
}

"""
update columns of table "sim_card_flow"
"""
enum sim_card_flow_update_column {
  """column name"""
  card_avg_flow

  """column name"""
  card_no_remark

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  enterprise_id

  """column name"""
  iccid

  """column name"""
  id

  """column name"""
  iot_card_no

  """column name"""
  is_delete

  """column name"""
  is_share_pool

  """column name"""
  pool_avg_flow

  """column name"""
  sim_card_flow_id

  """column name"""
  suit_flow

  """column name"""
  suit_left_flow

  """column name"""
  suit_over_flow

  """column name"""
  suit_sms_left_num

  """column name"""
  suit_sms_num

  """column name"""
  suit_sms_over_num

  """column name"""
  suit_use_sms_num

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  use_flow
}

"""aggregate var_pop on columns"""
type sim_card_flow_var_pop_fields {
  card_avg_flow: Float
  id: Float
  pool_avg_flow: Float
  suit_flow: Float
  suit_left_flow: Float
  suit_over_flow: Float
  suit_sms_left_num: Float
  suit_sms_num: Float
  suit_sms_over_num: Float
  suit_use_sms_num: Float
  use_flow: Float
}

"""
order by var_pop() on columns of table "sim_card_flow"
"""
input sim_card_flow_var_pop_order_by {
  card_avg_flow: order_by
  id: order_by
  pool_avg_flow: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  use_flow: order_by
}

"""aggregate var_samp on columns"""
type sim_card_flow_var_samp_fields {
  card_avg_flow: Float
  id: Float
  pool_avg_flow: Float
  suit_flow: Float
  suit_left_flow: Float
  suit_over_flow: Float
  suit_sms_left_num: Float
  suit_sms_num: Float
  suit_sms_over_num: Float
  suit_use_sms_num: Float
  use_flow: Float
}

"""
order by var_samp() on columns of table "sim_card_flow"
"""
input sim_card_flow_var_samp_order_by {
  card_avg_flow: order_by
  id: order_by
  pool_avg_flow: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  use_flow: order_by
}

"""aggregate variance on columns"""
type sim_card_flow_variance_fields {
  card_avg_flow: Float
  id: Float
  pool_avg_flow: Float
  suit_flow: Float
  suit_left_flow: Float
  suit_over_flow: Float
  suit_sms_left_num: Float
  suit_sms_num: Float
  suit_sms_over_num: Float
  suit_use_sms_num: Float
  use_flow: Float
}

"""
order by variance() on columns of table "sim_card_flow"
"""
input sim_card_flow_variance_order_by {
  card_avg_flow: order_by
  id: order_by
  pool_avg_flow: order_by
  suit_flow: order_by
  suit_left_flow: order_by
  suit_over_flow: order_by
  suit_sms_left_num: order_by
  suit_sms_num: order_by
  suit_sms_over_num: order_by
  suit_use_sms_num: order_by
  use_flow: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "sim_card_flow"
  """
  sim_card_flow(
    """distinct select on columns"""
    distinct_on: [sim_card_flow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sim_card_flow_order_by!]

    """filter the rows returned"""
    where: sim_card_flow_bool_exp
  ): [sim_card_flow!]!

  """
  fetch aggregated fields from the table: "sim_card_flow"
  """
  sim_card_flow_aggregate(
    """distinct select on columns"""
    distinct_on: [sim_card_flow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sim_card_flow_order_by!]

    """filter the rows returned"""
    where: sim_card_flow_bool_exp
  ): sim_card_flow_aggregate!

  """fetch data from the table: "sim_card_flow" using primary key columns"""
  sim_card_flow_by_pk(
    """ID"""
    id: bigint!
  ): sim_card_flow
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sim_card_flow_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SimCardFlowSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOsim_card_flow_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SimCardFlowOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOsim_card_flow_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SimCardFlowBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOsim_card_flow_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_sim_card_flow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SimCardFlowSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOsim_card_flow_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SimCardFlowOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOsim_card_flow_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SimCardFlowBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOsim_card_flow_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_sim_card_flow_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_mutation_root_delete_sim_card_flow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SimCardFlowBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNsim_card_flow_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_mutation_root_delete_sim_card_flow_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_mutation_root_insert_sim_card_flow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SimCardFlowInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNsim_card_flow_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.SimCardFlowOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOsim_card_flow_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_mutation_root_insert_sim_card_flow_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SimCardFlowInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNsim_card_flow_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.SimCardFlowOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOsim_card_flow_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_mutation_root_update_sim_card_flow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SimCardFlowIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOsim_card_flow_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SimCardFlowSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOsim_card_flow_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SimCardFlowBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNsim_card_flow_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_mutation_root_update_sim_card_flow_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SimCardFlowIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOsim_card_flow_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SimCardFlowSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOsim_card_flow_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SimCardFlowPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNsim_card_flow_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_sim_card_flow_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SimCardFlowSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOsim_card_flow_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_subscription_root_sim_card_flow_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SimCardFlowSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOsim_card_flow_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SimCardFlowOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOsim_card_flow_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SimCardFlowBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOsim_card_flow_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_sim_card_flow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SimCardFlowSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOsim_card_flow_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SimCardFlowOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOsim_card_flow_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SimCardFlowBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOsim_card_flow_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_sim_card_flow_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Query_sim_card_flow(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_sim_card_flow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SimCardFlow(rctx, args["distinct_on"].([]model.SimCardFlowSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SimCardFlowOrderBy), args["where"].(*model.SimCardFlowBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalNsim_card_flow2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlowᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_sim_card_flow_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_sim_card_flow_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SimCardFlowAggregate(rctx, args["distinct_on"].([]model.SimCardFlowSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SimCardFlowOrderBy), args["where"].(*model.SimCardFlowBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowAggregate)
	fc.Result = res
	return ec.marshalNsim_card_flow_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_sim_card_flow_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_sim_card_flow_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SimCardFlowByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalOsim_card_flow2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlow(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_delete_sim_card_flow(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_delete_sim_card_flow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteSimCardFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowMutationResponse)
	fc.Result = res
	return ec.marshalOsim_card_flow_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_delete_sim_card_flow_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_delete_sim_card_flow_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteSimCardFlowByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalOsim_card_flow2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlow(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_insert_sim_card_flow(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_insert_sim_card_flow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsertSimCardFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowMutationResponse)
	fc.Result = res
	return ec.marshalOsim_card_flow_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_insert_sim_card_flow_one(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_insert_sim_card_flow_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InsertSimCardFlowOne, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalOsim_card_flow2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlow(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_update_sim_card_flow(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_update_sim_card_flow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateSimCardFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowMutationResponse)
	fc.Result = res
	return ec.marshalOsim_card_flow_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _mutation_root_update_sim_card_flow_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.MutationRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "mutation_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_mutation_root_update_sim_card_flow_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateSimCardFlowByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalOsim_card_flow2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlow(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_card_no_remark(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardNoRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_iccid(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iccid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_id(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_iot_card_no(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IotCardNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_is_share_pool(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSharePool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sim_card_flow_id(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardFlowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_use_flow(ctx context.Context, field graphql.CollectedField, obj *model1.SimCardFlow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowAggregateFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalNsim_card_flow2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlowᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowAvgFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_sim_card_flow_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowMaxFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowMinFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowStddevFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowStddevPopFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowStddevSampFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowSumFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowVarPopFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowVarSampFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowVarianceFields)
	fc.Result = res
	return ec.marshalOsim_card_flow_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_avg_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_card_no_remark(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardNoRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_iccid(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iccid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_iot_card_no(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IotCardNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_sim_card_flow_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardFlowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_max_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_card_no_remark(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardNoRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_iccid(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iccid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_iot_card_no(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IotCardNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_sim_card_flow_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardFlowID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_min_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalNsim_card_flow2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlowᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_sum_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_pop_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_var_samp_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_card_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CardAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_pool_avg_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolAvgFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_suit_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_suit_left_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitLeftFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_suit_over_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitOverFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_suit_sms_left_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsLeftNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_suit_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_suit_sms_over_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitSmsOverNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_suit_use_sms_num(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuitUseSmsNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _sim_card_flow_variance_fields_use_flow(ctx context.Context, field graphql.CollectedField, obj *model.SimCardFlowVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "sim_card_flow_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_sim_card_flow(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_sim_card_flow_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardFlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalNsim_card_flow2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlowᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_sim_card_flow_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_sim_card_flow_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardFlowAggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SimCardFlowAggregate)
	fc.Result = res
	return ec.marshalNsim_card_flow_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_sim_card_flow_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_sim_card_flow_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SimCardFlowByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SimCardFlow)
	fc.Result = res
	return ec.marshalOsim_card_flow2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlow(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_aggregate_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowAggregateOrderBy, error) {
	var it model.SimCardFlowAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOsim_card_flow_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOsim_card_flow_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOsim_card_flow_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOsim_card_flow_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOsim_card_flow_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOsim_card_flow_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOsim_card_flow_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOsim_card_flow_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOsim_card_flow_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOsim_card_flow_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.SimCardFlowArrRelInsertInput, error) {
	var it model.SimCardFlowArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNsim_card_flow_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOsim_card_flow_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_avg_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowAvgOrderBy, error) {
	var it model.SimCardFlowAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_bool_exp(ctx context.Context, obj interface{}) (model.SimCardFlowBoolExp, error) {
	var it model.SimCardFlowBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOsim_card_flow_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOsim_card_flow_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOsim_card_flow_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "card_no_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_no_remark"))
			it.CardNoRemark, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "iccid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iccid"))
			it.Iccid, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "iot_card_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iot_card_no"))
			it.IotCardNo, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_share_pool":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_share_pool"))
			it.IsSharePool, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_flow_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_flow_id"))
			it.SimCardFlowID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_inc_input(ctx context.Context, obj interface{}) (model.SimCardFlowIncInput, error) {
	var it model.SimCardFlowIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_insert_input(ctx context.Context, obj interface{}) (model.SimCardFlowInsertInput, error) {
	var it model.SimCardFlowInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "card_no_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_no_remark"))
			it.CardNoRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "iccid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iccid"))
			it.Iccid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iot_card_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iot_card_no"))
			it.IotCardNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_share_pool":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_share_pool"))
			it.IsSharePool, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_flow_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_flow_id"))
			it.SimCardFlowID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_max_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowMaxOrderBy, error) {
	var it model.SimCardFlowMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "card_no_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_no_remark"))
			it.CardNoRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "iccid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iccid"))
			it.Iccid, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "iot_card_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iot_card_no"))
			it.IotCardNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_flow_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_flow_id"))
			it.SimCardFlowID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_min_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowMinOrderBy, error) {
	var it model.SimCardFlowMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "card_no_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_no_remark"))
			it.CardNoRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "iccid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iccid"))
			it.Iccid, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "iot_card_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iot_card_no"))
			it.IotCardNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_flow_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_flow_id"))
			it.SimCardFlowID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.SimCardFlowObjRelInsertInput, error) {
	var it model.SimCardFlowObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNsim_card_flow_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOsim_card_flow_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_on_conflict(ctx context.Context, obj interface{}) (model.SimCardFlowOnConflict, error) {
	var it model.SimCardFlowOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNsim_card_flow_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNsim_card_flow_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOsim_card_flow_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowOrderBy, error) {
	var it model.SimCardFlowOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "card_no_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_no_remark"))
			it.CardNoRemark, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "iccid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iccid"))
			it.Iccid, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "iot_card_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iot_card_no"))
			it.IotCardNo, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_share_pool":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_share_pool"))
			it.IsSharePool, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_flow_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_flow_id"))
			it.SimCardFlowID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_pk_columns_input(ctx context.Context, obj interface{}) (model.SimCardFlowPkColumnsInput, error) {
	var it model.SimCardFlowPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_set_input(ctx context.Context, obj interface{}) (model.SimCardFlowSetInput, error) {
	var it model.SimCardFlowSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "card_no_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_no_remark"))
			it.CardNoRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "iccid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iccid"))
			it.Iccid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "iot_card_no":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iot_card_no"))
			it.IotCardNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_share_pool":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_share_pool"))
			it.IsSharePool, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sim_card_flow_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sim_card_flow_id"))
			it.SimCardFlowID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_stddev_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowStddevOrderBy, error) {
	var it model.SimCardFlowStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowStddevPopOrderBy, error) {
	var it model.SimCardFlowStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowStddevSampOrderBy, error) {
	var it model.SimCardFlowStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_sum_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowSumOrderBy, error) {
	var it model.SimCardFlowSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_var_pop_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowVarPopOrderBy, error) {
	var it model.SimCardFlowVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_var_samp_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowVarSampOrderBy, error) {
	var it model.SimCardFlowVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsim_card_flow_variance_order_by(ctx context.Context, obj interface{}) (model.SimCardFlowVarianceOrderBy, error) {
	var it model.SimCardFlowVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "card_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("card_avg_flow"))
			it.CardAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool_avg_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pool_avg_flow"))
			it.PoolAvgFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_flow"))
			it.SuitFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_left_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_left_flow"))
			it.SuitLeftFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_over_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_over_flow"))
			it.SuitOverFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_left_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_left_num"))
			it.SuitSmsLeftNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_num"))
			it.SuitSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_sms_over_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_sms_over_num"))
			it.SuitSmsOverNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suit_use_sms_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suit_use_sms_num"))
			it.SuitUseSmsNum, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "use_flow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("use_flow"))
			it.UseFlow, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "sim_card_flow":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sim_card_flow(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "sim_card_flow_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sim_card_flow_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "sim_card_flow_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sim_card_flow_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutation_rootImplementors = []string{"mutation_root"}

func (ec *executionContext) _mutation_root(ctx context.Context, sel ast.SelectionSet, obj *model.MutationRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutation_rootImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("mutation_root")
		case "delete_sim_card_flow":
			out.Values[i] = ec._mutation_root_delete_sim_card_flow(ctx, field, obj)
		case "delete_sim_card_flow_by_pk":
			out.Values[i] = ec._mutation_root_delete_sim_card_flow_by_pk(ctx, field, obj)
		case "insert_sim_card_flow":
			out.Values[i] = ec._mutation_root_insert_sim_card_flow(ctx, field, obj)
		case "insert_sim_card_flow_one":
			out.Values[i] = ec._mutation_root_insert_sim_card_flow_one(ctx, field, obj)
		case "update_sim_card_flow":
			out.Values[i] = ec._mutation_root_update_sim_card_flow(ctx, field, obj)
		case "update_sim_card_flow_by_pk":
			out.Values[i] = ec._mutation_root_update_sim_card_flow_by_pk(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flowImplementors = []string{"sim_card_flow"}

func (ec *executionContext) _sim_card_flow(ctx context.Context, sel ast.SelectionSet, obj *model1.SimCardFlow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flowImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_card_avg_flow(ctx, field, obj)
		case "card_no_remark":
			out.Values[i] = ec._sim_card_flow_card_no_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._sim_card_flow_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._sim_card_flow_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._sim_card_flow_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._sim_card_flow_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._sim_card_flow_enterprise_id(ctx, field, obj)
		case "iccid":
			out.Values[i] = ec._sim_card_flow_iccid(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iot_card_no":
			out.Values[i] = ec._sim_card_flow_iot_card_no(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._sim_card_flow_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_share_pool":
			out.Values[i] = ec._sim_card_flow_is_share_pool(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_pool_avg_flow(ctx, field, obj)
		case "sim_card_flow_id":
			out.Values[i] = ec._sim_card_flow_sim_card_flow_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_suit_use_sms_num(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._sim_card_flow_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._sim_card_flow_update_by(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_aggregateImplementors = []string{"sim_card_flow_aggregate"}

func (ec *executionContext) _sim_card_flow_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_aggregate")
		case "aggregate":
			out.Values[i] = ec._sim_card_flow_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._sim_card_flow_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_aggregate_fieldsImplementors = []string{"sim_card_flow_aggregate_fields"}

func (ec *executionContext) _sim_card_flow_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_aggregate_fields")
		case "avg":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._sim_card_flow_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_avg_fieldsImplementors = []string{"sim_card_flow_avg_fields"}

func (ec *executionContext) _sim_card_flow_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_avg_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_avg_fields_card_avg_flow(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_avg_fields_id(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_avg_fields_pool_avg_flow(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_avg_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_avg_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_avg_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_avg_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_avg_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_avg_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_avg_fields_suit_use_sms_num(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_avg_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_max_fieldsImplementors = []string{"sim_card_flow_max_fields"}

func (ec *executionContext) _sim_card_flow_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_max_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_max_fields_card_avg_flow(ctx, field, obj)
		case "card_no_remark":
			out.Values[i] = ec._sim_card_flow_max_fields_card_no_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._sim_card_flow_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._sim_card_flow_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._sim_card_flow_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._sim_card_flow_max_fields_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._sim_card_flow_max_fields_enterprise_id(ctx, field, obj)
		case "iccid":
			out.Values[i] = ec._sim_card_flow_max_fields_iccid(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_max_fields_id(ctx, field, obj)
		case "iot_card_no":
			out.Values[i] = ec._sim_card_flow_max_fields_iot_card_no(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_max_fields_pool_avg_flow(ctx, field, obj)
		case "sim_card_flow_id":
			out.Values[i] = ec._sim_card_flow_max_fields_sim_card_flow_id(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_max_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_max_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_max_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_max_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_max_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_max_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_max_fields_suit_use_sms_num(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._sim_card_flow_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._sim_card_flow_max_fields_update_by(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_max_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_min_fieldsImplementors = []string{"sim_card_flow_min_fields"}

func (ec *executionContext) _sim_card_flow_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_min_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_min_fields_card_avg_flow(ctx, field, obj)
		case "card_no_remark":
			out.Values[i] = ec._sim_card_flow_min_fields_card_no_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._sim_card_flow_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._sim_card_flow_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._sim_card_flow_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._sim_card_flow_min_fields_delete_by(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._sim_card_flow_min_fields_enterprise_id(ctx, field, obj)
		case "iccid":
			out.Values[i] = ec._sim_card_flow_min_fields_iccid(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_min_fields_id(ctx, field, obj)
		case "iot_card_no":
			out.Values[i] = ec._sim_card_flow_min_fields_iot_card_no(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_min_fields_pool_avg_flow(ctx, field, obj)
		case "sim_card_flow_id":
			out.Values[i] = ec._sim_card_flow_min_fields_sim_card_flow_id(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_min_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_min_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_min_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_min_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_min_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_min_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_min_fields_suit_use_sms_num(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._sim_card_flow_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._sim_card_flow_min_fields_update_by(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_min_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_mutation_responseImplementors = []string{"sim_card_flow_mutation_response"}

func (ec *executionContext) _sim_card_flow_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._sim_card_flow_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._sim_card_flow_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_stddev_fieldsImplementors = []string{"sim_card_flow_stddev_fields"}

func (ec *executionContext) _sim_card_flow_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_stddev_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_stddev_fields_card_avg_flow(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_stddev_fields_id(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_stddev_fields_pool_avg_flow(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_stddev_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_stddev_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_stddev_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_stddev_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_stddev_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_stddev_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_stddev_fields_suit_use_sms_num(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_stddev_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_stddev_pop_fieldsImplementors = []string{"sim_card_flow_stddev_pop_fields"}

func (ec *executionContext) _sim_card_flow_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_stddev_pop_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_card_avg_flow(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_id(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_pool_avg_flow(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_suit_use_sms_num(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_stddev_pop_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_stddev_samp_fieldsImplementors = []string{"sim_card_flow_stddev_samp_fields"}

func (ec *executionContext) _sim_card_flow_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_stddev_samp_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_card_avg_flow(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_id(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_pool_avg_flow(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_suit_use_sms_num(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_stddev_samp_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_sum_fieldsImplementors = []string{"sim_card_flow_sum_fields"}

func (ec *executionContext) _sim_card_flow_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_sum_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_sum_fields_card_avg_flow(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_sum_fields_id(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_sum_fields_pool_avg_flow(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_sum_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_sum_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_sum_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_sum_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_sum_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_sum_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_sum_fields_suit_use_sms_num(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_sum_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_var_pop_fieldsImplementors = []string{"sim_card_flow_var_pop_fields"}

func (ec *executionContext) _sim_card_flow_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_var_pop_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_card_avg_flow(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_id(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_pool_avg_flow(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_suit_use_sms_num(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_var_pop_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_var_samp_fieldsImplementors = []string{"sim_card_flow_var_samp_fields"}

func (ec *executionContext) _sim_card_flow_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_var_samp_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_card_avg_flow(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_id(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_pool_avg_flow(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_suit_use_sms_num(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_var_samp_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sim_card_flow_variance_fieldsImplementors = []string{"sim_card_flow_variance_fields"}

func (ec *executionContext) _sim_card_flow_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SimCardFlowVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sim_card_flow_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("sim_card_flow_variance_fields")
		case "card_avg_flow":
			out.Values[i] = ec._sim_card_flow_variance_fields_card_avg_flow(ctx, field, obj)
		case "id":
			out.Values[i] = ec._sim_card_flow_variance_fields_id(ctx, field, obj)
		case "pool_avg_flow":
			out.Values[i] = ec._sim_card_flow_variance_fields_pool_avg_flow(ctx, field, obj)
		case "suit_flow":
			out.Values[i] = ec._sim_card_flow_variance_fields_suit_flow(ctx, field, obj)
		case "suit_left_flow":
			out.Values[i] = ec._sim_card_flow_variance_fields_suit_left_flow(ctx, field, obj)
		case "suit_over_flow":
			out.Values[i] = ec._sim_card_flow_variance_fields_suit_over_flow(ctx, field, obj)
		case "suit_sms_left_num":
			out.Values[i] = ec._sim_card_flow_variance_fields_suit_sms_left_num(ctx, field, obj)
		case "suit_sms_num":
			out.Values[i] = ec._sim_card_flow_variance_fields_suit_sms_num(ctx, field, obj)
		case "suit_sms_over_num":
			out.Values[i] = ec._sim_card_flow_variance_fields_suit_sms_over_num(ctx, field, obj)
		case "suit_use_sms_num":
			out.Values[i] = ec._sim_card_flow_variance_fields_suit_use_sms_num(ctx, field, obj)
		case "use_flow":
			out.Values[i] = ec._sim_card_flow_variance_fields_use_flow(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscription_rootImplementors = []string{"subscription_root"}

func (ec *executionContext) _subscription_root(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscription_rootImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscription_root")
		case "sim_card_flow":
			out.Values[i] = ec._subscription_root_sim_card_flow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sim_card_flow_aggregate":
			out.Values[i] = ec._subscription_root_sim_card_flow_aggregate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sim_card_flow_by_pk":
			out.Values[i] = ec._subscription_root_sim_card_flow_by_pk(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNsim_card_flow2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlowᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.SimCardFlow) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNsim_card_flow2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlow(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNsim_card_flow2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlow(ctx context.Context, sel ast.SelectionSet, v *model1.SimCardFlow) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._sim_card_flow(ctx, sel, v)
}

func (ec *executionContext) marshalNsim_card_flow_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAggregate(ctx context.Context, sel ast.SelectionSet, v model.SimCardFlowAggregate) graphql.Marshaler {
	return ec._sim_card_flow_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNsim_card_flow_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAggregate(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._sim_card_flow_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNsim_card_flow_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx context.Context, v interface{}) (model.SimCardFlowBoolExp, error) {
	res, err := ec.unmarshalInputsim_card_flow_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsim_card_flow_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowConstraint(ctx context.Context, v interface{}) (model.SimCardFlowConstraint, error) {
	var res model.SimCardFlowConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsim_card_flow_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowConstraint(ctx context.Context, sel ast.SelectionSet, v model.SimCardFlowConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsim_card_flow_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowInsertInput(ctx context.Context, v interface{}) (model.SimCardFlowInsertInput, error) {
	res, err := ec.unmarshalInputsim_card_flow_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsim_card_flow_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.SimCardFlowInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SimCardFlowInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsim_card_flow_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNsim_card_flow_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowInsertInput(ctx context.Context, v interface{}) (*model.SimCardFlowInsertInput, error) {
	res, err := ec.unmarshalInputsim_card_flow_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsim_card_flow_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowOrderBy, error) {
	res, err := ec.unmarshalInputsim_card_flow_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsim_card_flow_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowPkColumnsInput(ctx context.Context, v interface{}) (model.SimCardFlowPkColumnsInput, error) {
	res, err := ec.unmarshalInputsim_card_flow_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsim_card_flow_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumn(ctx context.Context, v interface{}) (model.SimCardFlowSelectColumn, error) {
	var res model.SimCardFlowSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsim_card_flow_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.SimCardFlowSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsim_card_flow_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowUpdateColumn(ctx context.Context, v interface{}) (model.SimCardFlowUpdateColumn, error) {
	var res model.SimCardFlowUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsim_card_flow_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.SimCardFlowUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsim_card_flow_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.SimCardFlowUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SimCardFlowUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsim_card_flow_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNsim_card_flow_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SimCardFlowUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNsim_card_flow_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOsim_card_flow2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋmodelᚐSimCardFlow(ctx context.Context, sel ast.SelectionSet, v *model1.SimCardFlow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow(ctx, sel, v)
}

func (ec *executionContext) marshalOsim_card_flow_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOsim_card_flow_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowAvgOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsim_card_flow_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx context.Context, v interface{}) ([]*model.SimCardFlowBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SimCardFlowBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsim_card_flow_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsim_card_flow_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowBoolExp(ctx context.Context, v interface{}) (*model.SimCardFlowBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsim_card_flow_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowIncInput(ctx context.Context, v interface{}) (*model.SimCardFlowIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMaxOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMinFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMinOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOnConflict(ctx context.Context, v interface{}) (*model.SimCardFlowOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsim_card_flow_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOrderByᚄ(ctx context.Context, v interface{}) ([]*model.SimCardFlowOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SimCardFlowOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsim_card_flow_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsim_card_flow_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.SimCardFlowSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SimCardFlowSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsim_card_flow_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsim_card_flow_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SimCardFlowSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNsim_card_flow_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOsim_card_flow_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSetInput(ctx context.Context, v interface{}) (*model.SimCardFlowSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevPopOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowStddevSampOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSumFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowSumOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarPopOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarSampOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsim_card_flow_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.SimCardFlowVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._sim_card_flow_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsim_card_flow_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋsimᚋflowᚋqueryᚋgraphᚋmodelᚐSimCardFlowVarianceOrderBy(ctx context.Context, v interface{}) (*model.SimCardFlowVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsim_card_flow_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
