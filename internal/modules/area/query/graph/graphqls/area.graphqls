# columns and relationships of "city"
type city {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint!
    is_delete: Boolean
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "city"
type city_aggregate {
    aggregate: city_aggregate_fields
    nodes: [city!]!
}

# aggregate fields of "city"
type city_aggregate_fields {
    avg: city_avg_fields
    count(columns: [city_select_column!], distinct: Boolean): Int
    max: city_max_fields
    min: city_min_fields
    stddev: city_stddev_fields
    stddev_pop: city_stddev_pop_fields
    stddev_samp: city_stddev_samp_fields
    sum: city_sum_fields
    var_pop: city_var_pop_fields
    var_samp: city_var_samp_fields
    variance: city_variance_fields
}

# order by aggregate values of table "city"
input city_aggregate_order_by {
    avg: city_avg_order_by
    count: order_by
    max: city_max_order_by
    min: city_min_order_by
    stddev: city_stddev_order_by
    stddev_pop: city_stddev_pop_order_by
    stddev_samp: city_stddev_samp_order_by
    sum: city_sum_order_by
    var_pop: city_var_pop_order_by
    var_samp: city_var_samp_order_by
    variance: city_variance_order_by
}

# input type for inserting array relation for remote table "city"
input city_arr_rel_insert_input {
    data: [city_insert_input!]!
    on_conflict: city_on_conflict
}

# aggregate avg on columns
type city_avg_fields {
    id: Float
}

# order by avg() on columns of table "city"
input city_avg_order_by {
    id: order_by
}

# Boolean expression to filter rows from the table "city". All fields are combined with a logical 'AND'.
input city_bool_exp {
    _and: [city_bool_exp]
    _not: city_bool_exp
    _or: [city_bool_exp]
    city_id: String_comparison_exp
    code: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    name: String_comparison_exp
    province_id: String_comparison_exp
    remarks: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "city"
enum city_constraint {
    # unique or primary key constraint
    city_pkey
}

# input type for incrementing integer column in table "city"
input city_inc_input {
    id: bigint
}

# input type for inserting data into table "city"
input city_insert_input {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    is_delete: Boolean
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type city_max_fields {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "city"
input city_max_order_by {
    city_id: order_by
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    name: order_by
    province_id: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type city_min_fields {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "city"
input city_min_order_by {
    city_id: order_by
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    name: order_by
    province_id: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "city"
type city_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [city!]!
}

# input type for inserting object relation for remote table "city"
input city_obj_rel_insert_input {
    data: city_insert_input!
    on_conflict: city_on_conflict
}

# on conflict condition type for table "city"
input city_on_conflict {
    constraint: city_constraint!
    update_columns: [city_update_column!]!
    where: city_bool_exp
}

# ordering options when selecting data from "city"
input city_order_by {
    city_id: order_by
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    is_delete: order_by
    name: order_by
    province_id: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "city"
input city_pk_columns_input {
    id: bigint!
}

# select columns of table "city"
enum city_select_column {
    # column name
    city_id
    # column name
    code
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    id
    # column name
    is_delete
    # column name
    name
    # column name
    province_id
    # column name
    remarks
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "city"
input city_set_input {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    is_delete: Boolean
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type city_stddev_fields {
    id: Float
}

# order by stddev() on columns of table "city"
input city_stddev_order_by {
    id: order_by
}

# aggregate stddev_pop on columns
type city_stddev_pop_fields {
    id: Float
}

# order by stddev_pop() on columns of table "city"
input city_stddev_pop_order_by {
    id: order_by
}

# aggregate stddev_samp on columns
type city_stddev_samp_fields {
    id: Float
}

# order by stddev_samp() on columns of table "city"
input city_stddev_samp_order_by {
    id: order_by
}

# aggregate sum on columns
type city_sum_fields {
    id: bigint
}

# order by sum() on columns of table "city"
input city_sum_order_by {
    id: order_by
}

# update columns of table "city"
enum city_update_column {
    # column name
    city_id
    # column name
    code
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    id
    # column name
    is_delete
    # column name
    name
    # column name
    province_id
    # column name
    remarks
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type city_var_pop_fields {
    id: Float
}

# order by var_pop() on columns of table "city"
input city_var_pop_order_by {
    id: order_by
}

# aggregate var_samp on columns
type city_var_samp_fields {
    id: Float
}

# order by var_samp() on columns of table "city"
input city_var_samp_order_by {
    id: order_by
}

# aggregate variance on columns
type city_variance_fields {
    id: Float
}

# order by variance() on columns of table "city"
input city_variance_order_by {
    id: order_by
}

# columns and relationships of "district"
type district {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    district_id: String
    id: bigint!
    is_delete: Boolean
    name: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "district"
type district_aggregate {
    aggregate: district_aggregate_fields
    nodes: [district!]!
}

# aggregate fields of "district"
type district_aggregate_fields {
    avg: district_avg_fields
    count(columns: [district_select_column!], distinct: Boolean): Int
    max: district_max_fields
    min: district_min_fields
    stddev: district_stddev_fields
    stddev_pop: district_stddev_pop_fields
    stddev_samp: district_stddev_samp_fields
    sum: district_sum_fields
    var_pop: district_var_pop_fields
    var_samp: district_var_samp_fields
    variance: district_variance_fields
}

# order by aggregate values of table "district"
input district_aggregate_order_by {
    avg: district_avg_order_by
    count: order_by
    max: district_max_order_by
    min: district_min_order_by
    stddev: district_stddev_order_by
    stddev_pop: district_stddev_pop_order_by
    stddev_samp: district_stddev_samp_order_by
    sum: district_sum_order_by
    var_pop: district_var_pop_order_by
    var_samp: district_var_samp_order_by
    variance: district_variance_order_by
}

# input type for inserting array relation for remote table "district"
input district_arr_rel_insert_input {
    data: [district_insert_input!]!
    on_conflict: district_on_conflict
}

# aggregate avg on columns
type district_avg_fields {
    id: Float
}

# order by avg() on columns of table "district"
input district_avg_order_by {
    id: order_by
}

# Boolean expression to filter rows from the table "district". All fields are combined with a logical 'AND'.
input district_bool_exp {
    _and: [district_bool_exp]
    _not: district_bool_exp
    _or: [district_bool_exp]
    city_id: String_comparison_exp
    code: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    district_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    name: String_comparison_exp
    remarks: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "district"
enum district_constraint {
    # unique or primary key constraint
    district_pkey
}

# input type for incrementing integer column in table "district"
input district_inc_input {
    id: bigint
}

# input type for inserting data into table "district"
input district_insert_input {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    district_id: String
    id: bigint
    is_delete: Boolean
    name: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type district_max_fields {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    district_id: String
    id: bigint
    name: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "district"
input district_max_order_by {
    city_id: order_by
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    district_id: order_by
    id: order_by
    name: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type district_min_fields {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    district_id: String
    id: bigint
    name: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "district"
input district_min_order_by {
    city_id: order_by
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    district_id: order_by
    id: order_by
    name: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "district"
type district_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [district!]!
}

# input type for inserting object relation for remote table "district"
input district_obj_rel_insert_input {
    data: district_insert_input!
    on_conflict: district_on_conflict
}

# on conflict condition type for table "district"
input district_on_conflict {
    constraint: district_constraint!
    update_columns: [district_update_column!]!
    where: district_bool_exp
}

# ordering options when selecting data from "district"
input district_order_by {
    city_id: order_by
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    district_id: order_by
    id: order_by
    is_delete: order_by
    name: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "district"
input district_pk_columns_input {
    id: bigint!
}

# select columns of table "district"
enum district_select_column {
    # column name
    city_id
    # column name
    code
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    district_id
    # column name
    id
    # column name
    is_delete
    # column name
    name
    # column name
    remarks
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "district"
input district_set_input {
    city_id: String
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    district_id: String
    id: bigint
    is_delete: Boolean
    name: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type district_stddev_fields {
    id: Float
}

# order by stddev() on columns of table "district"
input district_stddev_order_by {
    id: order_by
}

# aggregate stddev_pop on columns
type district_stddev_pop_fields {
    id: Float
}

# order by stddev_pop() on columns of table "district"
input district_stddev_pop_order_by {
    id: order_by
}

# aggregate stddev_samp on columns
type district_stddev_samp_fields {
    id: Float
}

# order by stddev_samp() on columns of table "district"
input district_stddev_samp_order_by {
    id: order_by
}

# aggregate sum on columns
type district_sum_fields {
    id: bigint
}

# order by sum() on columns of table "district"
input district_sum_order_by {
    id: order_by
}

# update columns of table "district"
enum district_update_column {
    # column name
    city_id
    # column name
    code
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    district_id
    # column name
    id
    # column name
    is_delete
    # column name
    name
    # column name
    remarks
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type district_var_pop_fields {
    id: Float
}

# order by var_pop() on columns of table "district"
input district_var_pop_order_by {
    id: order_by
}

# aggregate var_samp on columns
type district_var_samp_fields {
    id: Float
}

# order by var_samp() on columns of table "district"
input district_var_samp_order_by {
    id: order_by
}

# aggregate variance on columns
type district_variance_fields {
    id: Float
}

# order by variance() on columns of table "district"
input district_variance_order_by {
    id: order_by
}

# columns and relationships of "province"
type province {
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint!
    is_delete: Boolean
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregated selection of "province"
type province_aggregate {
    aggregate: province_aggregate_fields
    nodes: [province!]!
}

# aggregate fields of "province"
type province_aggregate_fields {
    avg: province_avg_fields
    count(columns: [province_select_column!], distinct: Boolean): Int
    max: province_max_fields
    min: province_min_fields
    stddev: province_stddev_fields
    stddev_pop: province_stddev_pop_fields
    stddev_samp: province_stddev_samp_fields
    sum: province_sum_fields
    var_pop: province_var_pop_fields
    var_samp: province_var_samp_fields
    variance: province_variance_fields
}

# order by aggregate values of table "province"
input province_aggregate_order_by {
    avg: province_avg_order_by
    count: order_by
    max: province_max_order_by
    min: province_min_order_by
    stddev: province_stddev_order_by
    stddev_pop: province_stddev_pop_order_by
    stddev_samp: province_stddev_samp_order_by
    sum: province_sum_order_by
    var_pop: province_var_pop_order_by
    var_samp: province_var_samp_order_by
    variance: province_variance_order_by
}

# input type for inserting array relation for remote table "province"
input province_arr_rel_insert_input {
    data: [province_insert_input!]!
    on_conflict: province_on_conflict
}

# aggregate avg on columns
type province_avg_fields {
    id: Float
}

# order by avg() on columns of table "province"
input province_avg_order_by {
    id: order_by
}

# Boolean expression to filter rows from the table "province". All fields are combined with a logical 'AND'.
input province_bool_exp {
    _and: [province_bool_exp]
    _not: province_bool_exp
    _or: [province_bool_exp]
    code: String_comparison_exp
    create_at: timestamptz_comparison_exp
    create_by: String_comparison_exp
    delete_at: timestamptz_comparison_exp
    delete_by: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    name: String_comparison_exp
    province_id: String_comparison_exp
    remarks: String_comparison_exp
    update_at: timestamptz_comparison_exp
    update_by: String_comparison_exp
}

# unique or primary key constraints on table "province"
enum province_constraint {
    # unique or primary key constraint
    province_pkey
}

# input type for incrementing integer column in table "province"
input province_inc_input {
    id: bigint
}

# input type for inserting data into table "province"
input province_insert_input {
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    is_delete: Boolean
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregate max on columns
type province_max_fields {
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# order by max() on columns of table "province"
input province_max_order_by {
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    name: order_by
    province_id: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# aggregate min on columns
type province_min_fields {
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# order by min() on columns of table "province"
input province_min_order_by {
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    name: order_by
    province_id: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# response of any mutation on the table "province"
type province_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!
    # data of the affected rows by the mutation
    returning: [province!]!
}

# input type for inserting object relation for remote table "province"
input province_obj_rel_insert_input {
    data: province_insert_input!
    on_conflict: province_on_conflict
}

# on conflict condition type for table "province"
input province_on_conflict {
    constraint: province_constraint!
    update_columns: [province_update_column!]!
    where: province_bool_exp
}

# ordering options when selecting data from "province"
input province_order_by {
    code: order_by
    create_at: order_by
    create_by: order_by
    delete_at: order_by
    delete_by: order_by
    id: order_by
    is_delete: order_by
    name: order_by
    province_id: order_by
    remarks: order_by
    update_at: order_by
    update_by: order_by
}

# primary key columns input for table: "province"
input province_pk_columns_input {
    id: bigint!
}

# select columns of table "province"
enum province_select_column {
    # column name
    code
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    id
    # column name
    is_delete
    # column name
    name
    # column name
    province_id
    # column name
    remarks
    # column name
    update_at
    # column name
    update_by
}

# input type for updating data in table "province"
input province_set_input {
    code: String
    create_at: timestamptz
    create_by: String
    delete_at: timestamptz
    delete_by: String
    id: bigint
    is_delete: Boolean
    name: String
    province_id: String
    remarks: String
    update_at: timestamptz
    update_by: String
}

# aggregate stddev on columns
type province_stddev_fields {
    id: Float
}

# order by stddev() on columns of table "province"
input province_stddev_order_by {
    id: order_by
}

# aggregate stddev_pop on columns
type province_stddev_pop_fields {
    id: Float
}

# order by stddev_pop() on columns of table "province"
input province_stddev_pop_order_by {
    id: order_by
}

# aggregate stddev_samp on columns
type province_stddev_samp_fields {
    id: Float
}

# order by stddev_samp() on columns of table "province"
input province_stddev_samp_order_by {
    id: order_by
}

# aggregate sum on columns
type province_sum_fields {
    id: bigint
}

# order by sum() on columns of table "province"
input province_sum_order_by {
    id: order_by
}

# update columns of table "province"
enum province_update_column {
    # column name
    code
    # column name
    create_at
    # column name
    create_by
    # column name
    delete_at
    # column name
    delete_by
    # column name
    id
    # column name
    is_delete
    # column name
    name
    # column name
    province_id
    # column name
    remarks
    # column name
    update_at
    # column name
    update_by
}

# aggregate var_pop on columns
type province_var_pop_fields {
    id: Float
}

# order by var_pop() on columns of table "province"
input province_var_pop_order_by {
    id: order_by
}

# aggregate var_samp on columns
type province_var_samp_fields {
    id: Float
}

# order by var_samp() on columns of table "province"
input province_var_samp_order_by {
    id: order_by
}

# aggregate variance on columns
type province_variance_fields {
    id: Float
}

# order by variance() on columns of table "province"
input province_variance_order_by {
    id: order_by
}