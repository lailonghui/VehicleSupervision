// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
}

type PageInfo struct {
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
}

type City struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         int64      `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type CityAggregate struct {
	Aggregate *CityAggregateFields `json:"aggregate"`
	Nodes     []*City              `json:"nodes"`
}

type CityAggregateFields struct {
	Avg        *CityAvgFields        `json:"avg"`
	Count      *int                  `json:"count"`
	Max        *CityMaxFields        `json:"max"`
	Min        *CityMinFields        `json:"min"`
	Stddev     *CityStddevFields     `json:"stddev"`
	StddevPop  *CityStddevPopFields  `json:"stddev_pop"`
	StddevSamp *CityStddevSampFields `json:"stddev_samp"`
	Sum        *CitySumFields        `json:"sum"`
	VarPop     *CityVarPopFields     `json:"var_pop"`
	VarSamp    *CityVarSampFields    `json:"var_samp"`
	Variance   *CityVarianceFields   `json:"variance"`
}

type CityAggregateOrderBy struct {
	Avg        *CityAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy         `json:"count"`
	Max        *CityMaxOrderBy        `json:"max"`
	Min        *CityMinOrderBy        `json:"min"`
	Stddev     *CityStddevOrderBy     `json:"stddev"`
	StddevPop  *CityStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *CityStddevSampOrderBy `json:"stddev_samp"`
	Sum        *CitySumOrderBy        `json:"sum"`
	VarPop     *CityVarPopOrderBy     `json:"var_pop"`
	VarSamp    *CityVarSampOrderBy    `json:"var_samp"`
	Variance   *CityVarianceOrderBy   `json:"variance"`
}

type CityArrRelInsertInput struct {
	Data       []*CityInsertInput `json:"data"`
	OnConflict *CityOnConflict    `json:"on_conflict"`
}

type CityAvgFields struct {
	ID *float64 `json:"id"`
}

type CityAvgOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type CityBoolExp struct {
	And        []*CityBoolExp                  `json:"_and"`
	Not        *CityBoolExp                    `json:"_not"`
	Or         []*CityBoolExp                  `json:"_or"`
	CityID     *model.StringComparisonExp      `json:"city_id"`
	Code       *model.StringComparisonExp      `json:"code"`
	CreateAt   *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy   *model.StringComparisonExp      `json:"create_by"`
	DeleteAt   *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy   *model.StringComparisonExp      `json:"delete_by"`
	ID         *model.BigintComparisonExp      `json:"id"`
	IsDelete   *model.BooleanComparisonExp     `json:"is_delete"`
	Name       *model.StringComparisonExp      `json:"name"`
	ProvinceID *model.StringComparisonExp      `json:"province_id"`
	Remarks    *model.StringComparisonExp      `json:"remarks"`
	UpdateAt   *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy   *model.StringComparisonExp      `json:"update_by"`
}

type CityIncInput struct {
	ID *int64 `json:"id"`
}

type CityInsertInput struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         *int64     `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type CityMaxFields struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         *int64     `json:"id"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type CityMaxOrderBy struct {
	CityID     *model.OrderBy `json:"city_id"`
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	ID         *model.OrderBy `json:"id"`
	Name       *model.OrderBy `json:"name"`
	ProvinceID *model.OrderBy `json:"province_id"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type CityMinFields struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         *int64     `json:"id"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type CityMinOrderBy struct {
	CityID     *model.OrderBy `json:"city_id"`
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	ID         *model.OrderBy `json:"id"`
	Name       *model.OrderBy `json:"name"`
	ProvinceID *model.OrderBy `json:"province_id"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type CityMutationResponse struct {
	AffectedRows int     `json:"affected_rows"`
	Returning    []*City `json:"returning"`
}

type CityObjRelInsertInput struct {
	Data       *CityInsertInput `json:"data"`
	OnConflict *CityOnConflict  `json:"on_conflict"`
}

type CityOnConflict struct {
	Constraint    CityConstraint     `json:"constraint"`
	UpdateColumns []CityUpdateColumn `json:"update_columns"`
	Where         *CityBoolExp       `json:"where"`
}

type CityOrderBy struct {
	CityID     *model.OrderBy `json:"city_id"`
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	ID         *model.OrderBy `json:"id"`
	IsDelete   *model.OrderBy `json:"is_delete"`
	Name       *model.OrderBy `json:"name"`
	ProvinceID *model.OrderBy `json:"province_id"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type CityPkColumnsInput struct {
	ID int64 `json:"id"`
}

type CitySetInput struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         *int64     `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type CityStddevFields struct {
	ID *float64 `json:"id"`
}

type CityStddevOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type CityStddevPopFields struct {
	ID *float64 `json:"id"`
}

type CityStddevPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type CityStddevSampFields struct {
	ID *float64 `json:"id"`
}

type CityStddevSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type CitySumFields struct {
	ID *int64 `json:"id"`
}

type CitySumOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type CityVarPopFields struct {
	ID *float64 `json:"id"`
}

type CityVarPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type CityVarSampFields struct {
	ID *float64 `json:"id"`
}

type CityVarSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type CityVarianceFields struct {
	ID *float64 `json:"id"`
}

type CityVarianceOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type District struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	DistrictID *string    `json:"district_id"`
	ID         int64      `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type DistrictAggregate struct {
	Aggregate *DistrictAggregateFields `json:"aggregate"`
	Nodes     []*District              `json:"nodes"`
}

type DistrictAggregateFields struct {
	Avg        *DistrictAvgFields        `json:"avg"`
	Count      *int                      `json:"count"`
	Max        *DistrictMaxFields        `json:"max"`
	Min        *DistrictMinFields        `json:"min"`
	Stddev     *DistrictStddevFields     `json:"stddev"`
	StddevPop  *DistrictStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DistrictStddevSampFields `json:"stddev_samp"`
	Sum        *DistrictSumFields        `json:"sum"`
	VarPop     *DistrictVarPopFields     `json:"var_pop"`
	VarSamp    *DistrictVarSampFields    `json:"var_samp"`
	Variance   *DistrictVarianceFields   `json:"variance"`
}

type DistrictAggregateOrderBy struct {
	Avg        *DistrictAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy             `json:"count"`
	Max        *DistrictMaxOrderBy        `json:"max"`
	Min        *DistrictMinOrderBy        `json:"min"`
	Stddev     *DistrictStddevOrderBy     `json:"stddev"`
	StddevPop  *DistrictStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *DistrictStddevSampOrderBy `json:"stddev_samp"`
	Sum        *DistrictSumOrderBy        `json:"sum"`
	VarPop     *DistrictVarPopOrderBy     `json:"var_pop"`
	VarSamp    *DistrictVarSampOrderBy    `json:"var_samp"`
	Variance   *DistrictVarianceOrderBy   `json:"variance"`
}

type DistrictArrRelInsertInput struct {
	Data       []*DistrictInsertInput `json:"data"`
	OnConflict *DistrictOnConflict    `json:"on_conflict"`
}

type DistrictAvgFields struct {
	ID *float64 `json:"id"`
}

type DistrictAvgOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type DistrictBoolExp struct {
	And        []*DistrictBoolExp              `json:"_and"`
	Not        *DistrictBoolExp                `json:"_not"`
	Or         []*DistrictBoolExp              `json:"_or"`
	CityID     *model.StringComparisonExp      `json:"city_id"`
	Code       *model.StringComparisonExp      `json:"code"`
	CreateAt   *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy   *model.StringComparisonExp      `json:"create_by"`
	DeleteAt   *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy   *model.StringComparisonExp      `json:"delete_by"`
	DistrictID *model.StringComparisonExp      `json:"district_id"`
	ID         *model.BigintComparisonExp      `json:"id"`
	IsDelete   *model.BooleanComparisonExp     `json:"is_delete"`
	Name       *model.StringComparisonExp      `json:"name"`
	Remarks    *model.StringComparisonExp      `json:"remarks"`
	UpdateAt   *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy   *model.StringComparisonExp      `json:"update_by"`
}

type DistrictIncInput struct {
	ID *int64 `json:"id"`
}

type DistrictInsertInput struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	DistrictID *string    `json:"district_id"`
	ID         *int64     `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type DistrictMaxFields struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	DistrictID *string    `json:"district_id"`
	ID         *int64     `json:"id"`
	Name       *string    `json:"name"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type DistrictMaxOrderBy struct {
	CityID     *model.OrderBy `json:"city_id"`
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	DistrictID *model.OrderBy `json:"district_id"`
	ID         *model.OrderBy `json:"id"`
	Name       *model.OrderBy `json:"name"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type DistrictMinFields struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	DistrictID *string    `json:"district_id"`
	ID         *int64     `json:"id"`
	Name       *string    `json:"name"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type DistrictMinOrderBy struct {
	CityID     *model.OrderBy `json:"city_id"`
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	DistrictID *model.OrderBy `json:"district_id"`
	ID         *model.OrderBy `json:"id"`
	Name       *model.OrderBy `json:"name"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type DistrictMutationResponse struct {
	AffectedRows int         `json:"affected_rows"`
	Returning    []*District `json:"returning"`
}

type DistrictObjRelInsertInput struct {
	Data       *DistrictInsertInput `json:"data"`
	OnConflict *DistrictOnConflict  `json:"on_conflict"`
}

type DistrictOnConflict struct {
	Constraint    DistrictConstraint     `json:"constraint"`
	UpdateColumns []DistrictUpdateColumn `json:"update_columns"`
	Where         *DistrictBoolExp       `json:"where"`
}

type DistrictOrderBy struct {
	CityID     *model.OrderBy `json:"city_id"`
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	DistrictID *model.OrderBy `json:"district_id"`
	ID         *model.OrderBy `json:"id"`
	IsDelete   *model.OrderBy `json:"is_delete"`
	Name       *model.OrderBy `json:"name"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type DistrictPkColumnsInput struct {
	ID int64 `json:"id"`
}

type DistrictSetInput struct {
	CityID     *string    `json:"city_id"`
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	DistrictID *string    `json:"district_id"`
	ID         *int64     `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type DistrictStddevFields struct {
	ID *float64 `json:"id"`
}

type DistrictStddevOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type DistrictStddevPopFields struct {
	ID *float64 `json:"id"`
}

type DistrictStddevPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type DistrictStddevSampFields struct {
	ID *float64 `json:"id"`
}

type DistrictStddevSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type DistrictSumFields struct {
	ID *int64 `json:"id"`
}

type DistrictSumOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type DistrictVarPopFields struct {
	ID *float64 `json:"id"`
}

type DistrictVarPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type DistrictVarSampFields struct {
	ID *float64 `json:"id"`
}

type DistrictVarSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type DistrictVarianceFields struct {
	ID *float64 `json:"id"`
}

type DistrictVarianceOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type NumericComparisonExp struct {
	Eq     *float64  `json:"_eq"`
	Gt     *float64  `json:"_gt"`
	Gte    *float64  `json:"_gte"`
	In     []float64 `json:"_in"`
	IsNull *bool     `json:"_is_null"`
	Lt     *float64  `json:"_lt"`
	Lte    *float64  `json:"_lte"`
	Neq    *float64  `json:"_neq"`
	Nin    []float64 `json:"_nin"`
}

type Province struct {
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         int64      `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type ProvinceAggregate struct {
	Aggregate *ProvinceAggregateFields `json:"aggregate"`
	Nodes     []*Province              `json:"nodes"`
}

type ProvinceAggregateFields struct {
	Avg        *ProvinceAvgFields        `json:"avg"`
	Count      *int                      `json:"count"`
	Max        *ProvinceMaxFields        `json:"max"`
	Min        *ProvinceMinFields        `json:"min"`
	Stddev     *ProvinceStddevFields     `json:"stddev"`
	StddevPop  *ProvinceStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ProvinceStddevSampFields `json:"stddev_samp"`
	Sum        *ProvinceSumFields        `json:"sum"`
	VarPop     *ProvinceVarPopFields     `json:"var_pop"`
	VarSamp    *ProvinceVarSampFields    `json:"var_samp"`
	Variance   *ProvinceVarianceFields   `json:"variance"`
}

type ProvinceAggregateOrderBy struct {
	Avg        *ProvinceAvgOrderBy        `json:"avg"`
	Count      *model.OrderBy             `json:"count"`
	Max        *ProvinceMaxOrderBy        `json:"max"`
	Min        *ProvinceMinOrderBy        `json:"min"`
	Stddev     *ProvinceStddevOrderBy     `json:"stddev"`
	StddevPop  *ProvinceStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *ProvinceStddevSampOrderBy `json:"stddev_samp"`
	Sum        *ProvinceSumOrderBy        `json:"sum"`
	VarPop     *ProvinceVarPopOrderBy     `json:"var_pop"`
	VarSamp    *ProvinceVarSampOrderBy    `json:"var_samp"`
	Variance   *ProvinceVarianceOrderBy   `json:"variance"`
}

type ProvinceArrRelInsertInput struct {
	Data       []*ProvinceInsertInput `json:"data"`
	OnConflict *ProvinceOnConflict    `json:"on_conflict"`
}

type ProvinceAvgFields struct {
	ID *float64 `json:"id"`
}

type ProvinceAvgOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type ProvinceBoolExp struct {
	And        []*ProvinceBoolExp              `json:"_and"`
	Not        *ProvinceBoolExp                `json:"_not"`
	Or         []*ProvinceBoolExp              `json:"_or"`
	Code       *model.StringComparisonExp      `json:"code"`
	CreateAt   *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy   *model.StringComparisonExp      `json:"create_by"`
	DeleteAt   *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy   *model.StringComparisonExp      `json:"delete_by"`
	ID         *model.BigintComparisonExp      `json:"id"`
	IsDelete   *model.BooleanComparisonExp     `json:"is_delete"`
	Name       *model.StringComparisonExp      `json:"name"`
	ProvinceID *model.StringComparisonExp      `json:"province_id"`
	Remarks    *model.StringComparisonExp      `json:"remarks"`
	UpdateAt   *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy   *model.StringComparisonExp      `json:"update_by"`
}

type ProvinceIncInput struct {
	ID *int64 `json:"id"`
}

type ProvinceInsertInput struct {
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         *int64     `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type ProvinceMaxFields struct {
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         *int64     `json:"id"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type ProvinceMaxOrderBy struct {
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	ID         *model.OrderBy `json:"id"`
	Name       *model.OrderBy `json:"name"`
	ProvinceID *model.OrderBy `json:"province_id"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type ProvinceMinFields struct {
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         *int64     `json:"id"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type ProvinceMinOrderBy struct {
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	ID         *model.OrderBy `json:"id"`
	Name       *model.OrderBy `json:"name"`
	ProvinceID *model.OrderBy `json:"province_id"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type ProvinceMutationResponse struct {
	AffectedRows int         `json:"affected_rows"`
	Returning    []*Province `json:"returning"`
}

type ProvinceObjRelInsertInput struct {
	Data       *ProvinceInsertInput `json:"data"`
	OnConflict *ProvinceOnConflict  `json:"on_conflict"`
}

type ProvinceOnConflict struct {
	Constraint    ProvinceConstraint     `json:"constraint"`
	UpdateColumns []ProvinceUpdateColumn `json:"update_columns"`
	Where         *ProvinceBoolExp       `json:"where"`
}

type ProvinceOrderBy struct {
	Code       *model.OrderBy `json:"code"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	ID         *model.OrderBy `json:"id"`
	IsDelete   *model.OrderBy `json:"is_delete"`
	Name       *model.OrderBy `json:"name"`
	ProvinceID *model.OrderBy `json:"province_id"`
	Remarks    *model.OrderBy `json:"remarks"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
}

type ProvincePkColumnsInput struct {
	ID int64 `json:"id"`
}

type ProvinceSetInput struct {
	Code       *string    `json:"code"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	ID         *int64     `json:"id"`
	IsDelete   *bool      `json:"is_delete"`
	Name       *string    `json:"name"`
	ProvinceID *string    `json:"province_id"`
	Remarks    *string    `json:"remarks"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
}

type ProvinceStddevFields struct {
	ID *float64 `json:"id"`
}

type ProvinceStddevOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type ProvinceStddevPopFields struct {
	ID *float64 `json:"id"`
}

type ProvinceStddevPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type ProvinceStddevSampFields struct {
	ID *float64 `json:"id"`
}

type ProvinceStddevSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type ProvinceSumFields struct {
	ID *int64 `json:"id"`
}

type ProvinceSumOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type ProvinceVarPopFields struct {
	ID *float64 `json:"id"`
}

type ProvinceVarPopOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type ProvinceVarSampFields struct {
	ID *float64 `json:"id"`
}

type ProvinceVarSampOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type ProvinceVarianceFields struct {
	ID *float64 `json:"id"`
}

type ProvinceVarianceOrderBy struct {
	ID *model.OrderBy `json:"id"`
}

type CityConstraint string

const (
	CityConstraintCityPkey CityConstraint = "city_pkey"
)

var AllCityConstraint = []CityConstraint{
	CityConstraintCityPkey,
}

func (e CityConstraint) IsValid() bool {
	switch e {
	case CityConstraintCityPkey:
		return true
	}
	return false
}

func (e CityConstraint) String() string {
	return string(e)
}

func (e *CityConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CityConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid city_constraint", str)
	}
	return nil
}

func (e CityConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CitySelectColumn string

const (
	CitySelectColumnCityID     CitySelectColumn = "city_id"
	CitySelectColumnCode       CitySelectColumn = "code"
	CitySelectColumnCreateAt   CitySelectColumn = "create_at"
	CitySelectColumnCreateBy   CitySelectColumn = "create_by"
	CitySelectColumnDeleteAt   CitySelectColumn = "delete_at"
	CitySelectColumnDeleteBy   CitySelectColumn = "delete_by"
	CitySelectColumnID         CitySelectColumn = "id"
	CitySelectColumnIsDelete   CitySelectColumn = "is_delete"
	CitySelectColumnName       CitySelectColumn = "name"
	CitySelectColumnProvinceID CitySelectColumn = "province_id"
	CitySelectColumnRemarks    CitySelectColumn = "remarks"
	CitySelectColumnUpdateAt   CitySelectColumn = "update_at"
	CitySelectColumnUpdateBy   CitySelectColumn = "update_by"
)

var AllCitySelectColumn = []CitySelectColumn{
	CitySelectColumnCityID,
	CitySelectColumnCode,
	CitySelectColumnCreateAt,
	CitySelectColumnCreateBy,
	CitySelectColumnDeleteAt,
	CitySelectColumnDeleteBy,
	CitySelectColumnID,
	CitySelectColumnIsDelete,
	CitySelectColumnName,
	CitySelectColumnProvinceID,
	CitySelectColumnRemarks,
	CitySelectColumnUpdateAt,
	CitySelectColumnUpdateBy,
}

func (e CitySelectColumn) IsValid() bool {
	switch e {
	case CitySelectColumnCityID, CitySelectColumnCode, CitySelectColumnCreateAt, CitySelectColumnCreateBy, CitySelectColumnDeleteAt, CitySelectColumnDeleteBy, CitySelectColumnID, CitySelectColumnIsDelete, CitySelectColumnName, CitySelectColumnProvinceID, CitySelectColumnRemarks, CitySelectColumnUpdateAt, CitySelectColumnUpdateBy:
		return true
	}
	return false
}

func (e CitySelectColumn) String() string {
	return string(e)
}

func (e *CitySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CitySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid city_select_column", str)
	}
	return nil
}

func (e CitySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CityUpdateColumn string

const (
	CityUpdateColumnCityID     CityUpdateColumn = "city_id"
	CityUpdateColumnCode       CityUpdateColumn = "code"
	CityUpdateColumnCreateAt   CityUpdateColumn = "create_at"
	CityUpdateColumnCreateBy   CityUpdateColumn = "create_by"
	CityUpdateColumnDeleteAt   CityUpdateColumn = "delete_at"
	CityUpdateColumnDeleteBy   CityUpdateColumn = "delete_by"
	CityUpdateColumnID         CityUpdateColumn = "id"
	CityUpdateColumnIsDelete   CityUpdateColumn = "is_delete"
	CityUpdateColumnName       CityUpdateColumn = "name"
	CityUpdateColumnProvinceID CityUpdateColumn = "province_id"
	CityUpdateColumnRemarks    CityUpdateColumn = "remarks"
	CityUpdateColumnUpdateAt   CityUpdateColumn = "update_at"
	CityUpdateColumnUpdateBy   CityUpdateColumn = "update_by"
)

var AllCityUpdateColumn = []CityUpdateColumn{
	CityUpdateColumnCityID,
	CityUpdateColumnCode,
	CityUpdateColumnCreateAt,
	CityUpdateColumnCreateBy,
	CityUpdateColumnDeleteAt,
	CityUpdateColumnDeleteBy,
	CityUpdateColumnID,
	CityUpdateColumnIsDelete,
	CityUpdateColumnName,
	CityUpdateColumnProvinceID,
	CityUpdateColumnRemarks,
	CityUpdateColumnUpdateAt,
	CityUpdateColumnUpdateBy,
}

func (e CityUpdateColumn) IsValid() bool {
	switch e {
	case CityUpdateColumnCityID, CityUpdateColumnCode, CityUpdateColumnCreateAt, CityUpdateColumnCreateBy, CityUpdateColumnDeleteAt, CityUpdateColumnDeleteBy, CityUpdateColumnID, CityUpdateColumnIsDelete, CityUpdateColumnName, CityUpdateColumnProvinceID, CityUpdateColumnRemarks, CityUpdateColumnUpdateAt, CityUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e CityUpdateColumn) String() string {
	return string(e)
}

func (e *CityUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CityUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid city_update_column", str)
	}
	return nil
}

func (e CityUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DistrictConstraint string

const (
	DistrictConstraintDistrictPkey DistrictConstraint = "district_pkey"
)

var AllDistrictConstraint = []DistrictConstraint{
	DistrictConstraintDistrictPkey,
}

func (e DistrictConstraint) IsValid() bool {
	switch e {
	case DistrictConstraintDistrictPkey:
		return true
	}
	return false
}

func (e DistrictConstraint) String() string {
	return string(e)
}

func (e *DistrictConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistrictConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid district_constraint", str)
	}
	return nil
}

func (e DistrictConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DistrictSelectColumn string

const (
	DistrictSelectColumnCityID     DistrictSelectColumn = "city_id"
	DistrictSelectColumnCode       DistrictSelectColumn = "code"
	DistrictSelectColumnCreateAt   DistrictSelectColumn = "create_at"
	DistrictSelectColumnCreateBy   DistrictSelectColumn = "create_by"
	DistrictSelectColumnDeleteAt   DistrictSelectColumn = "delete_at"
	DistrictSelectColumnDeleteBy   DistrictSelectColumn = "delete_by"
	DistrictSelectColumnDistrictID DistrictSelectColumn = "district_id"
	DistrictSelectColumnID         DistrictSelectColumn = "id"
	DistrictSelectColumnIsDelete   DistrictSelectColumn = "is_delete"
	DistrictSelectColumnName       DistrictSelectColumn = "name"
	DistrictSelectColumnRemarks    DistrictSelectColumn = "remarks"
	DistrictSelectColumnUpdateAt   DistrictSelectColumn = "update_at"
	DistrictSelectColumnUpdateBy   DistrictSelectColumn = "update_by"
)

var AllDistrictSelectColumn = []DistrictSelectColumn{
	DistrictSelectColumnCityID,
	DistrictSelectColumnCode,
	DistrictSelectColumnCreateAt,
	DistrictSelectColumnCreateBy,
	DistrictSelectColumnDeleteAt,
	DistrictSelectColumnDeleteBy,
	DistrictSelectColumnDistrictID,
	DistrictSelectColumnID,
	DistrictSelectColumnIsDelete,
	DistrictSelectColumnName,
	DistrictSelectColumnRemarks,
	DistrictSelectColumnUpdateAt,
	DistrictSelectColumnUpdateBy,
}

func (e DistrictSelectColumn) IsValid() bool {
	switch e {
	case DistrictSelectColumnCityID, DistrictSelectColumnCode, DistrictSelectColumnCreateAt, DistrictSelectColumnCreateBy, DistrictSelectColumnDeleteAt, DistrictSelectColumnDeleteBy, DistrictSelectColumnDistrictID, DistrictSelectColumnID, DistrictSelectColumnIsDelete, DistrictSelectColumnName, DistrictSelectColumnRemarks, DistrictSelectColumnUpdateAt, DistrictSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e DistrictSelectColumn) String() string {
	return string(e)
}

func (e *DistrictSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistrictSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid district_select_column", str)
	}
	return nil
}

func (e DistrictSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DistrictUpdateColumn string

const (
	DistrictUpdateColumnCityID     DistrictUpdateColumn = "city_id"
	DistrictUpdateColumnCode       DistrictUpdateColumn = "code"
	DistrictUpdateColumnCreateAt   DistrictUpdateColumn = "create_at"
	DistrictUpdateColumnCreateBy   DistrictUpdateColumn = "create_by"
	DistrictUpdateColumnDeleteAt   DistrictUpdateColumn = "delete_at"
	DistrictUpdateColumnDeleteBy   DistrictUpdateColumn = "delete_by"
	DistrictUpdateColumnDistrictID DistrictUpdateColumn = "district_id"
	DistrictUpdateColumnID         DistrictUpdateColumn = "id"
	DistrictUpdateColumnIsDelete   DistrictUpdateColumn = "is_delete"
	DistrictUpdateColumnName       DistrictUpdateColumn = "name"
	DistrictUpdateColumnRemarks    DistrictUpdateColumn = "remarks"
	DistrictUpdateColumnUpdateAt   DistrictUpdateColumn = "update_at"
	DistrictUpdateColumnUpdateBy   DistrictUpdateColumn = "update_by"
)

var AllDistrictUpdateColumn = []DistrictUpdateColumn{
	DistrictUpdateColumnCityID,
	DistrictUpdateColumnCode,
	DistrictUpdateColumnCreateAt,
	DistrictUpdateColumnCreateBy,
	DistrictUpdateColumnDeleteAt,
	DistrictUpdateColumnDeleteBy,
	DistrictUpdateColumnDistrictID,
	DistrictUpdateColumnID,
	DistrictUpdateColumnIsDelete,
	DistrictUpdateColumnName,
	DistrictUpdateColumnRemarks,
	DistrictUpdateColumnUpdateAt,
	DistrictUpdateColumnUpdateBy,
}

func (e DistrictUpdateColumn) IsValid() bool {
	switch e {
	case DistrictUpdateColumnCityID, DistrictUpdateColumnCode, DistrictUpdateColumnCreateAt, DistrictUpdateColumnCreateBy, DistrictUpdateColumnDeleteAt, DistrictUpdateColumnDeleteBy, DistrictUpdateColumnDistrictID, DistrictUpdateColumnID, DistrictUpdateColumnIsDelete, DistrictUpdateColumnName, DistrictUpdateColumnRemarks, DistrictUpdateColumnUpdateAt, DistrictUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e DistrictUpdateColumn) String() string {
	return string(e)
}

func (e *DistrictUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistrictUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid district_update_column", str)
	}
	return nil
}

func (e DistrictUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProvinceConstraint string

const (
	ProvinceConstraintProvincePkey ProvinceConstraint = "province_pkey"
)

var AllProvinceConstraint = []ProvinceConstraint{
	ProvinceConstraintProvincePkey,
}

func (e ProvinceConstraint) IsValid() bool {
	switch e {
	case ProvinceConstraintProvincePkey:
		return true
	}
	return false
}

func (e ProvinceConstraint) String() string {
	return string(e)
}

func (e *ProvinceConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProvinceConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid province_constraint", str)
	}
	return nil
}

func (e ProvinceConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProvinceSelectColumn string

const (
	ProvinceSelectColumnCode       ProvinceSelectColumn = "code"
	ProvinceSelectColumnCreateAt   ProvinceSelectColumn = "create_at"
	ProvinceSelectColumnCreateBy   ProvinceSelectColumn = "create_by"
	ProvinceSelectColumnDeleteAt   ProvinceSelectColumn = "delete_at"
	ProvinceSelectColumnDeleteBy   ProvinceSelectColumn = "delete_by"
	ProvinceSelectColumnID         ProvinceSelectColumn = "id"
	ProvinceSelectColumnIsDelete   ProvinceSelectColumn = "is_delete"
	ProvinceSelectColumnName       ProvinceSelectColumn = "name"
	ProvinceSelectColumnProvinceID ProvinceSelectColumn = "province_id"
	ProvinceSelectColumnRemarks    ProvinceSelectColumn = "remarks"
	ProvinceSelectColumnUpdateAt   ProvinceSelectColumn = "update_at"
	ProvinceSelectColumnUpdateBy   ProvinceSelectColumn = "update_by"
)

var AllProvinceSelectColumn = []ProvinceSelectColumn{
	ProvinceSelectColumnCode,
	ProvinceSelectColumnCreateAt,
	ProvinceSelectColumnCreateBy,
	ProvinceSelectColumnDeleteAt,
	ProvinceSelectColumnDeleteBy,
	ProvinceSelectColumnID,
	ProvinceSelectColumnIsDelete,
	ProvinceSelectColumnName,
	ProvinceSelectColumnProvinceID,
	ProvinceSelectColumnRemarks,
	ProvinceSelectColumnUpdateAt,
	ProvinceSelectColumnUpdateBy,
}

func (e ProvinceSelectColumn) IsValid() bool {
	switch e {
	case ProvinceSelectColumnCode, ProvinceSelectColumnCreateAt, ProvinceSelectColumnCreateBy, ProvinceSelectColumnDeleteAt, ProvinceSelectColumnDeleteBy, ProvinceSelectColumnID, ProvinceSelectColumnIsDelete, ProvinceSelectColumnName, ProvinceSelectColumnProvinceID, ProvinceSelectColumnRemarks, ProvinceSelectColumnUpdateAt, ProvinceSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e ProvinceSelectColumn) String() string {
	return string(e)
}

func (e *ProvinceSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProvinceSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid province_select_column", str)
	}
	return nil
}

func (e ProvinceSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProvinceUpdateColumn string

const (
	ProvinceUpdateColumnCode       ProvinceUpdateColumn = "code"
	ProvinceUpdateColumnCreateAt   ProvinceUpdateColumn = "create_at"
	ProvinceUpdateColumnCreateBy   ProvinceUpdateColumn = "create_by"
	ProvinceUpdateColumnDeleteAt   ProvinceUpdateColumn = "delete_at"
	ProvinceUpdateColumnDeleteBy   ProvinceUpdateColumn = "delete_by"
	ProvinceUpdateColumnID         ProvinceUpdateColumn = "id"
	ProvinceUpdateColumnIsDelete   ProvinceUpdateColumn = "is_delete"
	ProvinceUpdateColumnName       ProvinceUpdateColumn = "name"
	ProvinceUpdateColumnProvinceID ProvinceUpdateColumn = "province_id"
	ProvinceUpdateColumnRemarks    ProvinceUpdateColumn = "remarks"
	ProvinceUpdateColumnUpdateAt   ProvinceUpdateColumn = "update_at"
	ProvinceUpdateColumnUpdateBy   ProvinceUpdateColumn = "update_by"
)

var AllProvinceUpdateColumn = []ProvinceUpdateColumn{
	ProvinceUpdateColumnCode,
	ProvinceUpdateColumnCreateAt,
	ProvinceUpdateColumnCreateBy,
	ProvinceUpdateColumnDeleteAt,
	ProvinceUpdateColumnDeleteBy,
	ProvinceUpdateColumnID,
	ProvinceUpdateColumnIsDelete,
	ProvinceUpdateColumnName,
	ProvinceUpdateColumnProvinceID,
	ProvinceUpdateColumnRemarks,
	ProvinceUpdateColumnUpdateAt,
	ProvinceUpdateColumnUpdateBy,
}

func (e ProvinceUpdateColumn) IsValid() bool {
	switch e {
	case ProvinceUpdateColumnCode, ProvinceUpdateColumnCreateAt, ProvinceUpdateColumnCreateBy, ProvinceUpdateColumnDeleteAt, ProvinceUpdateColumnDeleteBy, ProvinceUpdateColumnID, ProvinceUpdateColumnIsDelete, ProvinceUpdateColumnName, ProvinceUpdateColumnProvinceID, ProvinceUpdateColumnRemarks, ProvinceUpdateColumnUpdateAt, ProvinceUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e ProvinceUpdateColumn) String() string {
	return string(e)
}

func (e *ProvinceUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProvinceUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid province_update_column", str)
	}
	return nil
}

func (e ProvinceUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
