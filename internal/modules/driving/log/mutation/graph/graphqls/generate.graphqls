

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

scalar date

"""
expression to compare columns of type date. All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
行车日志


columns and relationships of "driving_log"

"""
type driving_log {
  """事由"""
  cause: String

  """审核机构级别"""
  check_organization_level: Int!

  """审核状态"""
  check_state: Int!

  """创建时间"""
  create_at: timestamptz!

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """驾驶员ID"""
  driver_id: String!

  """用车结束日期"""
  driving_end_time: date!

  """行车日志ID"""
  driving_log_id: String!

  """用车起始日期"""
  driving_start_time: date!

  """结束时间"""
  end_time: timestamptz!

  """ID"""
  id: bigint!

  """是否删除"""
  is_delete: Boolean!

  """是否补录"""
  is_fill: Boolean!

  """登记时间"""
  register_at: timestamptz

  """登记人"""
  register_by: String

  """备注"""
  remarks: String

  """路线"""
  route: String

  """开始时间"""
  start_time: timestamptz!

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String

  """车辆ID"""
  vehicle_id: String!
}

"""
aggregated selection of "driving_log"
"""
type driving_log_aggregate {
  aggregate: driving_log_aggregate_fields
  nodes: [driving_log!]!
}

"""
aggregate fields of "driving_log"
"""
type driving_log_aggregate_fields {
  avg: driving_log_avg_fields
  count(columns: [driving_log_select_column!], distinct: Boolean): Int
  max: driving_log_max_fields
  min: driving_log_min_fields
  stddev: driving_log_stddev_fields
  stddev_pop: driving_log_stddev_pop_fields
  stddev_samp: driving_log_stddev_samp_fields
  sum: driving_log_sum_fields
  var_pop: driving_log_var_pop_fields
  var_samp: driving_log_var_samp_fields
  variance: driving_log_variance_fields
}

"""
order by aggregate values of table "driving_log"
"""
input driving_log_aggregate_order_by {
  avg: driving_log_avg_order_by
  count: order_by
  max: driving_log_max_order_by
  min: driving_log_min_order_by
  stddev: driving_log_stddev_order_by
  stddev_pop: driving_log_stddev_pop_order_by
  stddev_samp: driving_log_stddev_samp_order_by
  sum: driving_log_sum_order_by
  var_pop: driving_log_var_pop_order_by
  var_samp: driving_log_var_samp_order_by
  variance: driving_log_variance_order_by
}

"""
input type for inserting array relation for remote table "driving_log"
"""
input driving_log_arr_rel_insert_input {
  data: [driving_log_insert_input!]!
  on_conflict: driving_log_on_conflict
}

"""aggregate avg on columns"""
type driving_log_avg_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by avg() on columns of table "driving_log"
"""
input driving_log_avg_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "driving_log". All fields are combined with a logical 'AND'.
"""
input driving_log_bool_exp {
  _and: [driving_log_bool_exp]
  _not: driving_log_bool_exp
  _or: [driving_log_bool_exp]
  cause: String_comparison_exp
  check_organization_level: Int_comparison_exp
  check_state: Int_comparison_exp
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  driver_id: String_comparison_exp
  driving_end_time: date_comparison_exp
  driving_log_id: String_comparison_exp
  driving_start_time: date_comparison_exp
  end_time: timestamptz_comparison_exp
  id: bigint_comparison_exp
  is_delete: Boolean_comparison_exp
  is_fill: Boolean_comparison_exp
  register_at: timestamptz_comparison_exp
  register_by: String_comparison_exp
  remarks: String_comparison_exp
  route: String_comparison_exp
  start_time: timestamptz_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "driving_log"
"""
enum driving_log_constraint {
  """unique or primary key constraint"""
  driving_log_pkey
}

"""
input type for incrementing integer column in table "driving_log"
"""
input driving_log_inc_input {
  check_organization_level: Int
  check_state: Int
  id: bigint
}

"""
input type for inserting data into table "driving_log"
"""
input driving_log_insert_input {
  cause: String
  check_organization_level: Int
  check_state: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driver_id: String
  driving_end_time: date
  driving_log_id: String
  driving_start_time: date
  end_time: timestamptz
  id: bigint
  is_delete: Boolean
  is_fill: Boolean
  register_at: timestamptz
  register_by: String
  remarks: String
  route: String
  start_time: timestamptz
  update_at: timestamptz
  update_by: String
  vehicle_id: String
}

"""aggregate max on columns"""
type driving_log_max_fields {
  cause: String
  check_organization_level: Int
  check_state: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driver_id: String
  driving_end_time: date
  driving_log_id: String
  driving_start_time: date
  end_time: timestamptz
  id: bigint
  register_at: timestamptz
  register_by: String
  remarks: String
  route: String
  start_time: timestamptz
  update_at: timestamptz
  update_by: String
  vehicle_id: String
}

"""
order by max() on columns of table "driving_log"
"""
input driving_log_max_order_by {
  cause: order_by
  check_organization_level: order_by
  check_state: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driver_id: order_by
  driving_end_time: order_by
  driving_log_id: order_by
  driving_start_time: order_by
  end_time: order_by
  id: order_by
  register_at: order_by
  register_by: order_by
  remarks: order_by
  route: order_by
  start_time: order_by
  update_at: order_by
  update_by: order_by
  vehicle_id: order_by
}

"""aggregate min on columns"""
type driving_log_min_fields {
  cause: String
  check_organization_level: Int
  check_state: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driver_id: String
  driving_end_time: date
  driving_log_id: String
  driving_start_time: date
  end_time: timestamptz
  id: bigint
  register_at: timestamptz
  register_by: String
  remarks: String
  route: String
  start_time: timestamptz
  update_at: timestamptz
  update_by: String
  vehicle_id: String
}

"""
order by min() on columns of table "driving_log"
"""
input driving_log_min_order_by {
  cause: order_by
  check_organization_level: order_by
  check_state: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driver_id: order_by
  driving_end_time: order_by
  driving_log_id: order_by
  driving_start_time: order_by
  end_time: order_by
  id: order_by
  register_at: order_by
  register_by: order_by
  remarks: order_by
  route: order_by
  start_time: order_by
  update_at: order_by
  update_by: order_by
  vehicle_id: order_by
}

"""
response of any mutation on the table "driving_log"
"""
type driving_log_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [driving_log!]!
}

"""
input type for inserting object relation for remote table "driving_log"
"""
input driving_log_obj_rel_insert_input {
  data: driving_log_insert_input!
  on_conflict: driving_log_on_conflict
}

"""
on conflict condition type for table "driving_log"
"""
input driving_log_on_conflict {
  constraint: driving_log_constraint!
  update_columns: [driving_log_update_column!]!
  where: driving_log_bool_exp
}

"""
ordering options when selecting data from "driving_log"
"""
input driving_log_order_by {
  cause: order_by
  check_organization_level: order_by
  check_state: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driver_id: order_by
  driving_end_time: order_by
  driving_log_id: order_by
  driving_start_time: order_by
  end_time: order_by
  id: order_by
  is_delete: order_by
  is_fill: order_by
  register_at: order_by
  register_by: order_by
  remarks: order_by
  route: order_by
  start_time: order_by
  update_at: order_by
  update_by: order_by
  vehicle_id: order_by
}

"""
primary key columns input for table: "driving_log"
"""
input driving_log_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "driving_log"
"""
enum driving_log_select_column {
  """column name"""
  cause

  """column name"""
  check_organization_level

  """column name"""
  check_state

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  driver_id

  """column name"""
  driving_end_time

  """column name"""
  driving_log_id

  """column name"""
  driving_start_time

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  is_fill

  """column name"""
  register_at

  """column name"""
  register_by

  """column name"""
  remarks

  """column name"""
  route

  """column name"""
  start_time

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  vehicle_id
}

"""
input type for updating data in table "driving_log"
"""
input driving_log_set_input {
  cause: String
  check_organization_level: Int
  check_state: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driver_id: String
  driving_end_time: date
  driving_log_id: String
  driving_start_time: date
  end_time: timestamptz
  id: bigint
  is_delete: Boolean
  is_fill: Boolean
  register_at: timestamptz
  register_by: String
  remarks: String
  route: String
  start_time: timestamptz
  update_at: timestamptz
  update_by: String
  vehicle_id: String
}

"""aggregate stddev on columns"""
type driving_log_stddev_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by stddev() on columns of table "driving_log"
"""
input driving_log_stddev_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type driving_log_stddev_pop_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "driving_log"
"""
input driving_log_stddev_pop_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type driving_log_stddev_samp_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "driving_log"
"""
input driving_log_stddev_samp_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate sum on columns"""
type driving_log_sum_fields {
  check_organization_level: Int
  check_state: Int
  id: bigint
}

"""
order by sum() on columns of table "driving_log"
"""
input driving_log_sum_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""
update columns of table "driving_log"
"""
enum driving_log_update_column {
  """column name"""
  cause

  """column name"""
  check_organization_level

  """column name"""
  check_state

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  driver_id

  """column name"""
  driving_end_time

  """column name"""
  driving_log_id

  """column name"""
  driving_start_time

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  is_fill

  """column name"""
  register_at

  """column name"""
  register_by

  """column name"""
  remarks

  """column name"""
  route

  """column name"""
  start_time

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  vehicle_id
}

"""aggregate var_pop on columns"""
type driving_log_var_pop_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by var_pop() on columns of table "driving_log"
"""
input driving_log_var_pop_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type driving_log_var_samp_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by var_samp() on columns of table "driving_log"
"""
input driving_log_var_samp_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate variance on columns"""
type driving_log_variance_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by variance() on columns of table "driving_log"
"""
input driving_log_variance_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "driving_log"
  """
  delete_driving_log(
    """filter the rows which have to be deleted"""
    where: driving_log_bool_exp!
  ): driving_log_mutation_response

  """
  delete single row from the table: "driving_log"
  """
  delete_driving_log_by_pk(
    """ID"""
    id: bigint!
  ): driving_log

  """
  insert data into the table: "driving_log"
  """
  insert_driving_log(
    """the rows to be inserted"""
    objects: [driving_log_insert_input!]!

    """on conflict condition"""
    on_conflict: driving_log_on_conflict
  ): driving_log_mutation_response

  """
  insert a single row into the table: "driving_log"
  """
  insert_driving_log_one(
    """the row to be inserted"""
    object: driving_log_insert_input!

    """on conflict condition"""
    on_conflict: driving_log_on_conflict
  ): driving_log

  """
  update data of the table: "driving_log"
  """
  update_driving_log(
    """increments the integer columns with given value of the filtered values"""
    _inc: driving_log_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: driving_log_set_input

    """filter the rows which have to be updated"""
    where: driving_log_bool_exp!
  ): driving_log_mutation_response

  """
  update single row of the table: "driving_log"
  """
  update_driving_log_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: driving_log_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: driving_log_set_input
    pk_columns: driving_log_pk_columns_input!
  ): driving_log
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type Query {
  t: Int
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "driving_log"
  """
  driving_log(
    """distinct select on columns"""
    distinct_on: [driving_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [driving_log_order_by!]

    """filter the rows returned"""
    where: driving_log_bool_exp
  ): [driving_log!]!

  """
  fetch aggregated fields from the table: "driving_log"
  """
  driving_log_aggregate(
    """distinct select on columns"""
    distinct_on: [driving_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [driving_log_order_by!]

    """filter the rows returned"""
    where: driving_log_bool_exp
  ): driving_log_aggregate!

  """fetch data from the table: "driving_log" using primary key columns"""
  driving_log_by_pk(
    """ID"""
    id: bigint!
  ): driving_log
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

