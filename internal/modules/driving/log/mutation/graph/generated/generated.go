// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	model1 "VehicleSupervision/internal/modules/driving/log/model"
	"VehicleSupervision/internal/modules/driving/log/mutation/graph/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteDrivingLog     func(childComplexity int, where model.DrivingLogBoolExp) int
		DeleteDrivingLogByPk func(childComplexity int, id int64) int
		InsertDrivingLog     func(childComplexity int, objects []*model.DrivingLogInsertInput, onConflict *model.DrivingLogOnConflict) int
		InsertDrivingLogOne  func(childComplexity int, object model.DrivingLogInsertInput, onConflict *model.DrivingLogOnConflict) int
		UpdateDrivingLog     func(childComplexity int, inc *model.DrivingLogIncInput, set *model.DrivingLogSetInput, where model.DrivingLogBoolExp) int
		UpdateDrivingLogByPk func(childComplexity int, inc *model.DrivingLogIncInput, set *model.DrivingLogSetInput, pkColumns model.DrivingLogPkColumnsInput) int
	}

	Query struct {
		T func(childComplexity int) int
	}

	DrivingLog struct {
		Cause                  func(childComplexity int) int
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		CreateAt               func(childComplexity int) int
		CreateBy               func(childComplexity int) int
		DeleteAt               func(childComplexity int) int
		DeleteBy               func(childComplexity int) int
		DriverID               func(childComplexity int) int
		DrivingEndTime         func(childComplexity int) int
		DrivingLogID           func(childComplexity int) int
		DrivingStartTime       func(childComplexity int) int
		EndTime                func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsDelete               func(childComplexity int) int
		IsFill                 func(childComplexity int) int
		RegisterAt             func(childComplexity int) int
		RegisterBy             func(childComplexity int) int
		Remarks                func(childComplexity int) int
		Route                  func(childComplexity int) int
		StartTime              func(childComplexity int) int
		UpdateAt               func(childComplexity int) int
		UpdateBy               func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	DrivingLogAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DrivingLogAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DrivingLogSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DrivingLogAvgFields struct {
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	DrivingLogMaxFields struct {
		Cause                  func(childComplexity int) int
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		CreateAt               func(childComplexity int) int
		CreateBy               func(childComplexity int) int
		DeleteAt               func(childComplexity int) int
		DeleteBy               func(childComplexity int) int
		DriverID               func(childComplexity int) int
		DrivingEndTime         func(childComplexity int) int
		DrivingLogID           func(childComplexity int) int
		DrivingStartTime       func(childComplexity int) int
		EndTime                func(childComplexity int) int
		ID                     func(childComplexity int) int
		RegisterAt             func(childComplexity int) int
		RegisterBy             func(childComplexity int) int
		Remarks                func(childComplexity int) int
		Route                  func(childComplexity int) int
		StartTime              func(childComplexity int) int
		UpdateAt               func(childComplexity int) int
		UpdateBy               func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	DrivingLogMinFields struct {
		Cause                  func(childComplexity int) int
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		CreateAt               func(childComplexity int) int
		CreateBy               func(childComplexity int) int
		DeleteAt               func(childComplexity int) int
		DeleteBy               func(childComplexity int) int
		DriverID               func(childComplexity int) int
		DrivingEndTime         func(childComplexity int) int
		DrivingLogID           func(childComplexity int) int
		DrivingStartTime       func(childComplexity int) int
		EndTime                func(childComplexity int) int
		ID                     func(childComplexity int) int
		RegisterAt             func(childComplexity int) int
		RegisterBy             func(childComplexity int) int
		Remarks                func(childComplexity int) int
		Route                  func(childComplexity int) int
		StartTime              func(childComplexity int) int
		UpdateAt               func(childComplexity int) int
		UpdateBy               func(childComplexity int) int
		VehicleID              func(childComplexity int) int
	}

	DrivingLogMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DrivingLogStddevFields struct {
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	DrivingLogStddevPopFields struct {
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	DrivingLogStddevSampFields struct {
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	DrivingLogSumFields struct {
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	DrivingLogVarPopFields struct {
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	DrivingLogVarSampFields struct {
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	DrivingLogVarianceFields struct {
		CheckOrganizationLevel func(childComplexity int) int
		CheckState             func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	SubscriptionRoot struct {
		DrivingLog          func(childComplexity int, distinctOn []model.DrivingLogSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLogOrderBy, where *model.DrivingLogBoolExp) int
		DrivingLogAggregate func(childComplexity int, distinctOn []model.DrivingLogSelectColumn, limit *int, offset *int, orderBy []*model.DrivingLogOrderBy, where *model.DrivingLogBoolExp) int
		DrivingLogByPk      func(childComplexity int, id int64) int
	}
}

type MutationResolver interface {
	DeleteDrivingLog(ctx context.Context, where model.DrivingLogBoolExp) (*model.DrivingLogMutationResponse, error)
	DeleteDrivingLogByPk(ctx context.Context, id int64) (*model1.DrivingLog, error)
	InsertDrivingLog(ctx context.Context, objects []*model.DrivingLogInsertInput, onConflict *model.DrivingLogOnConflict) (*model.DrivingLogMutationResponse, error)
	InsertDrivingLogOne(ctx context.Context, object model.DrivingLogInsertInput, onConflict *model.DrivingLogOnConflict) (*model1.DrivingLog, error)
	UpdateDrivingLog(ctx context.Context, inc *model.DrivingLogIncInput, set *model.DrivingLogSetInput, where model.DrivingLogBoolExp) (*model.DrivingLogMutationResponse, error)
	UpdateDrivingLogByPk(ctx context.Context, inc *model.DrivingLogIncInput, set *model.DrivingLogSetInput, pkColumns model.DrivingLogPkColumnsInput) (*model1.DrivingLog, error)
}
type QueryResolver interface {
	T(ctx context.Context) (*int, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_driving_log":
		if e.complexity.Mutation.DeleteDrivingLog == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driving_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDrivingLog(childComplexity, args["where"].(model.DrivingLogBoolExp)), true

	case "Mutation.delete_driving_log_by_pk":
		if e.complexity.Mutation.DeleteDrivingLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_driving_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDrivingLogByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_driving_log":
		if e.complexity.Mutation.InsertDrivingLog == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driving_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDrivingLog(childComplexity, args["objects"].([]*model.DrivingLogInsertInput), args["on_conflict"].(*model.DrivingLogOnConflict)), true

	case "Mutation.insert_driving_log_one":
		if e.complexity.Mutation.InsertDrivingLogOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_driving_log_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDrivingLogOne(childComplexity, args["object"].(model.DrivingLogInsertInput), args["on_conflict"].(*model.DrivingLogOnConflict)), true

	case "Mutation.update_driving_log":
		if e.complexity.Mutation.UpdateDrivingLog == nil {
			break
		}

		args, err := ec.field_Mutation_update_driving_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDrivingLog(childComplexity, args["_inc"].(*model.DrivingLogIncInput), args["_set"].(*model.DrivingLogSetInput), args["where"].(model.DrivingLogBoolExp)), true

	case "Mutation.update_driving_log_by_pk":
		if e.complexity.Mutation.UpdateDrivingLogByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_driving_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDrivingLogByPk(childComplexity, args["_inc"].(*model.DrivingLogIncInput), args["_set"].(*model.DrivingLogSetInput), args["pk_columns"].(model.DrivingLogPkColumnsInput)), true

	case "Query.t":
		if e.complexity.Query.T == nil {
			break
		}

		return e.complexity.Query.T(childComplexity), true

	case "driving_log.cause":
		if e.complexity.DrivingLog.Cause == nil {
			break
		}

		return e.complexity.DrivingLog.Cause(childComplexity), true

	case "driving_log.check_organization_level":
		if e.complexity.DrivingLog.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLog.CheckOrganizationLevel(childComplexity), true

	case "driving_log.check_state":
		if e.complexity.DrivingLog.CheckState == nil {
			break
		}

		return e.complexity.DrivingLog.CheckState(childComplexity), true

	case "driving_log.create_at":
		if e.complexity.DrivingLog.CreateAt == nil {
			break
		}

		return e.complexity.DrivingLog.CreateAt(childComplexity), true

	case "driving_log.create_by":
		if e.complexity.DrivingLog.CreateBy == nil {
			break
		}

		return e.complexity.DrivingLog.CreateBy(childComplexity), true

	case "driving_log.delete_at":
		if e.complexity.DrivingLog.DeleteAt == nil {
			break
		}

		return e.complexity.DrivingLog.DeleteAt(childComplexity), true

	case "driving_log.delete_by":
		if e.complexity.DrivingLog.DeleteBy == nil {
			break
		}

		return e.complexity.DrivingLog.DeleteBy(childComplexity), true

	case "driving_log.driver_id":
		if e.complexity.DrivingLog.DriverID == nil {
			break
		}

		return e.complexity.DrivingLog.DriverID(childComplexity), true

	case "driving_log.driving_end_time":
		if e.complexity.DrivingLog.DrivingEndTime == nil {
			break
		}

		return e.complexity.DrivingLog.DrivingEndTime(childComplexity), true

	case "driving_log.driving_log_id":
		if e.complexity.DrivingLog.DrivingLogID == nil {
			break
		}

		return e.complexity.DrivingLog.DrivingLogID(childComplexity), true

	case "driving_log.driving_start_time":
		if e.complexity.DrivingLog.DrivingStartTime == nil {
			break
		}

		return e.complexity.DrivingLog.DrivingStartTime(childComplexity), true

	case "driving_log.end_time":
		if e.complexity.DrivingLog.EndTime == nil {
			break
		}

		return e.complexity.DrivingLog.EndTime(childComplexity), true

	case "driving_log.id":
		if e.complexity.DrivingLog.ID == nil {
			break
		}

		return e.complexity.DrivingLog.ID(childComplexity), true

	case "driving_log.is_delete":
		if e.complexity.DrivingLog.IsDelete == nil {
			break
		}

		return e.complexity.DrivingLog.IsDelete(childComplexity), true

	case "driving_log.is_fill":
		if e.complexity.DrivingLog.IsFill == nil {
			break
		}

		return e.complexity.DrivingLog.IsFill(childComplexity), true

	case "driving_log.register_at":
		if e.complexity.DrivingLog.RegisterAt == nil {
			break
		}

		return e.complexity.DrivingLog.RegisterAt(childComplexity), true

	case "driving_log.register_by":
		if e.complexity.DrivingLog.RegisterBy == nil {
			break
		}

		return e.complexity.DrivingLog.RegisterBy(childComplexity), true

	case "driving_log.remarks":
		if e.complexity.DrivingLog.Remarks == nil {
			break
		}

		return e.complexity.DrivingLog.Remarks(childComplexity), true

	case "driving_log.route":
		if e.complexity.DrivingLog.Route == nil {
			break
		}

		return e.complexity.DrivingLog.Route(childComplexity), true

	case "driving_log.start_time":
		if e.complexity.DrivingLog.StartTime == nil {
			break
		}

		return e.complexity.DrivingLog.StartTime(childComplexity), true

	case "driving_log.update_at":
		if e.complexity.DrivingLog.UpdateAt == nil {
			break
		}

		return e.complexity.DrivingLog.UpdateAt(childComplexity), true

	case "driving_log.update_by":
		if e.complexity.DrivingLog.UpdateBy == nil {
			break
		}

		return e.complexity.DrivingLog.UpdateBy(childComplexity), true

	case "driving_log.vehicle_id":
		if e.complexity.DrivingLog.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLog.VehicleID(childComplexity), true

	case "driving_log_aggregate.aggregate":
		if e.complexity.DrivingLogAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DrivingLogAggregate.Aggregate(childComplexity), true

	case "driving_log_aggregate.nodes":
		if e.complexity.DrivingLogAggregate.Nodes == nil {
			break
		}

		return e.complexity.DrivingLogAggregate.Nodes(childComplexity), true

	case "driving_log_aggregate_fields.avg":
		if e.complexity.DrivingLogAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.Avg(childComplexity), true

	case "driving_log_aggregate_fields.count":
		if e.complexity.DrivingLogAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_driving_log_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DrivingLogAggregateFields.Count(childComplexity, args["columns"].([]model.DrivingLogSelectColumn), args["distinct"].(*bool)), true

	case "driving_log_aggregate_fields.max":
		if e.complexity.DrivingLogAggregateFields.Max == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.Max(childComplexity), true

	case "driving_log_aggregate_fields.min":
		if e.complexity.DrivingLogAggregateFields.Min == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.Min(childComplexity), true

	case "driving_log_aggregate_fields.stddev":
		if e.complexity.DrivingLogAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.Stddev(childComplexity), true

	case "driving_log_aggregate_fields.stddev_pop":
		if e.complexity.DrivingLogAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.StddevPop(childComplexity), true

	case "driving_log_aggregate_fields.stddev_samp":
		if e.complexity.DrivingLogAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.StddevSamp(childComplexity), true

	case "driving_log_aggregate_fields.sum":
		if e.complexity.DrivingLogAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.Sum(childComplexity), true

	case "driving_log_aggregate_fields.var_pop":
		if e.complexity.DrivingLogAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.VarPop(childComplexity), true

	case "driving_log_aggregate_fields.var_samp":
		if e.complexity.DrivingLogAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.VarSamp(childComplexity), true

	case "driving_log_aggregate_fields.variance":
		if e.complexity.DrivingLogAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DrivingLogAggregateFields.Variance(childComplexity), true

	case "driving_log_avg_fields.check_organization_level":
		if e.complexity.DrivingLogAvgFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogAvgFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_avg_fields.check_state":
		if e.complexity.DrivingLogAvgFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogAvgFields.CheckState(childComplexity), true

	case "driving_log_avg_fields.id":
		if e.complexity.DrivingLogAvgFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogAvgFields.ID(childComplexity), true

	case "driving_log_max_fields.cause":
		if e.complexity.DrivingLogMaxFields.Cause == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.Cause(childComplexity), true

	case "driving_log_max_fields.check_organization_level":
		if e.complexity.DrivingLogMaxFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_max_fields.check_state":
		if e.complexity.DrivingLogMaxFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.CheckState(childComplexity), true

	case "driving_log_max_fields.create_at":
		if e.complexity.DrivingLogMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.CreateAt(childComplexity), true

	case "driving_log_max_fields.create_by":
		if e.complexity.DrivingLogMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.CreateBy(childComplexity), true

	case "driving_log_max_fields.delete_at":
		if e.complexity.DrivingLogMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.DeleteAt(childComplexity), true

	case "driving_log_max_fields.delete_by":
		if e.complexity.DrivingLogMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.DeleteBy(childComplexity), true

	case "driving_log_max_fields.driver_id":
		if e.complexity.DrivingLogMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.DriverID(childComplexity), true

	case "driving_log_max_fields.driving_end_time":
		if e.complexity.DrivingLogMaxFields.DrivingEndTime == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.DrivingEndTime(childComplexity), true

	case "driving_log_max_fields.driving_log_id":
		if e.complexity.DrivingLogMaxFields.DrivingLogID == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.DrivingLogID(childComplexity), true

	case "driving_log_max_fields.driving_start_time":
		if e.complexity.DrivingLogMaxFields.DrivingStartTime == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.DrivingStartTime(childComplexity), true

	case "driving_log_max_fields.end_time":
		if e.complexity.DrivingLogMaxFields.EndTime == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.EndTime(childComplexity), true

	case "driving_log_max_fields.id":
		if e.complexity.DrivingLogMaxFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.ID(childComplexity), true

	case "driving_log_max_fields.register_at":
		if e.complexity.DrivingLogMaxFields.RegisterAt == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.RegisterAt(childComplexity), true

	case "driving_log_max_fields.register_by":
		if e.complexity.DrivingLogMaxFields.RegisterBy == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.RegisterBy(childComplexity), true

	case "driving_log_max_fields.remarks":
		if e.complexity.DrivingLogMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.Remarks(childComplexity), true

	case "driving_log_max_fields.route":
		if e.complexity.DrivingLogMaxFields.Route == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.Route(childComplexity), true

	case "driving_log_max_fields.start_time":
		if e.complexity.DrivingLogMaxFields.StartTime == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.StartTime(childComplexity), true

	case "driving_log_max_fields.update_at":
		if e.complexity.DrivingLogMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.UpdateAt(childComplexity), true

	case "driving_log_max_fields.update_by":
		if e.complexity.DrivingLogMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.UpdateBy(childComplexity), true

	case "driving_log_max_fields.vehicle_id":
		if e.complexity.DrivingLogMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLogMaxFields.VehicleID(childComplexity), true

	case "driving_log_min_fields.cause":
		if e.complexity.DrivingLogMinFields.Cause == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.Cause(childComplexity), true

	case "driving_log_min_fields.check_organization_level":
		if e.complexity.DrivingLogMinFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_min_fields.check_state":
		if e.complexity.DrivingLogMinFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.CheckState(childComplexity), true

	case "driving_log_min_fields.create_at":
		if e.complexity.DrivingLogMinFields.CreateAt == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.CreateAt(childComplexity), true

	case "driving_log_min_fields.create_by":
		if e.complexity.DrivingLogMinFields.CreateBy == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.CreateBy(childComplexity), true

	case "driving_log_min_fields.delete_at":
		if e.complexity.DrivingLogMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.DeleteAt(childComplexity), true

	case "driving_log_min_fields.delete_by":
		if e.complexity.DrivingLogMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.DeleteBy(childComplexity), true

	case "driving_log_min_fields.driver_id":
		if e.complexity.DrivingLogMinFields.DriverID == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.DriverID(childComplexity), true

	case "driving_log_min_fields.driving_end_time":
		if e.complexity.DrivingLogMinFields.DrivingEndTime == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.DrivingEndTime(childComplexity), true

	case "driving_log_min_fields.driving_log_id":
		if e.complexity.DrivingLogMinFields.DrivingLogID == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.DrivingLogID(childComplexity), true

	case "driving_log_min_fields.driving_start_time":
		if e.complexity.DrivingLogMinFields.DrivingStartTime == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.DrivingStartTime(childComplexity), true

	case "driving_log_min_fields.end_time":
		if e.complexity.DrivingLogMinFields.EndTime == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.EndTime(childComplexity), true

	case "driving_log_min_fields.id":
		if e.complexity.DrivingLogMinFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.ID(childComplexity), true

	case "driving_log_min_fields.register_at":
		if e.complexity.DrivingLogMinFields.RegisterAt == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.RegisterAt(childComplexity), true

	case "driving_log_min_fields.register_by":
		if e.complexity.DrivingLogMinFields.RegisterBy == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.RegisterBy(childComplexity), true

	case "driving_log_min_fields.remarks":
		if e.complexity.DrivingLogMinFields.Remarks == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.Remarks(childComplexity), true

	case "driving_log_min_fields.route":
		if e.complexity.DrivingLogMinFields.Route == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.Route(childComplexity), true

	case "driving_log_min_fields.start_time":
		if e.complexity.DrivingLogMinFields.StartTime == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.StartTime(childComplexity), true

	case "driving_log_min_fields.update_at":
		if e.complexity.DrivingLogMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.UpdateAt(childComplexity), true

	case "driving_log_min_fields.update_by":
		if e.complexity.DrivingLogMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.UpdateBy(childComplexity), true

	case "driving_log_min_fields.vehicle_id":
		if e.complexity.DrivingLogMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DrivingLogMinFields.VehicleID(childComplexity), true

	case "driving_log_mutation_response.affected_rows":
		if e.complexity.DrivingLogMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DrivingLogMutationResponse.AffectedRows(childComplexity), true

	case "driving_log_mutation_response.returning":
		if e.complexity.DrivingLogMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DrivingLogMutationResponse.Returning(childComplexity), true

	case "driving_log_stddev_fields.check_organization_level":
		if e.complexity.DrivingLogStddevFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogStddevFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_stddev_fields.check_state":
		if e.complexity.DrivingLogStddevFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogStddevFields.CheckState(childComplexity), true

	case "driving_log_stddev_fields.id":
		if e.complexity.DrivingLogStddevFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogStddevFields.ID(childComplexity), true

	case "driving_log_stddev_pop_fields.check_organization_level":
		if e.complexity.DrivingLogStddevPopFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogStddevPopFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_stddev_pop_fields.check_state":
		if e.complexity.DrivingLogStddevPopFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogStddevPopFields.CheckState(childComplexity), true

	case "driving_log_stddev_pop_fields.id":
		if e.complexity.DrivingLogStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogStddevPopFields.ID(childComplexity), true

	case "driving_log_stddev_samp_fields.check_organization_level":
		if e.complexity.DrivingLogStddevSampFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogStddevSampFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_stddev_samp_fields.check_state":
		if e.complexity.DrivingLogStddevSampFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogStddevSampFields.CheckState(childComplexity), true

	case "driving_log_stddev_samp_fields.id":
		if e.complexity.DrivingLogStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogStddevSampFields.ID(childComplexity), true

	case "driving_log_sum_fields.check_organization_level":
		if e.complexity.DrivingLogSumFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogSumFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_sum_fields.check_state":
		if e.complexity.DrivingLogSumFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogSumFields.CheckState(childComplexity), true

	case "driving_log_sum_fields.id":
		if e.complexity.DrivingLogSumFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogSumFields.ID(childComplexity), true

	case "driving_log_var_pop_fields.check_organization_level":
		if e.complexity.DrivingLogVarPopFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogVarPopFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_var_pop_fields.check_state":
		if e.complexity.DrivingLogVarPopFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogVarPopFields.CheckState(childComplexity), true

	case "driving_log_var_pop_fields.id":
		if e.complexity.DrivingLogVarPopFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogVarPopFields.ID(childComplexity), true

	case "driving_log_var_samp_fields.check_organization_level":
		if e.complexity.DrivingLogVarSampFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogVarSampFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_var_samp_fields.check_state":
		if e.complexity.DrivingLogVarSampFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogVarSampFields.CheckState(childComplexity), true

	case "driving_log_var_samp_fields.id":
		if e.complexity.DrivingLogVarSampFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogVarSampFields.ID(childComplexity), true

	case "driving_log_variance_fields.check_organization_level":
		if e.complexity.DrivingLogVarianceFields.CheckOrganizationLevel == nil {
			break
		}

		return e.complexity.DrivingLogVarianceFields.CheckOrganizationLevel(childComplexity), true

	case "driving_log_variance_fields.check_state":
		if e.complexity.DrivingLogVarianceFields.CheckState == nil {
			break
		}

		return e.complexity.DrivingLogVarianceFields.CheckState(childComplexity), true

	case "driving_log_variance_fields.id":
		if e.complexity.DrivingLogVarianceFields.ID == nil {
			break
		}

		return e.complexity.DrivingLogVarianceFields.ID(childComplexity), true

	case "subscription_root.driving_log":
		if e.complexity.SubscriptionRoot.DrivingLog == nil {
			break
		}

		args, err := ec.field_subscription_root_driving_log_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.DrivingLog(childComplexity, args["distinct_on"].([]model.DrivingLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLogOrderBy), args["where"].(*model.DrivingLogBoolExp)), true

	case "subscription_root.driving_log_aggregate":
		if e.complexity.SubscriptionRoot.DrivingLogAggregate == nil {
			break
		}

		args, err := ec.field_subscription_root_driving_log_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.DrivingLogAggregate(childComplexity, args["distinct_on"].([]model.DrivingLogSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DrivingLogOrderBy), args["where"].(*model.DrivingLogBoolExp)), true

	case "subscription_root.driving_log_by_pk":
		if e.complexity.SubscriptionRoot.DrivingLogByPk == nil {
			break
		}

		args, err := ec.field_subscription_root_driving_log_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SubscriptionRoot.DrivingLogByPk(childComplexity, args["id"].(int64)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/generate.graphqls", Input: `

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

scalar date

"""
expression to compare columns of type date. All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
行车日志


columns and relationships of "driving_log"

"""
type driving_log {
  """事由"""
  cause: String

  """审核机构级别"""
  check_organization_level: Int!

  """审核状态"""
  check_state: Int!

  """创建时间"""
  create_at: timestamptz!

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """驾驶员ID"""
  driver_id: String!

  """用车结束日期"""
  driving_end_time: date!

  """行车日志ID"""
  driving_log_id: String!

  """用车起始日期"""
  driving_start_time: date!

  """结束时间"""
  end_time: timestamptz!

  """ID"""
  id: bigint!

  """是否删除"""
  is_delete: Boolean!

  """是否补录"""
  is_fill: Boolean!

  """登记时间"""
  register_at: timestamptz

  """登记人"""
  register_by: String

  """备注"""
  remarks: String

  """路线"""
  route: String

  """开始时间"""
  start_time: timestamptz!

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String

  """车辆ID"""
  vehicle_id: String!
}

"""
aggregated selection of "driving_log"
"""
type driving_log_aggregate {
  aggregate: driving_log_aggregate_fields
  nodes: [driving_log!]!
}

"""
aggregate fields of "driving_log"
"""
type driving_log_aggregate_fields {
  avg: driving_log_avg_fields
  count(columns: [driving_log_select_column!], distinct: Boolean): Int
  max: driving_log_max_fields
  min: driving_log_min_fields
  stddev: driving_log_stddev_fields
  stddev_pop: driving_log_stddev_pop_fields
  stddev_samp: driving_log_stddev_samp_fields
  sum: driving_log_sum_fields
  var_pop: driving_log_var_pop_fields
  var_samp: driving_log_var_samp_fields
  variance: driving_log_variance_fields
}

"""
order by aggregate values of table "driving_log"
"""
input driving_log_aggregate_order_by {
  avg: driving_log_avg_order_by
  count: order_by
  max: driving_log_max_order_by
  min: driving_log_min_order_by
  stddev: driving_log_stddev_order_by
  stddev_pop: driving_log_stddev_pop_order_by
  stddev_samp: driving_log_stddev_samp_order_by
  sum: driving_log_sum_order_by
  var_pop: driving_log_var_pop_order_by
  var_samp: driving_log_var_samp_order_by
  variance: driving_log_variance_order_by
}

"""
input type for inserting array relation for remote table "driving_log"
"""
input driving_log_arr_rel_insert_input {
  data: [driving_log_insert_input!]!
  on_conflict: driving_log_on_conflict
}

"""aggregate avg on columns"""
type driving_log_avg_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by avg() on columns of table "driving_log"
"""
input driving_log_avg_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "driving_log". All fields are combined with a logical 'AND'.
"""
input driving_log_bool_exp {
  _and: [driving_log_bool_exp]
  _not: driving_log_bool_exp
  _or: [driving_log_bool_exp]
  cause: String_comparison_exp
  check_organization_level: Int_comparison_exp
  check_state: Int_comparison_exp
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  driver_id: String_comparison_exp
  driving_end_time: date_comparison_exp
  driving_log_id: String_comparison_exp
  driving_start_time: date_comparison_exp
  end_time: timestamptz_comparison_exp
  id: bigint_comparison_exp
  is_delete: Boolean_comparison_exp
  is_fill: Boolean_comparison_exp
  register_at: timestamptz_comparison_exp
  register_by: String_comparison_exp
  remarks: String_comparison_exp
  route: String_comparison_exp
  start_time: timestamptz_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "driving_log"
"""
enum driving_log_constraint {
  """unique or primary key constraint"""
  driving_log_pkey
}

"""
input type for incrementing integer column in table "driving_log"
"""
input driving_log_inc_input {
  check_organization_level: Int
  check_state: Int
  id: bigint
}

"""
input type for inserting data into table "driving_log"
"""
input driving_log_insert_input {
  cause: String
  check_organization_level: Int
  check_state: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driver_id: String
  driving_end_time: date
  driving_log_id: String
  driving_start_time: date
  end_time: timestamptz
  id: bigint
  is_delete: Boolean
  is_fill: Boolean
  register_at: timestamptz
  register_by: String
  remarks: String
  route: String
  start_time: timestamptz
  update_at: timestamptz
  update_by: String
  vehicle_id: String
}

"""aggregate max on columns"""
type driving_log_max_fields {
  cause: String
  check_organization_level: Int
  check_state: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driver_id: String
  driving_end_time: date
  driving_log_id: String
  driving_start_time: date
  end_time: timestamptz
  id: bigint
  register_at: timestamptz
  register_by: String
  remarks: String
  route: String
  start_time: timestamptz
  update_at: timestamptz
  update_by: String
  vehicle_id: String
}

"""
order by max() on columns of table "driving_log"
"""
input driving_log_max_order_by {
  cause: order_by
  check_organization_level: order_by
  check_state: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driver_id: order_by
  driving_end_time: order_by
  driving_log_id: order_by
  driving_start_time: order_by
  end_time: order_by
  id: order_by
  register_at: order_by
  register_by: order_by
  remarks: order_by
  route: order_by
  start_time: order_by
  update_at: order_by
  update_by: order_by
  vehicle_id: order_by
}

"""aggregate min on columns"""
type driving_log_min_fields {
  cause: String
  check_organization_level: Int
  check_state: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driver_id: String
  driving_end_time: date
  driving_log_id: String
  driving_start_time: date
  end_time: timestamptz
  id: bigint
  register_at: timestamptz
  register_by: String
  remarks: String
  route: String
  start_time: timestamptz
  update_at: timestamptz
  update_by: String
  vehicle_id: String
}

"""
order by min() on columns of table "driving_log"
"""
input driving_log_min_order_by {
  cause: order_by
  check_organization_level: order_by
  check_state: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driver_id: order_by
  driving_end_time: order_by
  driving_log_id: order_by
  driving_start_time: order_by
  end_time: order_by
  id: order_by
  register_at: order_by
  register_by: order_by
  remarks: order_by
  route: order_by
  start_time: order_by
  update_at: order_by
  update_by: order_by
  vehicle_id: order_by
}

"""
response of any mutation on the table "driving_log"
"""
type driving_log_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [driving_log!]!
}

"""
input type for inserting object relation for remote table "driving_log"
"""
input driving_log_obj_rel_insert_input {
  data: driving_log_insert_input!
  on_conflict: driving_log_on_conflict
}

"""
on conflict condition type for table "driving_log"
"""
input driving_log_on_conflict {
  constraint: driving_log_constraint!
  update_columns: [driving_log_update_column!]!
  where: driving_log_bool_exp
}

"""
ordering options when selecting data from "driving_log"
"""
input driving_log_order_by {
  cause: order_by
  check_organization_level: order_by
  check_state: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  driver_id: order_by
  driving_end_time: order_by
  driving_log_id: order_by
  driving_start_time: order_by
  end_time: order_by
  id: order_by
  is_delete: order_by
  is_fill: order_by
  register_at: order_by
  register_by: order_by
  remarks: order_by
  route: order_by
  start_time: order_by
  update_at: order_by
  update_by: order_by
  vehicle_id: order_by
}

"""
primary key columns input for table: "driving_log"
"""
input driving_log_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "driving_log"
"""
enum driving_log_select_column {
  """column name"""
  cause

  """column name"""
  check_organization_level

  """column name"""
  check_state

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  driver_id

  """column name"""
  driving_end_time

  """column name"""
  driving_log_id

  """column name"""
  driving_start_time

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  is_fill

  """column name"""
  register_at

  """column name"""
  register_by

  """column name"""
  remarks

  """column name"""
  route

  """column name"""
  start_time

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  vehicle_id
}

"""
input type for updating data in table "driving_log"
"""
input driving_log_set_input {
  cause: String
  check_organization_level: Int
  check_state: Int
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  driver_id: String
  driving_end_time: date
  driving_log_id: String
  driving_start_time: date
  end_time: timestamptz
  id: bigint
  is_delete: Boolean
  is_fill: Boolean
  register_at: timestamptz
  register_by: String
  remarks: String
  route: String
  start_time: timestamptz
  update_at: timestamptz
  update_by: String
  vehicle_id: String
}

"""aggregate stddev on columns"""
type driving_log_stddev_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by stddev() on columns of table "driving_log"
"""
input driving_log_stddev_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type driving_log_stddev_pop_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "driving_log"
"""
input driving_log_stddev_pop_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type driving_log_stddev_samp_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "driving_log"
"""
input driving_log_stddev_samp_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate sum on columns"""
type driving_log_sum_fields {
  check_organization_level: Int
  check_state: Int
  id: bigint
}

"""
order by sum() on columns of table "driving_log"
"""
input driving_log_sum_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""
update columns of table "driving_log"
"""
enum driving_log_update_column {
  """column name"""
  cause

  """column name"""
  check_organization_level

  """column name"""
  check_state

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  driver_id

  """column name"""
  driving_end_time

  """column name"""
  driving_log_id

  """column name"""
  driving_start_time

  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  is_delete

  """column name"""
  is_fill

  """column name"""
  register_at

  """column name"""
  register_by

  """column name"""
  remarks

  """column name"""
  route

  """column name"""
  start_time

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  vehicle_id
}

"""aggregate var_pop on columns"""
type driving_log_var_pop_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by var_pop() on columns of table "driving_log"
"""
input driving_log_var_pop_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type driving_log_var_samp_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by var_samp() on columns of table "driving_log"
"""
input driving_log_var_samp_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""aggregate variance on columns"""
type driving_log_variance_fields {
  check_organization_level: Float
  check_state: Float
  id: Float
}

"""
order by variance() on columns of table "driving_log"
"""
input driving_log_variance_order_by {
  check_organization_level: order_by
  check_state: order_by
  id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "driving_log"
  """
  delete_driving_log(
    """filter the rows which have to be deleted"""
    where: driving_log_bool_exp!
  ): driving_log_mutation_response

  """
  delete single row from the table: "driving_log"
  """
  delete_driving_log_by_pk(
    """ID"""
    id: bigint!
  ): driving_log

  """
  insert data into the table: "driving_log"
  """
  insert_driving_log(
    """the rows to be inserted"""
    objects: [driving_log_insert_input!]!

    """on conflict condition"""
    on_conflict: driving_log_on_conflict
  ): driving_log_mutation_response

  """
  insert a single row into the table: "driving_log"
  """
  insert_driving_log_one(
    """the row to be inserted"""
    object: driving_log_insert_input!

    """on conflict condition"""
    on_conflict: driving_log_on_conflict
  ): driving_log

  """
  update data of the table: "driving_log"
  """
  update_driving_log(
    """increments the integer columns with given value of the filtered values"""
    _inc: driving_log_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: driving_log_set_input

    """filter the rows which have to be updated"""
    where: driving_log_bool_exp!
  ): driving_log_mutation_response

  """
  update single row of the table: "driving_log"
  """
  update_driving_log_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: driving_log_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: driving_log_set_input
    pk_columns: driving_log_pk_columns_input!
  ): driving_log
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type Query {
  t: Int
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "driving_log"
  """
  driving_log(
    """distinct select on columns"""
    distinct_on: [driving_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [driving_log_order_by!]

    """filter the rows returned"""
    where: driving_log_bool_exp
  ): [driving_log!]!

  """
  fetch aggregated fields from the table: "driving_log"
  """
  driving_log_aggregate(
    """distinct select on columns"""
    distinct_on: [driving_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [driving_log_order_by!]

    """filter the rows returned"""
    where: driving_log_bool_exp
  ): driving_log_aggregate!

  """fetch data from the table: "driving_log" using primary key columns"""
  driving_log_by_pk(
    """ID"""
    id: bigint!
  ): driving_log
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_driving_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DrivingLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdriving_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_driving_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driving_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DrivingLogInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdriving_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DrivingLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriving_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_driving_log_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DrivingLogInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdriving_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DrivingLogOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdriving_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driving_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DrivingLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriving_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DrivingLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriving_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DrivingLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdriving_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_driving_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DrivingLogIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdriving_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DrivingLogSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdriving_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DrivingLogPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdriving_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_driving_log_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DrivingLogSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdriving_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_subscription_root_driving_log_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DrivingLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriving_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DrivingLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriving_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DrivingLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriving_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_driving_log_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DrivingLogSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdriving_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DrivingLogOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdriving_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DrivingLogBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdriving_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_subscription_root_driving_log_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_driving_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driving_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDrivingLog(rctx, args["where"].(model.DrivingLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogMutationResponse)
	fc.Result = res
	return ec.marshalOdriving_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_driving_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_driving_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDrivingLogByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLog)
	fc.Result = res
	return ec.marshalOdriving_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driving_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driving_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDrivingLog(rctx, args["objects"].([]*model.DrivingLogInsertInput), args["on_conflict"].(*model.DrivingLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogMutationResponse)
	fc.Result = res
	return ec.marshalOdriving_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_driving_log_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_driving_log_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDrivingLogOne(rctx, args["object"].(model.DrivingLogInsertInput), args["on_conflict"].(*model.DrivingLogOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLog)
	fc.Result = res
	return ec.marshalOdriving_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driving_log(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driving_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDrivingLog(rctx, args["_inc"].(*model.DrivingLogIncInput), args["_set"].(*model.DrivingLogSetInput), args["where"].(model.DrivingLogBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogMutationResponse)
	fc.Result = res
	return ec.marshalOdriving_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_driving_log_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_driving_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDrivingLogByPk(rctx, args["_inc"].(*model.DrivingLogIncInput), args["_set"].(*model.DrivingLogSetInput), args["pk_columns"].(model.DrivingLogPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLog)
	fc.Result = res
	return ec.marshalOdriving_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_t(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().T(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_cause(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_check_state(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_driving_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNdate2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_driving_log_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_driving_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNdate2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_is_fill(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFill, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_register_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_register_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_route(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.DrivingLog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogAggregateFields)
	fc.Result = res
	return ec.marshalOdriving_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DrivingLog)
	fc.Result = res
	return ec.marshalNdriving_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogAvgFields)
	fc.Result = res
	return ec.marshalOdriving_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_driving_log_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogMaxFields)
	fc.Result = res
	return ec.marshalOdriving_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogMinFields)
	fc.Result = res
	return ec.marshalOdriving_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogStddevFields)
	fc.Result = res
	return ec.marshalOdriving_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogStddevPopFields)
	fc.Result = res
	return ec.marshalOdriving_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogStddevSampFields)
	fc.Result = res
	return ec.marshalOdriving_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogSumFields)
	fc.Result = res
	return ec.marshalOdriving_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogVarPopFields)
	fc.Result = res
	return ec.marshalOdriving_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogVarSampFields)
	fc.Result = res
	return ec.marshalOdriving_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogVarianceFields)
	fc.Result = res
	return ec.marshalOdriving_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_avg_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_avg_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_cause(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_driving_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOdate2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_driving_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_driving_start_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOdate2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_register_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_register_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_route(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_cause(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_driving_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOdate2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_driving_log_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLogID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_driving_start_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOdate2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_register_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_register_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_route(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DrivingLog)
	fc.Result = res
	return ec.marshalNdriving_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_pop_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_pop_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_samp_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_samp_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_sum_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_sum_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_var_pop_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_var_pop_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_var_samp_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_var_samp_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_variance_fields_check_organization_level(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckOrganizationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_variance_fields_check_state(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _driving_log_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DrivingLogVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "driving_log_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_driving_log(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_driving_log_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DrivingLog)
	fc.Result = res
	return ec.marshalNdriving_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_driving_log_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_driving_log_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLogAggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DrivingLogAggregate)
	fc.Result = res
	return ec.marshalNdriving_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _subscription_root_driving_log_by_pk(ctx context.Context, field graphql.CollectedField, obj *model.SubscriptionRoot) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "subscription_root",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_subscription_root_driving_log_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLogByPk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DrivingLog)
	fc.Result = res
	return ec.marshalOdriving_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLog(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdate_comparison_exp(ctx context.Context, obj interface{}) (model2.DateComparisonExp, error) {
	var it model2.DateComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOdate2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOdate2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_aggregate_order_by(ctx context.Context, obj interface{}) (model.DrivingLogAggregateOrderBy, error) {
	var it model.DrivingLogAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdriving_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdriving_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdriving_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdriving_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdriving_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdriving_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdriving_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdriving_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdriving_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdriving_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DrivingLogArrRelInsertInput, error) {
	var it model.DrivingLogArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriving_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriving_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_avg_order_by(ctx context.Context, obj interface{}) (model.DrivingLogAvgOrderBy, error) {
	var it model.DrivingLogAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_bool_exp(ctx context.Context, obj interface{}) (model.DrivingLogBoolExp, error) {
	var it model.DrivingLogBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdriving_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdriving_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdriving_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOdate_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐDateComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_id"))
			it.DrivingLogID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOdate_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐDateComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fill":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fill"))
			it.IsFill, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_at"))
			it.RegisterAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_by"))
			it.RegisterBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_inc_input(ctx context.Context, obj interface{}) (model.DrivingLogIncInput, error) {
	var it model.DrivingLogIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_insert_input(ctx context.Context, obj interface{}) (model.DrivingLogInsertInput, error) {
	var it model.DrivingLogInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_id"))
			it.DrivingLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fill":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fill"))
			it.IsFill, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_at"))
			it.RegisterAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_by"))
			it.RegisterBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_max_order_by(ctx context.Context, obj interface{}) (model.DrivingLogMaxOrderBy, error) {
	var it model.DrivingLogMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_id"))
			it.DrivingLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_at"))
			it.RegisterAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_by"))
			it.RegisterBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_min_order_by(ctx context.Context, obj interface{}) (model.DrivingLogMinOrderBy, error) {
	var it model.DrivingLogMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_id"))
			it.DrivingLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_at"))
			it.RegisterAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_by"))
			it.RegisterBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DrivingLogObjRelInsertInput, error) {
	var it model.DrivingLogObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdriving_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdriving_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_on_conflict(ctx context.Context, obj interface{}) (model.DrivingLogOnConflict, error) {
	var it model.DrivingLogOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdriving_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdriving_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdriving_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_order_by(ctx context.Context, obj interface{}) (model.DrivingLogOrderBy, error) {
	var it model.DrivingLogOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_id"))
			it.DrivingLogID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fill":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fill"))
			it.IsFill, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_at"))
			it.RegisterAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_by"))
			it.RegisterBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_pk_columns_input(ctx context.Context, obj interface{}) (model.DrivingLogPkColumnsInput, error) {
	var it model.DrivingLogPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_set_input(ctx context.Context, obj interface{}) (model.DrivingLogSetInput, error) {
	var it model.DrivingLogSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_end_time"))
			it.DrivingEndTime, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_log_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_log_id"))
			it.DrivingLogID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driving_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driving_start_time"))
			it.DrivingStartTime, err = ec.unmarshalOdate2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fill":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fill"))
			it.IsFill, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_at"))
			it.RegisterAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "register_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("register_by"))
			it.RegisterBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_stddev_order_by(ctx context.Context, obj interface{}) (model.DrivingLogStddevOrderBy, error) {
	var it model.DrivingLogStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DrivingLogStddevPopOrderBy, error) {
	var it model.DrivingLogStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DrivingLogStddevSampOrderBy, error) {
	var it model.DrivingLogStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_sum_order_by(ctx context.Context, obj interface{}) (model.DrivingLogSumOrderBy, error) {
	var it model.DrivingLogSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_var_pop_order_by(ctx context.Context, obj interface{}) (model.DrivingLogVarPopOrderBy, error) {
	var it model.DrivingLogVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_var_samp_order_by(ctx context.Context, obj interface{}) (model.DrivingLogVarSampOrderBy, error) {
	var it model.DrivingLogVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdriving_log_variance_order_by(ctx context.Context, obj interface{}) (model.DrivingLogVarianceOrderBy, error) {
	var it model.DrivingLogVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_organization_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_organization_level"))
			it.CheckOrganizationLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_state"))
			it.CheckState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_driving_log":
			out.Values[i] = ec._Mutation_delete_driving_log(ctx, field)
		case "delete_driving_log_by_pk":
			out.Values[i] = ec._Mutation_delete_driving_log_by_pk(ctx, field)
		case "insert_driving_log":
			out.Values[i] = ec._Mutation_insert_driving_log(ctx, field)
		case "insert_driving_log_one":
			out.Values[i] = ec._Mutation_insert_driving_log_one(ctx, field)
		case "update_driving_log":
			out.Values[i] = ec._Mutation_update_driving_log(ctx, field)
		case "update_driving_log_by_pk":
			out.Values[i] = ec._Mutation_update_driving_log_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "t":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_t(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_logImplementors = []string{"driving_log"}

func (ec *executionContext) _driving_log(ctx context.Context, sel ast.SelectionSet, obj *model1.DrivingLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log")
		case "cause":
			out.Values[i] = ec._driving_log_cause(ctx, field, obj)
		case "check_organization_level":
			out.Values[i] = ec._driving_log_check_organization_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "check_state":
			out.Values[i] = ec._driving_log_check_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._driving_log_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._driving_log_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._driving_log_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._driving_log_delete_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driving_log_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driving_end_time":
			out.Values[i] = ec._driving_log_driving_end_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driving_log_id":
			out.Values[i] = ec._driving_log_driving_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driving_start_time":
			out.Values[i] = ec._driving_log_driving_start_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_time":
			out.Values[i] = ec._driving_log_end_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._driving_log_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._driving_log_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_fill":
			out.Values[i] = ec._driving_log_is_fill(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "register_at":
			out.Values[i] = ec._driving_log_register_at(ctx, field, obj)
		case "register_by":
			out.Values[i] = ec._driving_log_register_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driving_log_remarks(ctx, field, obj)
		case "route":
			out.Values[i] = ec._driving_log_route(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._driving_log_start_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_at":
			out.Values[i] = ec._driving_log_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._driving_log_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._driving_log_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_aggregateImplementors = []string{"driving_log_aggregate"}

func (ec *executionContext) _driving_log_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_aggregate")
		case "aggregate":
			out.Values[i] = ec._driving_log_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._driving_log_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_aggregate_fieldsImplementors = []string{"driving_log_aggregate_fields"}

func (ec *executionContext) _driving_log_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_aggregate_fields")
		case "avg":
			out.Values[i] = ec._driving_log_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._driving_log_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._driving_log_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._driving_log_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._driving_log_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._driving_log_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._driving_log_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._driving_log_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._driving_log_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._driving_log_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._driving_log_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_avg_fieldsImplementors = []string{"driving_log_avg_fields"}

func (ec *executionContext) _driving_log_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_avg_fields")
		case "check_organization_level":
			out.Values[i] = ec._driving_log_avg_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_avg_fields_check_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_max_fieldsImplementors = []string{"driving_log_max_fields"}

func (ec *executionContext) _driving_log_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_max_fields")
		case "cause":
			out.Values[i] = ec._driving_log_max_fields_cause(ctx, field, obj)
		case "check_organization_level":
			out.Values[i] = ec._driving_log_max_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_max_fields_check_state(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._driving_log_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._driving_log_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._driving_log_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._driving_log_max_fields_delete_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driving_log_max_fields_driver_id(ctx, field, obj)
		case "driving_end_time":
			out.Values[i] = ec._driving_log_max_fields_driving_end_time(ctx, field, obj)
		case "driving_log_id":
			out.Values[i] = ec._driving_log_max_fields_driving_log_id(ctx, field, obj)
		case "driving_start_time":
			out.Values[i] = ec._driving_log_max_fields_driving_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._driving_log_max_fields_end_time(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_max_fields_id(ctx, field, obj)
		case "register_at":
			out.Values[i] = ec._driving_log_max_fields_register_at(ctx, field, obj)
		case "register_by":
			out.Values[i] = ec._driving_log_max_fields_register_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driving_log_max_fields_remarks(ctx, field, obj)
		case "route":
			out.Values[i] = ec._driving_log_max_fields_route(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._driving_log_max_fields_start_time(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._driving_log_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._driving_log_max_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._driving_log_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_min_fieldsImplementors = []string{"driving_log_min_fields"}

func (ec *executionContext) _driving_log_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_min_fields")
		case "cause":
			out.Values[i] = ec._driving_log_min_fields_cause(ctx, field, obj)
		case "check_organization_level":
			out.Values[i] = ec._driving_log_min_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_min_fields_check_state(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._driving_log_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._driving_log_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._driving_log_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._driving_log_min_fields_delete_by(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._driving_log_min_fields_driver_id(ctx, field, obj)
		case "driving_end_time":
			out.Values[i] = ec._driving_log_min_fields_driving_end_time(ctx, field, obj)
		case "driving_log_id":
			out.Values[i] = ec._driving_log_min_fields_driving_log_id(ctx, field, obj)
		case "driving_start_time":
			out.Values[i] = ec._driving_log_min_fields_driving_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._driving_log_min_fields_end_time(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_min_fields_id(ctx, field, obj)
		case "register_at":
			out.Values[i] = ec._driving_log_min_fields_register_at(ctx, field, obj)
		case "register_by":
			out.Values[i] = ec._driving_log_min_fields_register_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._driving_log_min_fields_remarks(ctx, field, obj)
		case "route":
			out.Values[i] = ec._driving_log_min_fields_route(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._driving_log_min_fields_start_time(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._driving_log_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._driving_log_min_fields_update_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._driving_log_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_mutation_responseImplementors = []string{"driving_log_mutation_response"}

func (ec *executionContext) _driving_log_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._driving_log_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._driving_log_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_stddev_fieldsImplementors = []string{"driving_log_stddev_fields"}

func (ec *executionContext) _driving_log_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_stddev_fields")
		case "check_organization_level":
			out.Values[i] = ec._driving_log_stddev_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_stddev_fields_check_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_stddev_pop_fieldsImplementors = []string{"driving_log_stddev_pop_fields"}

func (ec *executionContext) _driving_log_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_stddev_pop_fields")
		case "check_organization_level":
			out.Values[i] = ec._driving_log_stddev_pop_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_stddev_pop_fields_check_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_stddev_samp_fieldsImplementors = []string{"driving_log_stddev_samp_fields"}

func (ec *executionContext) _driving_log_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_stddev_samp_fields")
		case "check_organization_level":
			out.Values[i] = ec._driving_log_stddev_samp_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_stddev_samp_fields_check_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_sum_fieldsImplementors = []string{"driving_log_sum_fields"}

func (ec *executionContext) _driving_log_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_sum_fields")
		case "check_organization_level":
			out.Values[i] = ec._driving_log_sum_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_sum_fields_check_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_var_pop_fieldsImplementors = []string{"driving_log_var_pop_fields"}

func (ec *executionContext) _driving_log_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_var_pop_fields")
		case "check_organization_level":
			out.Values[i] = ec._driving_log_var_pop_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_var_pop_fields_check_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_var_samp_fieldsImplementors = []string{"driving_log_var_samp_fields"}

func (ec *executionContext) _driving_log_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_var_samp_fields")
		case "check_organization_level":
			out.Values[i] = ec._driving_log_var_samp_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_var_samp_fields_check_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driving_log_variance_fieldsImplementors = []string{"driving_log_variance_fields"}

func (ec *executionContext) _driving_log_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DrivingLogVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driving_log_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("driving_log_variance_fields")
		case "check_organization_level":
			out.Values[i] = ec._driving_log_variance_fields_check_organization_level(ctx, field, obj)
		case "check_state":
			out.Values[i] = ec._driving_log_variance_fields_check_state(ctx, field, obj)
		case "id":
			out.Values[i] = ec._driving_log_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscription_rootImplementors = []string{"subscription_root"}

func (ec *executionContext) _subscription_root(ctx context.Context, sel ast.SelectionSet, obj *model.SubscriptionRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscription_rootImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("subscription_root")
		case "driving_log":
			out.Values[i] = ec._subscription_root_driving_log(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driving_log_aggregate":
			out.Values[i] = ec._subscription_root_driving_log_aggregate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driving_log_by_pk":
			out.Values[i] = ec._subscription_root_driving_log_by_pk(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNdate2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdate2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNdriving_log2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DrivingLog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriving_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdriving_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLog(ctx context.Context, sel ast.SelectionSet, v *model1.DrivingLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driving_log(ctx, sel, v)
}

func (ec *executionContext) marshalNdriving_log_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._driving_log_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdriving_log_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx context.Context, v interface{}) (model.DrivingLogBoolExp, error) {
	res, err := ec.unmarshalInputdriving_log_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriving_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogConstraint(ctx context.Context, v interface{}) (model.DrivingLogConstraint, error) {
	var res model.DrivingLogConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriving_log_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogConstraint(ctx context.Context, sel ast.SelectionSet, v model.DrivingLogConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriving_log_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogInsertInput(ctx context.Context, v interface{}) (model.DrivingLogInsertInput, error) {
	res, err := ec.unmarshalInputdriving_log_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriving_log_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DrivingLogInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLogInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriving_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdriving_log_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogInsertInput(ctx context.Context, v interface{}) (*model.DrivingLogInsertInput, error) {
	res, err := ec.unmarshalInputdriving_log_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriving_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogOrderBy, error) {
	res, err := ec.unmarshalInputdriving_log_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriving_log_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogPkColumnsInput(ctx context.Context, v interface{}) (model.DrivingLogPkColumnsInput, error) {
	res, err := ec.unmarshalInputdriving_log_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdriving_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumn(ctx context.Context, v interface{}) (model.DrivingLogSelectColumn, error) {
	var res model.DrivingLogSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriving_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DrivingLogSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriving_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogUpdateColumn(ctx context.Context, v interface{}) (model.DrivingLogUpdateColumn, error) {
	var res model.DrivingLogUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdriving_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DrivingLogUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdriving_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DrivingLogUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DrivingLogUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriving_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdriving_log_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DrivingLogUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriving_log_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdate2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdate2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdate2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNdate2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOdate2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdate2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOdate_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐDateComparisonExp(ctx context.Context, v interface{}) (*model2.DateComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdate_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmodelᚐDrivingLog(ctx context.Context, sel ast.SelectionSet, v *model1.DrivingLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log(ctx, sel, v)
}

func (ec *executionContext) marshalOdriving_log_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdriving_log_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogAvgOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriving_log_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx context.Context, v interface{}) ([]*model.DrivingLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLogBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdriving_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriving_log_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogBoolExp(ctx context.Context, v interface{}) (*model.DrivingLogBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriving_log_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogIncInput(ctx context.Context, v interface{}) (*model.DrivingLogIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMaxOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMinOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOnConflict(ctx context.Context, v interface{}) (*model.DrivingLogOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdriving_log_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DrivingLogOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DrivingLogOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriving_log_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdriving_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DrivingLogSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DrivingLogSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdriving_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdriving_log_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DrivingLogSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdriving_log_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdriving_log_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSetInput(ctx context.Context, v interface{}) (*model.DrivingLogSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogSumOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarPopOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarSampOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdriving_log_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DrivingLogVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._driving_log_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdriving_log_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋlogᚋmutationᚋgraphᚋmodelᚐDrivingLogVarianceOrderBy(ctx context.Context, v interface{}) (*model.DrivingLogVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdriving_log_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
