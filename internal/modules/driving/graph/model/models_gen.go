// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/driving/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "control_line"
type ControlLineAggregate struct {
	Aggregate *ControlLineAggregateFields `json:"aggregate"`
}

// aggregate fields of "control_line"
type ControlLineAggregateFields struct {
	Avg        *ControlLineAvgFields        `json:"avg"`
	Count      *int                         `json:"count"`
	Max        *ControlLineMaxFields        `json:"max"`
	Min        *ControlLineMinFields        `json:"min"`
	Stddev     *ControlLineStddevFields     `json:"stddev"`
	StddevPop  *ControlLineStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ControlLineStddevSampFields `json:"stddev_samp"`
	Sum        *ControlLineSumFields        `json:"sum"`
	VarPop     *ControlLineVarPopFields     `json:"var_pop"`
	VarSamp    *ControlLineVarSampFields    `json:"var_samp"`
	Variance   *ControlLineVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "control_line"
type ControlLineAvgFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'control_line'.
type ControlLineBoolExp struct {
	And           []*ControlLineBoolExp           `json:"_and"`
	Not           *ControlLineBoolExp             `json:"_not"`
	Or            []*ControlLineBoolExp           `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	ControlLineID *model.StringComparisonExp      `json:"control_line_id"`
	LineName      *model.StringComparisonExp      `json:"line_name"`
	LineType      *model.IntComparisonExp         `json:"line_type"`
	DistrictID    *model.StringComparisonExp      `json:"district_id"`
	ControlLevel  *model.IntComparisonExp         `json:"control_level"`
	ApplyReason   *model.StringComparisonExp      `json:"apply_reason"`
	CheckStatus   *model.IntComparisonExp         `json:"check_status"`
	CheckTime     *model.TimestamptzComparisonExp `json:"check_time"`
	CheckUserID   *model.StringComparisonExp      `json:"check_user_id"`
	RejectReason  *model.StringComparisonExp      `json:"reject_reason"`
	CreatedAt     *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy     *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt     *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy     *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt     *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy     *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted     *model.BooleanComparisonExp     `json:"is_deleted"`
	GisData       *model.StringComparisonExp      `json:"gis_data"`
}

// input type for incrementing integer column in table "control_line"
type ControlLineIncInput struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// input type for inserting data into table "control_line"
type ControlLineInsertInput struct {
	ControlLineID string     `json:"control_line_id"`
	LineName      *string    `json:"line_name"`
	LineType      *int       `json:"line_type"`
	DistrictID    *string    `json:"district_id"`
	ControlLevel  *int       `json:"control_level"`
	ApplyReason   *string    `json:"apply_reason"`
	CheckStatus   *int       `json:"check_status"`
	CheckTime     *time.Time `json:"check_time"`
	CheckUserID   *string    `json:"check_user_id"`
	RejectReason  *string    `json:"reject_reason"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     bool       `json:"is_deleted"`
	GisData       *string    `json:"gis_data"`
}

// aggregate max on columns of table "control_line"
type ControlLineMaxFields struct {
	ID            *int64     `json:"id"`
	ControlLineID *string    `json:"control_line_id"`
	LineName      *string    `json:"line_name"`
	LineType      *int       `json:"line_type"`
	DistrictID    *string    `json:"district_id"`
	ControlLevel  *int       `json:"control_level"`
	ApplyReason   *string    `json:"apply_reason"`
	CheckStatus   *int       `json:"check_status"`
	CheckTime     *time.Time `json:"check_time"`
	CheckUserID   *string    `json:"check_user_id"`
	RejectReason  *string    `json:"reject_reason"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	GisData       *string    `json:"gis_data"`
}

// aggregate min on columns of table "control_line"
type ControlLineMinFields struct {
	ID            *int64     `json:"id"`
	ControlLineID *string    `json:"control_line_id"`
	LineName      *string    `json:"line_name"`
	LineType      *int       `json:"line_type"`
	DistrictID    *string    `json:"district_id"`
	ControlLevel  *int       `json:"control_level"`
	ApplyReason   *string    `json:"apply_reason"`
	CheckStatus   *int       `json:"check_status"`
	CheckTime     *time.Time `json:"check_time"`
	CheckUserID   *string    `json:"check_user_id"`
	RejectReason  *string    `json:"reject_reason"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	GisData       *string    `json:"gis_data"`
}

// response of any mutation on the table "control_line"
type ControlLineMutationResponse struct {
	AffectedRows int                   `json:"affected_rows"`
	Returning    []*model1.ControlLine `json:"returning"`
}

// ordering options when selecting data from "control_line"
type ControlLineOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	ControlLineID *model.OrderBy `json:"control_line_id"`
	LineName      *model.OrderBy `json:"line_name"`
	LineType      *model.OrderBy `json:"line_type"`
	DistrictID    *model.OrderBy `json:"district_id"`
	ControlLevel  *model.OrderBy `json:"control_level"`
	ApplyReason   *model.OrderBy `json:"apply_reason"`
	CheckStatus   *model.OrderBy `json:"check_status"`
	CheckTime     *model.OrderBy `json:"check_time"`
	CheckUserID   *model.OrderBy `json:"check_user_id"`
	RejectReason  *model.OrderBy `json:"reject_reason"`
	CreatedAt     *model.OrderBy `json:"created_at"`
	CreatedBy     *model.OrderBy `json:"created_by"`
	UpdatedAt     *model.OrderBy `json:"updated_at"`
	UpdatedBy     *model.OrderBy `json:"updated_by"`
	DeletedAt     *model.OrderBy `json:"deleted_at"`
	DeletedBy     *model.OrderBy `json:"deleted_by"`
	IsDeleted     *model.OrderBy `json:"is_deleted"`
	GisData       *model.OrderBy `json:"gis_data"`
}

// input type for updating data in table "control_line"
type ControlLineSetInput struct {
	ID            *int64     `json:"id"`
	ControlLineID *string    `json:"control_line_id"`
	LineName      *string    `json:"line_name"`
	LineType      *int       `json:"line_type"`
	DistrictID    *string    `json:"district_id"`
	ControlLevel  *int       `json:"control_level"`
	ApplyReason   *string    `json:"apply_reason"`
	CheckStatus   *int       `json:"check_status"`
	CheckTime     *time.Time `json:"check_time"`
	CheckUserID   *string    `json:"check_user_id"`
	RejectReason  *string    `json:"reject_reason"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	GisData       *string    `json:"gis_data"`
}

// aggregate stddev on columns of table "control_line"
type ControlLineStddevFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate stddev_pop on columns of table "control_line"
type ControlLineStddevPopFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate stddev_samp on columns of table "control_line"
type ControlLineStddevSampFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate sum on columns of table "control_line"
type ControlLineSumFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregated selection of "control_line_time"
type ControlLineTimeAggregate struct {
	Aggregate *ControlLineTimeAggregateFields `json:"aggregate"`
}

// aggregate fields of "control_line_time"
type ControlLineTimeAggregateFields struct {
	Avg        *ControlLineTimeAvgFields        `json:"avg"`
	Count      *int                             `json:"count"`
	Max        *ControlLineTimeMaxFields        `json:"max"`
	Min        *ControlLineTimeMinFields        `json:"min"`
	Stddev     *ControlLineTimeStddevFields     `json:"stddev"`
	StddevPop  *ControlLineTimeStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ControlLineTimeStddevSampFields `json:"stddev_samp"`
	Sum        *ControlLineTimeSumFields        `json:"sum"`
	VarPop     *ControlLineTimeVarPopFields     `json:"var_pop"`
	VarSamp    *ControlLineTimeVarSampFields    `json:"var_samp"`
	Variance   *ControlLineTimeVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "control_line_time"
type ControlLineTimeAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'control_line_time'.
type ControlLineTimeBoolExp struct {
	And               []*ControlLineTimeBoolExp       `json:"_and"`
	Not               *ControlLineTimeBoolExp         `json:"_not"`
	Or                []*ControlLineTimeBoolExp       `json:"_or"`
	ID                *model.BigintComparisonExp      `json:"id"`
	ControlLineTimeID *model.StringComparisonExp      `json:"control_line_time_id"`
	ControlLineID     *model.StringComparisonExp      `json:"control_line_id"`
	StartTime         *model.TimestamptzComparisonExp `json:"start_time"`
	EndTime           *model.TimestamptzComparisonExp `json:"end_time"`
	CreatedAt         *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy         *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt         *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy         *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt         *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy         *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted         *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "control_line_time"
type ControlLineTimeIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "control_line_time"
type ControlLineTimeInsertInput struct {
	ControlLineTimeID string     `json:"control_line_time_id"`
	ControlLineID     string     `json:"control_line_id"`
	StartTime         time.Time  `json:"start_time"`
	EndTime           time.Time  `json:"end_time"`
	CreatedAt         time.Time  `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
	IsDeleted         bool       `json:"is_deleted"`
}

// aggregate max on columns of table "control_line_time"
type ControlLineTimeMaxFields struct {
	ID                *int64     `json:"id"`
	ControlLineTimeID *string    `json:"control_line_time_id"`
	ControlLineID     *string    `json:"control_line_id"`
	StartTime         *time.Time `json:"start_time"`
	EndTime           *time.Time `json:"end_time"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
	IsDeleted         *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "control_line_time"
type ControlLineTimeMinFields struct {
	ID                *int64     `json:"id"`
	ControlLineTimeID *string    `json:"control_line_time_id"`
	ControlLineID     *string    `json:"control_line_id"`
	StartTime         *time.Time `json:"start_time"`
	EndTime           *time.Time `json:"end_time"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
	IsDeleted         *bool      `json:"is_deleted"`
}

// response of any mutation on the table "control_line_time"
type ControlLineTimeMutationResponse struct {
	AffectedRows int                       `json:"affected_rows"`
	Returning    []*model1.ControlLineTime `json:"returning"`
}

// ordering options when selecting data from "control_line_time"
type ControlLineTimeOrderBy struct {
	ID                *model.OrderBy `json:"id"`
	ControlLineTimeID *model.OrderBy `json:"control_line_time_id"`
	ControlLineID     *model.OrderBy `json:"control_line_id"`
	StartTime         *model.OrderBy `json:"start_time"`
	EndTime           *model.OrderBy `json:"end_time"`
	CreatedAt         *model.OrderBy `json:"created_at"`
	CreatedBy         *model.OrderBy `json:"created_by"`
	UpdatedAt         *model.OrderBy `json:"updated_at"`
	UpdatedBy         *model.OrderBy `json:"updated_by"`
	DeletedAt         *model.OrderBy `json:"deleted_at"`
	DeletedBy         *model.OrderBy `json:"deleted_by"`
	IsDeleted         *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "control_line_time"
type ControlLineTimeSetInput struct {
	ID                *int64     `json:"id"`
	ControlLineTimeID *string    `json:"control_line_time_id"`
	ControlLineID     *string    `json:"control_line_id"`
	StartTime         *time.Time `json:"start_time"`
	EndTime           *time.Time `json:"end_time"`
	CreatedAt         *time.Time `json:"created_at"`
	CreatedBy         *string    `json:"created_by"`
	UpdatedAt         *time.Time `json:"updated_at"`
	UpdatedBy         *string    `json:"updated_by"`
	DeletedAt         *time.Time `json:"deleted_at"`
	DeletedBy         *string    `json:"deleted_by"`
	IsDeleted         *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "control_line_time"
type ControlLineTimeStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "control_line_time"
type ControlLineTimeStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "control_line_time"
type ControlLineTimeStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "control_line_time"
type ControlLineTimeSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "control_line_time"
type ControlLineTimeVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "control_line_time"
type ControlLineTimeVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "control_line_time"
type ControlLineTimeVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "control_line"
type ControlLineVarPopFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate var_samp on columns of table "control_line"
type ControlLineVarSampFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate variance on columns of table "control_line"
type ControlLineVarianceFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregated selection of "ecd_file_check_his"
type EcdFileCheckHisAggregate struct {
	Aggregate *EcdFileCheckHisAggregateFields `json:"aggregate"`
}

// aggregate fields of "ecd_file_check_his"
type EcdFileCheckHisAggregateFields struct {
	Avg        *EcdFileCheckHisAvgFields        `json:"avg"`
	Count      *int                             `json:"count"`
	Max        *EcdFileCheckHisMaxFields        `json:"max"`
	Min        *EcdFileCheckHisMinFields        `json:"min"`
	Stddev     *EcdFileCheckHisStddevFields     `json:"stddev"`
	StddevPop  *EcdFileCheckHisStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EcdFileCheckHisStddevSampFields `json:"stddev_samp"`
	Sum        *EcdFileCheckHisSumFields        `json:"sum"`
	VarPop     *EcdFileCheckHisVarPopFields     `json:"var_pop"`
	VarSamp    *EcdFileCheckHisVarSampFields    `json:"var_samp"`
	Variance   *EcdFileCheckHisVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ecd_file_check_his"
type EcdFileCheckHisAvgFields struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_check_his'.
type EcdFileCheckHisBoolExp struct {
	And         []*EcdFileCheckHisBoolExp       `json:"_and"`
	Not         *EcdFileCheckHisBoolExp         `json:"_not"`
	Or          []*EcdFileCheckHisBoolExp       `json:"_or"`
	ID          *model.BigintComparisonExp      `json:"id"`
	HisID       *model.StringComparisonExp      `json:"his_id"`
	FileMainID  *model.StringComparisonExp      `json:"file_main_id"`
	UserID      *model.StringComparisonExp      `json:"user_id"`
	OperType    *model.IntComparisonExp         `json:"oper_type"`
	CheckStatus *model.IntComparisonExp         `json:"check_status"`
	RecTime     *model.TimestamptzComparisonExp `json:"rec_time"`
	OperTime    *model.TimestamptzComparisonExp `json:"oper_time"`
	Suggest     *model.StringComparisonExp      `json:"suggest"`
	Remark      *model.StringComparisonExp      `json:"remark"`
	CreatedAt   *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy   *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt   *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy   *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt   *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy   *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted   *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "ecd_file_check_his"
type EcdFileCheckHisIncInput struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// input type for inserting data into table "ecd_file_check_his"
type EcdFileCheckHisInsertInput struct {
	HisID       string     `json:"his_id"`
	FileMainID  string     `json:"file_main_id"`
	UserID      string     `json:"user_id"`
	OperType    int        `json:"oper_type"`
	CheckStatus int        `json:"check_status"`
	RecTime     *time.Time `json:"rec_time"`
	OperTime    *time.Time `json:"oper_time"`
	Suggest     *string    `json:"suggest"`
	Remark      *string    `json:"remark"`
	CreatedAt   time.Time  `json:"created_at"`
	CreatedBy   *string    `json:"created_by"`
	UpdatedAt   *time.Time `json:"updated_at"`
	UpdatedBy   *string    `json:"updated_by"`
	DeletedAt   *time.Time `json:"deleted_at"`
	DeletedBy   *string    `json:"deleted_by"`
	IsDeleted   *bool      `json:"is_deleted"`
}

// aggregate max on columns of table "ecd_file_check_his"
type EcdFileCheckHisMaxFields struct {
	ID          *int64     `json:"id"`
	HisID       *string    `json:"his_id"`
	FileMainID  *string    `json:"file_main_id"`
	UserID      *string    `json:"user_id"`
	OperType    *int       `json:"oper_type"`
	CheckStatus *int       `json:"check_status"`
	RecTime     *time.Time `json:"rec_time"`
	OperTime    *time.Time `json:"oper_time"`
	Suggest     *string    `json:"suggest"`
	Remark      *string    `json:"remark"`
	CreatedAt   *time.Time `json:"created_at"`
	CreatedBy   *string    `json:"created_by"`
	UpdatedAt   *time.Time `json:"updated_at"`
	UpdatedBy   *string    `json:"updated_by"`
	DeletedAt   *time.Time `json:"deleted_at"`
	DeletedBy   *string    `json:"deleted_by"`
	IsDeleted   *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "ecd_file_check_his"
type EcdFileCheckHisMinFields struct {
	ID          *int64     `json:"id"`
	HisID       *string    `json:"his_id"`
	FileMainID  *string    `json:"file_main_id"`
	UserID      *string    `json:"user_id"`
	OperType    *int       `json:"oper_type"`
	CheckStatus *int       `json:"check_status"`
	RecTime     *time.Time `json:"rec_time"`
	OperTime    *time.Time `json:"oper_time"`
	Suggest     *string    `json:"suggest"`
	Remark      *string    `json:"remark"`
	CreatedAt   *time.Time `json:"created_at"`
	CreatedBy   *string    `json:"created_by"`
	UpdatedAt   *time.Time `json:"updated_at"`
	UpdatedBy   *string    `json:"updated_by"`
	DeletedAt   *time.Time `json:"deleted_at"`
	DeletedBy   *string    `json:"deleted_by"`
	IsDeleted   *bool      `json:"is_deleted"`
}

// response of any mutation on the table "ecd_file_check_his"
type EcdFileCheckHisMutationResponse struct {
	AffectedRows int                       `json:"affected_rows"`
	Returning    []*model1.EcdFileCheckHis `json:"returning"`
}

// ordering options when selecting data from "ecd_file_check_his"
type EcdFileCheckHisOrderBy struct {
	ID          *model.OrderBy `json:"id"`
	HisID       *model.OrderBy `json:"his_id"`
	FileMainID  *model.OrderBy `json:"file_main_id"`
	UserID      *model.OrderBy `json:"user_id"`
	OperType    *model.OrderBy `json:"oper_type"`
	CheckStatus *model.OrderBy `json:"check_status"`
	RecTime     *model.OrderBy `json:"rec_time"`
	OperTime    *model.OrderBy `json:"oper_time"`
	Suggest     *model.OrderBy `json:"suggest"`
	Remark      *model.OrderBy `json:"remark"`
	CreatedAt   *model.OrderBy `json:"created_at"`
	CreatedBy   *model.OrderBy `json:"created_by"`
	UpdatedAt   *model.OrderBy `json:"updated_at"`
	UpdatedBy   *model.OrderBy `json:"updated_by"`
	DeletedAt   *model.OrderBy `json:"deleted_at"`
	DeletedBy   *model.OrderBy `json:"deleted_by"`
	IsDeleted   *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "ecd_file_check_his"
type EcdFileCheckHisSetInput struct {
	ID          *int64     `json:"id"`
	HisID       *string    `json:"his_id"`
	FileMainID  *string    `json:"file_main_id"`
	UserID      *string    `json:"user_id"`
	OperType    *int       `json:"oper_type"`
	CheckStatus *int       `json:"check_status"`
	RecTime     *time.Time `json:"rec_time"`
	OperTime    *time.Time `json:"oper_time"`
	Suggest     *string    `json:"suggest"`
	Remark      *string    `json:"remark"`
	CreatedAt   *time.Time `json:"created_at"`
	CreatedBy   *string    `json:"created_by"`
	UpdatedAt   *time.Time `json:"updated_at"`
	UpdatedBy   *string    `json:"updated_by"`
	DeletedAt   *time.Time `json:"deleted_at"`
	DeletedBy   *string    `json:"deleted_by"`
	IsDeleted   *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "ecd_file_check_his"
type EcdFileCheckHisStddevFields struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate stddev_pop on columns of table "ecd_file_check_his"
type EcdFileCheckHisStddevPopFields struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate stddev_samp on columns of table "ecd_file_check_his"
type EcdFileCheckHisStddevSampFields struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate sum on columns of table "ecd_file_check_his"
type EcdFileCheckHisSumFields struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate var_pop on columns of table "ecd_file_check_his"
type EcdFileCheckHisVarPopFields struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate var_samp on columns of table "ecd_file_check_his"
type EcdFileCheckHisVarSampFields struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate variance on columns of table "ecd_file_check_his"
type EcdFileCheckHisVarianceFields struct {
	ID          *int64 `json:"id"`
	OperType    *int   `json:"oper_type"`
	CheckStatus *int   `json:"check_status"`
}

// aggregated selection of "ecd_file_district"
type EcdFileDistrictAggregate struct {
	Aggregate *EcdFileDistrictAggregateFields `json:"aggregate"`
}

// aggregate fields of "ecd_file_district"
type EcdFileDistrictAggregateFields struct {
	Avg        *EcdFileDistrictAvgFields        `json:"avg"`
	Count      *int                             `json:"count"`
	Max        *EcdFileDistrictMaxFields        `json:"max"`
	Min        *EcdFileDistrictMinFields        `json:"min"`
	Stddev     *EcdFileDistrictStddevFields     `json:"stddev"`
	StddevPop  *EcdFileDistrictStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EcdFileDistrictStddevSampFields `json:"stddev_samp"`
	Sum        *EcdFileDistrictSumFields        `json:"sum"`
	VarPop     *EcdFileDistrictVarPopFields     `json:"var_pop"`
	VarSamp    *EcdFileDistrictVarSampFields    `json:"var_samp"`
	Variance   *EcdFileDistrictVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ecd_file_district"
type EcdFileDistrictAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_district'.
type EcdFileDistrictBoolExp struct {
	And            []*EcdFileDistrictBoolExp       `json:"_and"`
	Not            *EcdFileDistrictBoolExp         `json:"_not"`
	Or             []*EcdFileDistrictBoolExp       `json:"_or"`
	ID             *model.BigintComparisonExp      `json:"id"`
	FileDistrictID *model.StringComparisonExp      `json:"file_district_id"`
	FileMainID     *model.StringComparisonExp      `json:"file_main_id"`
	DistrictID     *model.StringComparisonExp      `json:"district_id"`
	CreatedAt      *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy      *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt      *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy      *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt      *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy      *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted      *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "ecd_file_district"
type EcdFileDistrictIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "ecd_file_district"
type EcdFileDistrictInsertInput struct {
	FileDistrictID string     `json:"file_district_id"`
	FileMainID     string     `json:"file_main_id"`
	DistrictID     string     `json:"district_id"`
	CreatedAt      time.Time  `json:"created_at"`
	CreatedBy      *string    `json:"created_by"`
	UpdatedAt      *time.Time `json:"updated_at"`
	UpdatedBy      *string    `json:"updated_by"`
	DeletedAt      *time.Time `json:"deleted_at"`
	DeletedBy      *string    `json:"deleted_by"`
	IsDeleted      bool       `json:"is_deleted"`
}

// aggregate max on columns of table "ecd_file_district"
type EcdFileDistrictMaxFields struct {
	ID             *int64     `json:"id"`
	FileDistrictID *string    `json:"file_district_id"`
	FileMainID     *string    `json:"file_main_id"`
	DistrictID     *string    `json:"district_id"`
	CreatedAt      *time.Time `json:"created_at"`
	CreatedBy      *string    `json:"created_by"`
	UpdatedAt      *time.Time `json:"updated_at"`
	UpdatedBy      *string    `json:"updated_by"`
	DeletedAt      *time.Time `json:"deleted_at"`
	DeletedBy      *string    `json:"deleted_by"`
	IsDeleted      *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "ecd_file_district"
type EcdFileDistrictMinFields struct {
	ID             *int64     `json:"id"`
	FileDistrictID *string    `json:"file_district_id"`
	FileMainID     *string    `json:"file_main_id"`
	DistrictID     *string    `json:"district_id"`
	CreatedAt      *time.Time `json:"created_at"`
	CreatedBy      *string    `json:"created_by"`
	UpdatedAt      *time.Time `json:"updated_at"`
	UpdatedBy      *string    `json:"updated_by"`
	DeletedAt      *time.Time `json:"deleted_at"`
	DeletedBy      *string    `json:"deleted_by"`
	IsDeleted      *bool      `json:"is_deleted"`
}

// response of any mutation on the table "ecd_file_district"
type EcdFileDistrictMutationResponse struct {
	AffectedRows int                       `json:"affected_rows"`
	Returning    []*model1.EcdFileDistrict `json:"returning"`
}

// ordering options when selecting data from "ecd_file_district"
type EcdFileDistrictOrderBy struct {
	ID             *model.OrderBy `json:"id"`
	FileDistrictID *model.OrderBy `json:"file_district_id"`
	FileMainID     *model.OrderBy `json:"file_main_id"`
	DistrictID     *model.OrderBy `json:"district_id"`
	CreatedAt      *model.OrderBy `json:"created_at"`
	CreatedBy      *model.OrderBy `json:"created_by"`
	UpdatedAt      *model.OrderBy `json:"updated_at"`
	UpdatedBy      *model.OrderBy `json:"updated_by"`
	DeletedAt      *model.OrderBy `json:"deleted_at"`
	DeletedBy      *model.OrderBy `json:"deleted_by"`
	IsDeleted      *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "ecd_file_district"
type EcdFileDistrictSetInput struct {
	ID             *int64     `json:"id"`
	FileDistrictID *string    `json:"file_district_id"`
	FileMainID     *string    `json:"file_main_id"`
	DistrictID     *string    `json:"district_id"`
	CreatedAt      *time.Time `json:"created_at"`
	CreatedBy      *string    `json:"created_by"`
	UpdatedAt      *time.Time `json:"updated_at"`
	UpdatedBy      *string    `json:"updated_by"`
	DeletedAt      *time.Time `json:"deleted_at"`
	DeletedBy      *string    `json:"deleted_by"`
	IsDeleted      *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "ecd_file_district"
type EcdFileDistrictStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "ecd_file_district"
type EcdFileDistrictStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "ecd_file_district"
type EcdFileDistrictStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "ecd_file_district"
type EcdFileDistrictSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "ecd_file_district"
type EcdFileDistrictVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "ecd_file_district"
type EcdFileDistrictVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "ecd_file_district"
type EcdFileDistrictVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "ecd_file_line_point"
type EcdFileLinePointAggregate struct {
	Aggregate *EcdFileLinePointAggregateFields `json:"aggregate"`
}

// aggregate fields of "ecd_file_line_point"
type EcdFileLinePointAggregateFields struct {
	Avg        *EcdFileLinePointAvgFields        `json:"avg"`
	Count      *int                              `json:"count"`
	Max        *EcdFileLinePointMaxFields        `json:"max"`
	Min        *EcdFileLinePointMinFields        `json:"min"`
	Stddev     *EcdFileLinePointStddevFields     `json:"stddev"`
	StddevPop  *EcdFileLinePointStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EcdFileLinePointStddevSampFields `json:"stddev_samp"`
	Sum        *EcdFileLinePointSumFields        `json:"sum"`
	VarPop     *EcdFileLinePointVarPopFields     `json:"var_pop"`
	VarSamp    *EcdFileLinePointVarSampFields    `json:"var_samp"`
	Variance   *EcdFileLinePointVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ecd_file_line_point"
type EcdFileLinePointAvgFields struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_line_point'.
type EcdFileLinePointBoolExp struct {
	And             []*EcdFileLinePointBoolExp      `json:"_and"`
	Not             *EcdFileLinePointBoolExp        `json:"_not"`
	Or              []*EcdFileLinePointBoolExp      `json:"_or"`
	ID              *model.BigintComparisonExp      `json:"id"`
	LinePointID     *model.StringComparisonExp      `json:"line_point_id"`
	FileMainID      *model.StringComparisonExp      `json:"file_main_id"`
	GpsPoint        *model.PointComparisonExp       `json:"gps_point"`
	MapPoint        *model.PointComparisonExp       `json:"map_point"`
	LinePointName   *model.StringComparisonExp      `json:"line_point_name"`
	LinePointRemark *model.StringComparisonExp      `json:"line_point_remark"`
	PointType       *model.IntComparisonExp         `json:"point_type"`
	CreatedAt       *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy       *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt       *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy       *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt       *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy       *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted       *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "ecd_file_line_point"
type EcdFileLinePointIncInput struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// input type for inserting data into table "ecd_file_line_point"
type EcdFileLinePointInsertInput struct {
	LinePointID     string     `json:"line_point_id"`
	FileMainID      string     `json:"file_main_id"`
	GpsPoint        *string    `json:"gps_point"`
	MapPoint        *string    `json:"map_point"`
	LinePointName   *string    `json:"line_point_name"`
	LinePointRemark *string    `json:"line_point_remark"`
	PointType       *int       `json:"point_type"`
	CreatedAt       time.Time  `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       bool       `json:"is_deleted"`
}

// aggregate max on columns of table "ecd_file_line_point"
type EcdFileLinePointMaxFields struct {
	ID              *int64     `json:"id"`
	LinePointID     *string    `json:"line_point_id"`
	FileMainID      *string    `json:"file_main_id"`
	GpsPoint        *string    `json:"gps_point"`
	MapPoint        *string    `json:"map_point"`
	LinePointName   *string    `json:"line_point_name"`
	LinePointRemark *string    `json:"line_point_remark"`
	PointType       *int       `json:"point_type"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "ecd_file_line_point"
type EcdFileLinePointMinFields struct {
	ID              *int64     `json:"id"`
	LinePointID     *string    `json:"line_point_id"`
	FileMainID      *string    `json:"file_main_id"`
	GpsPoint        *string    `json:"gps_point"`
	MapPoint        *string    `json:"map_point"`
	LinePointName   *string    `json:"line_point_name"`
	LinePointRemark *string    `json:"line_point_remark"`
	PointType       *int       `json:"point_type"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// response of any mutation on the table "ecd_file_line_point"
type EcdFileLinePointMutationResponse struct {
	AffectedRows int                        `json:"affected_rows"`
	Returning    []*model1.EcdFileLinePoint `json:"returning"`
}

// ordering options when selecting data from "ecd_file_line_point"
type EcdFileLinePointOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	LinePointID     *model.OrderBy `json:"line_point_id"`
	FileMainID      *model.OrderBy `json:"file_main_id"`
	GpsPoint        *model.OrderBy `json:"gps_point"`
	MapPoint        *model.OrderBy `json:"map_point"`
	LinePointName   *model.OrderBy `json:"line_point_name"`
	LinePointRemark *model.OrderBy `json:"line_point_remark"`
	PointType       *model.OrderBy `json:"point_type"`
	CreatedAt       *model.OrderBy `json:"created_at"`
	CreatedBy       *model.OrderBy `json:"created_by"`
	UpdatedAt       *model.OrderBy `json:"updated_at"`
	UpdatedBy       *model.OrderBy `json:"updated_by"`
	DeletedAt       *model.OrderBy `json:"deleted_at"`
	DeletedBy       *model.OrderBy `json:"deleted_by"`
	IsDeleted       *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "ecd_file_line_point"
type EcdFileLinePointSetInput struct {
	ID              *int64     `json:"id"`
	LinePointID     *string    `json:"line_point_id"`
	FileMainID      *string    `json:"file_main_id"`
	GpsPoint        *string    `json:"gps_point"`
	MapPoint        *string    `json:"map_point"`
	LinePointName   *string    `json:"line_point_name"`
	LinePointRemark *string    `json:"line_point_remark"`
	PointType       *int       `json:"point_type"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "ecd_file_line_point"
type EcdFileLinePointStddevFields struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// aggregate stddev_pop on columns of table "ecd_file_line_point"
type EcdFileLinePointStddevPopFields struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// aggregate stddev_samp on columns of table "ecd_file_line_point"
type EcdFileLinePointStddevSampFields struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// aggregate sum on columns of table "ecd_file_line_point"
type EcdFileLinePointSumFields struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// aggregate var_pop on columns of table "ecd_file_line_point"
type EcdFileLinePointVarPopFields struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// aggregate var_samp on columns of table "ecd_file_line_point"
type EcdFileLinePointVarSampFields struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// aggregate variance on columns of table "ecd_file_line_point"
type EcdFileLinePointVarianceFields struct {
	ID        *int64 `json:"id"`
	PointType *int   `json:"point_type"`
}

// aggregated selection of "ecd_file_main"
type EcdFileMainAggregate struct {
	Aggregate *EcdFileMainAggregateFields `json:"aggregate"`
}

// aggregate fields of "ecd_file_main"
type EcdFileMainAggregateFields struct {
	Avg        *EcdFileMainAvgFields        `json:"avg"`
	Count      *int                         `json:"count"`
	Max        *EcdFileMainMaxFields        `json:"max"`
	Min        *EcdFileMainMinFields        `json:"min"`
	Stddev     *EcdFileMainStddevFields     `json:"stddev"`
	StddevPop  *EcdFileMainStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EcdFileMainStddevSampFields `json:"stddev_samp"`
	Sum        *EcdFileMainSumFields        `json:"sum"`
	VarPop     *EcdFileMainVarPopFields     `json:"var_pop"`
	VarSamp    *EcdFileMainVarSampFields    `json:"var_samp"`
	Variance   *EcdFileMainVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ecd_file_main"
type EcdFileMainAvgFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_main'.
type EcdFileMainBoolExp struct {
	And                         []*EcdFileMainBoolExp           `json:"_and"`
	Not                         *EcdFileMainBoolExp             `json:"_not"`
	Or                          []*EcdFileMainBoolExp           `json:"_or"`
	ID                          *model.BigintComparisonExp      `json:"id"`
	FileMainID                  *model.StringComparisonExp      `json:"file_main_id"`
	FileID                      *model.StringComparisonExp      `json:"file_id"`
	EnterpriseID                *model.StringComparisonExp      `json:"enterprise_id"`
	DistrictID                  *model.StringComparisonExp      `json:"district_id"`
	IsCrossDistrict             *model.BooleanComparisonExp     `json:"is_cross_district"`
	FirstCrossPid               *model.StringComparisonExp      `json:"first_cross_pid"`
	PlanStartTime               *model.TimestamptzComparisonExp `json:"plan_start_time"`
	PlanEndTime                 *model.TimestamptzComparisonExp `json:"plan_end_time"`
	CheckTime                   *model.TimestamptzComparisonExp `json:"check_time"`
	CheckStatus                 *model.IntComparisonExp         `json:"check_status"`
	PhoneNum                    *model.StringComparisonExp      `json:"phone_num"`
	PointState                  *model.IntComparisonExp         `json:"point_state"`
	EndState                    *model.IntComparisonExp         `json:"end_state"`
	Title                       *model.StringComparisonExp      `json:"title"`
	AddDistrictID               *model.StringComparisonExp      `json:"add_district_id"`
	StartPointCheckerSign       *model.StringComparisonExp      `json:"start_point_checker_sign"`
	EndPointCheckerSign         *model.StringComparisonExp      `json:"end_point_checker_sign"`
	RouteCheckerSign            *model.StringComparisonExp      `json:"route_checker_sign"`
	SpeedTimeCheckerSign        *model.StringComparisonExp      `json:"speed_time_checker_sign"`
	ReturnSuggest               *model.StringComparisonExp      `json:"return_suggest"`
	ConstructTitle              *model.StringComparisonExp      `json:"construct_title"`
	ConstructID                 *model.StringComparisonExp      `json:"construct_id"`
	IsMatchConstruction         *model.BooleanComparisonExp     `json:"is_match_construction"`
	ClientReportTime            *model.TimestamptzComparisonExp `json:"client_report_time"`
	ConstructProveFile          *model.StringComparisonExp      `json:"construct_prove_file"`
	DoConstructProveFile        *model.StringComparisonExp      `json:"do_construct_prove_file"`
	SubPackageProveFile         *model.StringComparisonExp      `json:"sub_package_prove_file"`
	TrafficProveFile            *model.StringComparisonExp      `json:"traffic_prove_file"`
	RouteBoardPromiseFile       *model.StringComparisonExp      `json:"route_board_promise_file"`
	TrafficeObjectPromiseFile   *model.StringComparisonExp      `json:"traffice_object_promise_file"`
	ConstructGarbageAllowFile   *model.StringComparisonExp      `json:"construct_garbage_allow_file"`
	ConstructSiteEnterancePhoto *model.StringComparisonExp      `json:"construct_site_enterance_photo"`
	ConstructWashCarPlacePhoto  *model.StringComparisonExp      `json:"construct_wash_car_place_photo"`
	CreatedAt                   *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy                   *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt                   *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy                   *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt                   *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy                   *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted                   *model.BooleanComparisonExp     `json:"is_deleted"`
	Remark                      *model.StringComparisonExp      `json:"remark"`
}

// input type for incrementing integer column in table "ecd_file_main"
type EcdFileMainIncInput struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// input type for inserting data into table "ecd_file_main"
type EcdFileMainInsertInput struct {
	FileMainID                  string     `json:"file_main_id"`
	FileID                      string     `json:"file_id"`
	EnterpriseID                string     `json:"enterprise_id"`
	DistrictID                  *string    `json:"district_id"`
	IsCrossDistrict             *bool      `json:"is_cross_district"`
	FirstCrossPid               *string    `json:"first_cross_pid"`
	PlanStartTime               *time.Time `json:"plan_start_time"`
	PlanEndTime                 *time.Time `json:"plan_end_time"`
	CheckTime                   *time.Time `json:"check_time"`
	CheckStatus                 *int       `json:"check_status"`
	PhoneNum                    *string    `json:"phone_num"`
	PointState                  *int       `json:"point_state"`
	EndState                    *int       `json:"end_state"`
	Title                       *string    `json:"title"`
	AddDistrictID               *string    `json:"add_district_id"`
	StartPointCheckerSign       *string    `json:"start_point_checker_sign"`
	EndPointCheckerSign         *string    `json:"end_point_checker_sign"`
	RouteCheckerSign            *string    `json:"route_checker_sign"`
	SpeedTimeCheckerSign        *string    `json:"speed_time_checker_sign"`
	ReturnSuggest               *string    `json:"return_suggest"`
	ConstructTitle              *string    `json:"construct_title"`
	ConstructID                 *string    `json:"construct_id"`
	IsMatchConstruction         *bool      `json:"is_match_construction"`
	ClientReportTime            *time.Time `json:"client_report_time"`
	ConstructProveFile          *string    `json:"construct_prove_file"`
	DoConstructProveFile        *string    `json:"do_construct_prove_file"`
	SubPackageProveFile         *string    `json:"sub_package_prove_file"`
	TrafficProveFile            *string    `json:"traffic_prove_file"`
	RouteBoardPromiseFile       *string    `json:"route_board_promise_file"`
	TrafficeObjectPromiseFile   *string    `json:"traffice_object_promise_file"`
	ConstructGarbageAllowFile   *string    `json:"construct_garbage_allow_file"`
	ConstructSiteEnterancePhoto *string    `json:"construct_site_enterance_photo"`
	ConstructWashCarPlacePhoto  *string    `json:"construct_wash_car_place_photo"`
	CreatedAt                   time.Time  `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   bool       `json:"is_deleted"`
	Remark                      *string    `json:"remark"`
}

// aggregate max on columns of table "ecd_file_main"
type EcdFileMainMaxFields struct {
	ID                          *int64     `json:"id"`
	FileMainID                  *string    `json:"file_main_id"`
	FileID                      *string    `json:"file_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	DistrictID                  *string    `json:"district_id"`
	IsCrossDistrict             *bool      `json:"is_cross_district"`
	FirstCrossPid               *string    `json:"first_cross_pid"`
	PlanStartTime               *time.Time `json:"plan_start_time"`
	PlanEndTime                 *time.Time `json:"plan_end_time"`
	CheckTime                   *time.Time `json:"check_time"`
	CheckStatus                 *int       `json:"check_status"`
	PhoneNum                    *string    `json:"phone_num"`
	PointState                  *int       `json:"point_state"`
	EndState                    *int       `json:"end_state"`
	Title                       *string    `json:"title"`
	AddDistrictID               *string    `json:"add_district_id"`
	StartPointCheckerSign       *string    `json:"start_point_checker_sign"`
	EndPointCheckerSign         *string    `json:"end_point_checker_sign"`
	RouteCheckerSign            *string    `json:"route_checker_sign"`
	SpeedTimeCheckerSign        *string    `json:"speed_time_checker_sign"`
	ReturnSuggest               *string    `json:"return_suggest"`
	ConstructTitle              *string    `json:"construct_title"`
	ConstructID                 *string    `json:"construct_id"`
	IsMatchConstruction         *bool      `json:"is_match_construction"`
	ClientReportTime            *time.Time `json:"client_report_time"`
	ConstructProveFile          *string    `json:"construct_prove_file"`
	DoConstructProveFile        *string    `json:"do_construct_prove_file"`
	SubPackageProveFile         *string    `json:"sub_package_prove_file"`
	TrafficProveFile            *string    `json:"traffic_prove_file"`
	RouteBoardPromiseFile       *string    `json:"route_board_promise_file"`
	TrafficeObjectPromiseFile   *string    `json:"traffice_object_promise_file"`
	ConstructGarbageAllowFile   *string    `json:"construct_garbage_allow_file"`
	ConstructSiteEnterancePhoto *string    `json:"construct_site_enterance_photo"`
	ConstructWashCarPlacePhoto  *string    `json:"construct_wash_car_place_photo"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
	Remark                      *string    `json:"remark"`
}

// aggregate min on columns of table "ecd_file_main"
type EcdFileMainMinFields struct {
	ID                          *int64     `json:"id"`
	FileMainID                  *string    `json:"file_main_id"`
	FileID                      *string    `json:"file_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	DistrictID                  *string    `json:"district_id"`
	IsCrossDistrict             *bool      `json:"is_cross_district"`
	FirstCrossPid               *string    `json:"first_cross_pid"`
	PlanStartTime               *time.Time `json:"plan_start_time"`
	PlanEndTime                 *time.Time `json:"plan_end_time"`
	CheckTime                   *time.Time `json:"check_time"`
	CheckStatus                 *int       `json:"check_status"`
	PhoneNum                    *string    `json:"phone_num"`
	PointState                  *int       `json:"point_state"`
	EndState                    *int       `json:"end_state"`
	Title                       *string    `json:"title"`
	AddDistrictID               *string    `json:"add_district_id"`
	StartPointCheckerSign       *string    `json:"start_point_checker_sign"`
	EndPointCheckerSign         *string    `json:"end_point_checker_sign"`
	RouteCheckerSign            *string    `json:"route_checker_sign"`
	SpeedTimeCheckerSign        *string    `json:"speed_time_checker_sign"`
	ReturnSuggest               *string    `json:"return_suggest"`
	ConstructTitle              *string    `json:"construct_title"`
	ConstructID                 *string    `json:"construct_id"`
	IsMatchConstruction         *bool      `json:"is_match_construction"`
	ClientReportTime            *time.Time `json:"client_report_time"`
	ConstructProveFile          *string    `json:"construct_prove_file"`
	DoConstructProveFile        *string    `json:"do_construct_prove_file"`
	SubPackageProveFile         *string    `json:"sub_package_prove_file"`
	TrafficProveFile            *string    `json:"traffic_prove_file"`
	RouteBoardPromiseFile       *string    `json:"route_board_promise_file"`
	TrafficeObjectPromiseFile   *string    `json:"traffice_object_promise_file"`
	ConstructGarbageAllowFile   *string    `json:"construct_garbage_allow_file"`
	ConstructSiteEnterancePhoto *string    `json:"construct_site_enterance_photo"`
	ConstructWashCarPlacePhoto  *string    `json:"construct_wash_car_place_photo"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
	Remark                      *string    `json:"remark"`
}

// response of any mutation on the table "ecd_file_main"
type EcdFileMainMutationResponse struct {
	AffectedRows int                   `json:"affected_rows"`
	Returning    []*model1.EcdFileMain `json:"returning"`
}

// ordering options when selecting data from "ecd_file_main"
type EcdFileMainOrderBy struct {
	ID                          *model.OrderBy `json:"id"`
	FileMainID                  *model.OrderBy `json:"file_main_id"`
	FileID                      *model.OrderBy `json:"file_id"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	DistrictID                  *model.OrderBy `json:"district_id"`
	IsCrossDistrict             *model.OrderBy `json:"is_cross_district"`
	FirstCrossPid               *model.OrderBy `json:"first_cross_pid"`
	PlanStartTime               *model.OrderBy `json:"plan_start_time"`
	PlanEndTime                 *model.OrderBy `json:"plan_end_time"`
	CheckTime                   *model.OrderBy `json:"check_time"`
	CheckStatus                 *model.OrderBy `json:"check_status"`
	PhoneNum                    *model.OrderBy `json:"phone_num"`
	PointState                  *model.OrderBy `json:"point_state"`
	EndState                    *model.OrderBy `json:"end_state"`
	Title                       *model.OrderBy `json:"title"`
	AddDistrictID               *model.OrderBy `json:"add_district_id"`
	StartPointCheckerSign       *model.OrderBy `json:"start_point_checker_sign"`
	EndPointCheckerSign         *model.OrderBy `json:"end_point_checker_sign"`
	RouteCheckerSign            *model.OrderBy `json:"route_checker_sign"`
	SpeedTimeCheckerSign        *model.OrderBy `json:"speed_time_checker_sign"`
	ReturnSuggest               *model.OrderBy `json:"return_suggest"`
	ConstructTitle              *model.OrderBy `json:"construct_title"`
	ConstructID                 *model.OrderBy `json:"construct_id"`
	IsMatchConstruction         *model.OrderBy `json:"is_match_construction"`
	ClientReportTime            *model.OrderBy `json:"client_report_time"`
	ConstructProveFile          *model.OrderBy `json:"construct_prove_file"`
	DoConstructProveFile        *model.OrderBy `json:"do_construct_prove_file"`
	SubPackageProveFile         *model.OrderBy `json:"sub_package_prove_file"`
	TrafficProveFile            *model.OrderBy `json:"traffic_prove_file"`
	RouteBoardPromiseFile       *model.OrderBy `json:"route_board_promise_file"`
	TrafficeObjectPromiseFile   *model.OrderBy `json:"traffice_object_promise_file"`
	ConstructGarbageAllowFile   *model.OrderBy `json:"construct_garbage_allow_file"`
	ConstructSiteEnterancePhoto *model.OrderBy `json:"construct_site_enterance_photo"`
	ConstructWashCarPlacePhoto  *model.OrderBy `json:"construct_wash_car_place_photo"`
	CreatedAt                   *model.OrderBy `json:"created_at"`
	CreatedBy                   *model.OrderBy `json:"created_by"`
	UpdatedAt                   *model.OrderBy `json:"updated_at"`
	UpdatedBy                   *model.OrderBy `json:"updated_by"`
	DeletedAt                   *model.OrderBy `json:"deleted_at"`
	DeletedBy                   *model.OrderBy `json:"deleted_by"`
	IsDeleted                   *model.OrderBy `json:"is_deleted"`
	Remark                      *model.OrderBy `json:"remark"`
}

// input type for updating data in table "ecd_file_main"
type EcdFileMainSetInput struct {
	ID                          *int64     `json:"id"`
	FileMainID                  *string    `json:"file_main_id"`
	FileID                      *string    `json:"file_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	DistrictID                  *string    `json:"district_id"`
	IsCrossDistrict             *bool      `json:"is_cross_district"`
	FirstCrossPid               *string    `json:"first_cross_pid"`
	PlanStartTime               *time.Time `json:"plan_start_time"`
	PlanEndTime                 *time.Time `json:"plan_end_time"`
	CheckTime                   *time.Time `json:"check_time"`
	CheckStatus                 *int       `json:"check_status"`
	PhoneNum                    *string    `json:"phone_num"`
	PointState                  *int       `json:"point_state"`
	EndState                    *int       `json:"end_state"`
	Title                       *string    `json:"title"`
	AddDistrictID               *string    `json:"add_district_id"`
	StartPointCheckerSign       *string    `json:"start_point_checker_sign"`
	EndPointCheckerSign         *string    `json:"end_point_checker_sign"`
	RouteCheckerSign            *string    `json:"route_checker_sign"`
	SpeedTimeCheckerSign        *string    `json:"speed_time_checker_sign"`
	ReturnSuggest               *string    `json:"return_suggest"`
	ConstructTitle              *string    `json:"construct_title"`
	ConstructID                 *string    `json:"construct_id"`
	IsMatchConstruction         *bool      `json:"is_match_construction"`
	ClientReportTime            *time.Time `json:"client_report_time"`
	ConstructProveFile          *string    `json:"construct_prove_file"`
	DoConstructProveFile        *string    `json:"do_construct_prove_file"`
	SubPackageProveFile         *string    `json:"sub_package_prove_file"`
	TrafficProveFile            *string    `json:"traffic_prove_file"`
	RouteBoardPromiseFile       *string    `json:"route_board_promise_file"`
	TrafficeObjectPromiseFile   *string    `json:"traffice_object_promise_file"`
	ConstructGarbageAllowFile   *string    `json:"construct_garbage_allow_file"`
	ConstructSiteEnterancePhoto *string    `json:"construct_site_enterance_photo"`
	ConstructWashCarPlacePhoto  *string    `json:"construct_wash_car_place_photo"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
	Remark                      *string    `json:"remark"`
}

// aggregate stddev on columns of table "ecd_file_main"
type EcdFileMainStddevFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// aggregate stddev_pop on columns of table "ecd_file_main"
type EcdFileMainStddevPopFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// aggregate stddev_samp on columns of table "ecd_file_main"
type EcdFileMainStddevSampFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// aggregated selection of "ecd_file_main_sub"
type EcdFileMainSubAggregate struct {
	Aggregate *EcdFileMainSubAggregateFields `json:"aggregate"`
}

// aggregate fields of "ecd_file_main_sub"
type EcdFileMainSubAggregateFields struct {
	Avg        *EcdFileMainSubAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *EcdFileMainSubMaxFields        `json:"max"`
	Min        *EcdFileMainSubMinFields        `json:"min"`
	Stddev     *EcdFileMainSubStddevFields     `json:"stddev"`
	StddevPop  *EcdFileMainSubStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EcdFileMainSubStddevSampFields `json:"stddev_samp"`
	Sum        *EcdFileMainSubSumFields        `json:"sum"`
	VarPop     *EcdFileMainSubVarPopFields     `json:"var_pop"`
	VarSamp    *EcdFileMainSubVarSampFields    `json:"var_samp"`
	Variance   *EcdFileMainSubVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ecd_file_main_sub"
type EcdFileMainSubAvgFields struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_main_sub'.
type EcdFileMainSubBoolExp struct {
	And                   []*EcdFileMainSubBoolExp        `json:"_and"`
	Not                   *EcdFileMainSubBoolExp          `json:"_not"`
	Or                    []*EcdFileMainSubBoolExp        `json:"_or"`
	ID                    *model.BigintComparisonExp      `json:"id"`
	FileMainSubID         *model.StringComparisonExp      `json:"file_main_sub_id"`
	FileMainID            *model.StringComparisonExp      `json:"file_main_id"`
	Address               *model.StringComparisonExp      `json:"address"`
	ConstructUnit         *model.StringComparisonExp      `json:"construct_unit"`
	ConstructDirectorName *model.StringComparisonExp      `json:"construct_director_name"`
	ConstructPhone        *model.StringComparisonExp      `json:"construct_phone"`
	ContractUnit          *model.StringComparisonExp      `json:"contract_unit"`
	ContractDirectorName  *model.StringComparisonExp      `json:"contract_director_name"`
	ContractPhone         *model.StringComparisonExp      `json:"contract_phone"`
	TrafficUnit           *model.StringComparisonExp      `json:"traffic_unit"`
	TrafficDirectorName   *model.StringComparisonExp      `json:"traffic_director_name"`
	TrafficPhone          *model.StringComparisonExp      `json:"traffic_phone"`
	WlType                *model.IntComparisonExp         `json:"wl_type"`
	PlanDealArea          *model.StringComparisonExp      `json:"plan_deal_area"`
	PlanTransVolume       *model.StringComparisonExp      `json:"plan_trans_volume"`
	PlanStartTime         *model.StringComparisonExp      `json:"plan_start_time"`
	PlanEndTime           *model.StringComparisonExp      `json:"plan_end_time"`
	PlanTransLines        *model.StringComparisonExp      `json:"plan_trans_lines"`
	ConstructProveNum     *model.StringComparisonExp      `json:"construct_prove_num"`
	ContractProveNum      *model.StringComparisonExp      `json:"contract_prove_num"`
	TrafficProveNum       *model.StringComparisonExp      `json:"traffic_prove_num"`
	SubPackageUnit        *model.StringComparisonExp      `json:"sub_package_unit"`
	PackageProveNum       *model.StringComparisonExp      `json:"package_prove_num"`
	PackageDirectorName   *model.StringComparisonExp      `json:"package_director_name"`
	PackagePhone          *model.StringComparisonExp      `json:"package_phone"`
	Facts                 *model.StringComparisonExp      `json:"facts"`
	CreatedAt             *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy             *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt             *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy             *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt             *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy             *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted             *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "ecd_file_main_sub"
type EcdFileMainSubIncInput struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// input type for inserting data into table "ecd_file_main_sub"
type EcdFileMainSubInsertInput struct {
	FileMainSubID         string     `json:"file_main_sub_id"`
	FileMainID            *string    `json:"file_main_id"`
	Address               *string    `json:"address"`
	ConstructUnit         *string    `json:"construct_unit"`
	ConstructDirectorName *string    `json:"construct_director_name"`
	ConstructPhone        *string    `json:"construct_phone"`
	ContractUnit          *string    `json:"contract_unit"`
	ContractDirectorName  *string    `json:"contract_director_name"`
	ContractPhone         *string    `json:"contract_phone"`
	TrafficUnit           *string    `json:"traffic_unit"`
	TrafficDirectorName   *string    `json:"traffic_director_name"`
	TrafficPhone          *string    `json:"traffic_phone"`
	WlType                *int       `json:"wl_type"`
	PlanDealArea          *string    `json:"plan_deal_area"`
	PlanTransVolume       *string    `json:"plan_trans_volume"`
	PlanStartTime         *string    `json:"plan_start_time"`
	PlanEndTime           *string    `json:"plan_end_time"`
	PlanTransLines        *string    `json:"plan_trans_lines"`
	ConstructProveNum     *string    `json:"construct_prove_num"`
	ContractProveNum      *string    `json:"contract_prove_num"`
	TrafficProveNum       *string    `json:"traffic_prove_num"`
	SubPackageUnit        *string    `json:"sub_package_unit"`
	PackageProveNum       *string    `json:"package_prove_num"`
	PackageDirectorName   *string    `json:"package_director_name"`
	PackagePhone          *string    `json:"package_phone"`
	Facts                 *string    `json:"facts"`
	CreatedAt             time.Time  `json:"created_at"`
	CreatedBy             *string    `json:"created_by"`
	UpdatedAt             *time.Time `json:"updated_at"`
	UpdatedBy             *string    `json:"updated_by"`
	DeletedAt             *time.Time `json:"deleted_at"`
	DeletedBy             *string    `json:"deleted_by"`
	IsDeleted             bool       `json:"is_deleted"`
}

// aggregate max on columns of table "ecd_file_main_sub"
type EcdFileMainSubMaxFields struct {
	ID                    *int64     `json:"id"`
	FileMainSubID         *string    `json:"file_main_sub_id"`
	FileMainID            *string    `json:"file_main_id"`
	Address               *string    `json:"address"`
	ConstructUnit         *string    `json:"construct_unit"`
	ConstructDirectorName *string    `json:"construct_director_name"`
	ConstructPhone        *string    `json:"construct_phone"`
	ContractUnit          *string    `json:"contract_unit"`
	ContractDirectorName  *string    `json:"contract_director_name"`
	ContractPhone         *string    `json:"contract_phone"`
	TrafficUnit           *string    `json:"traffic_unit"`
	TrafficDirectorName   *string    `json:"traffic_director_name"`
	TrafficPhone          *string    `json:"traffic_phone"`
	WlType                *int       `json:"wl_type"`
	PlanDealArea          *string    `json:"plan_deal_area"`
	PlanTransVolume       *string    `json:"plan_trans_volume"`
	PlanStartTime         *string    `json:"plan_start_time"`
	PlanEndTime           *string    `json:"plan_end_time"`
	PlanTransLines        *string    `json:"plan_trans_lines"`
	ConstructProveNum     *string    `json:"construct_prove_num"`
	ContractProveNum      *string    `json:"contract_prove_num"`
	TrafficProveNum       *string    `json:"traffic_prove_num"`
	SubPackageUnit        *string    `json:"sub_package_unit"`
	PackageProveNum       *string    `json:"package_prove_num"`
	PackageDirectorName   *string    `json:"package_director_name"`
	PackagePhone          *string    `json:"package_phone"`
	Facts                 *string    `json:"facts"`
	CreatedAt             *time.Time `json:"created_at"`
	CreatedBy             *string    `json:"created_by"`
	UpdatedAt             *time.Time `json:"updated_at"`
	UpdatedBy             *string    `json:"updated_by"`
	DeletedAt             *time.Time `json:"deleted_at"`
	DeletedBy             *string    `json:"deleted_by"`
	IsDeleted             *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "ecd_file_main_sub"
type EcdFileMainSubMinFields struct {
	ID                    *int64     `json:"id"`
	FileMainSubID         *string    `json:"file_main_sub_id"`
	FileMainID            *string    `json:"file_main_id"`
	Address               *string    `json:"address"`
	ConstructUnit         *string    `json:"construct_unit"`
	ConstructDirectorName *string    `json:"construct_director_name"`
	ConstructPhone        *string    `json:"construct_phone"`
	ContractUnit          *string    `json:"contract_unit"`
	ContractDirectorName  *string    `json:"contract_director_name"`
	ContractPhone         *string    `json:"contract_phone"`
	TrafficUnit           *string    `json:"traffic_unit"`
	TrafficDirectorName   *string    `json:"traffic_director_name"`
	TrafficPhone          *string    `json:"traffic_phone"`
	WlType                *int       `json:"wl_type"`
	PlanDealArea          *string    `json:"plan_deal_area"`
	PlanTransVolume       *string    `json:"plan_trans_volume"`
	PlanStartTime         *string    `json:"plan_start_time"`
	PlanEndTime           *string    `json:"plan_end_time"`
	PlanTransLines        *string    `json:"plan_trans_lines"`
	ConstructProveNum     *string    `json:"construct_prove_num"`
	ContractProveNum      *string    `json:"contract_prove_num"`
	TrafficProveNum       *string    `json:"traffic_prove_num"`
	SubPackageUnit        *string    `json:"sub_package_unit"`
	PackageProveNum       *string    `json:"package_prove_num"`
	PackageDirectorName   *string    `json:"package_director_name"`
	PackagePhone          *string    `json:"package_phone"`
	Facts                 *string    `json:"facts"`
	CreatedAt             *time.Time `json:"created_at"`
	CreatedBy             *string    `json:"created_by"`
	UpdatedAt             *time.Time `json:"updated_at"`
	UpdatedBy             *string    `json:"updated_by"`
	DeletedAt             *time.Time `json:"deleted_at"`
	DeletedBy             *string    `json:"deleted_by"`
	IsDeleted             *bool      `json:"is_deleted"`
}

// response of any mutation on the table "ecd_file_main_sub"
type EcdFileMainSubMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.EcdFileMainSub `json:"returning"`
}

// ordering options when selecting data from "ecd_file_main_sub"
type EcdFileMainSubOrderBy struct {
	ID                    *model.OrderBy `json:"id"`
	FileMainSubID         *model.OrderBy `json:"file_main_sub_id"`
	FileMainID            *model.OrderBy `json:"file_main_id"`
	Address               *model.OrderBy `json:"address"`
	ConstructUnit         *model.OrderBy `json:"construct_unit"`
	ConstructDirectorName *model.OrderBy `json:"construct_director_name"`
	ConstructPhone        *model.OrderBy `json:"construct_phone"`
	ContractUnit          *model.OrderBy `json:"contract_unit"`
	ContractDirectorName  *model.OrderBy `json:"contract_director_name"`
	ContractPhone         *model.OrderBy `json:"contract_phone"`
	TrafficUnit           *model.OrderBy `json:"traffic_unit"`
	TrafficDirectorName   *model.OrderBy `json:"traffic_director_name"`
	TrafficPhone          *model.OrderBy `json:"traffic_phone"`
	WlType                *model.OrderBy `json:"wl_type"`
	PlanDealArea          *model.OrderBy `json:"plan_deal_area"`
	PlanTransVolume       *model.OrderBy `json:"plan_trans_volume"`
	PlanStartTime         *model.OrderBy `json:"plan_start_time"`
	PlanEndTime           *model.OrderBy `json:"plan_end_time"`
	PlanTransLines        *model.OrderBy `json:"plan_trans_lines"`
	ConstructProveNum     *model.OrderBy `json:"construct_prove_num"`
	ContractProveNum      *model.OrderBy `json:"contract_prove_num"`
	TrafficProveNum       *model.OrderBy `json:"traffic_prove_num"`
	SubPackageUnit        *model.OrderBy `json:"sub_package_unit"`
	PackageProveNum       *model.OrderBy `json:"package_prove_num"`
	PackageDirectorName   *model.OrderBy `json:"package_director_name"`
	PackagePhone          *model.OrderBy `json:"package_phone"`
	Facts                 *model.OrderBy `json:"facts"`
	CreatedAt             *model.OrderBy `json:"created_at"`
	CreatedBy             *model.OrderBy `json:"created_by"`
	UpdatedAt             *model.OrderBy `json:"updated_at"`
	UpdatedBy             *model.OrderBy `json:"updated_by"`
	DeletedAt             *model.OrderBy `json:"deleted_at"`
	DeletedBy             *model.OrderBy `json:"deleted_by"`
	IsDeleted             *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "ecd_file_main_sub"
type EcdFileMainSubSetInput struct {
	ID                    *int64     `json:"id"`
	FileMainSubID         *string    `json:"file_main_sub_id"`
	FileMainID            *string    `json:"file_main_id"`
	Address               *string    `json:"address"`
	ConstructUnit         *string    `json:"construct_unit"`
	ConstructDirectorName *string    `json:"construct_director_name"`
	ConstructPhone        *string    `json:"construct_phone"`
	ContractUnit          *string    `json:"contract_unit"`
	ContractDirectorName  *string    `json:"contract_director_name"`
	ContractPhone         *string    `json:"contract_phone"`
	TrafficUnit           *string    `json:"traffic_unit"`
	TrafficDirectorName   *string    `json:"traffic_director_name"`
	TrafficPhone          *string    `json:"traffic_phone"`
	WlType                *int       `json:"wl_type"`
	PlanDealArea          *string    `json:"plan_deal_area"`
	PlanTransVolume       *string    `json:"plan_trans_volume"`
	PlanStartTime         *string    `json:"plan_start_time"`
	PlanEndTime           *string    `json:"plan_end_time"`
	PlanTransLines        *string    `json:"plan_trans_lines"`
	ConstructProveNum     *string    `json:"construct_prove_num"`
	ContractProveNum      *string    `json:"contract_prove_num"`
	TrafficProveNum       *string    `json:"traffic_prove_num"`
	SubPackageUnit        *string    `json:"sub_package_unit"`
	PackageProveNum       *string    `json:"package_prove_num"`
	PackageDirectorName   *string    `json:"package_director_name"`
	PackagePhone          *string    `json:"package_phone"`
	Facts                 *string    `json:"facts"`
	CreatedAt             *time.Time `json:"created_at"`
	CreatedBy             *string    `json:"created_by"`
	UpdatedAt             *time.Time `json:"updated_at"`
	UpdatedBy             *string    `json:"updated_by"`
	DeletedAt             *time.Time `json:"deleted_at"`
	DeletedBy             *string    `json:"deleted_by"`
	IsDeleted             *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "ecd_file_main_sub"
type EcdFileMainSubStddevFields struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// aggregate stddev_pop on columns of table "ecd_file_main_sub"
type EcdFileMainSubStddevPopFields struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// aggregate stddev_samp on columns of table "ecd_file_main_sub"
type EcdFileMainSubStddevSampFields struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// aggregate sum on columns of table "ecd_file_main_sub"
type EcdFileMainSubSumFields struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// aggregate var_pop on columns of table "ecd_file_main_sub"
type EcdFileMainSubVarPopFields struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// aggregate var_samp on columns of table "ecd_file_main_sub"
type EcdFileMainSubVarSampFields struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// aggregate variance on columns of table "ecd_file_main_sub"
type EcdFileMainSubVarianceFields struct {
	ID     *int64 `json:"id"`
	WlType *int   `json:"wl_type"`
}

// aggregate sum on columns of table "ecd_file_main"
type EcdFileMainSumFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// aggregate var_pop on columns of table "ecd_file_main"
type EcdFileMainVarPopFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// aggregate var_samp on columns of table "ecd_file_main"
type EcdFileMainVarSampFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// aggregate variance on columns of table "ecd_file_main"
type EcdFileMainVarianceFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
	PointState  *int   `json:"point_state"`
	EndState    *int   `json:"end_state"`
}

// aggregated selection of "ecd_file_vehicle"
type EcdFileVehicleAggregate struct {
	Aggregate *EcdFileVehicleAggregateFields `json:"aggregate"`
}

// aggregate fields of "ecd_file_vehicle"
type EcdFileVehicleAggregateFields struct {
	Avg        *EcdFileVehicleAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *EcdFileVehicleMaxFields        `json:"max"`
	Min        *EcdFileVehicleMinFields        `json:"min"`
	Stddev     *EcdFileVehicleStddevFields     `json:"stddev"`
	StddevPop  *EcdFileVehicleStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EcdFileVehicleStddevSampFields `json:"stddev_samp"`
	Sum        *EcdFileVehicleSumFields        `json:"sum"`
	VarPop     *EcdFileVehicleVarPopFields     `json:"var_pop"`
	VarSamp    *EcdFileVehicleVarSampFields    `json:"var_samp"`
	Variance   *EcdFileVehicleVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ecd_file_vehicle"
type EcdFileVehicleAvgFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_vehicle'.
type EcdFileVehicleBoolExp struct {
	And           []*EcdFileVehicleBoolExp        `json:"_and"`
	Not           *EcdFileVehicleBoolExp          `json:"_not"`
	Or            []*EcdFileVehicleBoolExp        `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	FileVehicleID *model.StringComparisonExp      `json:"file_vehicle_id"`
	FileMainID    *model.StringComparisonExp      `json:"file_main_id"`
	VehicleID     *model.StringComparisonExp      `json:"vehicle_id"`
	CheckStatus   *model.IntComparisonExp         `json:"check_status"`
	CreatedAt     *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy     *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt     *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy     *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt     *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy     *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted     *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "ecd_file_vehicle"
type EcdFileVehicleIncInput struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// input type for inserting data into table "ecd_file_vehicle"
type EcdFileVehicleInsertInput struct {
	FileVehicleID string     `json:"file_vehicle_id"`
	FileMainID    string     `json:"file_main_id"`
	VehicleID     *string    `json:"vehicle_id"`
	CheckStatus   *int       `json:"check_status"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     bool       `json:"is_deleted"`
}

// aggregate max on columns of table "ecd_file_vehicle"
type EcdFileVehicleMaxFields struct {
	ID            *int64     `json:"id"`
	FileVehicleID *string    `json:"file_vehicle_id"`
	FileMainID    *string    `json:"file_main_id"`
	VehicleID     *string    `json:"vehicle_id"`
	CheckStatus   *int       `json:"check_status"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "ecd_file_vehicle"
type EcdFileVehicleMinFields struct {
	ID            *int64     `json:"id"`
	FileVehicleID *string    `json:"file_vehicle_id"`
	FileMainID    *string    `json:"file_main_id"`
	VehicleID     *string    `json:"vehicle_id"`
	CheckStatus   *int       `json:"check_status"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// response of any mutation on the table "ecd_file_vehicle"
type EcdFileVehicleMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.EcdFileVehicle `json:"returning"`
}

// ordering options when selecting data from "ecd_file_vehicle"
type EcdFileVehicleOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	FileVehicleID *model.OrderBy `json:"file_vehicle_id"`
	FileMainID    *model.OrderBy `json:"file_main_id"`
	VehicleID     *model.OrderBy `json:"vehicle_id"`
	CheckStatus   *model.OrderBy `json:"check_status"`
	CreatedAt     *model.OrderBy `json:"created_at"`
	CreatedBy     *model.OrderBy `json:"created_by"`
	UpdatedAt     *model.OrderBy `json:"updated_at"`
	UpdatedBy     *model.OrderBy `json:"updated_by"`
	DeletedAt     *model.OrderBy `json:"deleted_at"`
	DeletedBy     *model.OrderBy `json:"deleted_by"`
	IsDeleted     *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "ecd_file_vehicle"
type EcdFileVehicleSetInput struct {
	ID            *int64     `json:"id"`
	FileVehicleID *string    `json:"file_vehicle_id"`
	FileMainID    *string    `json:"file_main_id"`
	VehicleID     *string    `json:"vehicle_id"`
	CheckStatus   *int       `json:"check_status"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "ecd_file_vehicle"
type EcdFileVehicleStddevFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate stddev_pop on columns of table "ecd_file_vehicle"
type EcdFileVehicleStddevPopFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate stddev_samp on columns of table "ecd_file_vehicle"
type EcdFileVehicleStddevSampFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate sum on columns of table "ecd_file_vehicle"
type EcdFileVehicleSumFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregated selection of "ecd_file_vehicle_time"
type EcdFileVehicleTimeAggregate struct {
	Aggregate *EcdFileVehicleTimeAggregateFields `json:"aggregate"`
}

// aggregate fields of "ecd_file_vehicle_time"
type EcdFileVehicleTimeAggregateFields struct {
	Avg        *EcdFileVehicleTimeAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *EcdFileVehicleTimeMaxFields        `json:"max"`
	Min        *EcdFileVehicleTimeMinFields        `json:"min"`
	Stddev     *EcdFileVehicleTimeStddevFields     `json:"stddev"`
	StddevPop  *EcdFileVehicleTimeStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EcdFileVehicleTimeStddevSampFields `json:"stddev_samp"`
	Sum        *EcdFileVehicleTimeSumFields        `json:"sum"`
	VarPop     *EcdFileVehicleTimeVarPopFields     `json:"var_pop"`
	VarSamp    *EcdFileVehicleTimeVarSampFields    `json:"var_samp"`
	Variance   *EcdFileVehicleTimeVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeAvgFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_vehicle_time'.
type EcdFileVehicleTimeBoolExp struct {
	And           []*EcdFileVehicleTimeBoolExp    `json:"_and"`
	Not           *EcdFileVehicleTimeBoolExp      `json:"_not"`
	Or            []*EcdFileVehicleTimeBoolExp    `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	VehicleTimeID *model.StringComparisonExp      `json:"vehicle_time_id"`
	FileMainID    *model.StringComparisonExp      `json:"file_main_id"`
	VechileID     *model.StringComparisonExp      `json:"vechile_id"`
	StartDate     *model.TimestamptzComparisonExp `json:"start_date"`
	EndDate       *model.TimestamptzComparisonExp `json:"end_date"`
	StartTime     *model.TimestamptzComparisonExp `json:"start_time"`
	EndTime       *model.TimestamptzComparisonExp `json:"end_time"`
	CheckStatus   *model.IntComparisonExp         `json:"check_status"`
	IsCheck       *model.BooleanComparisonExp     `json:"is_check"`
	CheckTime     *model.TimestamptzComparisonExp `json:"check_time"`
	LineID        *model.StringComparisonExp      `json:"line_id"`
	CreatedAt     *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy     *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt     *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy     *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt     *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy     *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted     *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "ecd_file_vehicle_time"
type EcdFileVehicleTimeIncInput struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// input type for inserting data into table "ecd_file_vehicle_time"
type EcdFileVehicleTimeInsertInput struct {
	VehicleTimeID string     `json:"vehicle_time_id"`
	FileMainID    string     `json:"file_main_id"`
	VechileID     string     `json:"vechile_id"`
	StartDate     *time.Time `json:"start_date"`
	EndDate       *time.Time `json:"end_date"`
	StartTime     *time.Time `json:"start_time"`
	EndTime       *time.Time `json:"end_time"`
	CheckStatus   *int       `json:"check_status"`
	IsCheck       bool       `json:"is_check"`
	CheckTime     *time.Time `json:"check_time"`
	LineID        *string    `json:"line_id"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     bool       `json:"is_deleted"`
}

// aggregate max on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeMaxFields struct {
	ID            *int64     `json:"id"`
	VehicleTimeID *string    `json:"vehicle_time_id"`
	FileMainID    *string    `json:"file_main_id"`
	VechileID     *string    `json:"vechile_id"`
	StartDate     *time.Time `json:"start_date"`
	EndDate       *time.Time `json:"end_date"`
	StartTime     *time.Time `json:"start_time"`
	EndTime       *time.Time `json:"end_time"`
	CheckStatus   *int       `json:"check_status"`
	IsCheck       *bool      `json:"is_check"`
	CheckTime     *time.Time `json:"check_time"`
	LineID        *string    `json:"line_id"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeMinFields struct {
	ID            *int64     `json:"id"`
	VehicleTimeID *string    `json:"vehicle_time_id"`
	FileMainID    *string    `json:"file_main_id"`
	VechileID     *string    `json:"vechile_id"`
	StartDate     *time.Time `json:"start_date"`
	EndDate       *time.Time `json:"end_date"`
	StartTime     *time.Time `json:"start_time"`
	EndTime       *time.Time `json:"end_time"`
	CheckStatus   *int       `json:"check_status"`
	IsCheck       *bool      `json:"is_check"`
	CheckTime     *time.Time `json:"check_time"`
	LineID        *string    `json:"line_id"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// response of any mutation on the table "ecd_file_vehicle_time"
type EcdFileVehicleTimeMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.EcdFileVehicleTime `json:"returning"`
}

// ordering options when selecting data from "ecd_file_vehicle_time"
type EcdFileVehicleTimeOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	VehicleTimeID *model.OrderBy `json:"vehicle_time_id"`
	FileMainID    *model.OrderBy `json:"file_main_id"`
	VechileID     *model.OrderBy `json:"vechile_id"`
	StartDate     *model.OrderBy `json:"start_date"`
	EndDate       *model.OrderBy `json:"end_date"`
	StartTime     *model.OrderBy `json:"start_time"`
	EndTime       *model.OrderBy `json:"end_time"`
	CheckStatus   *model.OrderBy `json:"check_status"`
	IsCheck       *model.OrderBy `json:"is_check"`
	CheckTime     *model.OrderBy `json:"check_time"`
	LineID        *model.OrderBy `json:"line_id"`
	CreatedAt     *model.OrderBy `json:"created_at"`
	CreatedBy     *model.OrderBy `json:"created_by"`
	UpdatedAt     *model.OrderBy `json:"updated_at"`
	UpdatedBy     *model.OrderBy `json:"updated_by"`
	DeletedAt     *model.OrderBy `json:"deleted_at"`
	DeletedBy     *model.OrderBy `json:"deleted_by"`
	IsDeleted     *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "ecd_file_vehicle_time"
type EcdFileVehicleTimeSetInput struct {
	ID            *int64     `json:"id"`
	VehicleTimeID *string    `json:"vehicle_time_id"`
	FileMainID    *string    `json:"file_main_id"`
	VechileID     *string    `json:"vechile_id"`
	StartDate     *time.Time `json:"start_date"`
	EndDate       *time.Time `json:"end_date"`
	StartTime     *time.Time `json:"start_time"`
	EndTime       *time.Time `json:"end_time"`
	CheckStatus   *int       `json:"check_status"`
	IsCheck       *bool      `json:"is_check"`
	CheckTime     *time.Time `json:"check_time"`
	LineID        *string    `json:"line_id"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeStddevFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate stddev_pop on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeStddevPopFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate stddev_samp on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeStddevSampFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate sum on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeSumFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate var_pop on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeVarPopFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate var_samp on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeVarSampFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate variance on columns of table "ecd_file_vehicle_time"
type EcdFileVehicleTimeVarianceFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate var_pop on columns of table "ecd_file_vehicle"
type EcdFileVehicleVarPopFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate var_samp on columns of table "ecd_file_vehicle"
type EcdFileVehicleVarSampFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregate variance on columns of table "ecd_file_vehicle"
type EcdFileVehicleVarianceFields struct {
	ID          *int64 `json:"id"`
	CheckStatus *int   `json:"check_status"`
}

// aggregated selection of "ecd_line"
type EcdLineAggregate struct {
	Aggregate *EcdLineAggregateFields `json:"aggregate"`
}

// aggregate fields of "ecd_line"
type EcdLineAggregateFields struct {
	Avg        *EcdLineAvgFields        `json:"avg"`
	Count      *int                     `json:"count"`
	Max        *EcdLineMaxFields        `json:"max"`
	Min        *EcdLineMinFields        `json:"min"`
	Stddev     *EcdLineStddevFields     `json:"stddev"`
	StddevPop  *EcdLineStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EcdLineStddevSampFields `json:"stddev_samp"`
	Sum        *EcdLineSumFields        `json:"sum"`
	VarPop     *EcdLineVarPopFields     `json:"var_pop"`
	VarSamp    *EcdLineVarSampFields    `json:"var_samp"`
	Variance   *EcdLineVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "ecd_line"
type EcdLineAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_line'.
type EcdLineBoolExp struct {
	And           []*EcdLineBoolExp               `json:"_and"`
	Not           *EcdLineBoolExp                 `json:"_not"`
	Or            []*EcdLineBoolExp               `json:"_or"`
	ID            *model.BigintComparisonExp      `json:"id"`
	LineID        *model.StringComparisonExp      `json:"line_id"`
	LineName      *model.StringComparisonExp      `json:"line_name"`
	EnterpriseID  *model.StringComparisonExp      `json:"enterprise_id"`
	LineDesc      *model.StringComparisonExp      `json:"line_desc"`
	AuditUserID   *model.StringComparisonExp      `json:"audit_user_id"`
	AuditTime     *model.TimestamptzComparisonExp `json:"audit_time"`
	IsResolveDesc *model.BooleanComparisonExp     `json:"is_resolve_desc"`
	CreatedAt     *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy     *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt     *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy     *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt     *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy     *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted     *model.BooleanComparisonExp     `json:"is_deleted"`
	GisData       *model.StringComparisonExp      `json:"gis_data"`
}

// input type for incrementing integer column in table "ecd_line"
type EcdLineIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "ecd_line"
type EcdLineInsertInput struct {
	LineID        string     `json:"line_id"`
	LineName      string     `json:"line_name"`
	EnterpriseID  *string    `json:"enterprise_id"`
	LineDesc      *string    `json:"line_desc"`
	AuditUserID   *string    `json:"audit_user_id"`
	AuditTime     *time.Time `json:"audit_time"`
	IsResolveDesc bool       `json:"is_resolve_desc"`
	CreatedAt     time.Time  `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     bool       `json:"is_deleted"`
	GisData       *string    `json:"gis_data"`
}

// aggregate max on columns of table "ecd_line"
type EcdLineMaxFields struct {
	ID            *int64     `json:"id"`
	LineID        *string    `json:"line_id"`
	LineName      *string    `json:"line_name"`
	EnterpriseID  *string    `json:"enterprise_id"`
	LineDesc      *string    `json:"line_desc"`
	AuditUserID   *string    `json:"audit_user_id"`
	AuditTime     *time.Time `json:"audit_time"`
	IsResolveDesc *bool      `json:"is_resolve_desc"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	GisData       *string    `json:"gis_data"`
}

// aggregate min on columns of table "ecd_line"
type EcdLineMinFields struct {
	ID            *int64     `json:"id"`
	LineID        *string    `json:"line_id"`
	LineName      *string    `json:"line_name"`
	EnterpriseID  *string    `json:"enterprise_id"`
	LineDesc      *string    `json:"line_desc"`
	AuditUserID   *string    `json:"audit_user_id"`
	AuditTime     *time.Time `json:"audit_time"`
	IsResolveDesc *bool      `json:"is_resolve_desc"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	GisData       *string    `json:"gis_data"`
}

// response of any mutation on the table "ecd_line"
type EcdLineMutationResponse struct {
	AffectedRows int               `json:"affected_rows"`
	Returning    []*model1.EcdLine `json:"returning"`
}

// ordering options when selecting data from "ecd_line"
type EcdLineOrderBy struct {
	ID            *model.OrderBy `json:"id"`
	LineID        *model.OrderBy `json:"line_id"`
	LineName      *model.OrderBy `json:"line_name"`
	EnterpriseID  *model.OrderBy `json:"enterprise_id"`
	LineDesc      *model.OrderBy `json:"line_desc"`
	AuditUserID   *model.OrderBy `json:"audit_user_id"`
	AuditTime     *model.OrderBy `json:"audit_time"`
	IsResolveDesc *model.OrderBy `json:"is_resolve_desc"`
	CreatedAt     *model.OrderBy `json:"created_at"`
	CreatedBy     *model.OrderBy `json:"created_by"`
	UpdatedAt     *model.OrderBy `json:"updated_at"`
	UpdatedBy     *model.OrderBy `json:"updated_by"`
	DeletedAt     *model.OrderBy `json:"deleted_at"`
	DeletedBy     *model.OrderBy `json:"deleted_by"`
	IsDeleted     *model.OrderBy `json:"is_deleted"`
	GisData       *model.OrderBy `json:"gis_data"`
}

// input type for updating data in table "ecd_line"
type EcdLineSetInput struct {
	ID            *int64     `json:"id"`
	LineID        *string    `json:"line_id"`
	LineName      *string    `json:"line_name"`
	EnterpriseID  *string    `json:"enterprise_id"`
	LineDesc      *string    `json:"line_desc"`
	AuditUserID   *string    `json:"audit_user_id"`
	AuditTime     *time.Time `json:"audit_time"`
	IsResolveDesc *bool      `json:"is_resolve_desc"`
	CreatedAt     *time.Time `json:"created_at"`
	CreatedBy     *string    `json:"created_by"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
	IsDeleted     *bool      `json:"is_deleted"`
	GisData       *string    `json:"gis_data"`
}

// aggregate stddev on columns of table "ecd_line"
type EcdLineStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "ecd_line"
type EcdLineStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "ecd_line"
type EcdLineStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "ecd_line"
type EcdLineSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "ecd_line"
type EcdLineVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "ecd_line"
type EcdLineVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "ecd_line"
type EcdLineVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "electric_fence"
type ElectricFenceAggregate struct {
	Aggregate *ElectricFenceAggregateFields `json:"aggregate"`
}

// aggregate fields of "electric_fence"
type ElectricFenceAggregateFields struct {
	Avg        *ElectricFenceAvgFields        `json:"avg"`
	Count      *int                           `json:"count"`
	Max        *ElectricFenceMaxFields        `json:"max"`
	Min        *ElectricFenceMinFields        `json:"min"`
	Stddev     *ElectricFenceStddevFields     `json:"stddev"`
	StddevPop  *ElectricFenceStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ElectricFenceStddevSampFields `json:"stddev_samp"`
	Sum        *ElectricFenceSumFields        `json:"sum"`
	VarPop     *ElectricFenceVarPopFields     `json:"var_pop"`
	VarSamp    *ElectricFenceVarSampFields    `json:"var_samp"`
	Variance   *ElectricFenceVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "electric_fence"
type ElectricFenceAvgFields struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'electric_fence'.
type ElectricFenceBoolExp struct {
	And             []*ElectricFenceBoolExp         `json:"_and"`
	Not             *ElectricFenceBoolExp           `json:"_not"`
	Or              []*ElectricFenceBoolExp         `json:"_or"`
	ID              *model.BigintComparisonExp      `json:"id"`
	ElectricFenceID *model.StringComparisonExp      `json:"electric_fence_id"`
	AreaType        *model.IntComparisonExp         `json:"area_type"`
	FenceType       *model.IntComparisonExp         `json:"fence_type"`
	FenceName       *model.StringComparisonExp      `json:"fence_name"`
	Address         *model.StringComparisonExp      `json:"address"`
	DistrictID      *model.StringComparisonExp      `json:"district_id"`
	CreatedAt       *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy       *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt       *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy       *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt       *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy       *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted       *model.BooleanComparisonExp     `json:"is_deleted"`
	GisData         *model.StringComparisonExp      `json:"gis_data"`
}

// aggregated selection of "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordAggregate struct {
	Aggregate *ElectricFenceEnteranceRecordAggregateFields `json:"aggregate"`
}

// aggregate fields of "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordAggregateFields struct {
	Avg        *ElectricFenceEnteranceRecordAvgFields        `json:"avg"`
	Count      *int                                          `json:"count"`
	Max        *ElectricFenceEnteranceRecordMaxFields        `json:"max"`
	Min        *ElectricFenceEnteranceRecordMinFields        `json:"min"`
	Stddev     *ElectricFenceEnteranceRecordStddevFields     `json:"stddev"`
	StddevPop  *ElectricFenceEnteranceRecordStddevPopFields  `json:"stddev_pop"`
	StddevSamp *ElectricFenceEnteranceRecordStddevSampFields `json:"stddev_samp"`
	Sum        *ElectricFenceEnteranceRecordSumFields        `json:"sum"`
	VarPop     *ElectricFenceEnteranceRecordVarPopFields     `json:"var_pop"`
	VarSamp    *ElectricFenceEnteranceRecordVarSampFields    `json:"var_samp"`
	Variance   *ElectricFenceEnteranceRecordVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'electric_fence_enterance_record'.
type ElectricFenceEnteranceRecordBoolExp struct {
	And             []*ElectricFenceEnteranceRecordBoolExp `json:"_and"`
	Not             *ElectricFenceEnteranceRecordBoolExp   `json:"_not"`
	Or              []*ElectricFenceEnteranceRecordBoolExp `json:"_or"`
	ID              *model.BigintComparisonExp             `json:"id"`
	RecordID        *model.StringComparisonExp             `json:"record_id"`
	VehicleID       *model.StringComparisonExp             `json:"vehicle_id"`
	ElectricFenceID *model.StringComparisonExp             `json:"electric_fence_id"`
	InTime          *model.TimestamptzComparisonExp        `json:"in_time"`
	OutTime         *model.TimestamptzComparisonExp        `json:"out_time"`
	IsOut           *model.BooleanComparisonExp            `json:"is_out"`
	Position        *model.PointComparisonExp              `json:"position"`
	IsOnline        *model.BooleanComparisonExp            `json:"is_online"`
	CreatedAt       *model.TimestamptzComparisonExp        `json:"created_at"`
	CreatedBy       *model.StringComparisonExp             `json:"created_by"`
	UpdatedAt       *model.TimestamptzComparisonExp        `json:"updated_at"`
	UpdatedBy       *model.StringComparisonExp             `json:"updated_by"`
	DeletedAt       *model.TimestamptzComparisonExp        `json:"deleted_at"`
	DeletedBy       *model.StringComparisonExp             `json:"deleted_by"`
	IsDeleted       *model.BooleanComparisonExp            `json:"is_deleted"`
}

// input type for incrementing integer column in table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordInsertInput struct {
	RecordID        string     `json:"record_id"`
	VehicleID       string     `json:"vehicle_id"`
	ElectricFenceID string     `json:"electric_fence_id"`
	InTime          *time.Time `json:"in_time"`
	OutTime         *time.Time `json:"out_time"`
	IsOut           *bool      `json:"is_out"`
	Position        *string    `json:"position"`
	IsOnline        *bool      `json:"is_online"`
	CreatedAt       time.Time  `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       bool       `json:"is_deleted"`
}

// aggregate max on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordMaxFields struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	VehicleID       *string    `json:"vehicle_id"`
	ElectricFenceID *string    `json:"electric_fence_id"`
	InTime          *time.Time `json:"in_time"`
	OutTime         *time.Time `json:"out_time"`
	IsOut           *bool      `json:"is_out"`
	Position        *string    `json:"position"`
	IsOnline        *bool      `json:"is_online"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordMinFields struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	VehicleID       *string    `json:"vehicle_id"`
	ElectricFenceID *string    `json:"electric_fence_id"`
	InTime          *time.Time `json:"in_time"`
	OutTime         *time.Time `json:"out_time"`
	IsOut           *bool      `json:"is_out"`
	Position        *string    `json:"position"`
	IsOnline        *bool      `json:"is_online"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// response of any mutation on the table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordMutationResponse struct {
	AffectedRows int                                    `json:"affected_rows"`
	Returning    []*model1.ElectricFenceEnteranceRecord `json:"returning"`
}

// ordering options when selecting data from "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	RecordID        *model.OrderBy `json:"record_id"`
	VehicleID       *model.OrderBy `json:"vehicle_id"`
	ElectricFenceID *model.OrderBy `json:"electric_fence_id"`
	InTime          *model.OrderBy `json:"in_time"`
	OutTime         *model.OrderBy `json:"out_time"`
	IsOut           *model.OrderBy `json:"is_out"`
	Position        *model.OrderBy `json:"position"`
	IsOnline        *model.OrderBy `json:"is_online"`
	CreatedAt       *model.OrderBy `json:"created_at"`
	CreatedBy       *model.OrderBy `json:"created_by"`
	UpdatedAt       *model.OrderBy `json:"updated_at"`
	UpdatedBy       *model.OrderBy `json:"updated_by"`
	DeletedAt       *model.OrderBy `json:"deleted_at"`
	DeletedBy       *model.OrderBy `json:"deleted_by"`
	IsDeleted       *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordSetInput struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	VehicleID       *string    `json:"vehicle_id"`
	ElectricFenceID *string    `json:"electric_fence_id"`
	InTime          *time.Time `json:"in_time"`
	OutTime         *time.Time `json:"out_time"`
	IsOut           *bool      `json:"is_out"`
	Position        *string    `json:"position"`
	IsOnline        *bool      `json:"is_online"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "electric_fence_enterance_record"
type ElectricFenceEnteranceRecordVarianceFields struct {
	ID *int64 `json:"id"`
}

// input type for incrementing integer column in table "electric_fence"
type ElectricFenceIncInput struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// input type for inserting data into table "electric_fence"
type ElectricFenceInsertInput struct {
	ElectricFenceID string     `json:"electric_fence_id"`
	AreaType        int        `json:"area_type"`
	FenceType       *int       `json:"fence_type"`
	FenceName       *string    `json:"fence_name"`
	Address         *string    `json:"address"`
	DistrictID      *string    `json:"district_id"`
	CreatedAt       time.Time  `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       bool       `json:"is_deleted"`
	GisData         *string    `json:"gis_data"`
}

// aggregate max on columns of table "electric_fence"
type ElectricFenceMaxFields struct {
	ID              *int64     `json:"id"`
	ElectricFenceID *string    `json:"electric_fence_id"`
	AreaType        *int       `json:"area_type"`
	FenceType       *int       `json:"fence_type"`
	FenceName       *string    `json:"fence_name"`
	Address         *string    `json:"address"`
	DistrictID      *string    `json:"district_id"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
	GisData         *string    `json:"gis_data"`
}

// aggregate min on columns of table "electric_fence"
type ElectricFenceMinFields struct {
	ID              *int64     `json:"id"`
	ElectricFenceID *string    `json:"electric_fence_id"`
	AreaType        *int       `json:"area_type"`
	FenceType       *int       `json:"fence_type"`
	FenceName       *string    `json:"fence_name"`
	Address         *string    `json:"address"`
	DistrictID      *string    `json:"district_id"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
	GisData         *string    `json:"gis_data"`
}

// response of any mutation on the table "electric_fence"
type ElectricFenceMutationResponse struct {
	AffectedRows int                     `json:"affected_rows"`
	Returning    []*model1.ElectricFence `json:"returning"`
}

// ordering options when selecting data from "electric_fence"
type ElectricFenceOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	ElectricFenceID *model.OrderBy `json:"electric_fence_id"`
	AreaType        *model.OrderBy `json:"area_type"`
	FenceType       *model.OrderBy `json:"fence_type"`
	FenceName       *model.OrderBy `json:"fence_name"`
	Address         *model.OrderBy `json:"address"`
	DistrictID      *model.OrderBy `json:"district_id"`
	CreatedAt       *model.OrderBy `json:"created_at"`
	CreatedBy       *model.OrderBy `json:"created_by"`
	UpdatedAt       *model.OrderBy `json:"updated_at"`
	UpdatedBy       *model.OrderBy `json:"updated_by"`
	DeletedAt       *model.OrderBy `json:"deleted_at"`
	DeletedBy       *model.OrderBy `json:"deleted_by"`
	IsDeleted       *model.OrderBy `json:"is_deleted"`
	GisData         *model.OrderBy `json:"gis_data"`
}

// input type for updating data in table "electric_fence"
type ElectricFenceSetInput struct {
	ID              *int64     `json:"id"`
	ElectricFenceID *string    `json:"electric_fence_id"`
	AreaType        *int       `json:"area_type"`
	FenceType       *int       `json:"fence_type"`
	FenceName       *string    `json:"fence_name"`
	Address         *string    `json:"address"`
	DistrictID      *string    `json:"district_id"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
	GisData         *string    `json:"gis_data"`
}

// aggregate stddev on columns of table "electric_fence"
type ElectricFenceStddevFields struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// aggregate stddev_pop on columns of table "electric_fence"
type ElectricFenceStddevPopFields struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// aggregate stddev_samp on columns of table "electric_fence"
type ElectricFenceStddevSampFields struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// aggregate sum on columns of table "electric_fence"
type ElectricFenceSumFields struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// aggregate var_pop on columns of table "electric_fence"
type ElectricFenceVarPopFields struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// aggregate var_samp on columns of table "electric_fence"
type ElectricFenceVarSampFields struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// aggregate variance on columns of table "electric_fence"
type ElectricFenceVarianceFields struct {
	ID        *int64 `json:"id"`
	AreaType  *int   `json:"area_type"`
	FenceType *int   `json:"fence_type"`
}

// aggregated selection of "limit_speed_line"
type LimitSpeedLineAggregate struct {
	Aggregate *LimitSpeedLineAggregateFields `json:"aggregate"`
}

// aggregate fields of "limit_speed_line"
type LimitSpeedLineAggregateFields struct {
	Avg        *LimitSpeedLineAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *LimitSpeedLineMaxFields        `json:"max"`
	Min        *LimitSpeedLineMinFields        `json:"min"`
	Stddev     *LimitSpeedLineStddevFields     `json:"stddev"`
	StddevPop  *LimitSpeedLineStddevPopFields  `json:"stddev_pop"`
	StddevSamp *LimitSpeedLineStddevSampFields `json:"stddev_samp"`
	Sum        *LimitSpeedLineSumFields        `json:"sum"`
	VarPop     *LimitSpeedLineVarPopFields     `json:"var_pop"`
	VarSamp    *LimitSpeedLineVarSampFields    `json:"var_samp"`
	Variance   *LimitSpeedLineVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "limit_speed_line"
type LimitSpeedLineAvgFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'limit_speed_line'.
type LimitSpeedLineBoolExp struct {
	And              []*LimitSpeedLineBoolExp        `json:"_and"`
	Not              *LimitSpeedLineBoolExp          `json:"_not"`
	Or               []*LimitSpeedLineBoolExp        `json:"_or"`
	ID               *model.BigintComparisonExp      `json:"id"`
	LimitSpeedLineID *model.StringComparisonExp      `json:"limit_speed_line_id"`
	LineName         *model.StringComparisonExp      `json:"line_name"`
	LineType         *model.IntComparisonExp         `json:"line_type"`
	DistrictID       *model.StringComparisonExp      `json:"district_id"`
	ControlLevel     *model.IntComparisonExp         `json:"control_level"`
	ApplyReason      *model.StringComparisonExp      `json:"apply_reason"`
	CheckStatus      *model.IntComparisonExp         `json:"check_status"`
	CheckTime        *model.TimestamptzComparisonExp `json:"check_time"`
	CheckUserID      *model.StringComparisonExp      `json:"check_user_id"`
	RejectReason     *model.StringComparisonExp      `json:"reject_reason"`
	CreatedAt        *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy        *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt        *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy        *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt        *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy        *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted        *model.BooleanComparisonExp     `json:"is_deleted"`
	GisData          *model.StringComparisonExp      `json:"gis_data"`
}

// input type for incrementing integer column in table "limit_speed_line"
type LimitSpeedLineIncInput struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// input type for inserting data into table "limit_speed_line"
type LimitSpeedLineInsertInput struct {
	LimitSpeedLineID string     `json:"limit_speed_line_id"`
	LineName         *string    `json:"line_name"`
	LineType         *int       `json:"line_type"`
	DistrictID       *string    `json:"district_id"`
	ControlLevel     *int       `json:"control_level"`
	ApplyReason      *string    `json:"apply_reason"`
	CheckStatus      *int       `json:"check_status"`
	CheckTime        *time.Time `json:"check_time"`
	CheckUserID      *string    `json:"check_user_id"`
	RejectReason     *string    `json:"reject_reason"`
	CreatedAt        time.Time  `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
	IsDeleted        bool       `json:"is_deleted"`
	GisData          *string    `json:"gis_data"`
}

// aggregate max on columns of table "limit_speed_line"
type LimitSpeedLineMaxFields struct {
	ID               *int64     `json:"id"`
	LimitSpeedLineID *string    `json:"limit_speed_line_id"`
	LineName         *string    `json:"line_name"`
	LineType         *int       `json:"line_type"`
	DistrictID       *string    `json:"district_id"`
	ControlLevel     *int       `json:"control_level"`
	ApplyReason      *string    `json:"apply_reason"`
	CheckStatus      *int       `json:"check_status"`
	CheckTime        *time.Time `json:"check_time"`
	CheckUserID      *string    `json:"check_user_id"`
	RejectReason     *string    `json:"reject_reason"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
	IsDeleted        *bool      `json:"is_deleted"`
	GisData          *string    `json:"gis_data"`
}

// aggregate min on columns of table "limit_speed_line"
type LimitSpeedLineMinFields struct {
	ID               *int64     `json:"id"`
	LimitSpeedLineID *string    `json:"limit_speed_line_id"`
	LineName         *string    `json:"line_name"`
	LineType         *int       `json:"line_type"`
	DistrictID       *string    `json:"district_id"`
	ControlLevel     *int       `json:"control_level"`
	ApplyReason      *string    `json:"apply_reason"`
	CheckStatus      *int       `json:"check_status"`
	CheckTime        *time.Time `json:"check_time"`
	CheckUserID      *string    `json:"check_user_id"`
	RejectReason     *string    `json:"reject_reason"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
	IsDeleted        *bool      `json:"is_deleted"`
	GisData          *string    `json:"gis_data"`
}

// response of any mutation on the table "limit_speed_line"
type LimitSpeedLineMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.LimitSpeedLine `json:"returning"`
}

// ordering options when selecting data from "limit_speed_line"
type LimitSpeedLineOrderBy struct {
	ID               *model.OrderBy `json:"id"`
	LimitSpeedLineID *model.OrderBy `json:"limit_speed_line_id"`
	LineName         *model.OrderBy `json:"line_name"`
	LineType         *model.OrderBy `json:"line_type"`
	DistrictID       *model.OrderBy `json:"district_id"`
	ControlLevel     *model.OrderBy `json:"control_level"`
	ApplyReason      *model.OrderBy `json:"apply_reason"`
	CheckStatus      *model.OrderBy `json:"check_status"`
	CheckTime        *model.OrderBy `json:"check_time"`
	CheckUserID      *model.OrderBy `json:"check_user_id"`
	RejectReason     *model.OrderBy `json:"reject_reason"`
	CreatedAt        *model.OrderBy `json:"created_at"`
	CreatedBy        *model.OrderBy `json:"created_by"`
	UpdatedAt        *model.OrderBy `json:"updated_at"`
	UpdatedBy        *model.OrderBy `json:"updated_by"`
	DeletedAt        *model.OrderBy `json:"deleted_at"`
	DeletedBy        *model.OrderBy `json:"deleted_by"`
	IsDeleted        *model.OrderBy `json:"is_deleted"`
	GisData          *model.OrderBy `json:"gis_data"`
}

// input type for updating data in table "limit_speed_line"
type LimitSpeedLineSetInput struct {
	ID               *int64     `json:"id"`
	LimitSpeedLineID *string    `json:"limit_speed_line_id"`
	LineName         *string    `json:"line_name"`
	LineType         *int       `json:"line_type"`
	DistrictID       *string    `json:"district_id"`
	ControlLevel     *int       `json:"control_level"`
	ApplyReason      *string    `json:"apply_reason"`
	CheckStatus      *int       `json:"check_status"`
	CheckTime        *time.Time `json:"check_time"`
	CheckUserID      *string    `json:"check_user_id"`
	RejectReason     *string    `json:"reject_reason"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
	IsDeleted        *bool      `json:"is_deleted"`
	GisData          *string    `json:"gis_data"`
}

// aggregate stddev on columns of table "limit_speed_line"
type LimitSpeedLineStddevFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate stddev_pop on columns of table "limit_speed_line"
type LimitSpeedLineStddevPopFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate stddev_samp on columns of table "limit_speed_line"
type LimitSpeedLineStddevSampFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate sum on columns of table "limit_speed_line"
type LimitSpeedLineSumFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregated selection of "limit_speed_line_time"
type LimitSpeedLineTimeAggregate struct {
	Aggregate *LimitSpeedLineTimeAggregateFields `json:"aggregate"`
}

// aggregate fields of "limit_speed_line_time"
type LimitSpeedLineTimeAggregateFields struct {
	Avg        *LimitSpeedLineTimeAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *LimitSpeedLineTimeMaxFields        `json:"max"`
	Min        *LimitSpeedLineTimeMinFields        `json:"min"`
	Stddev     *LimitSpeedLineTimeStddevFields     `json:"stddev"`
	StddevPop  *LimitSpeedLineTimeStddevPopFields  `json:"stddev_pop"`
	StddevSamp *LimitSpeedLineTimeStddevSampFields `json:"stddev_samp"`
	Sum        *LimitSpeedLineTimeSumFields        `json:"sum"`
	VarPop     *LimitSpeedLineTimeVarPopFields     `json:"var_pop"`
	VarSamp    *LimitSpeedLineTimeVarSampFields    `json:"var_samp"`
	Variance   *LimitSpeedLineTimeVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeAvgFields struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'limit_speed_line_time'.
type LimitSpeedLineTimeBoolExp struct {
	And                  []*LimitSpeedLineTimeBoolExp    `json:"_and"`
	Not                  *LimitSpeedLineTimeBoolExp      `json:"_not"`
	Or                   []*LimitSpeedLineTimeBoolExp    `json:"_or"`
	ID                   *model.BigintComparisonExp      `json:"id"`
	LimitSpeedLineTimeID *model.StringComparisonExp      `json:"limit_speed_line_time_id"`
	LimitSpeedLineID     *model.StringComparisonExp      `json:"limit_speed_line_id"`
	StartTime            *model.TimestamptzComparisonExp `json:"start_time"`
	EndTime              *model.TimestamptzComparisonExp `json:"end_time"`
	CreatedAt            *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy            *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt            *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy            *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt            *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy            *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted            *model.BooleanComparisonExp     `json:"is_deleted"`
	Speed                *model.NumericComparisonExp     `json:"speed"`
}

// input type for incrementing integer column in table "limit_speed_line_time"
type LimitSpeedLineTimeIncInput struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// input type for inserting data into table "limit_speed_line_time"
type LimitSpeedLineTimeInsertInput struct {
	LimitSpeedLineTimeID string     `json:"limit_speed_line_time_id"`
	LimitSpeedLineID     string     `json:"limit_speed_line_id"`
	StartTime            time.Time  `json:"start_time"`
	EndTime              time.Time  `json:"end_time"`
	CreatedAt            time.Time  `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            bool       `json:"is_deleted"`
	Speed                float64    `json:"speed"`
}

// aggregate max on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeMaxFields struct {
	ID                   *int64     `json:"id"`
	LimitSpeedLineTimeID *string    `json:"limit_speed_line_time_id"`
	LimitSpeedLineID     *string    `json:"limit_speed_line_id"`
	StartTime            *time.Time `json:"start_time"`
	EndTime              *time.Time `json:"end_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
	Speed                *float64   `json:"speed"`
}

// aggregate min on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeMinFields struct {
	ID                   *int64     `json:"id"`
	LimitSpeedLineTimeID *string    `json:"limit_speed_line_time_id"`
	LimitSpeedLineID     *string    `json:"limit_speed_line_id"`
	StartTime            *time.Time `json:"start_time"`
	EndTime              *time.Time `json:"end_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
	Speed                *float64   `json:"speed"`
}

// response of any mutation on the table "limit_speed_line_time"
type LimitSpeedLineTimeMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.LimitSpeedLineTime `json:"returning"`
}

// ordering options when selecting data from "limit_speed_line_time"
type LimitSpeedLineTimeOrderBy struct {
	ID                   *model.OrderBy `json:"id"`
	LimitSpeedLineTimeID *model.OrderBy `json:"limit_speed_line_time_id"`
	LimitSpeedLineID     *model.OrderBy `json:"limit_speed_line_id"`
	StartTime            *model.OrderBy `json:"start_time"`
	EndTime              *model.OrderBy `json:"end_time"`
	CreatedAt            *model.OrderBy `json:"created_at"`
	CreatedBy            *model.OrderBy `json:"created_by"`
	UpdatedAt            *model.OrderBy `json:"updated_at"`
	UpdatedBy            *model.OrderBy `json:"updated_by"`
	DeletedAt            *model.OrderBy `json:"deleted_at"`
	DeletedBy            *model.OrderBy `json:"deleted_by"`
	IsDeleted            *model.OrderBy `json:"is_deleted"`
	Speed                *model.OrderBy `json:"speed"`
}

// input type for updating data in table "limit_speed_line_time"
type LimitSpeedLineTimeSetInput struct {
	ID                   *int64     `json:"id"`
	LimitSpeedLineTimeID *string    `json:"limit_speed_line_time_id"`
	LimitSpeedLineID     *string    `json:"limit_speed_line_id"`
	StartTime            *time.Time `json:"start_time"`
	EndTime              *time.Time `json:"end_time"`
	CreatedAt            *time.Time `json:"created_at"`
	CreatedBy            *string    `json:"created_by"`
	UpdatedAt            *time.Time `json:"updated_at"`
	UpdatedBy            *string    `json:"updated_by"`
	DeletedAt            *time.Time `json:"deleted_at"`
	DeletedBy            *string    `json:"deleted_by"`
	IsDeleted            *bool      `json:"is_deleted"`
	Speed                *float64   `json:"speed"`
}

// aggregate stddev on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeStddevFields struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// aggregate stddev_pop on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeStddevPopFields struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// aggregate stddev_samp on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeStddevSampFields struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// aggregate sum on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeSumFields struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// aggregate var_pop on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeVarPopFields struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// aggregate var_samp on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeVarSampFields struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// aggregate variance on columns of table "limit_speed_line_time"
type LimitSpeedLineTimeVarianceFields struct {
	ID    *int64   `json:"id"`
	Speed *float64 `json:"speed"`
}

// aggregate var_pop on columns of table "limit_speed_line"
type LimitSpeedLineVarPopFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate var_samp on columns of table "limit_speed_line"
type LimitSpeedLineVarSampFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregate variance on columns of table "limit_speed_line"
type LimitSpeedLineVarianceFields struct {
	ID           *int64 `json:"id"`
	LineType     *int   `json:"line_type"`
	ControlLevel *int   `json:"control_level"`
	CheckStatus  *int   `json:"check_status"`
}

// aggregated selection of "limit_speed_plan"
type LimitSpeedPlanAggregate struct {
	Aggregate *LimitSpeedPlanAggregateFields `json:"aggregate"`
}

// aggregate fields of "limit_speed_plan"
type LimitSpeedPlanAggregateFields struct {
	Avg        *LimitSpeedPlanAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *LimitSpeedPlanMaxFields        `json:"max"`
	Min        *LimitSpeedPlanMinFields        `json:"min"`
	Stddev     *LimitSpeedPlanStddevFields     `json:"stddev"`
	StddevPop  *LimitSpeedPlanStddevPopFields  `json:"stddev_pop"`
	StddevSamp *LimitSpeedPlanStddevSampFields `json:"stddev_samp"`
	Sum        *LimitSpeedPlanSumFields        `json:"sum"`
	VarPop     *LimitSpeedPlanVarPopFields     `json:"var_pop"`
	VarSamp    *LimitSpeedPlanVarSampFields    `json:"var_samp"`
	Variance   *LimitSpeedPlanVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "limit_speed_plan"
type LimitSpeedPlanAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'limit_speed_plan'.
type LimitSpeedPlanBoolExp struct {
	And              []*LimitSpeedPlanBoolExp        `json:"_and"`
	Not              *LimitSpeedPlanBoolExp          `json:"_not"`
	Or               []*LimitSpeedPlanBoolExp        `json:"_or"`
	ID               *model.BigintComparisonExp      `json:"id"`
	LimitSpeedPlanID *model.StringComparisonExp      `json:"limit_speed_plan_id"`
	EnterpriseID     *model.StringComparisonExp      `json:"enterprise_id"`
	PlanName         *model.StringComparisonExp      `json:"plan_name"`
	Remark           *model.StringComparisonExp      `json:"remark"`
	CreatedAt        *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy        *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt        *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy        *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt        *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy        *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted        *model.BooleanComparisonExp     `json:"is_deleted"`
}

// aggregated selection of "limit_speed_plan_detail"
type LimitSpeedPlanDetailAggregate struct {
	Aggregate *LimitSpeedPlanDetailAggregateFields `json:"aggregate"`
}

// aggregate fields of "limit_speed_plan_detail"
type LimitSpeedPlanDetailAggregateFields struct {
	Avg        *LimitSpeedPlanDetailAvgFields        `json:"avg"`
	Count      *int                                  `json:"count"`
	Max        *LimitSpeedPlanDetailMaxFields        `json:"max"`
	Min        *LimitSpeedPlanDetailMinFields        `json:"min"`
	Stddev     *LimitSpeedPlanDetailStddevFields     `json:"stddev"`
	StddevPop  *LimitSpeedPlanDetailStddevPopFields  `json:"stddev_pop"`
	StddevSamp *LimitSpeedPlanDetailStddevSampFields `json:"stddev_samp"`
	Sum        *LimitSpeedPlanDetailSumFields        `json:"sum"`
	VarPop     *LimitSpeedPlanDetailVarPopFields     `json:"var_pop"`
	VarSamp    *LimitSpeedPlanDetailVarSampFields    `json:"var_samp"`
	Variance   *LimitSpeedPlanDetailVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailAvgFields struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'limit_speed_plan_detail'.
type LimitSpeedPlanDetailBoolExp struct {
	And             []*LimitSpeedPlanDetailBoolExp  `json:"_and"`
	Not             *LimitSpeedPlanDetailBoolExp    `json:"_not"`
	Or              []*LimitSpeedPlanDetailBoolExp  `json:"_or"`
	ID              *model.BigintComparisonExp      `json:"id"`
	DetailID        *model.StringComparisonExp      `json:"detail_id"`
	PlanID          *model.StringComparisonExp      `json:"plan_id"`
	IsNightLimit    *model.BooleanComparisonExp     `json:"is_night_limit"`
	NightLimitSpeed *model.NumericComparisonExp     `json:"night_limit_speed"`
	NightTimeBegin  *model.TimestamptzComparisonExp `json:"night_time_begin"`
	NightTimeEnd    *model.TimestamptzComparisonExp `json:"night_time_end"`
	RoadLevel       *model.IntComparisonExp         `json:"road_level"`
	LimitSpeed      *model.NumericComparisonExp     `json:"limit_speed"`
	CreatedAt       *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy       *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt       *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy       *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt       *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy       *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted       *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "limit_speed_plan_detail"
type LimitSpeedPlanDetailIncInput struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// input type for inserting data into table "limit_speed_plan_detail"
type LimitSpeedPlanDetailInsertInput struct {
	DetailID        string     `json:"detail_id"`
	PlanID          string     `json:"plan_id"`
	IsNightLimit    bool       `json:"is_night_limit"`
	NightLimitSpeed *float64   `json:"night_limit_speed"`
	NightTimeBegin  *time.Time `json:"night_time_begin"`
	NightTimeEnd    *time.Time `json:"night_time_end"`
	RoadLevel       *int       `json:"road_level"`
	LimitSpeed      *float64   `json:"limit_speed"`
	CreatedAt       time.Time  `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       bool       `json:"is_deleted"`
}

// aggregate max on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailMaxFields struct {
	ID              *int64     `json:"id"`
	DetailID        *string    `json:"detail_id"`
	PlanID          *string    `json:"plan_id"`
	IsNightLimit    *bool      `json:"is_night_limit"`
	NightLimitSpeed *float64   `json:"night_limit_speed"`
	NightTimeBegin  *time.Time `json:"night_time_begin"`
	NightTimeEnd    *time.Time `json:"night_time_end"`
	RoadLevel       *int       `json:"road_level"`
	LimitSpeed      *float64   `json:"limit_speed"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailMinFields struct {
	ID              *int64     `json:"id"`
	DetailID        *string    `json:"detail_id"`
	PlanID          *string    `json:"plan_id"`
	IsNightLimit    *bool      `json:"is_night_limit"`
	NightLimitSpeed *float64   `json:"night_limit_speed"`
	NightTimeBegin  *time.Time `json:"night_time_begin"`
	NightTimeEnd    *time.Time `json:"night_time_end"`
	RoadLevel       *int       `json:"road_level"`
	LimitSpeed      *float64   `json:"limit_speed"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// response of any mutation on the table "limit_speed_plan_detail"
type LimitSpeedPlanDetailMutationResponse struct {
	AffectedRows int                            `json:"affected_rows"`
	Returning    []*model1.LimitSpeedPlanDetail `json:"returning"`
}

// ordering options when selecting data from "limit_speed_plan_detail"
type LimitSpeedPlanDetailOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	DetailID        *model.OrderBy `json:"detail_id"`
	PlanID          *model.OrderBy `json:"plan_id"`
	IsNightLimit    *model.OrderBy `json:"is_night_limit"`
	NightLimitSpeed *model.OrderBy `json:"night_limit_speed"`
	NightTimeBegin  *model.OrderBy `json:"night_time_begin"`
	NightTimeEnd    *model.OrderBy `json:"night_time_end"`
	RoadLevel       *model.OrderBy `json:"road_level"`
	LimitSpeed      *model.OrderBy `json:"limit_speed"`
	CreatedAt       *model.OrderBy `json:"created_at"`
	CreatedBy       *model.OrderBy `json:"created_by"`
	UpdatedAt       *model.OrderBy `json:"updated_at"`
	UpdatedBy       *model.OrderBy `json:"updated_by"`
	DeletedAt       *model.OrderBy `json:"deleted_at"`
	DeletedBy       *model.OrderBy `json:"deleted_by"`
	IsDeleted       *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "limit_speed_plan_detail"
type LimitSpeedPlanDetailSetInput struct {
	ID              *int64     `json:"id"`
	DetailID        *string    `json:"detail_id"`
	PlanID          *string    `json:"plan_id"`
	IsNightLimit    *bool      `json:"is_night_limit"`
	NightLimitSpeed *float64   `json:"night_limit_speed"`
	NightTimeBegin  *time.Time `json:"night_time_begin"`
	NightTimeEnd    *time.Time `json:"night_time_end"`
	RoadLevel       *int       `json:"road_level"`
	LimitSpeed      *float64   `json:"limit_speed"`
	CreatedAt       *time.Time `json:"created_at"`
	CreatedBy       *string    `json:"created_by"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UpdatedBy       *string    `json:"updated_by"`
	DeletedAt       *time.Time `json:"deleted_at"`
	DeletedBy       *string    `json:"deleted_by"`
	IsDeleted       *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailStddevFields struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// aggregate stddev_pop on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailStddevPopFields struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// aggregate stddev_samp on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailStddevSampFields struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// aggregate sum on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailSumFields struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// aggregate var_pop on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailVarPopFields struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// aggregate var_samp on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailVarSampFields struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// aggregate variance on columns of table "limit_speed_plan_detail"
type LimitSpeedPlanDetailVarianceFields struct {
	ID              *int64   `json:"id"`
	NightLimitSpeed *float64 `json:"night_limit_speed"`
	RoadLevel       *int     `json:"road_level"`
	LimitSpeed      *float64 `json:"limit_speed"`
}

// input type for incrementing integer column in table "limit_speed_plan"
type LimitSpeedPlanIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "limit_speed_plan"
type LimitSpeedPlanInsertInput struct {
	LimitSpeedPlanID string     `json:"limit_speed_plan_id"`
	EnterpriseID     string     `json:"enterprise_id"`
	PlanName         string     `json:"plan_name"`
	Remark           *string    `json:"remark"`
	CreatedAt        time.Time  `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
	IsDeleted        bool       `json:"is_deleted"`
}

// aggregate max on columns of table "limit_speed_plan"
type LimitSpeedPlanMaxFields struct {
	ID               *int64     `json:"id"`
	LimitSpeedPlanID *string    `json:"limit_speed_plan_id"`
	EnterpriseID     *string    `json:"enterprise_id"`
	PlanName         *string    `json:"plan_name"`
	Remark           *string    `json:"remark"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
	IsDeleted        *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "limit_speed_plan"
type LimitSpeedPlanMinFields struct {
	ID               *int64     `json:"id"`
	LimitSpeedPlanID *string    `json:"limit_speed_plan_id"`
	EnterpriseID     *string    `json:"enterprise_id"`
	PlanName         *string    `json:"plan_name"`
	Remark           *string    `json:"remark"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
	IsDeleted        *bool      `json:"is_deleted"`
}

// response of any mutation on the table "limit_speed_plan"
type LimitSpeedPlanMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.LimitSpeedPlan `json:"returning"`
}

// ordering options when selecting data from "limit_speed_plan"
type LimitSpeedPlanOrderBy struct {
	ID               *model.OrderBy `json:"id"`
	LimitSpeedPlanID *model.OrderBy `json:"limit_speed_plan_id"`
	EnterpriseID     *model.OrderBy `json:"enterprise_id"`
	PlanName         *model.OrderBy `json:"plan_name"`
	Remark           *model.OrderBy `json:"remark"`
	CreatedAt        *model.OrderBy `json:"created_at"`
	CreatedBy        *model.OrderBy `json:"created_by"`
	UpdatedAt        *model.OrderBy `json:"updated_at"`
	UpdatedBy        *model.OrderBy `json:"updated_by"`
	DeletedAt        *model.OrderBy `json:"deleted_at"`
	DeletedBy        *model.OrderBy `json:"deleted_by"`
	IsDeleted        *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "limit_speed_plan"
type LimitSpeedPlanSetInput struct {
	ID               *int64     `json:"id"`
	LimitSpeedPlanID *string    `json:"limit_speed_plan_id"`
	EnterpriseID     *string    `json:"enterprise_id"`
	PlanName         *string    `json:"plan_name"`
	Remark           *string    `json:"remark"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
	IsDeleted        *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "limit_speed_plan"
type LimitSpeedPlanStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "limit_speed_plan"
type LimitSpeedPlanStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "limit_speed_plan"
type LimitSpeedPlanStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "limit_speed_plan"
type LimitSpeedPlanSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "limit_speed_plan"
type LimitSpeedPlanVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "limit_speed_plan"
type LimitSpeedPlanVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "limit_speed_plan"
type LimitSpeedPlanVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "vehicle_night_travel_record"
type VehicleNightTravelRecordAggregate struct {
	Aggregate *VehicleNightTravelRecordAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_night_travel_record"
type VehicleNightTravelRecordAggregateFields struct {
	Avg        *VehicleNightTravelRecordAvgFields        `json:"avg"`
	Count      *int                                      `json:"count"`
	Max        *VehicleNightTravelRecordMaxFields        `json:"max"`
	Min        *VehicleNightTravelRecordMinFields        `json:"min"`
	Stddev     *VehicleNightTravelRecordStddevFields     `json:"stddev"`
	StddevPop  *VehicleNightTravelRecordStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleNightTravelRecordStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleNightTravelRecordSumFields        `json:"sum"`
	VarPop     *VehicleNightTravelRecordVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleNightTravelRecordVarSampFields    `json:"var_samp"`
	Variance   *VehicleNightTravelRecordVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordAvgFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_night_travel_record'.
type VehicleNightTravelRecordBoolExp struct {
	And             []*VehicleNightTravelRecordBoolExp `json:"_and"`
	Not             *VehicleNightTravelRecordBoolExp   `json:"_not"`
	Or              []*VehicleNightTravelRecordBoolExp `json:"_or"`
	ID              *model.BigintComparisonExp         `json:"id"`
	RecordID        *model.StringComparisonExp         `json:"record_id"`
	VehicleID       *model.StringComparisonExp         `json:"vehicle_id"`
	EnterpriseID    *model.StringComparisonExp         `json:"enterprise_id"`
	Route           *model.StringComparisonExp         `json:"route"`
	SprgID          *model.StringComparisonExp         `json:"sprg_id"`
	VehicleType     *model.IntComparisonExp            `json:"vehicle_type"`
	ServiceType     *model.IntComparisonExp            `json:"service_type"`
	RecordStartTime *model.TimestamptzComparisonExp    `json:"record_start_time"`
	RecordEndTime   *model.TimestamptzComparisonExp    `json:"record_end_time"`
	Status          *model.IntComparisonExp            `json:"status"`
	Cause           *model.StringComparisonExp         `json:"cause"`
	CreateAt        *model.TimestamptzComparisonExp    `json:"create_at"`
	CreateBy        *model.StringComparisonExp         `json:"create_by"`
	UpdateAt        *model.TimestamptzComparisonExp    `json:"update_at"`
	UpdateBy        *model.StringComparisonExp         `json:"update_by"`
	DeleteAt        *model.TimestamptzComparisonExp    `json:"delete_at"`
	DeleteBy        *model.StringComparisonExp         `json:"delete_by"`
	IsDelete        *model.BooleanComparisonExp        `json:"is_delete"`
	Remark          *model.StringComparisonExp         `json:"remark"`
}

// input type for incrementing integer column in table "vehicle_night_travel_record"
type VehicleNightTravelRecordIncInput struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// input type for inserting data into table "vehicle_night_travel_record"
type VehicleNightTravelRecordInsertInput struct {
	RecordID        string     `json:"record_id"`
	VehicleID       string     `json:"vehicle_id"`
	EnterpriseID    string     `json:"enterprise_id"`
	Route           *string    `json:"route"`
	SprgID          *string    `json:"sprg_id"`
	VehicleType     *int       `json:"vehicle_type"`
	ServiceType     *int       `json:"service_type"`
	RecordStartTime *time.Time `json:"record_start_time"`
	RecordEndTime   *time.Time `json:"record_end_time"`
	Status          *int       `json:"status"`
	Cause           *string    `json:"cause"`
	CreateAt        time.Time  `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        bool       `json:"is_delete"`
	Remark          *string    `json:"remark"`
}

// aggregate max on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordMaxFields struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	VehicleID       *string    `json:"vehicle_id"`
	EnterpriseID    *string    `json:"enterprise_id"`
	Route           *string    `json:"route"`
	SprgID          *string    `json:"sprg_id"`
	VehicleType     *int       `json:"vehicle_type"`
	ServiceType     *int       `json:"service_type"`
	RecordStartTime *time.Time `json:"record_start_time"`
	RecordEndTime   *time.Time `json:"record_end_time"`
	Status          *int       `json:"status"`
	Cause           *string    `json:"cause"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
	Remark          *string    `json:"remark"`
}

// aggregate min on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordMinFields struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	VehicleID       *string    `json:"vehicle_id"`
	EnterpriseID    *string    `json:"enterprise_id"`
	Route           *string    `json:"route"`
	SprgID          *string    `json:"sprg_id"`
	VehicleType     *int       `json:"vehicle_type"`
	ServiceType     *int       `json:"service_type"`
	RecordStartTime *time.Time `json:"record_start_time"`
	RecordEndTime   *time.Time `json:"record_end_time"`
	Status          *int       `json:"status"`
	Cause           *string    `json:"cause"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
	Remark          *string    `json:"remark"`
}

// response of any mutation on the table "vehicle_night_travel_record"
type VehicleNightTravelRecordMutationResponse struct {
	AffectedRows int                                `json:"affected_rows"`
	Returning    []*model1.VehicleNightTravelRecord `json:"returning"`
}

// ordering options when selecting data from "vehicle_night_travel_record"
type VehicleNightTravelRecordOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	RecordID        *model.OrderBy `json:"record_id"`
	VehicleID       *model.OrderBy `json:"vehicle_id"`
	EnterpriseID    *model.OrderBy `json:"enterprise_id"`
	Route           *model.OrderBy `json:"route"`
	SprgID          *model.OrderBy `json:"sprg_id"`
	VehicleType     *model.OrderBy `json:"vehicle_type"`
	ServiceType     *model.OrderBy `json:"service_type"`
	RecordStartTime *model.OrderBy `json:"record_start_time"`
	RecordEndTime   *model.OrderBy `json:"record_end_time"`
	Status          *model.OrderBy `json:"status"`
	Cause           *model.OrderBy `json:"cause"`
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	IsDelete        *model.OrderBy `json:"is_delete"`
	Remark          *model.OrderBy `json:"remark"`
}

// input type for updating data in table "vehicle_night_travel_record"
type VehicleNightTravelRecordSetInput struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	VehicleID       *string    `json:"vehicle_id"`
	EnterpriseID    *string    `json:"enterprise_id"`
	Route           *string    `json:"route"`
	SprgID          *string    `json:"sprg_id"`
	VehicleType     *int       `json:"vehicle_type"`
	ServiceType     *int       `json:"service_type"`
	RecordStartTime *time.Time `json:"record_start_time"`
	RecordEndTime   *time.Time `json:"record_end_time"`
	Status          *int       `json:"status"`
	Cause           *string    `json:"cause"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
	Remark          *string    `json:"remark"`
}

// aggregate stddev on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordStddevFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// aggregate stddev_pop on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordStddevPopFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// aggregate stddev_samp on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordStddevSampFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// aggregate sum on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordSumFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// aggregate var_pop on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordVarPopFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// aggregate var_samp on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordVarSampFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// aggregate variance on columns of table "vehicle_night_travel_record"
type VehicleNightTravelRecordVarianceFields struct {
	ID          *int64 `json:"id"`
	VehicleType *int   `json:"vehicle_type"`
	ServiceType *int   `json:"service_type"`
	Status      *int   `json:"status"`
}

// aggregated selection of "vehicle_stop_travel_record"
type VehicleStopTravelRecordAggregate struct {
	Aggregate *VehicleStopTravelRecordAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_stop_travel_record"
type VehicleStopTravelRecordAggregateFields struct {
	Avg        *VehicleStopTravelRecordAvgFields        `json:"avg"`
	Count      *int                                     `json:"count"`
	Max        *VehicleStopTravelRecordMaxFields        `json:"max"`
	Min        *VehicleStopTravelRecordMinFields        `json:"min"`
	Stddev     *VehicleStopTravelRecordStddevFields     `json:"stddev"`
	StddevPop  *VehicleStopTravelRecordStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleStopTravelRecordStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleStopTravelRecordSumFields        `json:"sum"`
	VarPop     *VehicleStopTravelRecordVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleStopTravelRecordVarSampFields    `json:"var_samp"`
	Variance   *VehicleStopTravelRecordVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_stop_travel_record'.
type VehicleStopTravelRecordBoolExp struct {
	And             []*VehicleStopTravelRecordBoolExp `json:"_and"`
	Not             *VehicleStopTravelRecordBoolExp   `json:"_not"`
	Or              []*VehicleStopTravelRecordBoolExp `json:"_or"`
	ID              *model.BigintComparisonExp        `json:"id"`
	RecordID        *model.StringComparisonExp        `json:"record_id"`
	BillID          *model.StringComparisonExp        `json:"bill_id"`
	RecordStartTime *model.TimestamptzComparisonExp   `json:"record_start_time"`
	RecordEndTime   *model.TimestamptzComparisonExp   `json:"record_end_time"`
	RecordUserID    *model.StringComparisonExp        `json:"record_user_id"`
	IsEffect        *model.BooleanComparisonExp       `json:"is_effect"`
	EffectStartTime *model.TimestamptzComparisonExp   `json:"effect_start_time"`
	EffectEndTime   *model.TimestamptzComparisonExp   `json:"effect_end_time"`
	VehicleID       *model.StringComparisonExp        `json:"vehicle_id"`
	Cause           *model.StringComparisonExp        `json:"cause"`
	CreateAt        *model.TimestamptzComparisonExp   `json:"create_at"`
	CreateBy        *model.StringComparisonExp        `json:"create_by"`
	UpdateAt        *model.TimestamptzComparisonExp   `json:"update_at"`
	UpdateBy        *model.StringComparisonExp        `json:"update_by"`
	DeleteAt        *model.TimestamptzComparisonExp   `json:"delete_at"`
	DeleteBy        *model.StringComparisonExp        `json:"delete_by"`
	IsDelete        *model.BooleanComparisonExp       `json:"is_delete"`
}

// input type for incrementing integer column in table "vehicle_stop_travel_record"
type VehicleStopTravelRecordIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "vehicle_stop_travel_record"
type VehicleStopTravelRecordInsertInput struct {
	RecordID        string     `json:"record_id"`
	BillID          string     `json:"bill_id"`
	RecordStartTime *time.Time `json:"record_start_time"`
	RecordEndTime   *time.Time `json:"record_end_time"`
	RecordUserID    *string    `json:"record_user_id"`
	IsEffect        *bool      `json:"is_effect"`
	EffectStartTime *time.Time `json:"effect_start_time"`
	EffectEndTime   *time.Time `json:"effect_end_time"`
	VehicleID       *string    `json:"vehicle_id"`
	Cause           *string    `json:"cause"`
	CreateAt        time.Time  `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        bool       `json:"is_delete"`
}

// aggregate max on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordMaxFields struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	BillID          *string    `json:"bill_id"`
	RecordStartTime *time.Time `json:"record_start_time"`
	RecordEndTime   *time.Time `json:"record_end_time"`
	RecordUserID    *string    `json:"record_user_id"`
	IsEffect        *bool      `json:"is_effect"`
	EffectStartTime *time.Time `json:"effect_start_time"`
	EffectEndTime   *time.Time `json:"effect_end_time"`
	VehicleID       *string    `json:"vehicle_id"`
	Cause           *string    `json:"cause"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
}

// aggregate min on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordMinFields struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	BillID          *string    `json:"bill_id"`
	RecordStartTime *time.Time `json:"record_start_time"`
	RecordEndTime   *time.Time `json:"record_end_time"`
	RecordUserID    *string    `json:"record_user_id"`
	IsEffect        *bool      `json:"is_effect"`
	EffectStartTime *time.Time `json:"effect_start_time"`
	EffectEndTime   *time.Time `json:"effect_end_time"`
	VehicleID       *string    `json:"vehicle_id"`
	Cause           *string    `json:"cause"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
}

// response of any mutation on the table "vehicle_stop_travel_record"
type VehicleStopTravelRecordMutationResponse struct {
	AffectedRows int                               `json:"affected_rows"`
	Returning    []*model1.VehicleStopTravelRecord `json:"returning"`
}

// ordering options when selecting data from "vehicle_stop_travel_record"
type VehicleStopTravelRecordOrderBy struct {
	ID              *model.OrderBy `json:"id"`
	RecordID        *model.OrderBy `json:"record_id"`
	BillID          *model.OrderBy `json:"bill_id"`
	RecordStartTime *model.OrderBy `json:"record_start_time"`
	RecordEndTime   *model.OrderBy `json:"record_end_time"`
	RecordUserID    *model.OrderBy `json:"record_user_id"`
	IsEffect        *model.OrderBy `json:"is_effect"`
	EffectStartTime *model.OrderBy `json:"effect_start_time"`
	EffectEndTime   *model.OrderBy `json:"effect_end_time"`
	VehicleID       *model.OrderBy `json:"vehicle_id"`
	Cause           *model.OrderBy `json:"cause"`
	CreateAt        *model.OrderBy `json:"create_at"`
	CreateBy        *model.OrderBy `json:"create_by"`
	UpdateAt        *model.OrderBy `json:"update_at"`
	UpdateBy        *model.OrderBy `json:"update_by"`
	DeleteAt        *model.OrderBy `json:"delete_at"`
	DeleteBy        *model.OrderBy `json:"delete_by"`
	IsDelete        *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "vehicle_stop_travel_record"
type VehicleStopTravelRecordSetInput struct {
	ID              *int64     `json:"id"`
	RecordID        *string    `json:"record_id"`
	BillID          *string    `json:"bill_id"`
	RecordStartTime *time.Time `json:"record_start_time"`
	RecordEndTime   *time.Time `json:"record_end_time"`
	RecordUserID    *string    `json:"record_user_id"`
	IsEffect        *bool      `json:"is_effect"`
	EffectStartTime *time.Time `json:"effect_start_time"`
	EffectEndTime   *time.Time `json:"effect_end_time"`
	VehicleID       *string    `json:"vehicle_id"`
	Cause           *string    `json:"cause"`
	CreateAt        *time.Time `json:"create_at"`
	CreateBy        *string    `json:"create_by"`
	UpdateAt        *time.Time `json:"update_at"`
	UpdateBy        *string    `json:"update_by"`
	DeleteAt        *time.Time `json:"delete_at"`
	DeleteBy        *string    `json:"delete_by"`
	IsDelete        *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "vehicle_stop_travel_record"
type VehicleStopTravelRecordVarianceFields struct {
	ID *int64 `json:"id"`
}

// 可选select
type ControlLineSelectColumn string

const (
	// ID
	ControlLineSelectColumnID ControlLineSelectColumn = "id"
	// 管制路线ID
	ControlLineSelectColumnControlLineID ControlLineSelectColumn = "control_line_id"
	// 路线名称
	ControlLineSelectColumnLineName ControlLineSelectColumn = "line_name"
	// 路线类型(1路线 2区域)
	ControlLineSelectColumnLineType ControlLineSelectColumn = "line_type"
	// 区域ID
	ControlLineSelectColumnDistrictID ControlLineSelectColumn = "district_id"
	// 管控等级
	ControlLineSelectColumnControlLevel ControlLineSelectColumn = "control_level"
	// 申请原因
	ControlLineSelectColumnApplyReason ControlLineSelectColumn = "apply_reason"
	// 审核状态
	ControlLineSelectColumnCheckStatus ControlLineSelectColumn = "check_status"
	// 审核时间
	ControlLineSelectColumnCheckTime ControlLineSelectColumn = "check_time"
	// 审核人ID
	ControlLineSelectColumnCheckUserID ControlLineSelectColumn = "check_user_id"
	// 退回原因
	ControlLineSelectColumnRejectReason ControlLineSelectColumn = "reject_reason"
	// 创建时间
	ControlLineSelectColumnCreatedAt ControlLineSelectColumn = "created_at"
	// 创建人
	ControlLineSelectColumnCreatedBy ControlLineSelectColumn = "created_by"
	// 更新时间
	ControlLineSelectColumnUpdatedAt ControlLineSelectColumn = "updated_at"
	// 更新人
	ControlLineSelectColumnUpdatedBy ControlLineSelectColumn = "updated_by"
	// 删除时间
	ControlLineSelectColumnDeletedAt ControlLineSelectColumn = "deleted_at"
	// 删除人
	ControlLineSelectColumnDeletedBy ControlLineSelectColumn = "deleted_by"
	// 是否删除
	ControlLineSelectColumnIsDeleted ControlLineSelectColumn = "is_deleted"
	// 线路数据
	ControlLineSelectColumnGisData ControlLineSelectColumn = "gis_data"
)

var AllControlLineSelectColumn = []ControlLineSelectColumn{
	ControlLineSelectColumnID,
	ControlLineSelectColumnControlLineID,
	ControlLineSelectColumnLineName,
	ControlLineSelectColumnLineType,
	ControlLineSelectColumnDistrictID,
	ControlLineSelectColumnControlLevel,
	ControlLineSelectColumnApplyReason,
	ControlLineSelectColumnCheckStatus,
	ControlLineSelectColumnCheckTime,
	ControlLineSelectColumnCheckUserID,
	ControlLineSelectColumnRejectReason,
	ControlLineSelectColumnCreatedAt,
	ControlLineSelectColumnCreatedBy,
	ControlLineSelectColumnUpdatedAt,
	ControlLineSelectColumnUpdatedBy,
	ControlLineSelectColumnDeletedAt,
	ControlLineSelectColumnDeletedBy,
	ControlLineSelectColumnIsDeleted,
	ControlLineSelectColumnGisData,
}

func (e ControlLineSelectColumn) IsValid() bool {
	switch e {
	case ControlLineSelectColumnID, ControlLineSelectColumnControlLineID, ControlLineSelectColumnLineName, ControlLineSelectColumnLineType, ControlLineSelectColumnDistrictID, ControlLineSelectColumnControlLevel, ControlLineSelectColumnApplyReason, ControlLineSelectColumnCheckStatus, ControlLineSelectColumnCheckTime, ControlLineSelectColumnCheckUserID, ControlLineSelectColumnRejectReason, ControlLineSelectColumnCreatedAt, ControlLineSelectColumnCreatedBy, ControlLineSelectColumnUpdatedAt, ControlLineSelectColumnUpdatedBy, ControlLineSelectColumnDeletedAt, ControlLineSelectColumnDeletedBy, ControlLineSelectColumnIsDeleted, ControlLineSelectColumnGisData:
		return true
	}
	return false
}

func (e ControlLineSelectColumn) String() string {
	return string(e)
}

func (e *ControlLineSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ControlLineSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ControlLineSelectColumn", str)
	}
	return nil
}

func (e ControlLineSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type ControlLineTimeSelectColumn string

const (
	// ID
	ControlLineTimeSelectColumnID ControlLineTimeSelectColumn = "id"
	// 管控路线时间段表ID
	ControlLineTimeSelectColumnControlLineTimeID ControlLineTimeSelectColumn = "control_line_time_id"
	// 管控路线ID
	ControlLineTimeSelectColumnControlLineID ControlLineTimeSelectColumn = "control_line_id"
	// 开始时间
	ControlLineTimeSelectColumnStartTime ControlLineTimeSelectColumn = "start_time"
	// 结束时间
	ControlLineTimeSelectColumnEndTime ControlLineTimeSelectColumn = "end_time"
	// 创建时间
	ControlLineTimeSelectColumnCreatedAt ControlLineTimeSelectColumn = "created_at"
	// 创建人
	ControlLineTimeSelectColumnCreatedBy ControlLineTimeSelectColumn = "created_by"
	// 更新时间
	ControlLineTimeSelectColumnUpdatedAt ControlLineTimeSelectColumn = "updated_at"
	// 更新人
	ControlLineTimeSelectColumnUpdatedBy ControlLineTimeSelectColumn = "updated_by"
	// 删除时间
	ControlLineTimeSelectColumnDeletedAt ControlLineTimeSelectColumn = "deleted_at"
	// 删除人
	ControlLineTimeSelectColumnDeletedBy ControlLineTimeSelectColumn = "deleted_by"
	// 是否删除
	ControlLineTimeSelectColumnIsDeleted ControlLineTimeSelectColumn = "is_deleted"
)

var AllControlLineTimeSelectColumn = []ControlLineTimeSelectColumn{
	ControlLineTimeSelectColumnID,
	ControlLineTimeSelectColumnControlLineTimeID,
	ControlLineTimeSelectColumnControlLineID,
	ControlLineTimeSelectColumnStartTime,
	ControlLineTimeSelectColumnEndTime,
	ControlLineTimeSelectColumnCreatedAt,
	ControlLineTimeSelectColumnCreatedBy,
	ControlLineTimeSelectColumnUpdatedAt,
	ControlLineTimeSelectColumnUpdatedBy,
	ControlLineTimeSelectColumnDeletedAt,
	ControlLineTimeSelectColumnDeletedBy,
	ControlLineTimeSelectColumnIsDeleted,
}

func (e ControlLineTimeSelectColumn) IsValid() bool {
	switch e {
	case ControlLineTimeSelectColumnID, ControlLineTimeSelectColumnControlLineTimeID, ControlLineTimeSelectColumnControlLineID, ControlLineTimeSelectColumnStartTime, ControlLineTimeSelectColumnEndTime, ControlLineTimeSelectColumnCreatedAt, ControlLineTimeSelectColumnCreatedBy, ControlLineTimeSelectColumnUpdatedAt, ControlLineTimeSelectColumnUpdatedBy, ControlLineTimeSelectColumnDeletedAt, ControlLineTimeSelectColumnDeletedBy, ControlLineTimeSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e ControlLineTimeSelectColumn) String() string {
	return string(e)
}

func (e *ControlLineTimeSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ControlLineTimeSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ControlLineTimeSelectColumn", str)
	}
	return nil
}

func (e ControlLineTimeSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EcdFileCheckHisSelectColumn string

const (
	// ID
	EcdFileCheckHisSelectColumnID EcdFileCheckHisSelectColumn = "id"
	// 工程审批记录ID
	EcdFileCheckHisSelectColumnHisID EcdFileCheckHisSelectColumn = "his_id"
	// 报备主表ID
	EcdFileCheckHisSelectColumnFileMainID EcdFileCheckHisSelectColumn = "file_main_id"
	// 操作人ID
	EcdFileCheckHisSelectColumnUserID EcdFileCheckHisSelectColumn = "user_id"
	// 操作类型
	EcdFileCheckHisSelectColumnOperType EcdFileCheckHisSelectColumn = "oper_type"
	// 审批状态 0审核通过 1退回
	EcdFileCheckHisSelectColumnCheckStatus EcdFileCheckHisSelectColumn = "check_status"
	// 接收时间
	EcdFileCheckHisSelectColumnRecTime EcdFileCheckHisSelectColumn = "rec_time"
	// 操作时间
	EcdFileCheckHisSelectColumnOperTime EcdFileCheckHisSelectColumn = "oper_time"
	// 意见
	EcdFileCheckHisSelectColumnSuggest EcdFileCheckHisSelectColumn = "suggest"
	// 备注
	EcdFileCheckHisSelectColumnRemark EcdFileCheckHisSelectColumn = "remark"
	// 创建时间
	EcdFileCheckHisSelectColumnCreatedAt EcdFileCheckHisSelectColumn = "created_at"
	// 创建人
	EcdFileCheckHisSelectColumnCreatedBy EcdFileCheckHisSelectColumn = "created_by"
	// 更新时间
	EcdFileCheckHisSelectColumnUpdatedAt EcdFileCheckHisSelectColumn = "updated_at"
	// 更新人
	EcdFileCheckHisSelectColumnUpdatedBy EcdFileCheckHisSelectColumn = "updated_by"
	// 删除时间
	EcdFileCheckHisSelectColumnDeletedAt EcdFileCheckHisSelectColumn = "deleted_at"
	// 删除人
	EcdFileCheckHisSelectColumnDeletedBy EcdFileCheckHisSelectColumn = "deleted_by"
	// 是否删除
	EcdFileCheckHisSelectColumnIsDeleted EcdFileCheckHisSelectColumn = "is_deleted"
)

var AllEcdFileCheckHisSelectColumn = []EcdFileCheckHisSelectColumn{
	EcdFileCheckHisSelectColumnID,
	EcdFileCheckHisSelectColumnHisID,
	EcdFileCheckHisSelectColumnFileMainID,
	EcdFileCheckHisSelectColumnUserID,
	EcdFileCheckHisSelectColumnOperType,
	EcdFileCheckHisSelectColumnCheckStatus,
	EcdFileCheckHisSelectColumnRecTime,
	EcdFileCheckHisSelectColumnOperTime,
	EcdFileCheckHisSelectColumnSuggest,
	EcdFileCheckHisSelectColumnRemark,
	EcdFileCheckHisSelectColumnCreatedAt,
	EcdFileCheckHisSelectColumnCreatedBy,
	EcdFileCheckHisSelectColumnUpdatedAt,
	EcdFileCheckHisSelectColumnUpdatedBy,
	EcdFileCheckHisSelectColumnDeletedAt,
	EcdFileCheckHisSelectColumnDeletedBy,
	EcdFileCheckHisSelectColumnIsDeleted,
}

func (e EcdFileCheckHisSelectColumn) IsValid() bool {
	switch e {
	case EcdFileCheckHisSelectColumnID, EcdFileCheckHisSelectColumnHisID, EcdFileCheckHisSelectColumnFileMainID, EcdFileCheckHisSelectColumnUserID, EcdFileCheckHisSelectColumnOperType, EcdFileCheckHisSelectColumnCheckStatus, EcdFileCheckHisSelectColumnRecTime, EcdFileCheckHisSelectColumnOperTime, EcdFileCheckHisSelectColumnSuggest, EcdFileCheckHisSelectColumnRemark, EcdFileCheckHisSelectColumnCreatedAt, EcdFileCheckHisSelectColumnCreatedBy, EcdFileCheckHisSelectColumnUpdatedAt, EcdFileCheckHisSelectColumnUpdatedBy, EcdFileCheckHisSelectColumnDeletedAt, EcdFileCheckHisSelectColumnDeletedBy, EcdFileCheckHisSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e EcdFileCheckHisSelectColumn) String() string {
	return string(e)
}

func (e *EcdFileCheckHisSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EcdFileCheckHisSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EcdFileCheckHisSelectColumn", str)
	}
	return nil
}

func (e EcdFileCheckHisSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EcdFileDistrictSelectColumn string

const (
	// ID
	EcdFileDistrictSelectColumnID EcdFileDistrictSelectColumn = "id"
	// 工程跨区表ID
	EcdFileDistrictSelectColumnFileDistrictID EcdFileDistrictSelectColumn = "file_district_id"
	// 报备主表ID
	EcdFileDistrictSelectColumnFileMainID EcdFileDistrictSelectColumn = "file_main_id"
	// 区域ID
	EcdFileDistrictSelectColumnDistrictID EcdFileDistrictSelectColumn = "district_id"
	// 创建时间
	EcdFileDistrictSelectColumnCreatedAt EcdFileDistrictSelectColumn = "created_at"
	// 创建人
	EcdFileDistrictSelectColumnCreatedBy EcdFileDistrictSelectColumn = "created_by"
	// 更新时间
	EcdFileDistrictSelectColumnUpdatedAt EcdFileDistrictSelectColumn = "updated_at"
	// 更新人
	EcdFileDistrictSelectColumnUpdatedBy EcdFileDistrictSelectColumn = "updated_by"
	// 删除时间
	EcdFileDistrictSelectColumnDeletedAt EcdFileDistrictSelectColumn = "deleted_at"
	// 删除人
	EcdFileDistrictSelectColumnDeletedBy EcdFileDistrictSelectColumn = "deleted_by"
	// 是否删除
	EcdFileDistrictSelectColumnIsDeleted EcdFileDistrictSelectColumn = "is_deleted"
)

var AllEcdFileDistrictSelectColumn = []EcdFileDistrictSelectColumn{
	EcdFileDistrictSelectColumnID,
	EcdFileDistrictSelectColumnFileDistrictID,
	EcdFileDistrictSelectColumnFileMainID,
	EcdFileDistrictSelectColumnDistrictID,
	EcdFileDistrictSelectColumnCreatedAt,
	EcdFileDistrictSelectColumnCreatedBy,
	EcdFileDistrictSelectColumnUpdatedAt,
	EcdFileDistrictSelectColumnUpdatedBy,
	EcdFileDistrictSelectColumnDeletedAt,
	EcdFileDistrictSelectColumnDeletedBy,
	EcdFileDistrictSelectColumnIsDeleted,
}

func (e EcdFileDistrictSelectColumn) IsValid() bool {
	switch e {
	case EcdFileDistrictSelectColumnID, EcdFileDistrictSelectColumnFileDistrictID, EcdFileDistrictSelectColumnFileMainID, EcdFileDistrictSelectColumnDistrictID, EcdFileDistrictSelectColumnCreatedAt, EcdFileDistrictSelectColumnCreatedBy, EcdFileDistrictSelectColumnUpdatedAt, EcdFileDistrictSelectColumnUpdatedBy, EcdFileDistrictSelectColumnDeletedAt, EcdFileDistrictSelectColumnDeletedBy, EcdFileDistrictSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e EcdFileDistrictSelectColumn) String() string {
	return string(e)
}

func (e *EcdFileDistrictSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EcdFileDistrictSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EcdFileDistrictSelectColumn", str)
	}
	return nil
}

func (e EcdFileDistrictSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EcdFileLinePointSelectColumn string

const (
	// ID
	EcdFileLinePointSelectColumnID EcdFileLinePointSelectColumn = "id"
	// 工程报备采集位置信息点ID
	EcdFileLinePointSelectColumnLinePointID EcdFileLinePointSelectColumn = "line_point_id"
	// 报备主表ID
	EcdFileLinePointSelectColumnFileMainID EcdFileLinePointSelectColumn = "file_main_id"
	// gps位置点
	EcdFileLinePointSelectColumnGpsPoint EcdFileLinePointSelectColumn = "gps_point"
	// 地图位置点
	EcdFileLinePointSelectColumnMapPoint EcdFileLinePointSelectColumn = "map_point"
	// 信息点名称
	EcdFileLinePointSelectColumnLinePointName EcdFileLinePointSelectColumn = "line_point_name"
	// 信息点备注
	EcdFileLinePointSelectColumnLinePointRemark EcdFileLinePointSelectColumn = "line_point_remark"
	// 信息点类型 0停车点 1起点 2终点 3修车点
	EcdFileLinePointSelectColumnPointType EcdFileLinePointSelectColumn = "point_type"
	// 创建时间
	EcdFileLinePointSelectColumnCreatedAt EcdFileLinePointSelectColumn = "created_at"
	// 创建人
	EcdFileLinePointSelectColumnCreatedBy EcdFileLinePointSelectColumn = "created_by"
	// 更新时间
	EcdFileLinePointSelectColumnUpdatedAt EcdFileLinePointSelectColumn = "updated_at"
	// 更新人
	EcdFileLinePointSelectColumnUpdatedBy EcdFileLinePointSelectColumn = "updated_by"
	// 删除时间
	EcdFileLinePointSelectColumnDeletedAt EcdFileLinePointSelectColumn = "deleted_at"
	// 删除人
	EcdFileLinePointSelectColumnDeletedBy EcdFileLinePointSelectColumn = "deleted_by"
	// 是否删除
	EcdFileLinePointSelectColumnIsDeleted EcdFileLinePointSelectColumn = "is_deleted"
)

var AllEcdFileLinePointSelectColumn = []EcdFileLinePointSelectColumn{
	EcdFileLinePointSelectColumnID,
	EcdFileLinePointSelectColumnLinePointID,
	EcdFileLinePointSelectColumnFileMainID,
	EcdFileLinePointSelectColumnGpsPoint,
	EcdFileLinePointSelectColumnMapPoint,
	EcdFileLinePointSelectColumnLinePointName,
	EcdFileLinePointSelectColumnLinePointRemark,
	EcdFileLinePointSelectColumnPointType,
	EcdFileLinePointSelectColumnCreatedAt,
	EcdFileLinePointSelectColumnCreatedBy,
	EcdFileLinePointSelectColumnUpdatedAt,
	EcdFileLinePointSelectColumnUpdatedBy,
	EcdFileLinePointSelectColumnDeletedAt,
	EcdFileLinePointSelectColumnDeletedBy,
	EcdFileLinePointSelectColumnIsDeleted,
}

func (e EcdFileLinePointSelectColumn) IsValid() bool {
	switch e {
	case EcdFileLinePointSelectColumnID, EcdFileLinePointSelectColumnLinePointID, EcdFileLinePointSelectColumnFileMainID, EcdFileLinePointSelectColumnGpsPoint, EcdFileLinePointSelectColumnMapPoint, EcdFileLinePointSelectColumnLinePointName, EcdFileLinePointSelectColumnLinePointRemark, EcdFileLinePointSelectColumnPointType, EcdFileLinePointSelectColumnCreatedAt, EcdFileLinePointSelectColumnCreatedBy, EcdFileLinePointSelectColumnUpdatedAt, EcdFileLinePointSelectColumnUpdatedBy, EcdFileLinePointSelectColumnDeletedAt, EcdFileLinePointSelectColumnDeletedBy, EcdFileLinePointSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e EcdFileLinePointSelectColumn) String() string {
	return string(e)
}

func (e *EcdFileLinePointSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EcdFileLinePointSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EcdFileLinePointSelectColumn", str)
	}
	return nil
}

func (e EcdFileLinePointSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EcdFileMainSelectColumn string

const (
	// ID
	EcdFileMainSelectColumnID EcdFileMainSelectColumn = "id"
	// 工程报备主表ID
	EcdFileMainSelectColumnFileMainID EcdFileMainSelectColumn = "file_main_id"
	// 工程单号
	EcdFileMainSelectColumnFileID EcdFileMainSelectColumn = "file_id"
	// 报备企业ID
	EcdFileMainSelectColumnEnterpriseID EcdFileMainSelectColumn = "enterprise_id"
	// 区域ID
	EcdFileMainSelectColumnDistrictID EcdFileMainSelectColumn = "district_id"
	// 是否跨区
	EcdFileMainSelectColumnIsCrossDistrict EcdFileMainSelectColumn = "is_cross_district"
	// 第一个跨区ID
	EcdFileMainSelectColumnFirstCrossPid EcdFileMainSelectColumn = "first_cross_pid"
	// 计划运输起止日期(起始)
	EcdFileMainSelectColumnPlanStartTime EcdFileMainSelectColumn = "plan_start_time"
	// 计划运输起止日期(截止)
	EcdFileMainSelectColumnPlanEndTime EcdFileMainSelectColumn = "plan_end_time"
	// 审核时间
	EcdFileMainSelectColumnCheckTime EcdFileMainSelectColumn = "check_time"
	// 审批状态(11.未审批 12.已审批)
	EcdFileMainSelectColumnCheckStatus EcdFileMainSelectColumn = "check_status"
	// 联系电话
	EcdFileMainSelectColumnPhoneNum EcdFileMainSelectColumn = "phone_num"
	// 废土处置核准(0未审核 1已审核)
	EcdFileMainSelectColumnPointState EcdFileMainSelectColumn = "point_state"
	// 是否审批完成(0未完成 1-完成 2退回)
	EcdFileMainSelectColumnEndState EcdFileMainSelectColumn = "end_state"
	// 工程名称
	EcdFileMainSelectColumnTitle EcdFileMainSelectColumn = "title"
	// 提交工程报备的区域ID
	EcdFileMainSelectColumnAddDistrictID EcdFileMainSelectColumn = "add_district_id"
	// 起点审批人签名
	EcdFileMainSelectColumnStartPointCheckerSign EcdFileMainSelectColumn = "start_point_checker_sign"
	// 终点审批人签名
	EcdFileMainSelectColumnEndPointCheckerSign EcdFileMainSelectColumn = "end_point_checker_sign"
	// 路线审批人签名
	EcdFileMainSelectColumnRouteCheckerSign EcdFileMainSelectColumn = "route_checker_sign"
	// 车速时间审批人签名
	EcdFileMainSelectColumnSpeedTimeCheckerSign EcdFileMainSelectColumn = "speed_time_checker_sign"
	// 退回意见
	EcdFileMainSelectColumnReturnSuggest EcdFileMainSelectColumn = "return_suggest"
	// 建筑工程名称
	EcdFileMainSelectColumnConstructTitle EcdFileMainSelectColumn = "construct_title"
	// 建筑工程ID
	EcdFileMainSelectColumnConstructID EcdFileMainSelectColumn = "construct_id"
	// 是否匹配抓怕工地
	EcdFileMainSelectColumnIsMatchConstruction EcdFileMainSelectColumn = "is_match_construction"
	// 提交时间
	EcdFileMainSelectColumnClientReportTime EcdFileMainSelectColumn = "client_report_time"
	// 建筑合同
	EcdFileMainSelectColumnConstructProveFile EcdFileMainSelectColumn = "construct_prove_file"
	// 施工合同
	EcdFileMainSelectColumnDoConstructProveFile EcdFileMainSelectColumn = "do_construct_prove_file"
	// 土方分包合同
	EcdFileMainSelectColumnSubPackageProveFile EcdFileMainSelectColumn = "sub_package_prove_file"
	// 运输合同
	EcdFileMainSelectColumnTrafficProveFile EcdFileMainSelectColumn = "traffic_prove_file"
	// 路线牌工作相关规定承诺书
	EcdFileMainSelectColumnRouteBoardPromiseFile EcdFileMainSelectColumn = "route_board_promise_file"
	// 运输主题责任承诺书
	EcdFileMainSelectColumnTrafficeObjectPromiseFile EcdFileMainSelectColumn = "traffice_object_promise_file"
	// 建筑废土处置核准许可证
	EcdFileMainSelectColumnConstructGarbageAllowFile EcdFileMainSelectColumn = "construct_garbage_allow_file"
	// 工地进出口照片
	EcdFileMainSelectColumnConstructSiteEnterancePhoto EcdFileMainSelectColumn = "construct_site_enterance_photo"
	// 工地洗车台照片
	EcdFileMainSelectColumnConstructWashCarPlacePhoto EcdFileMainSelectColumn = "construct_wash_car_place_photo"
	// 创建时间
	EcdFileMainSelectColumnCreatedAt EcdFileMainSelectColumn = "created_at"
	// 创建人
	EcdFileMainSelectColumnCreatedBy EcdFileMainSelectColumn = "created_by"
	// 更新时间
	EcdFileMainSelectColumnUpdatedAt EcdFileMainSelectColumn = "updated_at"
	// 更新人
	EcdFileMainSelectColumnUpdatedBy EcdFileMainSelectColumn = "updated_by"
	// 删除时间
	EcdFileMainSelectColumnDeletedAt EcdFileMainSelectColumn = "deleted_at"
	// 删除人
	EcdFileMainSelectColumnDeletedBy EcdFileMainSelectColumn = "deleted_by"
	// 是否删除
	EcdFileMainSelectColumnIsDeleted EcdFileMainSelectColumn = "is_deleted"
	// 备注
	EcdFileMainSelectColumnRemark EcdFileMainSelectColumn = "remark"
)

var AllEcdFileMainSelectColumn = []EcdFileMainSelectColumn{
	EcdFileMainSelectColumnID,
	EcdFileMainSelectColumnFileMainID,
	EcdFileMainSelectColumnFileID,
	EcdFileMainSelectColumnEnterpriseID,
	EcdFileMainSelectColumnDistrictID,
	EcdFileMainSelectColumnIsCrossDistrict,
	EcdFileMainSelectColumnFirstCrossPid,
	EcdFileMainSelectColumnPlanStartTime,
	EcdFileMainSelectColumnPlanEndTime,
	EcdFileMainSelectColumnCheckTime,
	EcdFileMainSelectColumnCheckStatus,
	EcdFileMainSelectColumnPhoneNum,
	EcdFileMainSelectColumnPointState,
	EcdFileMainSelectColumnEndState,
	EcdFileMainSelectColumnTitle,
	EcdFileMainSelectColumnAddDistrictID,
	EcdFileMainSelectColumnStartPointCheckerSign,
	EcdFileMainSelectColumnEndPointCheckerSign,
	EcdFileMainSelectColumnRouteCheckerSign,
	EcdFileMainSelectColumnSpeedTimeCheckerSign,
	EcdFileMainSelectColumnReturnSuggest,
	EcdFileMainSelectColumnConstructTitle,
	EcdFileMainSelectColumnConstructID,
	EcdFileMainSelectColumnIsMatchConstruction,
	EcdFileMainSelectColumnClientReportTime,
	EcdFileMainSelectColumnConstructProveFile,
	EcdFileMainSelectColumnDoConstructProveFile,
	EcdFileMainSelectColumnSubPackageProveFile,
	EcdFileMainSelectColumnTrafficProveFile,
	EcdFileMainSelectColumnRouteBoardPromiseFile,
	EcdFileMainSelectColumnTrafficeObjectPromiseFile,
	EcdFileMainSelectColumnConstructGarbageAllowFile,
	EcdFileMainSelectColumnConstructSiteEnterancePhoto,
	EcdFileMainSelectColumnConstructWashCarPlacePhoto,
	EcdFileMainSelectColumnCreatedAt,
	EcdFileMainSelectColumnCreatedBy,
	EcdFileMainSelectColumnUpdatedAt,
	EcdFileMainSelectColumnUpdatedBy,
	EcdFileMainSelectColumnDeletedAt,
	EcdFileMainSelectColumnDeletedBy,
	EcdFileMainSelectColumnIsDeleted,
	EcdFileMainSelectColumnRemark,
}

func (e EcdFileMainSelectColumn) IsValid() bool {
	switch e {
	case EcdFileMainSelectColumnID, EcdFileMainSelectColumnFileMainID, EcdFileMainSelectColumnFileID, EcdFileMainSelectColumnEnterpriseID, EcdFileMainSelectColumnDistrictID, EcdFileMainSelectColumnIsCrossDistrict, EcdFileMainSelectColumnFirstCrossPid, EcdFileMainSelectColumnPlanStartTime, EcdFileMainSelectColumnPlanEndTime, EcdFileMainSelectColumnCheckTime, EcdFileMainSelectColumnCheckStatus, EcdFileMainSelectColumnPhoneNum, EcdFileMainSelectColumnPointState, EcdFileMainSelectColumnEndState, EcdFileMainSelectColumnTitle, EcdFileMainSelectColumnAddDistrictID, EcdFileMainSelectColumnStartPointCheckerSign, EcdFileMainSelectColumnEndPointCheckerSign, EcdFileMainSelectColumnRouteCheckerSign, EcdFileMainSelectColumnSpeedTimeCheckerSign, EcdFileMainSelectColumnReturnSuggest, EcdFileMainSelectColumnConstructTitle, EcdFileMainSelectColumnConstructID, EcdFileMainSelectColumnIsMatchConstruction, EcdFileMainSelectColumnClientReportTime, EcdFileMainSelectColumnConstructProveFile, EcdFileMainSelectColumnDoConstructProveFile, EcdFileMainSelectColumnSubPackageProveFile, EcdFileMainSelectColumnTrafficProveFile, EcdFileMainSelectColumnRouteBoardPromiseFile, EcdFileMainSelectColumnTrafficeObjectPromiseFile, EcdFileMainSelectColumnConstructGarbageAllowFile, EcdFileMainSelectColumnConstructSiteEnterancePhoto, EcdFileMainSelectColumnConstructWashCarPlacePhoto, EcdFileMainSelectColumnCreatedAt, EcdFileMainSelectColumnCreatedBy, EcdFileMainSelectColumnUpdatedAt, EcdFileMainSelectColumnUpdatedBy, EcdFileMainSelectColumnDeletedAt, EcdFileMainSelectColumnDeletedBy, EcdFileMainSelectColumnIsDeleted, EcdFileMainSelectColumnRemark:
		return true
	}
	return false
}

func (e EcdFileMainSelectColumn) String() string {
	return string(e)
}

func (e *EcdFileMainSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EcdFileMainSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EcdFileMainSelectColumn", str)
	}
	return nil
}

func (e EcdFileMainSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EcdFileMainSubSelectColumn string

const (
	// ID
	EcdFileMainSubSelectColumnID EcdFileMainSubSelectColumn = "id"
	// 工程报备附属表ID
	EcdFileMainSubSelectColumnFileMainSubID EcdFileMainSubSelectColumn = "file_main_sub_id"
	// 报备主表ID
	EcdFileMainSubSelectColumnFileMainID EcdFileMainSubSelectColumn = "file_main_id"
	// 地址
	EcdFileMainSubSelectColumnAddress EcdFileMainSubSelectColumn = "address"
	// 建筑单位
	EcdFileMainSubSelectColumnConstructUnit EcdFileMainSubSelectColumn = "construct_unit"
	// 建筑单位-负责人姓名
	EcdFileMainSubSelectColumnConstructDirectorName EcdFileMainSubSelectColumn = "construct_director_name"
	// 建筑单位-联系电话
	EcdFileMainSubSelectColumnConstructPhone EcdFileMainSubSelectColumn = "construct_phone"
	// 施工总承包单位
	EcdFileMainSubSelectColumnContractUnit EcdFileMainSubSelectColumn = "contract_unit"
	// 施工总承包单位-负责人姓名
	EcdFileMainSubSelectColumnContractDirectorName EcdFileMainSubSelectColumn = "contract_director_name"
	// 施工总承包单位-联系电话
	EcdFileMainSubSelectColumnContractPhone EcdFileMainSubSelectColumn = "contract_phone"
	// 运输单位
	EcdFileMainSubSelectColumnTrafficUnit EcdFileMainSubSelectColumn = "traffic_unit"
	// 运输单位-负责人姓名
	EcdFileMainSubSelectColumnTrafficDirectorName EcdFileMainSubSelectColumn = "traffic_director_name"
	// 运输单位-联系电话
	EcdFileMainSubSelectColumnTrafficPhone EcdFileMainSubSelectColumn = "traffic_phone"
	// 废土类别
	EcdFileMainSubSelectColumnWlType EcdFileMainSubSelectColumn = "wl_type"
	// 废土-计划处置场地
	EcdFileMainSubSelectColumnPlanDealArea EcdFileMainSubSelectColumn = "plan_deal_area"
	// 废土-计划运输方量
	EcdFileMainSubSelectColumnPlanTransVolume EcdFileMainSubSelectColumn = "plan_trans_volume"
	// 废土-计划运输时段（起始）
	EcdFileMainSubSelectColumnPlanStartTime EcdFileMainSubSelectColumn = "plan_start_time"
	// 废土-计划运输时间(截止)
	EcdFileMainSubSelectColumnPlanEndTime EcdFileMainSubSelectColumn = "plan_end_time"
	// 废土-计划运输路线
	EcdFileMainSubSelectColumnPlanTransLines EcdFileMainSubSelectColumn = "plan_trans_lines"
	// 建筑合同号
	EcdFileMainSubSelectColumnConstructProveNum EcdFileMainSubSelectColumn = "construct_prove_num"
	// 施工合同号
	EcdFileMainSubSelectColumnContractProveNum EcdFileMainSubSelectColumn = "contract_prove_num"
	// 运输合同号
	EcdFileMainSubSelectColumnTrafficProveNum EcdFileMainSubSelectColumn = "traffic_prove_num"
	// 土方分包单位
	EcdFileMainSubSelectColumnSubPackageUnit EcdFileMainSubSelectColumn = "sub_package_unit"
	// 分包合同号
	EcdFileMainSubSelectColumnPackageProveNum EcdFileMainSubSelectColumn = "package_prove_num"
	// 分包-负责人姓名
	EcdFileMainSubSelectColumnPackageDirectorName EcdFileMainSubSelectColumn = "package_director_name"
	// 分包-联系电话
	EcdFileMainSubSelectColumnPackagePhone EcdFileMainSubSelectColumn = "package_phone"
	// 工程概况
	EcdFileMainSubSelectColumnFacts EcdFileMainSubSelectColumn = "facts"
	// 创建时间
	EcdFileMainSubSelectColumnCreatedAt EcdFileMainSubSelectColumn = "created_at"
	// 创建人
	EcdFileMainSubSelectColumnCreatedBy EcdFileMainSubSelectColumn = "created_by"
	// 更新时间
	EcdFileMainSubSelectColumnUpdatedAt EcdFileMainSubSelectColumn = "updated_at"
	// 更新人
	EcdFileMainSubSelectColumnUpdatedBy EcdFileMainSubSelectColumn = "updated_by"
	// 删除时间
	EcdFileMainSubSelectColumnDeletedAt EcdFileMainSubSelectColumn = "deleted_at"
	// 删除人
	EcdFileMainSubSelectColumnDeletedBy EcdFileMainSubSelectColumn = "deleted_by"
	// 是否删除
	EcdFileMainSubSelectColumnIsDeleted EcdFileMainSubSelectColumn = "is_deleted"
)

var AllEcdFileMainSubSelectColumn = []EcdFileMainSubSelectColumn{
	EcdFileMainSubSelectColumnID,
	EcdFileMainSubSelectColumnFileMainSubID,
	EcdFileMainSubSelectColumnFileMainID,
	EcdFileMainSubSelectColumnAddress,
	EcdFileMainSubSelectColumnConstructUnit,
	EcdFileMainSubSelectColumnConstructDirectorName,
	EcdFileMainSubSelectColumnConstructPhone,
	EcdFileMainSubSelectColumnContractUnit,
	EcdFileMainSubSelectColumnContractDirectorName,
	EcdFileMainSubSelectColumnContractPhone,
	EcdFileMainSubSelectColumnTrafficUnit,
	EcdFileMainSubSelectColumnTrafficDirectorName,
	EcdFileMainSubSelectColumnTrafficPhone,
	EcdFileMainSubSelectColumnWlType,
	EcdFileMainSubSelectColumnPlanDealArea,
	EcdFileMainSubSelectColumnPlanTransVolume,
	EcdFileMainSubSelectColumnPlanStartTime,
	EcdFileMainSubSelectColumnPlanEndTime,
	EcdFileMainSubSelectColumnPlanTransLines,
	EcdFileMainSubSelectColumnConstructProveNum,
	EcdFileMainSubSelectColumnContractProveNum,
	EcdFileMainSubSelectColumnTrafficProveNum,
	EcdFileMainSubSelectColumnSubPackageUnit,
	EcdFileMainSubSelectColumnPackageProveNum,
	EcdFileMainSubSelectColumnPackageDirectorName,
	EcdFileMainSubSelectColumnPackagePhone,
	EcdFileMainSubSelectColumnFacts,
	EcdFileMainSubSelectColumnCreatedAt,
	EcdFileMainSubSelectColumnCreatedBy,
	EcdFileMainSubSelectColumnUpdatedAt,
	EcdFileMainSubSelectColumnUpdatedBy,
	EcdFileMainSubSelectColumnDeletedAt,
	EcdFileMainSubSelectColumnDeletedBy,
	EcdFileMainSubSelectColumnIsDeleted,
}

func (e EcdFileMainSubSelectColumn) IsValid() bool {
	switch e {
	case EcdFileMainSubSelectColumnID, EcdFileMainSubSelectColumnFileMainSubID, EcdFileMainSubSelectColumnFileMainID, EcdFileMainSubSelectColumnAddress, EcdFileMainSubSelectColumnConstructUnit, EcdFileMainSubSelectColumnConstructDirectorName, EcdFileMainSubSelectColumnConstructPhone, EcdFileMainSubSelectColumnContractUnit, EcdFileMainSubSelectColumnContractDirectorName, EcdFileMainSubSelectColumnContractPhone, EcdFileMainSubSelectColumnTrafficUnit, EcdFileMainSubSelectColumnTrafficDirectorName, EcdFileMainSubSelectColumnTrafficPhone, EcdFileMainSubSelectColumnWlType, EcdFileMainSubSelectColumnPlanDealArea, EcdFileMainSubSelectColumnPlanTransVolume, EcdFileMainSubSelectColumnPlanStartTime, EcdFileMainSubSelectColumnPlanEndTime, EcdFileMainSubSelectColumnPlanTransLines, EcdFileMainSubSelectColumnConstructProveNum, EcdFileMainSubSelectColumnContractProveNum, EcdFileMainSubSelectColumnTrafficProveNum, EcdFileMainSubSelectColumnSubPackageUnit, EcdFileMainSubSelectColumnPackageProveNum, EcdFileMainSubSelectColumnPackageDirectorName, EcdFileMainSubSelectColumnPackagePhone, EcdFileMainSubSelectColumnFacts, EcdFileMainSubSelectColumnCreatedAt, EcdFileMainSubSelectColumnCreatedBy, EcdFileMainSubSelectColumnUpdatedAt, EcdFileMainSubSelectColumnUpdatedBy, EcdFileMainSubSelectColumnDeletedAt, EcdFileMainSubSelectColumnDeletedBy, EcdFileMainSubSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e EcdFileMainSubSelectColumn) String() string {
	return string(e)
}

func (e *EcdFileMainSubSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EcdFileMainSubSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EcdFileMainSubSelectColumn", str)
	}
	return nil
}

func (e EcdFileMainSubSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EcdFileVehicleSelectColumn string

const (
	// ID
	EcdFileVehicleSelectColumnID EcdFileVehicleSelectColumn = "id"
	// 工程报备车辆表ID
	EcdFileVehicleSelectColumnFileVehicleID EcdFileVehicleSelectColumn = "file_vehicle_id"
	// 报备主表ID
	EcdFileVehicleSelectColumnFileMainID EcdFileVehicleSelectColumn = "file_main_id"
	// 车辆ID
	EcdFileVehicleSelectColumnVehicleID EcdFileVehicleSelectColumn = "vehicle_id"
	// 审核状态
	EcdFileVehicleSelectColumnCheckStatus EcdFileVehicleSelectColumn = "check_status"
	// 创建时间
	EcdFileVehicleSelectColumnCreatedAt EcdFileVehicleSelectColumn = "created_at"
	// 创建人
	EcdFileVehicleSelectColumnCreatedBy EcdFileVehicleSelectColumn = "created_by"
	// 更新时间
	EcdFileVehicleSelectColumnUpdatedAt EcdFileVehicleSelectColumn = "updated_at"
	// 更新人
	EcdFileVehicleSelectColumnUpdatedBy EcdFileVehicleSelectColumn = "updated_by"
	// 删除时间
	EcdFileVehicleSelectColumnDeletedAt EcdFileVehicleSelectColumn = "deleted_at"
	// 删除人
	EcdFileVehicleSelectColumnDeletedBy EcdFileVehicleSelectColumn = "deleted_by"
	// 是否删除
	EcdFileVehicleSelectColumnIsDeleted EcdFileVehicleSelectColumn = "is_deleted"
)

var AllEcdFileVehicleSelectColumn = []EcdFileVehicleSelectColumn{
	EcdFileVehicleSelectColumnID,
	EcdFileVehicleSelectColumnFileVehicleID,
	EcdFileVehicleSelectColumnFileMainID,
	EcdFileVehicleSelectColumnVehicleID,
	EcdFileVehicleSelectColumnCheckStatus,
	EcdFileVehicleSelectColumnCreatedAt,
	EcdFileVehicleSelectColumnCreatedBy,
	EcdFileVehicleSelectColumnUpdatedAt,
	EcdFileVehicleSelectColumnUpdatedBy,
	EcdFileVehicleSelectColumnDeletedAt,
	EcdFileVehicleSelectColumnDeletedBy,
	EcdFileVehicleSelectColumnIsDeleted,
}

func (e EcdFileVehicleSelectColumn) IsValid() bool {
	switch e {
	case EcdFileVehicleSelectColumnID, EcdFileVehicleSelectColumnFileVehicleID, EcdFileVehicleSelectColumnFileMainID, EcdFileVehicleSelectColumnVehicleID, EcdFileVehicleSelectColumnCheckStatus, EcdFileVehicleSelectColumnCreatedAt, EcdFileVehicleSelectColumnCreatedBy, EcdFileVehicleSelectColumnUpdatedAt, EcdFileVehicleSelectColumnUpdatedBy, EcdFileVehicleSelectColumnDeletedAt, EcdFileVehicleSelectColumnDeletedBy, EcdFileVehicleSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e EcdFileVehicleSelectColumn) String() string {
	return string(e)
}

func (e *EcdFileVehicleSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EcdFileVehicleSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EcdFileVehicleSelectColumn", str)
	}
	return nil
}

func (e EcdFileVehicleSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EcdFileVehicleTimeSelectColumn string

const (
	// ID
	EcdFileVehicleTimeSelectColumnID EcdFileVehicleTimeSelectColumn = "id"
	// 工程审批-车辆运行时间表ID
	EcdFileVehicleTimeSelectColumnVehicleTimeID EcdFileVehicleTimeSelectColumn = "vehicle_time_id"
	// 报备主表ID
	EcdFileVehicleTimeSelectColumnFileMainID EcdFileVehicleTimeSelectColumn = "file_main_id"
	// 车辆ID
	EcdFileVehicleTimeSelectColumnVechileID EcdFileVehicleTimeSelectColumn = "vechile_id"
	// 运行起始日期
	EcdFileVehicleTimeSelectColumnStartDate EcdFileVehicleTimeSelectColumn = "start_date"
	// 运行截止日期
	EcdFileVehicleTimeSelectColumnEndDate EcdFileVehicleTimeSelectColumn = "end_date"
	// 运行起始时间
	EcdFileVehicleTimeSelectColumnStartTime EcdFileVehicleTimeSelectColumn = "start_time"
	// 运行截止时间
	EcdFileVehicleTimeSelectColumnEndTime EcdFileVehicleTimeSelectColumn = "end_time"
	// 审批状态 0未审批 1正常 2废弃
	EcdFileVehicleTimeSelectColumnCheckStatus EcdFileVehicleTimeSelectColumn = "check_status"
	// 是否审批完成
	EcdFileVehicleTimeSelectColumnIsCheck EcdFileVehicleTimeSelectColumn = "is_check"
	// 审批时间
	EcdFileVehicleTimeSelectColumnCheckTime EcdFileVehicleTimeSelectColumn = "check_time"
	// 路线ID
	EcdFileVehicleTimeSelectColumnLineID EcdFileVehicleTimeSelectColumn = "line_id"
	// 创建时间
	EcdFileVehicleTimeSelectColumnCreatedAt EcdFileVehicleTimeSelectColumn = "created_at"
	// 创建人
	EcdFileVehicleTimeSelectColumnCreatedBy EcdFileVehicleTimeSelectColumn = "created_by"
	// 修改时间
	EcdFileVehicleTimeSelectColumnUpdatedAt EcdFileVehicleTimeSelectColumn = "updated_at"
	// 修改人
	EcdFileVehicleTimeSelectColumnUpdatedBy EcdFileVehicleTimeSelectColumn = "updated_by"
	// 删除时间
	EcdFileVehicleTimeSelectColumnDeletedAt EcdFileVehicleTimeSelectColumn = "deleted_at"
	// 删除人
	EcdFileVehicleTimeSelectColumnDeletedBy EcdFileVehicleTimeSelectColumn = "deleted_by"
	// 是否删除
	EcdFileVehicleTimeSelectColumnIsDeleted EcdFileVehicleTimeSelectColumn = "is_deleted"
)

var AllEcdFileVehicleTimeSelectColumn = []EcdFileVehicleTimeSelectColumn{
	EcdFileVehicleTimeSelectColumnID,
	EcdFileVehicleTimeSelectColumnVehicleTimeID,
	EcdFileVehicleTimeSelectColumnFileMainID,
	EcdFileVehicleTimeSelectColumnVechileID,
	EcdFileVehicleTimeSelectColumnStartDate,
	EcdFileVehicleTimeSelectColumnEndDate,
	EcdFileVehicleTimeSelectColumnStartTime,
	EcdFileVehicleTimeSelectColumnEndTime,
	EcdFileVehicleTimeSelectColumnCheckStatus,
	EcdFileVehicleTimeSelectColumnIsCheck,
	EcdFileVehicleTimeSelectColumnCheckTime,
	EcdFileVehicleTimeSelectColumnLineID,
	EcdFileVehicleTimeSelectColumnCreatedAt,
	EcdFileVehicleTimeSelectColumnCreatedBy,
	EcdFileVehicleTimeSelectColumnUpdatedAt,
	EcdFileVehicleTimeSelectColumnUpdatedBy,
	EcdFileVehicleTimeSelectColumnDeletedAt,
	EcdFileVehicleTimeSelectColumnDeletedBy,
	EcdFileVehicleTimeSelectColumnIsDeleted,
}

func (e EcdFileVehicleTimeSelectColumn) IsValid() bool {
	switch e {
	case EcdFileVehicleTimeSelectColumnID, EcdFileVehicleTimeSelectColumnVehicleTimeID, EcdFileVehicleTimeSelectColumnFileMainID, EcdFileVehicleTimeSelectColumnVechileID, EcdFileVehicleTimeSelectColumnStartDate, EcdFileVehicleTimeSelectColumnEndDate, EcdFileVehicleTimeSelectColumnStartTime, EcdFileVehicleTimeSelectColumnEndTime, EcdFileVehicleTimeSelectColumnCheckStatus, EcdFileVehicleTimeSelectColumnIsCheck, EcdFileVehicleTimeSelectColumnCheckTime, EcdFileVehicleTimeSelectColumnLineID, EcdFileVehicleTimeSelectColumnCreatedAt, EcdFileVehicleTimeSelectColumnCreatedBy, EcdFileVehicleTimeSelectColumnUpdatedAt, EcdFileVehicleTimeSelectColumnUpdatedBy, EcdFileVehicleTimeSelectColumnDeletedAt, EcdFileVehicleTimeSelectColumnDeletedBy, EcdFileVehicleTimeSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e EcdFileVehicleTimeSelectColumn) String() string {
	return string(e)
}

func (e *EcdFileVehicleTimeSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EcdFileVehicleTimeSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EcdFileVehicleTimeSelectColumn", str)
	}
	return nil
}

func (e EcdFileVehicleTimeSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EcdLineSelectColumn string

const (
	// ID
	EcdLineSelectColumnID EcdLineSelectColumn = "id"
	// 工程审批路线表ID
	EcdLineSelectColumnLineID EcdLineSelectColumn = "line_id"
	// 路线名称
	EcdLineSelectColumnLineName EcdLineSelectColumn = "line_name"
	// 所属企业ID
	EcdLineSelectColumnEnterpriseID EcdLineSelectColumn = "enterprise_id"
	// 路线描述
	EcdLineSelectColumnLineDesc EcdLineSelectColumn = "line_desc"
	// 审批人
	EcdLineSelectColumnAuditUserID EcdLineSelectColumn = "audit_user_id"
	// 审批时间
	EcdLineSelectColumnAuditTime EcdLineSelectColumn = "audit_time"
	// 是否解析描述
	EcdLineSelectColumnIsResolveDesc EcdLineSelectColumn = "is_resolve_desc"
	// 创建时间
	EcdLineSelectColumnCreatedAt EcdLineSelectColumn = "created_at"
	// 创建人
	EcdLineSelectColumnCreatedBy EcdLineSelectColumn = "created_by"
	// 更新时间
	EcdLineSelectColumnUpdatedAt EcdLineSelectColumn = "updated_at"
	// 更新人
	EcdLineSelectColumnUpdatedBy EcdLineSelectColumn = "updated_by"
	// 删除时间
	EcdLineSelectColumnDeletedAt EcdLineSelectColumn = "deleted_at"
	// 删除人
	EcdLineSelectColumnDeletedBy EcdLineSelectColumn = "deleted_by"
	// 是否删除
	EcdLineSelectColumnIsDeleted EcdLineSelectColumn = "is_deleted"
	// 线路数据
	EcdLineSelectColumnGisData EcdLineSelectColumn = "gis_data"
)

var AllEcdLineSelectColumn = []EcdLineSelectColumn{
	EcdLineSelectColumnID,
	EcdLineSelectColumnLineID,
	EcdLineSelectColumnLineName,
	EcdLineSelectColumnEnterpriseID,
	EcdLineSelectColumnLineDesc,
	EcdLineSelectColumnAuditUserID,
	EcdLineSelectColumnAuditTime,
	EcdLineSelectColumnIsResolveDesc,
	EcdLineSelectColumnCreatedAt,
	EcdLineSelectColumnCreatedBy,
	EcdLineSelectColumnUpdatedAt,
	EcdLineSelectColumnUpdatedBy,
	EcdLineSelectColumnDeletedAt,
	EcdLineSelectColumnDeletedBy,
	EcdLineSelectColumnIsDeleted,
	EcdLineSelectColumnGisData,
}

func (e EcdLineSelectColumn) IsValid() bool {
	switch e {
	case EcdLineSelectColumnID, EcdLineSelectColumnLineID, EcdLineSelectColumnLineName, EcdLineSelectColumnEnterpriseID, EcdLineSelectColumnLineDesc, EcdLineSelectColumnAuditUserID, EcdLineSelectColumnAuditTime, EcdLineSelectColumnIsResolveDesc, EcdLineSelectColumnCreatedAt, EcdLineSelectColumnCreatedBy, EcdLineSelectColumnUpdatedAt, EcdLineSelectColumnUpdatedBy, EcdLineSelectColumnDeletedAt, EcdLineSelectColumnDeletedBy, EcdLineSelectColumnIsDeleted, EcdLineSelectColumnGisData:
		return true
	}
	return false
}

func (e EcdLineSelectColumn) String() string {
	return string(e)
}

func (e *EcdLineSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EcdLineSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EcdLineSelectColumn", str)
	}
	return nil
}

func (e EcdLineSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type ElectricFenceEnteranceRecordSelectColumn string

const (
	// ID
	ElectricFenceEnteranceRecordSelectColumnID ElectricFenceEnteranceRecordSelectColumn = "id"
	// 电子围栏进出记录表ID
	ElectricFenceEnteranceRecordSelectColumnRecordID ElectricFenceEnteranceRecordSelectColumn = "record_id"
	// 车辆ID
	ElectricFenceEnteranceRecordSelectColumnVehicleID ElectricFenceEnteranceRecordSelectColumn = "vehicle_id"
	// 电子围栏ID
	ElectricFenceEnteranceRecordSelectColumnElectricFenceID ElectricFenceEnteranceRecordSelectColumn = "electric_fence_id"
	// 进入时间
	ElectricFenceEnteranceRecordSelectColumnInTime ElectricFenceEnteranceRecordSelectColumn = "in_time"
	// 离开时间
	ElectricFenceEnteranceRecordSelectColumnOutTime ElectricFenceEnteranceRecordSelectColumn = "out_time"
	// 是否离开
	ElectricFenceEnteranceRecordSelectColumnIsOut ElectricFenceEnteranceRecordSelectColumn = "is_out"
	// 位置点
	ElectricFenceEnteranceRecordSelectColumnPosition ElectricFenceEnteranceRecordSelectColumn = "position"
	// 是否在线
	ElectricFenceEnteranceRecordSelectColumnIsOnline ElectricFenceEnteranceRecordSelectColumn = "is_online"
	// 创建时间
	ElectricFenceEnteranceRecordSelectColumnCreatedAt ElectricFenceEnteranceRecordSelectColumn = "created_at"
	// 创建人
	ElectricFenceEnteranceRecordSelectColumnCreatedBy ElectricFenceEnteranceRecordSelectColumn = "created_by"
	// 更新时间
	ElectricFenceEnteranceRecordSelectColumnUpdatedAt ElectricFenceEnteranceRecordSelectColumn = "updated_at"
	// 更新人
	ElectricFenceEnteranceRecordSelectColumnUpdatedBy ElectricFenceEnteranceRecordSelectColumn = "updated_by"
	// 删除时间
	ElectricFenceEnteranceRecordSelectColumnDeletedAt ElectricFenceEnteranceRecordSelectColumn = "deleted_at"
	// 删除人
	ElectricFenceEnteranceRecordSelectColumnDeletedBy ElectricFenceEnteranceRecordSelectColumn = "deleted_by"
	// 是否删除
	ElectricFenceEnteranceRecordSelectColumnIsDeleted ElectricFenceEnteranceRecordSelectColumn = "is_deleted"
)

var AllElectricFenceEnteranceRecordSelectColumn = []ElectricFenceEnteranceRecordSelectColumn{
	ElectricFenceEnteranceRecordSelectColumnID,
	ElectricFenceEnteranceRecordSelectColumnRecordID,
	ElectricFenceEnteranceRecordSelectColumnVehicleID,
	ElectricFenceEnteranceRecordSelectColumnElectricFenceID,
	ElectricFenceEnteranceRecordSelectColumnInTime,
	ElectricFenceEnteranceRecordSelectColumnOutTime,
	ElectricFenceEnteranceRecordSelectColumnIsOut,
	ElectricFenceEnteranceRecordSelectColumnPosition,
	ElectricFenceEnteranceRecordSelectColumnIsOnline,
	ElectricFenceEnteranceRecordSelectColumnCreatedAt,
	ElectricFenceEnteranceRecordSelectColumnCreatedBy,
	ElectricFenceEnteranceRecordSelectColumnUpdatedAt,
	ElectricFenceEnteranceRecordSelectColumnUpdatedBy,
	ElectricFenceEnteranceRecordSelectColumnDeletedAt,
	ElectricFenceEnteranceRecordSelectColumnDeletedBy,
	ElectricFenceEnteranceRecordSelectColumnIsDeleted,
}

func (e ElectricFenceEnteranceRecordSelectColumn) IsValid() bool {
	switch e {
	case ElectricFenceEnteranceRecordSelectColumnID, ElectricFenceEnteranceRecordSelectColumnRecordID, ElectricFenceEnteranceRecordSelectColumnVehicleID, ElectricFenceEnteranceRecordSelectColumnElectricFenceID, ElectricFenceEnteranceRecordSelectColumnInTime, ElectricFenceEnteranceRecordSelectColumnOutTime, ElectricFenceEnteranceRecordSelectColumnIsOut, ElectricFenceEnteranceRecordSelectColumnPosition, ElectricFenceEnteranceRecordSelectColumnIsOnline, ElectricFenceEnteranceRecordSelectColumnCreatedAt, ElectricFenceEnteranceRecordSelectColumnCreatedBy, ElectricFenceEnteranceRecordSelectColumnUpdatedAt, ElectricFenceEnteranceRecordSelectColumnUpdatedBy, ElectricFenceEnteranceRecordSelectColumnDeletedAt, ElectricFenceEnteranceRecordSelectColumnDeletedBy, ElectricFenceEnteranceRecordSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e ElectricFenceEnteranceRecordSelectColumn) String() string {
	return string(e)
}

func (e *ElectricFenceEnteranceRecordSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ElectricFenceEnteranceRecordSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ElectricFenceEnteranceRecordSelectColumn", str)
	}
	return nil
}

func (e ElectricFenceEnteranceRecordSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type ElectricFenceSelectColumn string

const (
	// ID
	ElectricFenceSelectColumnID ElectricFenceSelectColumn = "id"
	// 电子围栏ID
	ElectricFenceSelectColumnElectricFenceID ElectricFenceSelectColumn = "electric_fence_id"
	// 区域类型(1矩形 2圆形 3多边形)
	ElectricFenceSelectColumnAreaType ElectricFenceSelectColumn = "area_type"
	// 围栏类型(1消纳场 2工地 3工程 4重点区域)
	ElectricFenceSelectColumnFenceType ElectricFenceSelectColumn = "fence_type"
	// 围栏名称
	ElectricFenceSelectColumnFenceName ElectricFenceSelectColumn = "fence_name"
	// 地点
	ElectricFenceSelectColumnAddress ElectricFenceSelectColumn = "address"
	// 所属区域
	ElectricFenceSelectColumnDistrictID ElectricFenceSelectColumn = "district_id"
	// 创建时间
	ElectricFenceSelectColumnCreatedAt ElectricFenceSelectColumn = "created_at"
	// 创建人
	ElectricFenceSelectColumnCreatedBy ElectricFenceSelectColumn = "created_by"
	// 更新时间
	ElectricFenceSelectColumnUpdatedAt ElectricFenceSelectColumn = "updated_at"
	// 更新人
	ElectricFenceSelectColumnUpdatedBy ElectricFenceSelectColumn = "updated_by"
	// 删除时间
	ElectricFenceSelectColumnDeletedAt ElectricFenceSelectColumn = "deleted_at"
	// 删除人
	ElectricFenceSelectColumnDeletedBy ElectricFenceSelectColumn = "deleted_by"
	// 是否删除
	ElectricFenceSelectColumnIsDeleted ElectricFenceSelectColumn = "is_deleted"
	// 围栏数据
	ElectricFenceSelectColumnGisData ElectricFenceSelectColumn = "gis_data"
)

var AllElectricFenceSelectColumn = []ElectricFenceSelectColumn{
	ElectricFenceSelectColumnID,
	ElectricFenceSelectColumnElectricFenceID,
	ElectricFenceSelectColumnAreaType,
	ElectricFenceSelectColumnFenceType,
	ElectricFenceSelectColumnFenceName,
	ElectricFenceSelectColumnAddress,
	ElectricFenceSelectColumnDistrictID,
	ElectricFenceSelectColumnCreatedAt,
	ElectricFenceSelectColumnCreatedBy,
	ElectricFenceSelectColumnUpdatedAt,
	ElectricFenceSelectColumnUpdatedBy,
	ElectricFenceSelectColumnDeletedAt,
	ElectricFenceSelectColumnDeletedBy,
	ElectricFenceSelectColumnIsDeleted,
	ElectricFenceSelectColumnGisData,
}

func (e ElectricFenceSelectColumn) IsValid() bool {
	switch e {
	case ElectricFenceSelectColumnID, ElectricFenceSelectColumnElectricFenceID, ElectricFenceSelectColumnAreaType, ElectricFenceSelectColumnFenceType, ElectricFenceSelectColumnFenceName, ElectricFenceSelectColumnAddress, ElectricFenceSelectColumnDistrictID, ElectricFenceSelectColumnCreatedAt, ElectricFenceSelectColumnCreatedBy, ElectricFenceSelectColumnUpdatedAt, ElectricFenceSelectColumnUpdatedBy, ElectricFenceSelectColumnDeletedAt, ElectricFenceSelectColumnDeletedBy, ElectricFenceSelectColumnIsDeleted, ElectricFenceSelectColumnGisData:
		return true
	}
	return false
}

func (e ElectricFenceSelectColumn) String() string {
	return string(e)
}

func (e *ElectricFenceSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ElectricFenceSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ElectricFenceSelectColumn", str)
	}
	return nil
}

func (e ElectricFenceSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type LimitSpeedLineSelectColumn string

const (
	// ID
	LimitSpeedLineSelectColumnID LimitSpeedLineSelectColumn = "id"
	// 限速路线ID
	LimitSpeedLineSelectColumnLimitSpeedLineID LimitSpeedLineSelectColumn = "limit_speed_line_id"
	// 路线名称
	LimitSpeedLineSelectColumnLineName LimitSpeedLineSelectColumn = "line_name"
	// 路线类型(1路线 2区域)
	LimitSpeedLineSelectColumnLineType LimitSpeedLineSelectColumn = "line_type"
	// 区域ID
	LimitSpeedLineSelectColumnDistrictID LimitSpeedLineSelectColumn = "district_id"
	// 管控等级
	LimitSpeedLineSelectColumnControlLevel LimitSpeedLineSelectColumn = "control_level"
	// 申请原因
	LimitSpeedLineSelectColumnApplyReason LimitSpeedLineSelectColumn = "apply_reason"
	// 审核状态
	LimitSpeedLineSelectColumnCheckStatus LimitSpeedLineSelectColumn = "check_status"
	// 审核时间
	LimitSpeedLineSelectColumnCheckTime LimitSpeedLineSelectColumn = "check_time"
	// 审核人ID
	LimitSpeedLineSelectColumnCheckUserID LimitSpeedLineSelectColumn = "check_user_id"
	// 退回原因
	LimitSpeedLineSelectColumnRejectReason LimitSpeedLineSelectColumn = "reject_reason"
	// 创建时间
	LimitSpeedLineSelectColumnCreatedAt LimitSpeedLineSelectColumn = "created_at"
	// 创建人
	LimitSpeedLineSelectColumnCreatedBy LimitSpeedLineSelectColumn = "created_by"
	// 更新时间
	LimitSpeedLineSelectColumnUpdatedAt LimitSpeedLineSelectColumn = "updated_at"
	// 更新人
	LimitSpeedLineSelectColumnUpdatedBy LimitSpeedLineSelectColumn = "updated_by"
	// 删除时间
	LimitSpeedLineSelectColumnDeletedAt LimitSpeedLineSelectColumn = "deleted_at"
	// 删除人
	LimitSpeedLineSelectColumnDeletedBy LimitSpeedLineSelectColumn = "deleted_by"
	// 是否删除
	LimitSpeedLineSelectColumnIsDeleted LimitSpeedLineSelectColumn = "is_deleted"
	// 线路数据
	LimitSpeedLineSelectColumnGisData LimitSpeedLineSelectColumn = "gis_data"
)

var AllLimitSpeedLineSelectColumn = []LimitSpeedLineSelectColumn{
	LimitSpeedLineSelectColumnID,
	LimitSpeedLineSelectColumnLimitSpeedLineID,
	LimitSpeedLineSelectColumnLineName,
	LimitSpeedLineSelectColumnLineType,
	LimitSpeedLineSelectColumnDistrictID,
	LimitSpeedLineSelectColumnControlLevel,
	LimitSpeedLineSelectColumnApplyReason,
	LimitSpeedLineSelectColumnCheckStatus,
	LimitSpeedLineSelectColumnCheckTime,
	LimitSpeedLineSelectColumnCheckUserID,
	LimitSpeedLineSelectColumnRejectReason,
	LimitSpeedLineSelectColumnCreatedAt,
	LimitSpeedLineSelectColumnCreatedBy,
	LimitSpeedLineSelectColumnUpdatedAt,
	LimitSpeedLineSelectColumnUpdatedBy,
	LimitSpeedLineSelectColumnDeletedAt,
	LimitSpeedLineSelectColumnDeletedBy,
	LimitSpeedLineSelectColumnIsDeleted,
	LimitSpeedLineSelectColumnGisData,
}

func (e LimitSpeedLineSelectColumn) IsValid() bool {
	switch e {
	case LimitSpeedLineSelectColumnID, LimitSpeedLineSelectColumnLimitSpeedLineID, LimitSpeedLineSelectColumnLineName, LimitSpeedLineSelectColumnLineType, LimitSpeedLineSelectColumnDistrictID, LimitSpeedLineSelectColumnControlLevel, LimitSpeedLineSelectColumnApplyReason, LimitSpeedLineSelectColumnCheckStatus, LimitSpeedLineSelectColumnCheckTime, LimitSpeedLineSelectColumnCheckUserID, LimitSpeedLineSelectColumnRejectReason, LimitSpeedLineSelectColumnCreatedAt, LimitSpeedLineSelectColumnCreatedBy, LimitSpeedLineSelectColumnUpdatedAt, LimitSpeedLineSelectColumnUpdatedBy, LimitSpeedLineSelectColumnDeletedAt, LimitSpeedLineSelectColumnDeletedBy, LimitSpeedLineSelectColumnIsDeleted, LimitSpeedLineSelectColumnGisData:
		return true
	}
	return false
}

func (e LimitSpeedLineSelectColumn) String() string {
	return string(e)
}

func (e *LimitSpeedLineSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LimitSpeedLineSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LimitSpeedLineSelectColumn", str)
	}
	return nil
}

func (e LimitSpeedLineSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type LimitSpeedLineTimeSelectColumn string

const (
	// ID
	LimitSpeedLineTimeSelectColumnID LimitSpeedLineTimeSelectColumn = "id"
	// 限速路线时间段表
	LimitSpeedLineTimeSelectColumnLimitSpeedLineTimeID LimitSpeedLineTimeSelectColumn = "limit_speed_line_time_id"
	// 限速路线ID
	LimitSpeedLineTimeSelectColumnLimitSpeedLineID LimitSpeedLineTimeSelectColumn = "limit_speed_line_id"
	// 开始时间
	LimitSpeedLineTimeSelectColumnStartTime LimitSpeedLineTimeSelectColumn = "start_time"
	// 结束时间
	LimitSpeedLineTimeSelectColumnEndTime LimitSpeedLineTimeSelectColumn = "end_time"
	// 创建时间
	LimitSpeedLineTimeSelectColumnCreatedAt LimitSpeedLineTimeSelectColumn = "created_at"
	// 创建人
	LimitSpeedLineTimeSelectColumnCreatedBy LimitSpeedLineTimeSelectColumn = "created_by"
	// 更新时间
	LimitSpeedLineTimeSelectColumnUpdatedAt LimitSpeedLineTimeSelectColumn = "updated_at"
	// 更新人
	LimitSpeedLineTimeSelectColumnUpdatedBy LimitSpeedLineTimeSelectColumn = "updated_by"
	// 删除时间
	LimitSpeedLineTimeSelectColumnDeletedAt LimitSpeedLineTimeSelectColumn = "deleted_at"
	// 删除人
	LimitSpeedLineTimeSelectColumnDeletedBy LimitSpeedLineTimeSelectColumn = "deleted_by"
	// 是否删除
	LimitSpeedLineTimeSelectColumnIsDeleted LimitSpeedLineTimeSelectColumn = "is_deleted"
	// 限速值
	LimitSpeedLineTimeSelectColumnSpeed LimitSpeedLineTimeSelectColumn = "speed"
)

var AllLimitSpeedLineTimeSelectColumn = []LimitSpeedLineTimeSelectColumn{
	LimitSpeedLineTimeSelectColumnID,
	LimitSpeedLineTimeSelectColumnLimitSpeedLineTimeID,
	LimitSpeedLineTimeSelectColumnLimitSpeedLineID,
	LimitSpeedLineTimeSelectColumnStartTime,
	LimitSpeedLineTimeSelectColumnEndTime,
	LimitSpeedLineTimeSelectColumnCreatedAt,
	LimitSpeedLineTimeSelectColumnCreatedBy,
	LimitSpeedLineTimeSelectColumnUpdatedAt,
	LimitSpeedLineTimeSelectColumnUpdatedBy,
	LimitSpeedLineTimeSelectColumnDeletedAt,
	LimitSpeedLineTimeSelectColumnDeletedBy,
	LimitSpeedLineTimeSelectColumnIsDeleted,
	LimitSpeedLineTimeSelectColumnSpeed,
}

func (e LimitSpeedLineTimeSelectColumn) IsValid() bool {
	switch e {
	case LimitSpeedLineTimeSelectColumnID, LimitSpeedLineTimeSelectColumnLimitSpeedLineTimeID, LimitSpeedLineTimeSelectColumnLimitSpeedLineID, LimitSpeedLineTimeSelectColumnStartTime, LimitSpeedLineTimeSelectColumnEndTime, LimitSpeedLineTimeSelectColumnCreatedAt, LimitSpeedLineTimeSelectColumnCreatedBy, LimitSpeedLineTimeSelectColumnUpdatedAt, LimitSpeedLineTimeSelectColumnUpdatedBy, LimitSpeedLineTimeSelectColumnDeletedAt, LimitSpeedLineTimeSelectColumnDeletedBy, LimitSpeedLineTimeSelectColumnIsDeleted, LimitSpeedLineTimeSelectColumnSpeed:
		return true
	}
	return false
}

func (e LimitSpeedLineTimeSelectColumn) String() string {
	return string(e)
}

func (e *LimitSpeedLineTimeSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LimitSpeedLineTimeSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LimitSpeedLineTimeSelectColumn", str)
	}
	return nil
}

func (e LimitSpeedLineTimeSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type LimitSpeedPlanDetailSelectColumn string

const (
	// ID
	LimitSpeedPlanDetailSelectColumnID LimitSpeedPlanDetailSelectColumn = "id"
	// 道路限速方案详细信息ID
	LimitSpeedPlanDetailSelectColumnDetailID LimitSpeedPlanDetailSelectColumn = "detail_id"
	// 道路限速方案ID
	LimitSpeedPlanDetailSelectColumnPlanID LimitSpeedPlanDetailSelectColumn = "plan_id"
	// 是否晚上限速
	LimitSpeedPlanDetailSelectColumnIsNightLimit LimitSpeedPlanDetailSelectColumn = "is_night_limit"
	// 晚上限速阀值
	LimitSpeedPlanDetailSelectColumnNightLimitSpeed LimitSpeedPlanDetailSelectColumn = "night_limit_speed"
	// 晚上开始时间
	LimitSpeedPlanDetailSelectColumnNightTimeBegin LimitSpeedPlanDetailSelectColumn = "night_time_begin"
	// 晚上截止时间
	LimitSpeedPlanDetailSelectColumnNightTimeEnd LimitSpeedPlanDetailSelectColumn = "night_time_end"
	// 道路等级
	LimitSpeedPlanDetailSelectColumnRoadLevel LimitSpeedPlanDetailSelectColumn = "road_level"
	// 限速值
	LimitSpeedPlanDetailSelectColumnLimitSpeed LimitSpeedPlanDetailSelectColumn = "limit_speed"
	// 创建时间
	LimitSpeedPlanDetailSelectColumnCreatedAt LimitSpeedPlanDetailSelectColumn = "created_at"
	// 创建人
	LimitSpeedPlanDetailSelectColumnCreatedBy LimitSpeedPlanDetailSelectColumn = "created_by"
	// 更新时间
	LimitSpeedPlanDetailSelectColumnUpdatedAt LimitSpeedPlanDetailSelectColumn = "updated_at"
	// 更新人
	LimitSpeedPlanDetailSelectColumnUpdatedBy LimitSpeedPlanDetailSelectColumn = "updated_by"
	// 删除时间
	LimitSpeedPlanDetailSelectColumnDeletedAt LimitSpeedPlanDetailSelectColumn = "deleted_at"
	// 删除人
	LimitSpeedPlanDetailSelectColumnDeletedBy LimitSpeedPlanDetailSelectColumn = "deleted_by"
	// 是否删除
	LimitSpeedPlanDetailSelectColumnIsDeleted LimitSpeedPlanDetailSelectColumn = "is_deleted"
)

var AllLimitSpeedPlanDetailSelectColumn = []LimitSpeedPlanDetailSelectColumn{
	LimitSpeedPlanDetailSelectColumnID,
	LimitSpeedPlanDetailSelectColumnDetailID,
	LimitSpeedPlanDetailSelectColumnPlanID,
	LimitSpeedPlanDetailSelectColumnIsNightLimit,
	LimitSpeedPlanDetailSelectColumnNightLimitSpeed,
	LimitSpeedPlanDetailSelectColumnNightTimeBegin,
	LimitSpeedPlanDetailSelectColumnNightTimeEnd,
	LimitSpeedPlanDetailSelectColumnRoadLevel,
	LimitSpeedPlanDetailSelectColumnLimitSpeed,
	LimitSpeedPlanDetailSelectColumnCreatedAt,
	LimitSpeedPlanDetailSelectColumnCreatedBy,
	LimitSpeedPlanDetailSelectColumnUpdatedAt,
	LimitSpeedPlanDetailSelectColumnUpdatedBy,
	LimitSpeedPlanDetailSelectColumnDeletedAt,
	LimitSpeedPlanDetailSelectColumnDeletedBy,
	LimitSpeedPlanDetailSelectColumnIsDeleted,
}

func (e LimitSpeedPlanDetailSelectColumn) IsValid() bool {
	switch e {
	case LimitSpeedPlanDetailSelectColumnID, LimitSpeedPlanDetailSelectColumnDetailID, LimitSpeedPlanDetailSelectColumnPlanID, LimitSpeedPlanDetailSelectColumnIsNightLimit, LimitSpeedPlanDetailSelectColumnNightLimitSpeed, LimitSpeedPlanDetailSelectColumnNightTimeBegin, LimitSpeedPlanDetailSelectColumnNightTimeEnd, LimitSpeedPlanDetailSelectColumnRoadLevel, LimitSpeedPlanDetailSelectColumnLimitSpeed, LimitSpeedPlanDetailSelectColumnCreatedAt, LimitSpeedPlanDetailSelectColumnCreatedBy, LimitSpeedPlanDetailSelectColumnUpdatedAt, LimitSpeedPlanDetailSelectColumnUpdatedBy, LimitSpeedPlanDetailSelectColumnDeletedAt, LimitSpeedPlanDetailSelectColumnDeletedBy, LimitSpeedPlanDetailSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e LimitSpeedPlanDetailSelectColumn) String() string {
	return string(e)
}

func (e *LimitSpeedPlanDetailSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LimitSpeedPlanDetailSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LimitSpeedPlanDetailSelectColumn", str)
	}
	return nil
}

func (e LimitSpeedPlanDetailSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type LimitSpeedPlanSelectColumn string

const (
	// ID
	LimitSpeedPlanSelectColumnID LimitSpeedPlanSelectColumn = "id"
	// 限速方案ID
	LimitSpeedPlanSelectColumnLimitSpeedPlanID LimitSpeedPlanSelectColumn = "limit_speed_plan_id"
	// 企业ID
	LimitSpeedPlanSelectColumnEnterpriseID LimitSpeedPlanSelectColumn = "enterprise_id"
	// 方案名称
	LimitSpeedPlanSelectColumnPlanName LimitSpeedPlanSelectColumn = "plan_name"
	// 备注
	LimitSpeedPlanSelectColumnRemark LimitSpeedPlanSelectColumn = "remark"
	// 创建时间
	LimitSpeedPlanSelectColumnCreatedAt LimitSpeedPlanSelectColumn = "created_at"
	// 创建人
	LimitSpeedPlanSelectColumnCreatedBy LimitSpeedPlanSelectColumn = "created_by"
	// 更新时间
	LimitSpeedPlanSelectColumnUpdatedAt LimitSpeedPlanSelectColumn = "updated_at"
	// 更新人
	LimitSpeedPlanSelectColumnUpdatedBy LimitSpeedPlanSelectColumn = "updated_by"
	// 删除时间
	LimitSpeedPlanSelectColumnDeletedAt LimitSpeedPlanSelectColumn = "deleted_at"
	// 删除人
	LimitSpeedPlanSelectColumnDeletedBy LimitSpeedPlanSelectColumn = "deleted_by"
	// 是否删除
	LimitSpeedPlanSelectColumnIsDeleted LimitSpeedPlanSelectColumn = "is_deleted"
)

var AllLimitSpeedPlanSelectColumn = []LimitSpeedPlanSelectColumn{
	LimitSpeedPlanSelectColumnID,
	LimitSpeedPlanSelectColumnLimitSpeedPlanID,
	LimitSpeedPlanSelectColumnEnterpriseID,
	LimitSpeedPlanSelectColumnPlanName,
	LimitSpeedPlanSelectColumnRemark,
	LimitSpeedPlanSelectColumnCreatedAt,
	LimitSpeedPlanSelectColumnCreatedBy,
	LimitSpeedPlanSelectColumnUpdatedAt,
	LimitSpeedPlanSelectColumnUpdatedBy,
	LimitSpeedPlanSelectColumnDeletedAt,
	LimitSpeedPlanSelectColumnDeletedBy,
	LimitSpeedPlanSelectColumnIsDeleted,
}

func (e LimitSpeedPlanSelectColumn) IsValid() bool {
	switch e {
	case LimitSpeedPlanSelectColumnID, LimitSpeedPlanSelectColumnLimitSpeedPlanID, LimitSpeedPlanSelectColumnEnterpriseID, LimitSpeedPlanSelectColumnPlanName, LimitSpeedPlanSelectColumnRemark, LimitSpeedPlanSelectColumnCreatedAt, LimitSpeedPlanSelectColumnCreatedBy, LimitSpeedPlanSelectColumnUpdatedAt, LimitSpeedPlanSelectColumnUpdatedBy, LimitSpeedPlanSelectColumnDeletedAt, LimitSpeedPlanSelectColumnDeletedBy, LimitSpeedPlanSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e LimitSpeedPlanSelectColumn) String() string {
	return string(e)
}

func (e *LimitSpeedPlanSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LimitSpeedPlanSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LimitSpeedPlanSelectColumn", str)
	}
	return nil
}

func (e LimitSpeedPlanSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleNightTravelRecordSelectColumn string

const (
	// ID
	VehicleNightTravelRecordSelectColumnID VehicleNightTravelRecordSelectColumn = "id"
	// 车辆夜晚运行记录ID
	VehicleNightTravelRecordSelectColumnRecordID VehicleNightTravelRecordSelectColumn = "record_id"
	// 车辆ID
	VehicleNightTravelRecordSelectColumnVehicleID VehicleNightTravelRecordSelectColumn = "vehicle_id"
	// 所属企业ID
	VehicleNightTravelRecordSelectColumnEnterpriseID VehicleNightTravelRecordSelectColumn = "enterprise_id"
	// 运输路线ID
	VehicleNightTravelRecordSelectColumnRoute VehicleNightTravelRecordSelectColumn = "route"
	// 运营商ID
	VehicleNightTravelRecordSelectColumnSprgID VehicleNightTravelRecordSelectColumn = "sprg_id"
	// 车辆类型
	VehicleNightTravelRecordSelectColumnVehicleType VehicleNightTravelRecordSelectColumn = "vehicle_type"
	// 营运类型
	VehicleNightTravelRecordSelectColumnServiceType VehicleNightTravelRecordSelectColumn = "service_type"
	// 接驳开始时间
	VehicleNightTravelRecordSelectColumnRecordStartTime VehicleNightTravelRecordSelectColumn = "record_start_time"
	// 接驳结束时间
	VehicleNightTravelRecordSelectColumnRecordEndTime VehicleNightTravelRecordSelectColumn = "record_end_time"
	// 状态(1生效2未审核3审核不通过)
	VehicleNightTravelRecordSelectColumnStatus VehicleNightTravelRecordSelectColumn = "status"
	// 审核不通过原因
	VehicleNightTravelRecordSelectColumnCause VehicleNightTravelRecordSelectColumn = "cause"
	// 创建时间
	VehicleNightTravelRecordSelectColumnCreateAt VehicleNightTravelRecordSelectColumn = "create_at"
	// 创建人
	VehicleNightTravelRecordSelectColumnCreateBy VehicleNightTravelRecordSelectColumn = "create_by"
	// 更新时间
	VehicleNightTravelRecordSelectColumnUpdateAt VehicleNightTravelRecordSelectColumn = "update_at"
	// 更新人
	VehicleNightTravelRecordSelectColumnUpdateBy VehicleNightTravelRecordSelectColumn = "update_by"
	// 删除时间
	VehicleNightTravelRecordSelectColumnDeleteAt VehicleNightTravelRecordSelectColumn = "delete_at"
	// 删除人
	VehicleNightTravelRecordSelectColumnDeleteBy VehicleNightTravelRecordSelectColumn = "delete_by"
	// 是否删除
	VehicleNightTravelRecordSelectColumnIsDelete VehicleNightTravelRecordSelectColumn = "is_delete"
	// 备注
	VehicleNightTravelRecordSelectColumnRemark VehicleNightTravelRecordSelectColumn = "remark"
)

var AllVehicleNightTravelRecordSelectColumn = []VehicleNightTravelRecordSelectColumn{
	VehicleNightTravelRecordSelectColumnID,
	VehicleNightTravelRecordSelectColumnRecordID,
	VehicleNightTravelRecordSelectColumnVehicleID,
	VehicleNightTravelRecordSelectColumnEnterpriseID,
	VehicleNightTravelRecordSelectColumnRoute,
	VehicleNightTravelRecordSelectColumnSprgID,
	VehicleNightTravelRecordSelectColumnVehicleType,
	VehicleNightTravelRecordSelectColumnServiceType,
	VehicleNightTravelRecordSelectColumnRecordStartTime,
	VehicleNightTravelRecordSelectColumnRecordEndTime,
	VehicleNightTravelRecordSelectColumnStatus,
	VehicleNightTravelRecordSelectColumnCause,
	VehicleNightTravelRecordSelectColumnCreateAt,
	VehicleNightTravelRecordSelectColumnCreateBy,
	VehicleNightTravelRecordSelectColumnUpdateAt,
	VehicleNightTravelRecordSelectColumnUpdateBy,
	VehicleNightTravelRecordSelectColumnDeleteAt,
	VehicleNightTravelRecordSelectColumnDeleteBy,
	VehicleNightTravelRecordSelectColumnIsDelete,
	VehicleNightTravelRecordSelectColumnRemark,
}

func (e VehicleNightTravelRecordSelectColumn) IsValid() bool {
	switch e {
	case VehicleNightTravelRecordSelectColumnID, VehicleNightTravelRecordSelectColumnRecordID, VehicleNightTravelRecordSelectColumnVehicleID, VehicleNightTravelRecordSelectColumnEnterpriseID, VehicleNightTravelRecordSelectColumnRoute, VehicleNightTravelRecordSelectColumnSprgID, VehicleNightTravelRecordSelectColumnVehicleType, VehicleNightTravelRecordSelectColumnServiceType, VehicleNightTravelRecordSelectColumnRecordStartTime, VehicleNightTravelRecordSelectColumnRecordEndTime, VehicleNightTravelRecordSelectColumnStatus, VehicleNightTravelRecordSelectColumnCause, VehicleNightTravelRecordSelectColumnCreateAt, VehicleNightTravelRecordSelectColumnCreateBy, VehicleNightTravelRecordSelectColumnUpdateAt, VehicleNightTravelRecordSelectColumnUpdateBy, VehicleNightTravelRecordSelectColumnDeleteAt, VehicleNightTravelRecordSelectColumnDeleteBy, VehicleNightTravelRecordSelectColumnIsDelete, VehicleNightTravelRecordSelectColumnRemark:
		return true
	}
	return false
}

func (e VehicleNightTravelRecordSelectColumn) String() string {
	return string(e)
}

func (e *VehicleNightTravelRecordSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleNightTravelRecordSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleNightTravelRecordSelectColumn", str)
	}
	return nil
}

func (e VehicleNightTravelRecordSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleStopTravelRecordSelectColumn string

const (
	// ID
	VehicleStopTravelRecordSelectColumnID VehicleStopTravelRecordSelectColumn = "id"
	// 车辆停运报备记录ID
	VehicleStopTravelRecordSelectColumnRecordID VehicleStopTravelRecordSelectColumn = "record_id"
	// 报备单据号
	VehicleStopTravelRecordSelectColumnBillID VehicleStopTravelRecordSelectColumn = "bill_id"
	// 报备起始时间
	VehicleStopTravelRecordSelectColumnRecordStartTime VehicleStopTravelRecordSelectColumn = "record_start_time"
	// 报备结束时间
	VehicleStopTravelRecordSelectColumnRecordEndTime VehicleStopTravelRecordSelectColumn = "record_end_time"
	// 报备人ID
	VehicleStopTravelRecordSelectColumnRecordUserID VehicleStopTravelRecordSelectColumn = "record_user_id"
	// 是否生效
	VehicleStopTravelRecordSelectColumnIsEffect VehicleStopTravelRecordSelectColumn = "is_effect"
	// 生效起始时间
	VehicleStopTravelRecordSelectColumnEffectStartTime VehicleStopTravelRecordSelectColumn = "effect_start_time"
	// 生效结束时间
	VehicleStopTravelRecordSelectColumnEffectEndTime VehicleStopTravelRecordSelectColumn = "effect_end_time"
	// 车辆ID
	VehicleStopTravelRecordSelectColumnVehicleID VehicleStopTravelRecordSelectColumn = "vehicle_id"
	// 停运原因
	VehicleStopTravelRecordSelectColumnCause VehicleStopTravelRecordSelectColumn = "cause"
	// 创建时间
	VehicleStopTravelRecordSelectColumnCreateAt VehicleStopTravelRecordSelectColumn = "create_at"
	// 创建人
	VehicleStopTravelRecordSelectColumnCreateBy VehicleStopTravelRecordSelectColumn = "create_by"
	// 更新时间
	VehicleStopTravelRecordSelectColumnUpdateAt VehicleStopTravelRecordSelectColumn = "update_at"
	// 更新人
	VehicleStopTravelRecordSelectColumnUpdateBy VehicleStopTravelRecordSelectColumn = "update_by"
	// 删除时间
	VehicleStopTravelRecordSelectColumnDeleteAt VehicleStopTravelRecordSelectColumn = "delete_at"
	// 删除人
	VehicleStopTravelRecordSelectColumnDeleteBy VehicleStopTravelRecordSelectColumn = "delete_by"
	// 是否删除
	VehicleStopTravelRecordSelectColumnIsDelete VehicleStopTravelRecordSelectColumn = "is_delete"
)

var AllVehicleStopTravelRecordSelectColumn = []VehicleStopTravelRecordSelectColumn{
	VehicleStopTravelRecordSelectColumnID,
	VehicleStopTravelRecordSelectColumnRecordID,
	VehicleStopTravelRecordSelectColumnBillID,
	VehicleStopTravelRecordSelectColumnRecordStartTime,
	VehicleStopTravelRecordSelectColumnRecordEndTime,
	VehicleStopTravelRecordSelectColumnRecordUserID,
	VehicleStopTravelRecordSelectColumnIsEffect,
	VehicleStopTravelRecordSelectColumnEffectStartTime,
	VehicleStopTravelRecordSelectColumnEffectEndTime,
	VehicleStopTravelRecordSelectColumnVehicleID,
	VehicleStopTravelRecordSelectColumnCause,
	VehicleStopTravelRecordSelectColumnCreateAt,
	VehicleStopTravelRecordSelectColumnCreateBy,
	VehicleStopTravelRecordSelectColumnUpdateAt,
	VehicleStopTravelRecordSelectColumnUpdateBy,
	VehicleStopTravelRecordSelectColumnDeleteAt,
	VehicleStopTravelRecordSelectColumnDeleteBy,
	VehicleStopTravelRecordSelectColumnIsDelete,
}

func (e VehicleStopTravelRecordSelectColumn) IsValid() bool {
	switch e {
	case VehicleStopTravelRecordSelectColumnID, VehicleStopTravelRecordSelectColumnRecordID, VehicleStopTravelRecordSelectColumnBillID, VehicleStopTravelRecordSelectColumnRecordStartTime, VehicleStopTravelRecordSelectColumnRecordEndTime, VehicleStopTravelRecordSelectColumnRecordUserID, VehicleStopTravelRecordSelectColumnIsEffect, VehicleStopTravelRecordSelectColumnEffectStartTime, VehicleStopTravelRecordSelectColumnEffectEndTime, VehicleStopTravelRecordSelectColumnVehicleID, VehicleStopTravelRecordSelectColumnCause, VehicleStopTravelRecordSelectColumnCreateAt, VehicleStopTravelRecordSelectColumnCreateBy, VehicleStopTravelRecordSelectColumnUpdateAt, VehicleStopTravelRecordSelectColumnUpdateBy, VehicleStopTravelRecordSelectColumnDeleteAt, VehicleStopTravelRecordSelectColumnDeleteBy, VehicleStopTravelRecordSelectColumnIsDelete:
		return true
	}
	return false
}

func (e VehicleStopTravelRecordSelectColumn) String() string {
	return string(e)
}

func (e *VehicleStopTravelRecordSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleStopTravelRecordSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleStopTravelRecordSelectColumn", str)
	}
	return nil
}

func (e VehicleStopTravelRecordSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
