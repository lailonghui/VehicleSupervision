// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/driving/graph/model"
	model1 "VehicleSupervision/internal/modules/driving/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ControlLine struct {
		ApplyReason   func(childComplexity int) int
		CheckStatus   func(childComplexity int) int
		CheckTime     func(childComplexity int) int
		CheckUserID   func(childComplexity int) int
		ControlLevel  func(childComplexity int) int
		ControlLineID func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		DistrictID    func(childComplexity int) int
		GisData       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		LineName      func(childComplexity int) int
		LineType      func(childComplexity int) int
		RejectReason  func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
	}

	ControlLineAggregate struct {
		Aggregate func(childComplexity int) int
	}

	ControlLineAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ControlLineAvgFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	ControlLineMaxFields struct {
		ApplyReason   func(childComplexity int) int
		CheckStatus   func(childComplexity int) int
		CheckTime     func(childComplexity int) int
		CheckUserID   func(childComplexity int) int
		ControlLevel  func(childComplexity int) int
		ControlLineID func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		DistrictID    func(childComplexity int) int
		GisData       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		LineName      func(childComplexity int) int
		LineType      func(childComplexity int) int
		RejectReason  func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
	}

	ControlLineMinFields struct {
		ApplyReason   func(childComplexity int) int
		CheckStatus   func(childComplexity int) int
		CheckTime     func(childComplexity int) int
		CheckUserID   func(childComplexity int) int
		ControlLevel  func(childComplexity int) int
		ControlLineID func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		DistrictID    func(childComplexity int) int
		GisData       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		LineName      func(childComplexity int) int
		LineType      func(childComplexity int) int
		RejectReason  func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
	}

	ControlLineMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ControlLineStddevFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	ControlLineStddevPopFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	ControlLineStddevSampFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	ControlLineSumFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	ControlLineTime struct {
		ControlLineID     func(childComplexity int) int
		ControlLineTimeID func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		EndTime           func(childComplexity int) int
		ID                func(childComplexity int) int
		IsDelete          func(childComplexity int) int
		StartTime         func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
	}

	ControlLineTimeAggregate struct {
		Aggregate func(childComplexity int) int
	}

	ControlLineTimeAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ControlLineTimeAvgFields struct {
		ID func(childComplexity int) int
	}

	ControlLineTimeMaxFields struct {
		ControlLineID     func(childComplexity int) int
		ControlLineTimeID func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		EndTime           func(childComplexity int) int
		ID                func(childComplexity int) int
		IsDelete          func(childComplexity int) int
		StartTime         func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
	}

	ControlLineTimeMinFields struct {
		ControlLineID     func(childComplexity int) int
		ControlLineTimeID func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		EndTime           func(childComplexity int) int
		ID                func(childComplexity int) int
		IsDelete          func(childComplexity int) int
		StartTime         func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
	}

	ControlLineTimeMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ControlLineTimeStddevFields struct {
		ID func(childComplexity int) int
	}

	ControlLineTimeStddevPopFields struct {
		ID func(childComplexity int) int
	}

	ControlLineTimeStddevSampFields struct {
		ID func(childComplexity int) int
	}

	ControlLineTimeSumFields struct {
		ID func(childComplexity int) int
	}

	ControlLineTimeVarPopFields struct {
		ID func(childComplexity int) int
	}

	ControlLineTimeVarSampFields struct {
		ID func(childComplexity int) int
	}

	ControlLineTimeVarianceFields struct {
		ID func(childComplexity int) int
	}

	ControlLineVarPopFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	ControlLineVarSampFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	ControlLineVarianceFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	EcdFileCheckHis struct {
		CheckStatus func(childComplexity int) int
		CreateAt    func(childComplexity int) int
		CreateBy    func(childComplexity int) int
		DeleteAt    func(childComplexity int) int
		DeleteBy    func(childComplexity int) int
		FileMainID  func(childComplexity int) int
		HisID       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDelete    func(childComplexity int) int
		OperTime    func(childComplexity int) int
		OperType    func(childComplexity int) int
		RecTime     func(childComplexity int) int
		Remark      func(childComplexity int) int
		Suggest     func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	EcdFileCheckHisAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EcdFileCheckHisAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EcdFileCheckHisAvgFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
		OperType    func(childComplexity int) int
	}

	EcdFileCheckHisMaxFields struct {
		CheckStatus func(childComplexity int) int
		CreateAt    func(childComplexity int) int
		CreateBy    func(childComplexity int) int
		DeleteAt    func(childComplexity int) int
		DeleteBy    func(childComplexity int) int
		FileMainID  func(childComplexity int) int
		HisID       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDelete    func(childComplexity int) int
		OperTime    func(childComplexity int) int
		OperType    func(childComplexity int) int
		RecTime     func(childComplexity int) int
		Remark      func(childComplexity int) int
		Suggest     func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	EcdFileCheckHisMinFields struct {
		CheckStatus func(childComplexity int) int
		CreateAt    func(childComplexity int) int
		CreateBy    func(childComplexity int) int
		DeleteAt    func(childComplexity int) int
		DeleteBy    func(childComplexity int) int
		FileMainID  func(childComplexity int) int
		HisID       func(childComplexity int) int
		ID          func(childComplexity int) int
		IsDelete    func(childComplexity int) int
		OperTime    func(childComplexity int) int
		OperType    func(childComplexity int) int
		RecTime     func(childComplexity int) int
		Remark      func(childComplexity int) int
		Suggest     func(childComplexity int) int
		UpdateAt    func(childComplexity int) int
		UpdateBy    func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	EcdFileCheckHisMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EcdFileCheckHisStddevFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
		OperType    func(childComplexity int) int
	}

	EcdFileCheckHisStddevPopFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
		OperType    func(childComplexity int) int
	}

	EcdFileCheckHisStddevSampFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
		OperType    func(childComplexity int) int
	}

	EcdFileCheckHisSumFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
		OperType    func(childComplexity int) int
	}

	EcdFileCheckHisVarPopFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
		OperType    func(childComplexity int) int
	}

	EcdFileCheckHisVarSampFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
		OperType    func(childComplexity int) int
	}

	EcdFileCheckHisVarianceFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
		OperType    func(childComplexity int) int
	}

	EcdFileDistrict struct {
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		DistrictID     func(childComplexity int) int
		FileDistrictID func(childComplexity int) int
		FileMainID     func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
	}

	EcdFileDistrictAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EcdFileDistrictAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EcdFileDistrictAvgFields struct {
		ID func(childComplexity int) int
	}

	EcdFileDistrictMaxFields struct {
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		DistrictID     func(childComplexity int) int
		FileDistrictID func(childComplexity int) int
		FileMainID     func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
	}

	EcdFileDistrictMinFields struct {
		CreateAt       func(childComplexity int) int
		CreateBy       func(childComplexity int) int
		DeleteAt       func(childComplexity int) int
		DeleteBy       func(childComplexity int) int
		DistrictID     func(childComplexity int) int
		FileDistrictID func(childComplexity int) int
		FileMainID     func(childComplexity int) int
		ID             func(childComplexity int) int
		IsDelete       func(childComplexity int) int
		UpdateAt       func(childComplexity int) int
		UpdateBy       func(childComplexity int) int
	}

	EcdFileDistrictMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EcdFileDistrictStddevFields struct {
		ID func(childComplexity int) int
	}

	EcdFileDistrictStddevPopFields struct {
		ID func(childComplexity int) int
	}

	EcdFileDistrictStddevSampFields struct {
		ID func(childComplexity int) int
	}

	EcdFileDistrictSumFields struct {
		ID func(childComplexity int) int
	}

	EcdFileDistrictVarPopFields struct {
		ID func(childComplexity int) int
	}

	EcdFileDistrictVarSampFields struct {
		ID func(childComplexity int) int
	}

	EcdFileDistrictVarianceFields struct {
		ID func(childComplexity int) int
	}

	EcdFileLinePoint struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		FileMainID      func(childComplexity int) int
		GpsPoint        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		LinePointID     func(childComplexity int) int
		LinePointName   func(childComplexity int) int
		LinePointRemark func(childComplexity int) int
		MapPoint        func(childComplexity int) int
		PointType       func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	EcdFileLinePointAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EcdFileLinePointAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EcdFileLinePointAvgFields struct {
		ID        func(childComplexity int) int
		PointType func(childComplexity int) int
	}

	EcdFileLinePointMaxFields struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		FileMainID      func(childComplexity int) int
		GpsPoint        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		LinePointID     func(childComplexity int) int
		LinePointName   func(childComplexity int) int
		LinePointRemark func(childComplexity int) int
		MapPoint        func(childComplexity int) int
		PointType       func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	EcdFileLinePointMinFields struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		FileMainID      func(childComplexity int) int
		GpsPoint        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		LinePointID     func(childComplexity int) int
		LinePointName   func(childComplexity int) int
		LinePointRemark func(childComplexity int) int
		MapPoint        func(childComplexity int) int
		PointType       func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	EcdFileLinePointMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EcdFileLinePointStddevFields struct {
		ID        func(childComplexity int) int
		PointType func(childComplexity int) int
	}

	EcdFileLinePointStddevPopFields struct {
		ID        func(childComplexity int) int
		PointType func(childComplexity int) int
	}

	EcdFileLinePointStddevSampFields struct {
		ID        func(childComplexity int) int
		PointType func(childComplexity int) int
	}

	EcdFileLinePointSumFields struct {
		ID        func(childComplexity int) int
		PointType func(childComplexity int) int
	}

	EcdFileLinePointVarPopFields struct {
		ID        func(childComplexity int) int
		PointType func(childComplexity int) int
	}

	EcdFileLinePointVarSampFields struct {
		ID        func(childComplexity int) int
		PointType func(childComplexity int) int
	}

	EcdFileLinePointVarianceFields struct {
		ID        func(childComplexity int) int
		PointType func(childComplexity int) int
	}

	EcdFileMain struct {
		AddDistrictID               func(childComplexity int) int
		CheckStatus                 func(childComplexity int) int
		CheckTime                   func(childComplexity int) int
		ClientReportTime            func(childComplexity int) int
		ConstructGarbageAllowFile   func(childComplexity int) int
		ConstructID                 func(childComplexity int) int
		ConstructProveFile          func(childComplexity int) int
		ConstructSiteEnterancePhoto func(childComplexity int) int
		ConstructTitle              func(childComplexity int) int
		ConstructWashCarPlacePhoto  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DistrictID                  func(childComplexity int) int
		DoConstructProveFile        func(childComplexity int) int
		EndPointCheckerSign         func(childComplexity int) int
		EndState                    func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		FileID                      func(childComplexity int) int
		FileMainID                  func(childComplexity int) int
		FirstCrossPid               func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsCrossDistrict             func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsMatchConstruction         func(childComplexity int) int
		PhoneNum                    func(childComplexity int) int
		PlanEndTime                 func(childComplexity int) int
		PlanStartTime               func(childComplexity int) int
		PointState                  func(childComplexity int) int
		Remark                      func(childComplexity int) int
		ReturnSuggest               func(childComplexity int) int
		RouteBoardPromiseFile       func(childComplexity int) int
		RouteCheckerSign            func(childComplexity int) int
		SpeedTimeCheckerSign        func(childComplexity int) int
		StartPointCheckerSign       func(childComplexity int) int
		SubPackageProveFile         func(childComplexity int) int
		Title                       func(childComplexity int) int
		TrafficProveFile            func(childComplexity int) int
		TrafficeObjectPromiseFile   func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
	}

	EcdFileMainAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EcdFileMainAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EcdFileMainAvgFields struct {
		CheckStatus func(childComplexity int) int
		EndState    func(childComplexity int) int
		ID          func(childComplexity int) int
		PointState  func(childComplexity int) int
	}

	EcdFileMainMaxFields struct {
		AddDistrictID               func(childComplexity int) int
		CheckStatus                 func(childComplexity int) int
		CheckTime                   func(childComplexity int) int
		ClientReportTime            func(childComplexity int) int
		ConstructGarbageAllowFile   func(childComplexity int) int
		ConstructID                 func(childComplexity int) int
		ConstructProveFile          func(childComplexity int) int
		ConstructSiteEnterancePhoto func(childComplexity int) int
		ConstructTitle              func(childComplexity int) int
		ConstructWashCarPlacePhoto  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DistrictID                  func(childComplexity int) int
		DoConstructProveFile        func(childComplexity int) int
		EndPointCheckerSign         func(childComplexity int) int
		EndState                    func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		FileID                      func(childComplexity int) int
		FileMainID                  func(childComplexity int) int
		FirstCrossPid               func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsCrossDistrict             func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsMatchConstruction         func(childComplexity int) int
		PhoneNum                    func(childComplexity int) int
		PlanEndTime                 func(childComplexity int) int
		PlanStartTime               func(childComplexity int) int
		PointState                  func(childComplexity int) int
		Remark                      func(childComplexity int) int
		ReturnSuggest               func(childComplexity int) int
		RouteBoardPromiseFile       func(childComplexity int) int
		RouteCheckerSign            func(childComplexity int) int
		SpeedTimeCheckerSign        func(childComplexity int) int
		StartPointCheckerSign       func(childComplexity int) int
		SubPackageProveFile         func(childComplexity int) int
		Title                       func(childComplexity int) int
		TrafficProveFile            func(childComplexity int) int
		TrafficeObjectPromiseFile   func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
	}

	EcdFileMainMinFields struct {
		AddDistrictID               func(childComplexity int) int
		CheckStatus                 func(childComplexity int) int
		CheckTime                   func(childComplexity int) int
		ClientReportTime            func(childComplexity int) int
		ConstructGarbageAllowFile   func(childComplexity int) int
		ConstructID                 func(childComplexity int) int
		ConstructProveFile          func(childComplexity int) int
		ConstructSiteEnterancePhoto func(childComplexity int) int
		ConstructTitle              func(childComplexity int) int
		ConstructWashCarPlacePhoto  func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DistrictID                  func(childComplexity int) int
		DoConstructProveFile        func(childComplexity int) int
		EndPointCheckerSign         func(childComplexity int) int
		EndState                    func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		FileID                      func(childComplexity int) int
		FileMainID                  func(childComplexity int) int
		FirstCrossPid               func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsCrossDistrict             func(childComplexity int) int
		IsDelete                    func(childComplexity int) int
		IsMatchConstruction         func(childComplexity int) int
		PhoneNum                    func(childComplexity int) int
		PlanEndTime                 func(childComplexity int) int
		PlanStartTime               func(childComplexity int) int
		PointState                  func(childComplexity int) int
		Remark                      func(childComplexity int) int
		ReturnSuggest               func(childComplexity int) int
		RouteBoardPromiseFile       func(childComplexity int) int
		RouteCheckerSign            func(childComplexity int) int
		SpeedTimeCheckerSign        func(childComplexity int) int
		StartPointCheckerSign       func(childComplexity int) int
		SubPackageProveFile         func(childComplexity int) int
		Title                       func(childComplexity int) int
		TrafficProveFile            func(childComplexity int) int
		TrafficeObjectPromiseFile   func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
	}

	EcdFileMainMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EcdFileMainStddevFields struct {
		CheckStatus func(childComplexity int) int
		EndState    func(childComplexity int) int
		ID          func(childComplexity int) int
		PointState  func(childComplexity int) int
	}

	EcdFileMainStddevPopFields struct {
		CheckStatus func(childComplexity int) int
		EndState    func(childComplexity int) int
		ID          func(childComplexity int) int
		PointState  func(childComplexity int) int
	}

	EcdFileMainStddevSampFields struct {
		CheckStatus func(childComplexity int) int
		EndState    func(childComplexity int) int
		ID          func(childComplexity int) int
		PointState  func(childComplexity int) int
	}

	EcdFileMainSub struct {
		Address               func(childComplexity int) int
		ConstructDirectorName func(childComplexity int) int
		ConstructPhone        func(childComplexity int) int
		ConstructProveNum     func(childComplexity int) int
		ConstructUnit         func(childComplexity int) int
		ContractDirectorName  func(childComplexity int) int
		ContractPhone         func(childComplexity int) int
		ContractProveNum      func(childComplexity int) int
		ContractUnit          func(childComplexity int) int
		CreateAt              func(childComplexity int) int
		CreateBy              func(childComplexity int) int
		DeleteAt              func(childComplexity int) int
		DeleteBy              func(childComplexity int) int
		Facts                 func(childComplexity int) int
		FileMainID            func(childComplexity int) int
		FileMainSubID         func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsDelete              func(childComplexity int) int
		PackageDirectorName   func(childComplexity int) int
		PackagePhone          func(childComplexity int) int
		PackageProveNum       func(childComplexity int) int
		PlanDealArea          func(childComplexity int) int
		PlanEndTime           func(childComplexity int) int
		PlanStartTime         func(childComplexity int) int
		PlanTransLines        func(childComplexity int) int
		PlanTransVolume       func(childComplexity int) int
		SubPackageUnit        func(childComplexity int) int
		TrafficDirectorName   func(childComplexity int) int
		TrafficPhone          func(childComplexity int) int
		TrafficProveNum       func(childComplexity int) int
		TrafficUnit           func(childComplexity int) int
		UpdateAt              func(childComplexity int) int
		UpdateBy              func(childComplexity int) int
		WlType                func(childComplexity int) int
	}

	EcdFileMainSubAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EcdFileMainSubAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EcdFileMainSubAvgFields struct {
		ID     func(childComplexity int) int
		WlType func(childComplexity int) int
	}

	EcdFileMainSubMaxFields struct {
		Address               func(childComplexity int) int
		ConstructDirectorName func(childComplexity int) int
		ConstructPhone        func(childComplexity int) int
		ConstructProveNum     func(childComplexity int) int
		ConstructUnit         func(childComplexity int) int
		ContractDirectorName  func(childComplexity int) int
		ContractPhone         func(childComplexity int) int
		ContractProveNum      func(childComplexity int) int
		ContractUnit          func(childComplexity int) int
		CreateAt              func(childComplexity int) int
		CreateBy              func(childComplexity int) int
		DeleteAt              func(childComplexity int) int
		DeleteBy              func(childComplexity int) int
		Facts                 func(childComplexity int) int
		FileMainID            func(childComplexity int) int
		FileMainSubID         func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsDelete              func(childComplexity int) int
		PackageDirectorName   func(childComplexity int) int
		PackagePhone          func(childComplexity int) int
		PackageProveNum       func(childComplexity int) int
		PlanDealArea          func(childComplexity int) int
		PlanEndTime           func(childComplexity int) int
		PlanStartTime         func(childComplexity int) int
		PlanTransLines        func(childComplexity int) int
		PlanTransVolume       func(childComplexity int) int
		SubPackageUnit        func(childComplexity int) int
		TrafficDirectorName   func(childComplexity int) int
		TrafficPhone          func(childComplexity int) int
		TrafficProveNum       func(childComplexity int) int
		TrafficUnit           func(childComplexity int) int
		UpdateAt              func(childComplexity int) int
		UpdateBy              func(childComplexity int) int
		WlType                func(childComplexity int) int
	}

	EcdFileMainSubMinFields struct {
		Address               func(childComplexity int) int
		ConstructDirectorName func(childComplexity int) int
		ConstructPhone        func(childComplexity int) int
		ConstructProveNum     func(childComplexity int) int
		ConstructUnit         func(childComplexity int) int
		ContractDirectorName  func(childComplexity int) int
		ContractPhone         func(childComplexity int) int
		ContractProveNum      func(childComplexity int) int
		ContractUnit          func(childComplexity int) int
		CreateAt              func(childComplexity int) int
		CreateBy              func(childComplexity int) int
		DeleteAt              func(childComplexity int) int
		DeleteBy              func(childComplexity int) int
		Facts                 func(childComplexity int) int
		FileMainID            func(childComplexity int) int
		FileMainSubID         func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsDelete              func(childComplexity int) int
		PackageDirectorName   func(childComplexity int) int
		PackagePhone          func(childComplexity int) int
		PackageProveNum       func(childComplexity int) int
		PlanDealArea          func(childComplexity int) int
		PlanEndTime           func(childComplexity int) int
		PlanStartTime         func(childComplexity int) int
		PlanTransLines        func(childComplexity int) int
		PlanTransVolume       func(childComplexity int) int
		SubPackageUnit        func(childComplexity int) int
		TrafficDirectorName   func(childComplexity int) int
		TrafficPhone          func(childComplexity int) int
		TrafficProveNum       func(childComplexity int) int
		TrafficUnit           func(childComplexity int) int
		UpdateAt              func(childComplexity int) int
		UpdateBy              func(childComplexity int) int
		WlType                func(childComplexity int) int
	}

	EcdFileMainSubMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EcdFileMainSubStddevFields struct {
		ID     func(childComplexity int) int
		WlType func(childComplexity int) int
	}

	EcdFileMainSubStddevPopFields struct {
		ID     func(childComplexity int) int
		WlType func(childComplexity int) int
	}

	EcdFileMainSubStddevSampFields struct {
		ID     func(childComplexity int) int
		WlType func(childComplexity int) int
	}

	EcdFileMainSubSumFields struct {
		ID     func(childComplexity int) int
		WlType func(childComplexity int) int
	}

	EcdFileMainSubVarPopFields struct {
		ID     func(childComplexity int) int
		WlType func(childComplexity int) int
	}

	EcdFileMainSubVarSampFields struct {
		ID     func(childComplexity int) int
		WlType func(childComplexity int) int
	}

	EcdFileMainSubVarianceFields struct {
		ID     func(childComplexity int) int
		WlType func(childComplexity int) int
	}

	EcdFileMainSumFields struct {
		CheckStatus func(childComplexity int) int
		EndState    func(childComplexity int) int
		ID          func(childComplexity int) int
		PointState  func(childComplexity int) int
	}

	EcdFileMainVarPopFields struct {
		CheckStatus func(childComplexity int) int
		EndState    func(childComplexity int) int
		ID          func(childComplexity int) int
		PointState  func(childComplexity int) int
	}

	EcdFileMainVarSampFields struct {
		CheckStatus func(childComplexity int) int
		EndState    func(childComplexity int) int
		ID          func(childComplexity int) int
		PointState  func(childComplexity int) int
	}

	EcdFileMainVarianceFields struct {
		CheckStatus func(childComplexity int) int
		EndState    func(childComplexity int) int
		ID          func(childComplexity int) int
		PointState  func(childComplexity int) int
	}

	EcdFileVehicle struct {
		CheckStatus   func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		FileMainID    func(childComplexity int) int
		FileVehicleID func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
		VehicleID     func(childComplexity int) int
	}

	EcdFileVehicleAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EcdFileVehicleAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EcdFileVehicleAvgFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleMaxFields struct {
		CheckStatus   func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		FileMainID    func(childComplexity int) int
		FileVehicleID func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
		VehicleID     func(childComplexity int) int
	}

	EcdFileVehicleMinFields struct {
		CheckStatus   func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		FileMainID    func(childComplexity int) int
		FileVehicleID func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
		VehicleID     func(childComplexity int) int
	}

	EcdFileVehicleMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EcdFileVehicleStddevFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleStddevPopFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleStddevSampFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleSumFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleTime struct {
		CheckStatus   func(childComplexity int) int
		CheckTime     func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		EndDate       func(childComplexity int) int
		EndTime       func(childComplexity int) int
		FileMainID    func(childComplexity int) int
		ID            func(childComplexity int) int
		IsCheck       func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		LineID        func(childComplexity int) int
		StartDate     func(childComplexity int) int
		StartTime     func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
		VechileID     func(childComplexity int) int
		VehicleTimeID func(childComplexity int) int
	}

	EcdFileVehicleTimeAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EcdFileVehicleTimeAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EcdFileVehicleTimeAvgFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleTimeMaxFields struct {
		CheckStatus   func(childComplexity int) int
		CheckTime     func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		EndDate       func(childComplexity int) int
		EndTime       func(childComplexity int) int
		FileMainID    func(childComplexity int) int
		ID            func(childComplexity int) int
		IsCheck       func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		LineID        func(childComplexity int) int
		StartDate     func(childComplexity int) int
		StartTime     func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
		VechileID     func(childComplexity int) int
		VehicleTimeID func(childComplexity int) int
	}

	EcdFileVehicleTimeMinFields struct {
		CheckStatus   func(childComplexity int) int
		CheckTime     func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		EndDate       func(childComplexity int) int
		EndTime       func(childComplexity int) int
		FileMainID    func(childComplexity int) int
		ID            func(childComplexity int) int
		IsCheck       func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		LineID        func(childComplexity int) int
		StartDate     func(childComplexity int) int
		StartTime     func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
		VechileID     func(childComplexity int) int
		VehicleTimeID func(childComplexity int) int
	}

	EcdFileVehicleTimeMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EcdFileVehicleTimeStddevFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleTimeStddevPopFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleTimeStddevSampFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleTimeSumFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleTimeVarPopFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleTimeVarSampFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleTimeVarianceFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleVarPopFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleVarSampFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdFileVehicleVarianceFields struct {
		CheckStatus func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	EcdLine struct {
		AuditTime     func(childComplexity int) int
		AuditUserID   func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		EnterpriseID  func(childComplexity int) int
		GisData       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		IsResolveDesc func(childComplexity int) int
		LineDesc      func(childComplexity int) int
		LineID        func(childComplexity int) int
		LineName      func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
	}

	EcdLineAggregate struct {
		Aggregate func(childComplexity int) int
	}

	EcdLineAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EcdLineAvgFields struct {
		ID func(childComplexity int) int
	}

	EcdLineMaxFields struct {
		AuditTime     func(childComplexity int) int
		AuditUserID   func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		EnterpriseID  func(childComplexity int) int
		GisData       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		IsResolveDesc func(childComplexity int) int
		LineDesc      func(childComplexity int) int
		LineID        func(childComplexity int) int
		LineName      func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
	}

	EcdLineMinFields struct {
		AuditTime     func(childComplexity int) int
		AuditUserID   func(childComplexity int) int
		CreateAt      func(childComplexity int) int
		CreateBy      func(childComplexity int) int
		DeleteAt      func(childComplexity int) int
		DeleteBy      func(childComplexity int) int
		EnterpriseID  func(childComplexity int) int
		GisData       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDelete      func(childComplexity int) int
		IsResolveDesc func(childComplexity int) int
		LineDesc      func(childComplexity int) int
		LineID        func(childComplexity int) int
		LineName      func(childComplexity int) int
		UpdateAt      func(childComplexity int) int
		UpdateBy      func(childComplexity int) int
	}

	EcdLineMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EcdLineStddevFields struct {
		ID func(childComplexity int) int
	}

	EcdLineStddevPopFields struct {
		ID func(childComplexity int) int
	}

	EcdLineStddevSampFields struct {
		ID func(childComplexity int) int
	}

	EcdLineSumFields struct {
		ID func(childComplexity int) int
	}

	EcdLineVarPopFields struct {
		ID func(childComplexity int) int
	}

	EcdLineVarSampFields struct {
		ID func(childComplexity int) int
	}

	EcdLineVarianceFields struct {
		ID func(childComplexity int) int
	}

	ElectricFence struct {
		Address         func(childComplexity int) int
		AreaType        func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		DistrictID      func(childComplexity int) int
		ElectricFenceID func(childComplexity int) int
		FenceName       func(childComplexity int) int
		FenceType       func(childComplexity int) int
		GisData         func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	ElectricFenceAggregate struct {
		Aggregate func(childComplexity int) int
	}

	ElectricFenceAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ElectricFenceAvgFields struct {
		AreaType  func(childComplexity int) int
		FenceType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	ElectricFenceEnteranceRecord struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ElectricFenceID func(childComplexity int) int
		ID              func(childComplexity int) int
		InTime          func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsOnline        func(childComplexity int) int
		IsOut           func(childComplexity int) int
		OutTime         func(childComplexity int) int
		Position        func(childComplexity int) int
		RecordID        func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordAvgFields struct {
		ID func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordMaxFields struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ElectricFenceID func(childComplexity int) int
		ID              func(childComplexity int) int
		InTime          func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsOnline        func(childComplexity int) int
		IsOut           func(childComplexity int) int
		OutTime         func(childComplexity int) int
		Position        func(childComplexity int) int
		RecordID        func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordMinFields struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		ElectricFenceID func(childComplexity int) int
		ID              func(childComplexity int) int
		InTime          func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsOnline        func(childComplexity int) int
		IsOut           func(childComplexity int) int
		OutTime         func(childComplexity int) int
		Position        func(childComplexity int) int
		RecordID        func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordStddevFields struct {
		ID func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordStddevPopFields struct {
		ID func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordStddevSampFields struct {
		ID func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordSumFields struct {
		ID func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordVarPopFields struct {
		ID func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordVarSampFields struct {
		ID func(childComplexity int) int
	}

	ElectricFenceEnteranceRecordVarianceFields struct {
		ID func(childComplexity int) int
	}

	ElectricFenceMaxFields struct {
		Address         func(childComplexity int) int
		AreaType        func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		DistrictID      func(childComplexity int) int
		ElectricFenceID func(childComplexity int) int
		FenceName       func(childComplexity int) int
		FenceType       func(childComplexity int) int
		GisData         func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	ElectricFenceMinFields struct {
		Address         func(childComplexity int) int
		AreaType        func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		DistrictID      func(childComplexity int) int
		ElectricFenceID func(childComplexity int) int
		FenceName       func(childComplexity int) int
		FenceType       func(childComplexity int) int
		GisData         func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	ElectricFenceMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	ElectricFenceStddevFields struct {
		AreaType  func(childComplexity int) int
		FenceType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	ElectricFenceStddevPopFields struct {
		AreaType  func(childComplexity int) int
		FenceType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	ElectricFenceStddevSampFields struct {
		AreaType  func(childComplexity int) int
		FenceType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	ElectricFenceSumFields struct {
		AreaType  func(childComplexity int) int
		FenceType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	ElectricFenceVarPopFields struct {
		AreaType  func(childComplexity int) int
		FenceType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	ElectricFenceVarSampFields struct {
		AreaType  func(childComplexity int) int
		FenceType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	ElectricFenceVarianceFields struct {
		AreaType  func(childComplexity int) int
		FenceType func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	LimitSpeedLine struct {
		ApplyReason      func(childComplexity int) int
		CheckStatus      func(childComplexity int) int
		CheckTime        func(childComplexity int) int
		CheckUserID      func(childComplexity int) int
		ControlLevel     func(childComplexity int) int
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		DeleteAt         func(childComplexity int) int
		DeleteBy         func(childComplexity int) int
		DistrictID       func(childComplexity int) int
		GisData          func(childComplexity int) int
		ID               func(childComplexity int) int
		IsDelete         func(childComplexity int) int
		LimitSpeedLineID func(childComplexity int) int
		LineName         func(childComplexity int) int
		LineType         func(childComplexity int) int
		RejectReason     func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	LimitSpeedLineAggregate struct {
		Aggregate func(childComplexity int) int
	}

	LimitSpeedLineAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	LimitSpeedLineAvgFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	LimitSpeedLineMaxFields struct {
		ApplyReason      func(childComplexity int) int
		CheckStatus      func(childComplexity int) int
		CheckTime        func(childComplexity int) int
		CheckUserID      func(childComplexity int) int
		ControlLevel     func(childComplexity int) int
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		DeleteAt         func(childComplexity int) int
		DeleteBy         func(childComplexity int) int
		DistrictID       func(childComplexity int) int
		GisData          func(childComplexity int) int
		ID               func(childComplexity int) int
		IsDelete         func(childComplexity int) int
		LimitSpeedLineID func(childComplexity int) int
		LineName         func(childComplexity int) int
		LineType         func(childComplexity int) int
		RejectReason     func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	LimitSpeedLineMinFields struct {
		ApplyReason      func(childComplexity int) int
		CheckStatus      func(childComplexity int) int
		CheckTime        func(childComplexity int) int
		CheckUserID      func(childComplexity int) int
		ControlLevel     func(childComplexity int) int
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		DeleteAt         func(childComplexity int) int
		DeleteBy         func(childComplexity int) int
		DistrictID       func(childComplexity int) int
		GisData          func(childComplexity int) int
		ID               func(childComplexity int) int
		IsDelete         func(childComplexity int) int
		LimitSpeedLineID func(childComplexity int) int
		LineName         func(childComplexity int) int
		LineType         func(childComplexity int) int
		RejectReason     func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	LimitSpeedLineMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	LimitSpeedLineStddevFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	LimitSpeedLineStddevPopFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	LimitSpeedLineStddevSampFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	LimitSpeedLineSumFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	LimitSpeedLineTime struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		EndTime              func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		LimitSpeedLineID     func(childComplexity int) int
		LimitSpeedLineTimeID func(childComplexity int) int
		Speed                func(childComplexity int) int
		StartTime            func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	LimitSpeedLineTimeAggregate struct {
		Aggregate func(childComplexity int) int
	}

	LimitSpeedLineTimeAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	LimitSpeedLineTimeAvgFields struct {
		ID    func(childComplexity int) int
		Speed func(childComplexity int) int
	}

	LimitSpeedLineTimeMaxFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		EndTime              func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		LimitSpeedLineID     func(childComplexity int) int
		LimitSpeedLineTimeID func(childComplexity int) int
		Speed                func(childComplexity int) int
		StartTime            func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	LimitSpeedLineTimeMinFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		EndTime              func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		LimitSpeedLineID     func(childComplexity int) int
		LimitSpeedLineTimeID func(childComplexity int) int
		Speed                func(childComplexity int) int
		StartTime            func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	LimitSpeedLineTimeMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	LimitSpeedLineTimeStddevFields struct {
		ID    func(childComplexity int) int
		Speed func(childComplexity int) int
	}

	LimitSpeedLineTimeStddevPopFields struct {
		ID    func(childComplexity int) int
		Speed func(childComplexity int) int
	}

	LimitSpeedLineTimeStddevSampFields struct {
		ID    func(childComplexity int) int
		Speed func(childComplexity int) int
	}

	LimitSpeedLineTimeSumFields struct {
		ID    func(childComplexity int) int
		Speed func(childComplexity int) int
	}

	LimitSpeedLineTimeVarPopFields struct {
		ID    func(childComplexity int) int
		Speed func(childComplexity int) int
	}

	LimitSpeedLineTimeVarSampFields struct {
		ID    func(childComplexity int) int
		Speed func(childComplexity int) int
	}

	LimitSpeedLineTimeVarianceFields struct {
		ID    func(childComplexity int) int
		Speed func(childComplexity int) int
	}

	LimitSpeedLineVarPopFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	LimitSpeedLineVarSampFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	LimitSpeedLineVarianceFields struct {
		CheckStatus  func(childComplexity int) int
		ControlLevel func(childComplexity int) int
		ID           func(childComplexity int) int
		LineType     func(childComplexity int) int
	}

	LimitSpeedPlan struct {
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		DeleteAt         func(childComplexity int) int
		DeleteBy         func(childComplexity int) int
		EnterpriseID     func(childComplexity int) int
		ID               func(childComplexity int) int
		IsDelete         func(childComplexity int) int
		LimitSpeedPlanID func(childComplexity int) int
		PlanName         func(childComplexity int) int
		Remark           func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	LimitSpeedPlanAggregate struct {
		Aggregate func(childComplexity int) int
	}

	LimitSpeedPlanAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	LimitSpeedPlanAvgFields struct {
		ID func(childComplexity int) int
	}

	LimitSpeedPlanDetail struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		DetailID        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsNightLimit    func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		NightTimeBegin  func(childComplexity int) int
		NightTimeEnd    func(childComplexity int) int
		PlanID          func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	LimitSpeedPlanDetailAggregate struct {
		Aggregate func(childComplexity int) int
	}

	LimitSpeedPlanDetailAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	LimitSpeedPlanDetailAvgFields struct {
		ID              func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
	}

	LimitSpeedPlanDetailMaxFields struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		DetailID        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsNightLimit    func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		NightTimeBegin  func(childComplexity int) int
		NightTimeEnd    func(childComplexity int) int
		PlanID          func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	LimitSpeedPlanDetailMinFields struct {
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		DetailID        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsNightLimit    func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		NightTimeBegin  func(childComplexity int) int
		NightTimeEnd    func(childComplexity int) int
		PlanID          func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
	}

	LimitSpeedPlanDetailMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	LimitSpeedPlanDetailStddevFields struct {
		ID              func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
	}

	LimitSpeedPlanDetailStddevPopFields struct {
		ID              func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
	}

	LimitSpeedPlanDetailStddevSampFields struct {
		ID              func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
	}

	LimitSpeedPlanDetailSumFields struct {
		ID              func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
	}

	LimitSpeedPlanDetailVarPopFields struct {
		ID              func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
	}

	LimitSpeedPlanDetailVarSampFields struct {
		ID              func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
	}

	LimitSpeedPlanDetailVarianceFields struct {
		ID              func(childComplexity int) int
		LimitSpeed      func(childComplexity int) int
		NightLimitSpeed func(childComplexity int) int
		RoadLevel       func(childComplexity int) int
	}

	LimitSpeedPlanMaxFields struct {
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		DeleteAt         func(childComplexity int) int
		DeleteBy         func(childComplexity int) int
		EnterpriseID     func(childComplexity int) int
		ID               func(childComplexity int) int
		IsDelete         func(childComplexity int) int
		LimitSpeedPlanID func(childComplexity int) int
		PlanName         func(childComplexity int) int
		Remark           func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	LimitSpeedPlanMinFields struct {
		CreateAt         func(childComplexity int) int
		CreateBy         func(childComplexity int) int
		DeleteAt         func(childComplexity int) int
		DeleteBy         func(childComplexity int) int
		EnterpriseID     func(childComplexity int) int
		ID               func(childComplexity int) int
		IsDelete         func(childComplexity int) int
		LimitSpeedPlanID func(childComplexity int) int
		PlanName         func(childComplexity int) int
		Remark           func(childComplexity int) int
		UpdateAt         func(childComplexity int) int
		UpdateBy         func(childComplexity int) int
	}

	LimitSpeedPlanMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	LimitSpeedPlanStddevFields struct {
		ID func(childComplexity int) int
	}

	LimitSpeedPlanStddevPopFields struct {
		ID func(childComplexity int) int
	}

	LimitSpeedPlanStddevSampFields struct {
		ID func(childComplexity int) int
	}

	LimitSpeedPlanSumFields struct {
		ID func(childComplexity int) int
	}

	LimitSpeedPlanVarPopFields struct {
		ID func(childComplexity int) int
	}

	LimitSpeedPlanVarSampFields struct {
		ID func(childComplexity int) int
	}

	LimitSpeedPlanVarianceFields struct {
		ID func(childComplexity int) int
	}

	Mutation struct {
		DeleteControlLine                           func(childComplexity int, where model.ControlLineBoolExp) int
		DeleteControlLineByPk                       func(childComplexity int, id int64) int
		DeleteControlLineByUnionPk                  func(childComplexity int, controlLineID string) int
		DeleteControlLineTime                       func(childComplexity int, where model.ControlLineTimeBoolExp) int
		DeleteControlLineTimeByPk                   func(childComplexity int, id int64) int
		DeleteControlLineTimeByUnionPk              func(childComplexity int, controlLineTimeID string) int
		DeleteEcdFileCheckHis                       func(childComplexity int, where model.EcdFileCheckHisBoolExp) int
		DeleteEcdFileCheckHisByPk                   func(childComplexity int, id int64) int
		DeleteEcdFileCheckHisByUnionPk              func(childComplexity int, hisID string) int
		DeleteEcdFileDistrict                       func(childComplexity int, where model.EcdFileDistrictBoolExp) int
		DeleteEcdFileDistrictByPk                   func(childComplexity int, id int64) int
		DeleteEcdFileDistrictByUnionPk              func(childComplexity int, fileDistrictID string) int
		DeleteEcdFileLinePoint                      func(childComplexity int, where model.EcdFileLinePointBoolExp) int
		DeleteEcdFileLinePointByPk                  func(childComplexity int, id int64) int
		DeleteEcdFileLinePointByUnionPk             func(childComplexity int, linePointID string) int
		DeleteEcdFileMain                           func(childComplexity int, where model.EcdFileMainBoolExp) int
		DeleteEcdFileMainByPk                       func(childComplexity int, id int64) int
		DeleteEcdFileMainByUnionPk                  func(childComplexity int, fileMainID string) int
		DeleteEcdFileMainSub                        func(childComplexity int, where model.EcdFileMainSubBoolExp) int
		DeleteEcdFileMainSubByPk                    func(childComplexity int, id int64) int
		DeleteEcdFileMainSubByUnionPk               func(childComplexity int, fileMainSubID string) int
		DeleteEcdFileVehicle                        func(childComplexity int, where model.EcdFileVehicleBoolExp) int
		DeleteEcdFileVehicleByPk                    func(childComplexity int, id int64) int
		DeleteEcdFileVehicleByUnionPk               func(childComplexity int, fileVehicleID string) int
		DeleteEcdFileVehicleTime                    func(childComplexity int, where model.EcdFileVehicleTimeBoolExp) int
		DeleteEcdFileVehicleTimeByPk                func(childComplexity int, id int64) int
		DeleteEcdFileVehicleTimeByUnionPk           func(childComplexity int, vehicleTimeID string) int
		DeleteEcdLine                               func(childComplexity int, where model.EcdLineBoolExp) int
		DeleteEcdLineByPk                           func(childComplexity int, id int64) int
		DeleteEcdLineByUnionPk                      func(childComplexity int, lineID string) int
		DeleteElectricFence                         func(childComplexity int, where model.ElectricFenceBoolExp) int
		DeleteElectricFenceByPk                     func(childComplexity int, id int64) int
		DeleteElectricFenceByUnionPk                func(childComplexity int, electricFenceID string) int
		DeleteElectricFenceEnteranceRecord          func(childComplexity int, where model.ElectricFenceEnteranceRecordBoolExp) int
		DeleteElectricFenceEnteranceRecordByPk      func(childComplexity int, id int64) int
		DeleteElectricFenceEnteranceRecordByUnionPk func(childComplexity int, recordID string) int
		DeleteLimitSpeedLine                        func(childComplexity int, where model.LimitSpeedLineBoolExp) int
		DeleteLimitSpeedLineByPk                    func(childComplexity int, id int64) int
		DeleteLimitSpeedLineByUnionPk               func(childComplexity int, limitSpeedLineID string) int
		DeleteLimitSpeedLineTime                    func(childComplexity int, where model.LimitSpeedLineTimeBoolExp) int
		DeleteLimitSpeedLineTimeByPk                func(childComplexity int, id int64) int
		DeleteLimitSpeedLineTimeByUnionPk           func(childComplexity int, limitSpeedLineTimeID string) int
		DeleteLimitSpeedPlan                        func(childComplexity int, where model.LimitSpeedPlanBoolExp) int
		DeleteLimitSpeedPlanByPk                    func(childComplexity int, id int64) int
		DeleteLimitSpeedPlanByUnionPk               func(childComplexity int, limitSpeedPlanID string) int
		DeleteLimitSpeedPlanDetail                  func(childComplexity int, where model.LimitSpeedPlanDetailBoolExp) int
		DeleteLimitSpeedPlanDetailByPk              func(childComplexity int, id int64) int
		DeleteLimitSpeedPlanDetailByUnionPk         func(childComplexity int, detailID string) int
		DeleteVehicleNightTravelRecord              func(childComplexity int, where model.VehicleNightTravelRecordBoolExp) int
		DeleteVehicleNightTravelRecordByPk          func(childComplexity int, id int64) int
		DeleteVehicleNightTravelRecordByUnionPk     func(childComplexity int, recordID string) int
		DeleteVehicleStopTravelRecord               func(childComplexity int, where model.VehicleStopTravelRecordBoolExp) int
		DeleteVehicleStopTravelRecordByPk           func(childComplexity int, id int64) int
		DeleteVehicleStopTravelRecordByUnionPk      func(childComplexity int, recordID string) int
		InsertControlLine                           func(childComplexity int, objects []*model.ControlLineInsertInput) int
		InsertControlLineOne                        func(childComplexity int, objects model.ControlLineInsertInput) int
		InsertControlLineTime                       func(childComplexity int, objects []*model.ControlLineTimeInsertInput) int
		InsertControlLineTimeOne                    func(childComplexity int, objects model.ControlLineTimeInsertInput) int
		InsertEcdFileCheckHis                       func(childComplexity int, objects []*model.EcdFileCheckHisInsertInput) int
		InsertEcdFileCheckHisOne                    func(childComplexity int, objects model.EcdFileCheckHisInsertInput) int
		InsertEcdFileDistrict                       func(childComplexity int, objects []*model.EcdFileDistrictInsertInput) int
		InsertEcdFileDistrictOne                    func(childComplexity int, objects model.EcdFileDistrictInsertInput) int
		InsertEcdFileLinePoint                      func(childComplexity int, objects []*model.EcdFileLinePointInsertInput) int
		InsertEcdFileLinePointOne                   func(childComplexity int, objects model.EcdFileLinePointInsertInput) int
		InsertEcdFileMain                           func(childComplexity int, objects []*model.EcdFileMainInsertInput) int
		InsertEcdFileMainOne                        func(childComplexity int, objects model.EcdFileMainInsertInput) int
		InsertEcdFileMainSub                        func(childComplexity int, objects []*model.EcdFileMainSubInsertInput) int
		InsertEcdFileMainSubOne                     func(childComplexity int, objects model.EcdFileMainSubInsertInput) int
		InsertEcdFileVehicle                        func(childComplexity int, objects []*model.EcdFileVehicleInsertInput) int
		InsertEcdFileVehicleOne                     func(childComplexity int, objects model.EcdFileVehicleInsertInput) int
		InsertEcdFileVehicleTime                    func(childComplexity int, objects []*model.EcdFileVehicleTimeInsertInput) int
		InsertEcdFileVehicleTimeOne                 func(childComplexity int, objects model.EcdFileVehicleTimeInsertInput) int
		InsertEcdLine                               func(childComplexity int, objects []*model.EcdLineInsertInput) int
		InsertEcdLineOne                            func(childComplexity int, objects model.EcdLineInsertInput) int
		InsertElectricFence                         func(childComplexity int, objects []*model.ElectricFenceInsertInput) int
		InsertElectricFenceEnteranceRecord          func(childComplexity int, objects []*model.ElectricFenceEnteranceRecordInsertInput) int
		InsertElectricFenceEnteranceRecordOne       func(childComplexity int, objects model.ElectricFenceEnteranceRecordInsertInput) int
		InsertElectricFenceOne                      func(childComplexity int, objects model.ElectricFenceInsertInput) int
		InsertLimitSpeedLine                        func(childComplexity int, objects []*model.LimitSpeedLineInsertInput) int
		InsertLimitSpeedLineOne                     func(childComplexity int, objects model.LimitSpeedLineInsertInput) int
		InsertLimitSpeedLineTime                    func(childComplexity int, objects []*model.LimitSpeedLineTimeInsertInput) int
		InsertLimitSpeedLineTimeOne                 func(childComplexity int, objects model.LimitSpeedLineTimeInsertInput) int
		InsertLimitSpeedPlan                        func(childComplexity int, objects []*model.LimitSpeedPlanInsertInput) int
		InsertLimitSpeedPlanDetail                  func(childComplexity int, objects []*model.LimitSpeedPlanDetailInsertInput) int
		InsertLimitSpeedPlanDetailOne               func(childComplexity int, objects model.LimitSpeedPlanDetailInsertInput) int
		InsertLimitSpeedPlanOne                     func(childComplexity int, objects model.LimitSpeedPlanInsertInput) int
		InsertVehicleNightTravelRecord              func(childComplexity int, objects []*model.VehicleNightTravelRecordInsertInput) int
		InsertVehicleNightTravelRecordOne           func(childComplexity int, objects model.VehicleNightTravelRecordInsertInput) int
		InsertVehicleStopTravelRecord               func(childComplexity int, objects []*model.VehicleStopTravelRecordInsertInput) int
		InsertVehicleStopTravelRecordOne            func(childComplexity int, objects model.VehicleStopTravelRecordInsertInput) int
		UpdateControlLine                           func(childComplexity int, inc *model.ControlLineIncInput, set *model.ControlLineSetInput, where model.ControlLineBoolExp) int
		UpdateControlLineByPk                       func(childComplexity int, inc *model.ControlLineIncInput, set *model.ControlLineSetInput, id int64) int
		UpdateControlLineByUnionPk                  func(childComplexity int, inc *model.ControlLineIncInput, set *model.ControlLineSetInput, controlLineID string) int
		UpdateControlLineTime                       func(childComplexity int, inc *model.ControlLineTimeIncInput, set *model.ControlLineTimeSetInput, where model.ControlLineTimeBoolExp) int
		UpdateControlLineTimeByPk                   func(childComplexity int, inc *model.ControlLineTimeIncInput, set *model.ControlLineTimeSetInput, id int64) int
		UpdateControlLineTimeByUnionPk              func(childComplexity int, inc *model.ControlLineTimeIncInput, set *model.ControlLineTimeSetInput, controlLineTimeID string) int
		UpdateEcdFileCheckHis                       func(childComplexity int, inc *model.EcdFileCheckHisIncInput, set *model.EcdFileCheckHisSetInput, where model.EcdFileCheckHisBoolExp) int
		UpdateEcdFileCheckHisByPk                   func(childComplexity int, inc *model.EcdFileCheckHisIncInput, set *model.EcdFileCheckHisSetInput, id int64) int
		UpdateEcdFileCheckHisByUnionPk              func(childComplexity int, inc *model.EcdFileCheckHisIncInput, set *model.EcdFileCheckHisSetInput, hisID string) int
		UpdateEcdFileDistrict                       func(childComplexity int, inc *model.EcdFileDistrictIncInput, set *model.EcdFileDistrictSetInput, where model.EcdFileDistrictBoolExp) int
		UpdateEcdFileDistrictByPk                   func(childComplexity int, inc *model.EcdFileDistrictIncInput, set *model.EcdFileDistrictSetInput, id int64) int
		UpdateEcdFileDistrictByUnionPk              func(childComplexity int, inc *model.EcdFileDistrictIncInput, set *model.EcdFileDistrictSetInput, fileDistrictID string) int
		UpdateEcdFileLinePoint                      func(childComplexity int, inc *model.EcdFileLinePointIncInput, set *model.EcdFileLinePointSetInput, where model.EcdFileLinePointBoolExp) int
		UpdateEcdFileLinePointByPk                  func(childComplexity int, inc *model.EcdFileLinePointIncInput, set *model.EcdFileLinePointSetInput, id int64) int
		UpdateEcdFileLinePointByUnionPk             func(childComplexity int, inc *model.EcdFileLinePointIncInput, set *model.EcdFileLinePointSetInput, linePointID string) int
		UpdateEcdFileMain                           func(childComplexity int, inc *model.EcdFileMainIncInput, set *model.EcdFileMainSetInput, where model.EcdFileMainBoolExp) int
		UpdateEcdFileMainByPk                       func(childComplexity int, inc *model.EcdFileMainIncInput, set *model.EcdFileMainSetInput, id int64) int
		UpdateEcdFileMainByUnionPk                  func(childComplexity int, inc *model.EcdFileMainIncInput, set *model.EcdFileMainSetInput, fileMainID string) int
		UpdateEcdFileMainSub                        func(childComplexity int, inc *model.EcdFileMainSubIncInput, set *model.EcdFileMainSubSetInput, where model.EcdFileMainSubBoolExp) int
		UpdateEcdFileMainSubByPk                    func(childComplexity int, inc *model.EcdFileMainSubIncInput, set *model.EcdFileMainSubSetInput, id int64) int
		UpdateEcdFileMainSubByUnionPk               func(childComplexity int, inc *model.EcdFileMainSubIncInput, set *model.EcdFileMainSubSetInput, fileMainSubID string) int
		UpdateEcdFileVehicle                        func(childComplexity int, inc *model.EcdFileVehicleIncInput, set *model.EcdFileVehicleSetInput, where model.EcdFileVehicleBoolExp) int
		UpdateEcdFileVehicleByPk                    func(childComplexity int, inc *model.EcdFileVehicleIncInput, set *model.EcdFileVehicleSetInput, id int64) int
		UpdateEcdFileVehicleByUnionPk               func(childComplexity int, inc *model.EcdFileVehicleIncInput, set *model.EcdFileVehicleSetInput, fileVehicleID string) int
		UpdateEcdFileVehicleTime                    func(childComplexity int, inc *model.EcdFileVehicleTimeIncInput, set *model.EcdFileVehicleTimeSetInput, where model.EcdFileVehicleTimeBoolExp) int
		UpdateEcdFileVehicleTimeByPk                func(childComplexity int, inc *model.EcdFileVehicleTimeIncInput, set *model.EcdFileVehicleTimeSetInput, id int64) int
		UpdateEcdFileVehicleTimeByUnionPk           func(childComplexity int, inc *model.EcdFileVehicleTimeIncInput, set *model.EcdFileVehicleTimeSetInput, vehicleTimeID string) int
		UpdateEcdLine                               func(childComplexity int, inc *model.EcdLineIncInput, set *model.EcdLineSetInput, where model.EcdLineBoolExp) int
		UpdateEcdLineByPk                           func(childComplexity int, inc *model.EcdLineIncInput, set *model.EcdLineSetInput, id int64) int
		UpdateEcdLineByUnionPk                      func(childComplexity int, inc *model.EcdLineIncInput, set *model.EcdLineSetInput, lineID string) int
		UpdateElectricFence                         func(childComplexity int, inc *model.ElectricFenceIncInput, set *model.ElectricFenceSetInput, where model.ElectricFenceBoolExp) int
		UpdateElectricFenceByPk                     func(childComplexity int, inc *model.ElectricFenceIncInput, set *model.ElectricFenceSetInput, id int64) int
		UpdateElectricFenceByUnionPk                func(childComplexity int, inc *model.ElectricFenceIncInput, set *model.ElectricFenceSetInput, electricFenceID string) int
		UpdateElectricFenceEnteranceRecord          func(childComplexity int, inc *model.ElectricFenceEnteranceRecordIncInput, set *model.ElectricFenceEnteranceRecordSetInput, where model.ElectricFenceEnteranceRecordBoolExp) int
		UpdateElectricFenceEnteranceRecordByPk      func(childComplexity int, inc *model.ElectricFenceEnteranceRecordIncInput, set *model.ElectricFenceEnteranceRecordSetInput, id int64) int
		UpdateElectricFenceEnteranceRecordByUnionPk func(childComplexity int, inc *model.ElectricFenceEnteranceRecordIncInput, set *model.ElectricFenceEnteranceRecordSetInput, recordID string) int
		UpdateLimitSpeedLine                        func(childComplexity int, inc *model.LimitSpeedLineIncInput, set *model.LimitSpeedLineSetInput, where model.LimitSpeedLineBoolExp) int
		UpdateLimitSpeedLineByPk                    func(childComplexity int, inc *model.LimitSpeedLineIncInput, set *model.LimitSpeedLineSetInput, id int64) int
		UpdateLimitSpeedLineByUnionPk               func(childComplexity int, inc *model.LimitSpeedLineIncInput, set *model.LimitSpeedLineSetInput, limitSpeedLineID string) int
		UpdateLimitSpeedLineTime                    func(childComplexity int, inc *model.LimitSpeedLineTimeIncInput, set *model.LimitSpeedLineTimeSetInput, where model.LimitSpeedLineTimeBoolExp) int
		UpdateLimitSpeedLineTimeByPk                func(childComplexity int, inc *model.LimitSpeedLineTimeIncInput, set *model.LimitSpeedLineTimeSetInput, id int64) int
		UpdateLimitSpeedLineTimeByUnionPk           func(childComplexity int, inc *model.LimitSpeedLineTimeIncInput, set *model.LimitSpeedLineTimeSetInput, limitSpeedLineTimeID string) int
		UpdateLimitSpeedPlan                        func(childComplexity int, inc *model.LimitSpeedPlanIncInput, set *model.LimitSpeedPlanSetInput, where model.LimitSpeedPlanBoolExp) int
		UpdateLimitSpeedPlanByPk                    func(childComplexity int, inc *model.LimitSpeedPlanIncInput, set *model.LimitSpeedPlanSetInput, id int64) int
		UpdateLimitSpeedPlanByUnionPk               func(childComplexity int, inc *model.LimitSpeedPlanIncInput, set *model.LimitSpeedPlanSetInput, limitSpeedPlanID string) int
		UpdateLimitSpeedPlanDetail                  func(childComplexity int, inc *model.LimitSpeedPlanDetailIncInput, set *model.LimitSpeedPlanDetailSetInput, where model.LimitSpeedPlanDetailBoolExp) int
		UpdateLimitSpeedPlanDetailByPk              func(childComplexity int, inc *model.LimitSpeedPlanDetailIncInput, set *model.LimitSpeedPlanDetailSetInput, id int64) int
		UpdateLimitSpeedPlanDetailByUnionPk         func(childComplexity int, inc *model.LimitSpeedPlanDetailIncInput, set *model.LimitSpeedPlanDetailSetInput, detailID string) int
		UpdateVehicleNightTravelRecord              func(childComplexity int, inc *model.VehicleNightTravelRecordIncInput, set *model.VehicleNightTravelRecordSetInput, where model.VehicleNightTravelRecordBoolExp) int
		UpdateVehicleNightTravelRecordByPk          func(childComplexity int, inc *model.VehicleNightTravelRecordIncInput, set *model.VehicleNightTravelRecordSetInput, id int64) int
		UpdateVehicleNightTravelRecordByUnionPk     func(childComplexity int, inc *model.VehicleNightTravelRecordIncInput, set *model.VehicleNightTravelRecordSetInput, recordID string) int
		UpdateVehicleStopTravelRecord               func(childComplexity int, inc *model.VehicleStopTravelRecordIncInput, set *model.VehicleStopTravelRecordSetInput, where model.VehicleStopTravelRecordBoolExp) int
		UpdateVehicleStopTravelRecordByPk           func(childComplexity int, inc *model.VehicleStopTravelRecordIncInput, set *model.VehicleStopTravelRecordSetInput, id int64) int
		UpdateVehicleStopTravelRecordByUnionPk      func(childComplexity int, inc *model.VehicleStopTravelRecordIncInput, set *model.VehicleStopTravelRecordSetInput, recordID string) int
	}

	Query struct {
		ControlLine                           func(childComplexity int, distinctOn []model.ControlLineSelectColumn, limit *int, offset *int, orderBy []*model.ControlLineOrderBy, where *model.ControlLineBoolExp) int
		ControlLineAggregate                  func(childComplexity int, distinctOn []model.ControlLineSelectColumn, limit *int, offset *int, orderBy []*model.ControlLineOrderBy, where *model.ControlLineBoolExp) int
		ControlLineByPk                       func(childComplexity int, id int64) int
		ControlLineByUnionPk                  func(childComplexity int, controlLineID string) int
		ControlLineTime                       func(childComplexity int, distinctOn []model.ControlLineTimeSelectColumn, limit *int, offset *int, orderBy []*model.ControlLineTimeOrderBy, where *model.ControlLineTimeBoolExp) int
		ControlLineTimeAggregate              func(childComplexity int, distinctOn []model.ControlLineTimeSelectColumn, limit *int, offset *int, orderBy []*model.ControlLineTimeOrderBy, where *model.ControlLineTimeBoolExp) int
		ControlLineTimeByPk                   func(childComplexity int, id int64) int
		ControlLineTimeByUnionPk              func(childComplexity int, controlLineTimeID string) int
		EcdFileCheckHis                       func(childComplexity int, distinctOn []model.EcdFileCheckHisSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileCheckHisOrderBy, where *model.EcdFileCheckHisBoolExp) int
		EcdFileCheckHisAggregate              func(childComplexity int, distinctOn []model.EcdFileCheckHisSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileCheckHisOrderBy, where *model.EcdFileCheckHisBoolExp) int
		EcdFileCheckHisByPk                   func(childComplexity int, id int64) int
		EcdFileCheckHisByUnionPk              func(childComplexity int, hisID string) int
		EcdFileDistrict                       func(childComplexity int, distinctOn []model.EcdFileDistrictSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileDistrictOrderBy, where *model.EcdFileDistrictBoolExp) int
		EcdFileDistrictAggregate              func(childComplexity int, distinctOn []model.EcdFileDistrictSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileDistrictOrderBy, where *model.EcdFileDistrictBoolExp) int
		EcdFileDistrictByPk                   func(childComplexity int, id int64) int
		EcdFileDistrictByUnionPk              func(childComplexity int, fileDistrictID string) int
		EcdFileLinePoint                      func(childComplexity int, distinctOn []model.EcdFileLinePointSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileLinePointOrderBy, where *model.EcdFileLinePointBoolExp) int
		EcdFileLinePointAggregate             func(childComplexity int, distinctOn []model.EcdFileLinePointSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileLinePointOrderBy, where *model.EcdFileLinePointBoolExp) int
		EcdFileLinePointByPk                  func(childComplexity int, id int64) int
		EcdFileLinePointByUnionPk             func(childComplexity int, linePointID string) int
		EcdFileMain                           func(childComplexity int, distinctOn []model.EcdFileMainSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileMainOrderBy, where *model.EcdFileMainBoolExp) int
		EcdFileMainAggregate                  func(childComplexity int, distinctOn []model.EcdFileMainSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileMainOrderBy, where *model.EcdFileMainBoolExp) int
		EcdFileMainByPk                       func(childComplexity int, id int64) int
		EcdFileMainByUnionPk                  func(childComplexity int, fileMainID string) int
		EcdFileMainSub                        func(childComplexity int, distinctOn []model.EcdFileMainSubSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileMainSubOrderBy, where *model.EcdFileMainSubBoolExp) int
		EcdFileMainSubAggregate               func(childComplexity int, distinctOn []model.EcdFileMainSubSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileMainSubOrderBy, where *model.EcdFileMainSubBoolExp) int
		EcdFileMainSubByPk                    func(childComplexity int, id int64) int
		EcdFileMainSubByUnionPk               func(childComplexity int, fileMainSubID string) int
		EcdFileVehicle                        func(childComplexity int, distinctOn []model.EcdFileVehicleSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileVehicleOrderBy, where *model.EcdFileVehicleBoolExp) int
		EcdFileVehicleAggregate               func(childComplexity int, distinctOn []model.EcdFileVehicleSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileVehicleOrderBy, where *model.EcdFileVehicleBoolExp) int
		EcdFileVehicleByPk                    func(childComplexity int, id int64) int
		EcdFileVehicleByUnionPk               func(childComplexity int, fileVehicleID string) int
		EcdFileVehicleTime                    func(childComplexity int, distinctOn []model.EcdFileVehicleTimeSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileVehicleTimeOrderBy, where *model.EcdFileVehicleTimeBoolExp) int
		EcdFileVehicleTimeAggregate           func(childComplexity int, distinctOn []model.EcdFileVehicleTimeSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileVehicleTimeOrderBy, where *model.EcdFileVehicleTimeBoolExp) int
		EcdFileVehicleTimeByPk                func(childComplexity int, id int64) int
		EcdFileVehicleTimeByUnionPk           func(childComplexity int, vehicleTimeID string) int
		EcdLine                               func(childComplexity int, distinctOn []model.EcdLineSelectColumn, limit *int, offset *int, orderBy []*model.EcdLineOrderBy, where *model.EcdLineBoolExp) int
		EcdLineAggregate                      func(childComplexity int, distinctOn []model.EcdLineSelectColumn, limit *int, offset *int, orderBy []*model.EcdLineOrderBy, where *model.EcdLineBoolExp) int
		EcdLineByPk                           func(childComplexity int, id int64) int
		EcdLineByUnionPk                      func(childComplexity int, lineID string) int
		ElectricFence                         func(childComplexity int, distinctOn []model.ElectricFenceSelectColumn, limit *int, offset *int, orderBy []*model.ElectricFenceOrderBy, where *model.ElectricFenceBoolExp) int
		ElectricFenceAggregate                func(childComplexity int, distinctOn []model.ElectricFenceSelectColumn, limit *int, offset *int, orderBy []*model.ElectricFenceOrderBy, where *model.ElectricFenceBoolExp) int
		ElectricFenceByPk                     func(childComplexity int, id int64) int
		ElectricFenceByUnionPk                func(childComplexity int, electricFenceID string) int
		ElectricFenceEnteranceRecord          func(childComplexity int, distinctOn []model.ElectricFenceEnteranceRecordSelectColumn, limit *int, offset *int, orderBy []*model.ElectricFenceEnteranceRecordOrderBy, where *model.ElectricFenceEnteranceRecordBoolExp) int
		ElectricFenceEnteranceRecordAggregate func(childComplexity int, distinctOn []model.ElectricFenceEnteranceRecordSelectColumn, limit *int, offset *int, orderBy []*model.ElectricFenceEnteranceRecordOrderBy, where *model.ElectricFenceEnteranceRecordBoolExp) int
		ElectricFenceEnteranceRecordByPk      func(childComplexity int, id int64) int
		ElectricFenceEnteranceRecordByUnionPk func(childComplexity int, recordID string) int
		LimitSpeedLine                        func(childComplexity int, distinctOn []model.LimitSpeedLineSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedLineOrderBy, where *model.LimitSpeedLineBoolExp) int
		LimitSpeedLineAggregate               func(childComplexity int, distinctOn []model.LimitSpeedLineSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedLineOrderBy, where *model.LimitSpeedLineBoolExp) int
		LimitSpeedLineByPk                    func(childComplexity int, id int64) int
		LimitSpeedLineByUnionPk               func(childComplexity int, limitSpeedLineID string) int
		LimitSpeedLineTime                    func(childComplexity int, distinctOn []model.LimitSpeedLineTimeSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedLineTimeOrderBy, where *model.LimitSpeedLineTimeBoolExp) int
		LimitSpeedLineTimeAggregate           func(childComplexity int, distinctOn []model.LimitSpeedLineTimeSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedLineTimeOrderBy, where *model.LimitSpeedLineTimeBoolExp) int
		LimitSpeedLineTimeByPk                func(childComplexity int, id int64) int
		LimitSpeedLineTimeByUnionPk           func(childComplexity int, limitSpeedLineTimeID string) int
		LimitSpeedPlan                        func(childComplexity int, distinctOn []model.LimitSpeedPlanSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedPlanOrderBy, where *model.LimitSpeedPlanBoolExp) int
		LimitSpeedPlanAggregate               func(childComplexity int, distinctOn []model.LimitSpeedPlanSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedPlanOrderBy, where *model.LimitSpeedPlanBoolExp) int
		LimitSpeedPlanByPk                    func(childComplexity int, id int64) int
		LimitSpeedPlanByUnionPk               func(childComplexity int, limitSpeedPlanID string) int
		LimitSpeedPlanDetail                  func(childComplexity int, distinctOn []model.LimitSpeedPlanDetailSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedPlanDetailOrderBy, where *model.LimitSpeedPlanDetailBoolExp) int
		LimitSpeedPlanDetailAggregate         func(childComplexity int, distinctOn []model.LimitSpeedPlanDetailSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedPlanDetailOrderBy, where *model.LimitSpeedPlanDetailBoolExp) int
		LimitSpeedPlanDetailByPk              func(childComplexity int, id int64) int
		LimitSpeedPlanDetailByUnionPk         func(childComplexity int, detailID string) int
		VehicleNightTravelRecord              func(childComplexity int, distinctOn []model.VehicleNightTravelRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleNightTravelRecordOrderBy, where *model.VehicleNightTravelRecordBoolExp) int
		VehicleNightTravelRecordAggregate     func(childComplexity int, distinctOn []model.VehicleNightTravelRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleNightTravelRecordOrderBy, where *model.VehicleNightTravelRecordBoolExp) int
		VehicleNightTravelRecordByPk          func(childComplexity int, id int64) int
		VehicleNightTravelRecordByUnionPk     func(childComplexity int, recordID string) int
		VehicleStopTravelRecord               func(childComplexity int, distinctOn []model.VehicleStopTravelRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleStopTravelRecordOrderBy, where *model.VehicleStopTravelRecordBoolExp) int
		VehicleStopTravelRecordAggregate      func(childComplexity int, distinctOn []model.VehicleStopTravelRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleStopTravelRecordOrderBy, where *model.VehicleStopTravelRecordBoolExp) int
		VehicleStopTravelRecordByPk           func(childComplexity int, id int64) int
		VehicleStopTravelRecordByUnionPk      func(childComplexity int, recordID string) int
	}

	VehicleNightTravelRecord struct {
		Cause           func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		EnterpriseID    func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		RecordEndTime   func(childComplexity int) int
		RecordID        func(childComplexity int) int
		RecordStartTime func(childComplexity int) int
		Remark          func(childComplexity int) int
		Route           func(childComplexity int) int
		ServiceType     func(childComplexity int) int
		SprgID          func(childComplexity int) int
		Status          func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
		VehicleType     func(childComplexity int) int
	}

	VehicleNightTravelRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleNightTravelRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleNightTravelRecordAvgFields struct {
		ID          func(childComplexity int) int
		ServiceType func(childComplexity int) int
		Status      func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehicleNightTravelRecordMaxFields struct {
		Cause           func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		EnterpriseID    func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		RecordEndTime   func(childComplexity int) int
		RecordID        func(childComplexity int) int
		RecordStartTime func(childComplexity int) int
		Remark          func(childComplexity int) int
		Route           func(childComplexity int) int
		ServiceType     func(childComplexity int) int
		SprgID          func(childComplexity int) int
		Status          func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
		VehicleType     func(childComplexity int) int
	}

	VehicleNightTravelRecordMinFields struct {
		Cause           func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		EnterpriseID    func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		RecordEndTime   func(childComplexity int) int
		RecordID        func(childComplexity int) int
		RecordStartTime func(childComplexity int) int
		Remark          func(childComplexity int) int
		Route           func(childComplexity int) int
		ServiceType     func(childComplexity int) int
		SprgID          func(childComplexity int) int
		Status          func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
		VehicleType     func(childComplexity int) int
	}

	VehicleNightTravelRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleNightTravelRecordStddevFields struct {
		ID          func(childComplexity int) int
		ServiceType func(childComplexity int) int
		Status      func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehicleNightTravelRecordStddevPopFields struct {
		ID          func(childComplexity int) int
		ServiceType func(childComplexity int) int
		Status      func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehicleNightTravelRecordStddevSampFields struct {
		ID          func(childComplexity int) int
		ServiceType func(childComplexity int) int
		Status      func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehicleNightTravelRecordSumFields struct {
		ID          func(childComplexity int) int
		ServiceType func(childComplexity int) int
		Status      func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehicleNightTravelRecordVarPopFields struct {
		ID          func(childComplexity int) int
		ServiceType func(childComplexity int) int
		Status      func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehicleNightTravelRecordVarSampFields struct {
		ID          func(childComplexity int) int
		ServiceType func(childComplexity int) int
		Status      func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehicleNightTravelRecordVarianceFields struct {
		ID          func(childComplexity int) int
		ServiceType func(childComplexity int) int
		Status      func(childComplexity int) int
		VehicleType func(childComplexity int) int
	}

	VehicleStopTravelRecord struct {
		BillID          func(childComplexity int) int
		Cause           func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		EffectEndTime   func(childComplexity int) int
		EffectStartTime func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsEffect        func(childComplexity int) int
		RecordEndTime   func(childComplexity int) int
		RecordID        func(childComplexity int) int
		RecordStartTime func(childComplexity int) int
		RecordUserID    func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	VehicleStopTravelRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleStopTravelRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleStopTravelRecordAvgFields struct {
		ID func(childComplexity int) int
	}

	VehicleStopTravelRecordMaxFields struct {
		BillID          func(childComplexity int) int
		Cause           func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		EffectEndTime   func(childComplexity int) int
		EffectStartTime func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsEffect        func(childComplexity int) int
		RecordEndTime   func(childComplexity int) int
		RecordID        func(childComplexity int) int
		RecordStartTime func(childComplexity int) int
		RecordUserID    func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	VehicleStopTravelRecordMinFields struct {
		BillID          func(childComplexity int) int
		Cause           func(childComplexity int) int
		CreateAt        func(childComplexity int) int
		CreateBy        func(childComplexity int) int
		DeleteAt        func(childComplexity int) int
		DeleteBy        func(childComplexity int) int
		EffectEndTime   func(childComplexity int) int
		EffectStartTime func(childComplexity int) int
		ID              func(childComplexity int) int
		IsDelete        func(childComplexity int) int
		IsEffect        func(childComplexity int) int
		RecordEndTime   func(childComplexity int) int
		RecordID        func(childComplexity int) int
		RecordStartTime func(childComplexity int) int
		RecordUserID    func(childComplexity int) int
		UpdateAt        func(childComplexity int) int
		UpdateBy        func(childComplexity int) int
		VehicleID       func(childComplexity int) int
	}

	VehicleStopTravelRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleStopTravelRecordStddevFields struct {
		ID func(childComplexity int) int
	}

	VehicleStopTravelRecordStddevPopFields struct {
		ID func(childComplexity int) int
	}

	VehicleStopTravelRecordStddevSampFields struct {
		ID func(childComplexity int) int
	}

	VehicleStopTravelRecordSumFields struct {
		ID func(childComplexity int) int
	}

	VehicleStopTravelRecordVarPopFields struct {
		ID func(childComplexity int) int
	}

	VehicleStopTravelRecordVarSampFields struct {
		ID func(childComplexity int) int
	}

	VehicleStopTravelRecordVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteControlLine(ctx context.Context, where model.ControlLineBoolExp) (*model.ControlLineMutationResponse, error)
	DeleteControlLineByPk(ctx context.Context, id int64) (*model1.ControlLine, error)
	InsertControlLine(ctx context.Context, objects []*model.ControlLineInsertInput) (*model.ControlLineMutationResponse, error)
	InsertControlLineOne(ctx context.Context, objects model.ControlLineInsertInput) (*model1.ControlLine, error)
	UpdateControlLine(ctx context.Context, inc *model.ControlLineIncInput, set *model.ControlLineSetInput, where model.ControlLineBoolExp) (*model.ControlLineMutationResponse, error)
	UpdateControlLineByPk(ctx context.Context, inc *model.ControlLineIncInput, set *model.ControlLineSetInput, id int64) (*model1.ControlLine, error)
	UpdateControlLineByUnionPk(ctx context.Context, inc *model.ControlLineIncInput, set *model.ControlLineSetInput, controlLineID string) (*model1.ControlLine, error)
	DeleteControlLineByUnionPk(ctx context.Context, controlLineID string) (*model1.ControlLine, error)
	DeleteControlLineTime(ctx context.Context, where model.ControlLineTimeBoolExp) (*model.ControlLineTimeMutationResponse, error)
	DeleteControlLineTimeByPk(ctx context.Context, id int64) (*model1.ControlLineTime, error)
	InsertControlLineTime(ctx context.Context, objects []*model.ControlLineTimeInsertInput) (*model.ControlLineTimeMutationResponse, error)
	InsertControlLineTimeOne(ctx context.Context, objects model.ControlLineTimeInsertInput) (*model1.ControlLineTime, error)
	UpdateControlLineTime(ctx context.Context, inc *model.ControlLineTimeIncInput, set *model.ControlLineTimeSetInput, where model.ControlLineTimeBoolExp) (*model.ControlLineTimeMutationResponse, error)
	UpdateControlLineTimeByPk(ctx context.Context, inc *model.ControlLineTimeIncInput, set *model.ControlLineTimeSetInput, id int64) (*model1.ControlLineTime, error)
	UpdateControlLineTimeByUnionPk(ctx context.Context, inc *model.ControlLineTimeIncInput, set *model.ControlLineTimeSetInput, controlLineTimeID string) (*model1.ControlLineTime, error)
	DeleteControlLineTimeByUnionPk(ctx context.Context, controlLineTimeID string) (*model1.ControlLineTime, error)
	DeleteEcdFileCheckHis(ctx context.Context, where model.EcdFileCheckHisBoolExp) (*model.EcdFileCheckHisMutationResponse, error)
	DeleteEcdFileCheckHisByPk(ctx context.Context, id int64) (*model1.EcdFileCheckHis, error)
	InsertEcdFileCheckHis(ctx context.Context, objects []*model.EcdFileCheckHisInsertInput) (*model.EcdFileCheckHisMutationResponse, error)
	InsertEcdFileCheckHisOne(ctx context.Context, objects model.EcdFileCheckHisInsertInput) (*model1.EcdFileCheckHis, error)
	UpdateEcdFileCheckHis(ctx context.Context, inc *model.EcdFileCheckHisIncInput, set *model.EcdFileCheckHisSetInput, where model.EcdFileCheckHisBoolExp) (*model.EcdFileCheckHisMutationResponse, error)
	UpdateEcdFileCheckHisByPk(ctx context.Context, inc *model.EcdFileCheckHisIncInput, set *model.EcdFileCheckHisSetInput, id int64) (*model1.EcdFileCheckHis, error)
	UpdateEcdFileCheckHisByUnionPk(ctx context.Context, inc *model.EcdFileCheckHisIncInput, set *model.EcdFileCheckHisSetInput, hisID string) (*model1.EcdFileCheckHis, error)
	DeleteEcdFileCheckHisByUnionPk(ctx context.Context, hisID string) (*model1.EcdFileCheckHis, error)
	DeleteEcdFileDistrict(ctx context.Context, where model.EcdFileDistrictBoolExp) (*model.EcdFileDistrictMutationResponse, error)
	DeleteEcdFileDistrictByPk(ctx context.Context, id int64) (*model1.EcdFileDistrict, error)
	InsertEcdFileDistrict(ctx context.Context, objects []*model.EcdFileDistrictInsertInput) (*model.EcdFileDistrictMutationResponse, error)
	InsertEcdFileDistrictOne(ctx context.Context, objects model.EcdFileDistrictInsertInput) (*model1.EcdFileDistrict, error)
	UpdateEcdFileDistrict(ctx context.Context, inc *model.EcdFileDistrictIncInput, set *model.EcdFileDistrictSetInput, where model.EcdFileDistrictBoolExp) (*model.EcdFileDistrictMutationResponse, error)
	UpdateEcdFileDistrictByPk(ctx context.Context, inc *model.EcdFileDistrictIncInput, set *model.EcdFileDistrictSetInput, id int64) (*model1.EcdFileDistrict, error)
	UpdateEcdFileDistrictByUnionPk(ctx context.Context, inc *model.EcdFileDistrictIncInput, set *model.EcdFileDistrictSetInput, fileDistrictID string) (*model1.EcdFileDistrict, error)
	DeleteEcdFileDistrictByUnionPk(ctx context.Context, fileDistrictID string) (*model1.EcdFileDistrict, error)
	DeleteEcdFileLinePoint(ctx context.Context, where model.EcdFileLinePointBoolExp) (*model.EcdFileLinePointMutationResponse, error)
	DeleteEcdFileLinePointByPk(ctx context.Context, id int64) (*model1.EcdFileLinePoint, error)
	InsertEcdFileLinePoint(ctx context.Context, objects []*model.EcdFileLinePointInsertInput) (*model.EcdFileLinePointMutationResponse, error)
	InsertEcdFileLinePointOne(ctx context.Context, objects model.EcdFileLinePointInsertInput) (*model1.EcdFileLinePoint, error)
	UpdateEcdFileLinePoint(ctx context.Context, inc *model.EcdFileLinePointIncInput, set *model.EcdFileLinePointSetInput, where model.EcdFileLinePointBoolExp) (*model.EcdFileLinePointMutationResponse, error)
	UpdateEcdFileLinePointByPk(ctx context.Context, inc *model.EcdFileLinePointIncInput, set *model.EcdFileLinePointSetInput, id int64) (*model1.EcdFileLinePoint, error)
	UpdateEcdFileLinePointByUnionPk(ctx context.Context, inc *model.EcdFileLinePointIncInput, set *model.EcdFileLinePointSetInput, linePointID string) (*model1.EcdFileLinePoint, error)
	DeleteEcdFileLinePointByUnionPk(ctx context.Context, linePointID string) (*model1.EcdFileLinePoint, error)
	DeleteEcdFileMain(ctx context.Context, where model.EcdFileMainBoolExp) (*model.EcdFileMainMutationResponse, error)
	DeleteEcdFileMainByPk(ctx context.Context, id int64) (*model1.EcdFileMain, error)
	InsertEcdFileMain(ctx context.Context, objects []*model.EcdFileMainInsertInput) (*model.EcdFileMainMutationResponse, error)
	InsertEcdFileMainOne(ctx context.Context, objects model.EcdFileMainInsertInput) (*model1.EcdFileMain, error)
	UpdateEcdFileMain(ctx context.Context, inc *model.EcdFileMainIncInput, set *model.EcdFileMainSetInput, where model.EcdFileMainBoolExp) (*model.EcdFileMainMutationResponse, error)
	UpdateEcdFileMainByPk(ctx context.Context, inc *model.EcdFileMainIncInput, set *model.EcdFileMainSetInput, id int64) (*model1.EcdFileMain, error)
	UpdateEcdFileMainByUnionPk(ctx context.Context, inc *model.EcdFileMainIncInput, set *model.EcdFileMainSetInput, fileMainID string) (*model1.EcdFileMain, error)
	DeleteEcdFileMainByUnionPk(ctx context.Context, fileMainID string) (*model1.EcdFileMain, error)
	DeleteEcdFileMainSub(ctx context.Context, where model.EcdFileMainSubBoolExp) (*model.EcdFileMainSubMutationResponse, error)
	DeleteEcdFileMainSubByPk(ctx context.Context, id int64) (*model1.EcdFileMainSub, error)
	InsertEcdFileMainSub(ctx context.Context, objects []*model.EcdFileMainSubInsertInput) (*model.EcdFileMainSubMutationResponse, error)
	InsertEcdFileMainSubOne(ctx context.Context, objects model.EcdFileMainSubInsertInput) (*model1.EcdFileMainSub, error)
	UpdateEcdFileMainSub(ctx context.Context, inc *model.EcdFileMainSubIncInput, set *model.EcdFileMainSubSetInput, where model.EcdFileMainSubBoolExp) (*model.EcdFileMainSubMutationResponse, error)
	UpdateEcdFileMainSubByPk(ctx context.Context, inc *model.EcdFileMainSubIncInput, set *model.EcdFileMainSubSetInput, id int64) (*model1.EcdFileMainSub, error)
	UpdateEcdFileMainSubByUnionPk(ctx context.Context, inc *model.EcdFileMainSubIncInput, set *model.EcdFileMainSubSetInput, fileMainSubID string) (*model1.EcdFileMainSub, error)
	DeleteEcdFileMainSubByUnionPk(ctx context.Context, fileMainSubID string) (*model1.EcdFileMainSub, error)
	DeleteEcdFileVehicle(ctx context.Context, where model.EcdFileVehicleBoolExp) (*model.EcdFileVehicleMutationResponse, error)
	DeleteEcdFileVehicleByPk(ctx context.Context, id int64) (*model1.EcdFileVehicle, error)
	InsertEcdFileVehicle(ctx context.Context, objects []*model.EcdFileVehicleInsertInput) (*model.EcdFileVehicleMutationResponse, error)
	InsertEcdFileVehicleOne(ctx context.Context, objects model.EcdFileVehicleInsertInput) (*model1.EcdFileVehicle, error)
	UpdateEcdFileVehicle(ctx context.Context, inc *model.EcdFileVehicleIncInput, set *model.EcdFileVehicleSetInput, where model.EcdFileVehicleBoolExp) (*model.EcdFileVehicleMutationResponse, error)
	UpdateEcdFileVehicleByPk(ctx context.Context, inc *model.EcdFileVehicleIncInput, set *model.EcdFileVehicleSetInput, id int64) (*model1.EcdFileVehicle, error)
	UpdateEcdFileVehicleByUnionPk(ctx context.Context, inc *model.EcdFileVehicleIncInput, set *model.EcdFileVehicleSetInput, fileVehicleID string) (*model1.EcdFileVehicle, error)
	DeleteEcdFileVehicleByUnionPk(ctx context.Context, fileVehicleID string) (*model1.EcdFileVehicle, error)
	DeleteEcdFileVehicleTime(ctx context.Context, where model.EcdFileVehicleTimeBoolExp) (*model.EcdFileVehicleTimeMutationResponse, error)
	DeleteEcdFileVehicleTimeByPk(ctx context.Context, id int64) (*model1.EcdFileVehicleTime, error)
	InsertEcdFileVehicleTime(ctx context.Context, objects []*model.EcdFileVehicleTimeInsertInput) (*model.EcdFileVehicleTimeMutationResponse, error)
	InsertEcdFileVehicleTimeOne(ctx context.Context, objects model.EcdFileVehicleTimeInsertInput) (*model1.EcdFileVehicleTime, error)
	UpdateEcdFileVehicleTime(ctx context.Context, inc *model.EcdFileVehicleTimeIncInput, set *model.EcdFileVehicleTimeSetInput, where model.EcdFileVehicleTimeBoolExp) (*model.EcdFileVehicleTimeMutationResponse, error)
	UpdateEcdFileVehicleTimeByPk(ctx context.Context, inc *model.EcdFileVehicleTimeIncInput, set *model.EcdFileVehicleTimeSetInput, id int64) (*model1.EcdFileVehicleTime, error)
	UpdateEcdFileVehicleTimeByUnionPk(ctx context.Context, inc *model.EcdFileVehicleTimeIncInput, set *model.EcdFileVehicleTimeSetInput, vehicleTimeID string) (*model1.EcdFileVehicleTime, error)
	DeleteEcdFileVehicleTimeByUnionPk(ctx context.Context, vehicleTimeID string) (*model1.EcdFileVehicleTime, error)
	DeleteEcdLine(ctx context.Context, where model.EcdLineBoolExp) (*model.EcdLineMutationResponse, error)
	DeleteEcdLineByPk(ctx context.Context, id int64) (*model1.EcdLine, error)
	InsertEcdLine(ctx context.Context, objects []*model.EcdLineInsertInput) (*model.EcdLineMutationResponse, error)
	InsertEcdLineOne(ctx context.Context, objects model.EcdLineInsertInput) (*model1.EcdLine, error)
	UpdateEcdLine(ctx context.Context, inc *model.EcdLineIncInput, set *model.EcdLineSetInput, where model.EcdLineBoolExp) (*model.EcdLineMutationResponse, error)
	UpdateEcdLineByPk(ctx context.Context, inc *model.EcdLineIncInput, set *model.EcdLineSetInput, id int64) (*model1.EcdLine, error)
	UpdateEcdLineByUnionPk(ctx context.Context, inc *model.EcdLineIncInput, set *model.EcdLineSetInput, lineID string) (*model1.EcdLine, error)
	DeleteEcdLineByUnionPk(ctx context.Context, lineID string) (*model1.EcdLine, error)
	DeleteElectricFence(ctx context.Context, where model.ElectricFenceBoolExp) (*model.ElectricFenceMutationResponse, error)
	DeleteElectricFenceByPk(ctx context.Context, id int64) (*model1.ElectricFence, error)
	InsertElectricFence(ctx context.Context, objects []*model.ElectricFenceInsertInput) (*model.ElectricFenceMutationResponse, error)
	InsertElectricFenceOne(ctx context.Context, objects model.ElectricFenceInsertInput) (*model1.ElectricFence, error)
	UpdateElectricFence(ctx context.Context, inc *model.ElectricFenceIncInput, set *model.ElectricFenceSetInput, where model.ElectricFenceBoolExp) (*model.ElectricFenceMutationResponse, error)
	UpdateElectricFenceByPk(ctx context.Context, inc *model.ElectricFenceIncInput, set *model.ElectricFenceSetInput, id int64) (*model1.ElectricFence, error)
	UpdateElectricFenceByUnionPk(ctx context.Context, inc *model.ElectricFenceIncInput, set *model.ElectricFenceSetInput, electricFenceID string) (*model1.ElectricFence, error)
	DeleteElectricFenceByUnionPk(ctx context.Context, electricFenceID string) (*model1.ElectricFence, error)
	DeleteElectricFenceEnteranceRecord(ctx context.Context, where model.ElectricFenceEnteranceRecordBoolExp) (*model.ElectricFenceEnteranceRecordMutationResponse, error)
	DeleteElectricFenceEnteranceRecordByPk(ctx context.Context, id int64) (*model1.ElectricFenceEnteranceRecord, error)
	InsertElectricFenceEnteranceRecord(ctx context.Context, objects []*model.ElectricFenceEnteranceRecordInsertInput) (*model.ElectricFenceEnteranceRecordMutationResponse, error)
	InsertElectricFenceEnteranceRecordOne(ctx context.Context, objects model.ElectricFenceEnteranceRecordInsertInput) (*model1.ElectricFenceEnteranceRecord, error)
	UpdateElectricFenceEnteranceRecord(ctx context.Context, inc *model.ElectricFenceEnteranceRecordIncInput, set *model.ElectricFenceEnteranceRecordSetInput, where model.ElectricFenceEnteranceRecordBoolExp) (*model.ElectricFenceEnteranceRecordMutationResponse, error)
	UpdateElectricFenceEnteranceRecordByPk(ctx context.Context, inc *model.ElectricFenceEnteranceRecordIncInput, set *model.ElectricFenceEnteranceRecordSetInput, id int64) (*model1.ElectricFenceEnteranceRecord, error)
	UpdateElectricFenceEnteranceRecordByUnionPk(ctx context.Context, inc *model.ElectricFenceEnteranceRecordIncInput, set *model.ElectricFenceEnteranceRecordSetInput, recordID string) (*model1.ElectricFenceEnteranceRecord, error)
	DeleteElectricFenceEnteranceRecordByUnionPk(ctx context.Context, recordID string) (*model1.ElectricFenceEnteranceRecord, error)
	DeleteLimitSpeedLine(ctx context.Context, where model.LimitSpeedLineBoolExp) (*model.LimitSpeedLineMutationResponse, error)
	DeleteLimitSpeedLineByPk(ctx context.Context, id int64) (*model1.LimitSpeedLine, error)
	InsertLimitSpeedLine(ctx context.Context, objects []*model.LimitSpeedLineInsertInput) (*model.LimitSpeedLineMutationResponse, error)
	InsertLimitSpeedLineOne(ctx context.Context, objects model.LimitSpeedLineInsertInput) (*model1.LimitSpeedLine, error)
	UpdateLimitSpeedLine(ctx context.Context, inc *model.LimitSpeedLineIncInput, set *model.LimitSpeedLineSetInput, where model.LimitSpeedLineBoolExp) (*model.LimitSpeedLineMutationResponse, error)
	UpdateLimitSpeedLineByPk(ctx context.Context, inc *model.LimitSpeedLineIncInput, set *model.LimitSpeedLineSetInput, id int64) (*model1.LimitSpeedLine, error)
	UpdateLimitSpeedLineByUnionPk(ctx context.Context, inc *model.LimitSpeedLineIncInput, set *model.LimitSpeedLineSetInput, limitSpeedLineID string) (*model1.LimitSpeedLine, error)
	DeleteLimitSpeedLineByUnionPk(ctx context.Context, limitSpeedLineID string) (*model1.LimitSpeedLine, error)
	DeleteLimitSpeedLineTime(ctx context.Context, where model.LimitSpeedLineTimeBoolExp) (*model.LimitSpeedLineTimeMutationResponse, error)
	DeleteLimitSpeedLineTimeByPk(ctx context.Context, id int64) (*model1.LimitSpeedLineTime, error)
	InsertLimitSpeedLineTime(ctx context.Context, objects []*model.LimitSpeedLineTimeInsertInput) (*model.LimitSpeedLineTimeMutationResponse, error)
	InsertLimitSpeedLineTimeOne(ctx context.Context, objects model.LimitSpeedLineTimeInsertInput) (*model1.LimitSpeedLineTime, error)
	UpdateLimitSpeedLineTime(ctx context.Context, inc *model.LimitSpeedLineTimeIncInput, set *model.LimitSpeedLineTimeSetInput, where model.LimitSpeedLineTimeBoolExp) (*model.LimitSpeedLineTimeMutationResponse, error)
	UpdateLimitSpeedLineTimeByPk(ctx context.Context, inc *model.LimitSpeedLineTimeIncInput, set *model.LimitSpeedLineTimeSetInput, id int64) (*model1.LimitSpeedLineTime, error)
	UpdateLimitSpeedLineTimeByUnionPk(ctx context.Context, inc *model.LimitSpeedLineTimeIncInput, set *model.LimitSpeedLineTimeSetInput, limitSpeedLineTimeID string) (*model1.LimitSpeedLineTime, error)
	DeleteLimitSpeedLineTimeByUnionPk(ctx context.Context, limitSpeedLineTimeID string) (*model1.LimitSpeedLineTime, error)
	DeleteLimitSpeedPlan(ctx context.Context, where model.LimitSpeedPlanBoolExp) (*model.LimitSpeedPlanMutationResponse, error)
	DeleteLimitSpeedPlanByPk(ctx context.Context, id int64) (*model1.LimitSpeedPlan, error)
	InsertLimitSpeedPlan(ctx context.Context, objects []*model.LimitSpeedPlanInsertInput) (*model.LimitSpeedPlanMutationResponse, error)
	InsertLimitSpeedPlanOne(ctx context.Context, objects model.LimitSpeedPlanInsertInput) (*model1.LimitSpeedPlan, error)
	UpdateLimitSpeedPlan(ctx context.Context, inc *model.LimitSpeedPlanIncInput, set *model.LimitSpeedPlanSetInput, where model.LimitSpeedPlanBoolExp) (*model.LimitSpeedPlanMutationResponse, error)
	UpdateLimitSpeedPlanByPk(ctx context.Context, inc *model.LimitSpeedPlanIncInput, set *model.LimitSpeedPlanSetInput, id int64) (*model1.LimitSpeedPlan, error)
	UpdateLimitSpeedPlanByUnionPk(ctx context.Context, inc *model.LimitSpeedPlanIncInput, set *model.LimitSpeedPlanSetInput, limitSpeedPlanID string) (*model1.LimitSpeedPlan, error)
	DeleteLimitSpeedPlanByUnionPk(ctx context.Context, limitSpeedPlanID string) (*model1.LimitSpeedPlan, error)
	DeleteLimitSpeedPlanDetail(ctx context.Context, where model.LimitSpeedPlanDetailBoolExp) (*model.LimitSpeedPlanDetailMutationResponse, error)
	DeleteLimitSpeedPlanDetailByPk(ctx context.Context, id int64) (*model1.LimitSpeedPlanDetail, error)
	InsertLimitSpeedPlanDetail(ctx context.Context, objects []*model.LimitSpeedPlanDetailInsertInput) (*model.LimitSpeedPlanDetailMutationResponse, error)
	InsertLimitSpeedPlanDetailOne(ctx context.Context, objects model.LimitSpeedPlanDetailInsertInput) (*model1.LimitSpeedPlanDetail, error)
	UpdateLimitSpeedPlanDetail(ctx context.Context, inc *model.LimitSpeedPlanDetailIncInput, set *model.LimitSpeedPlanDetailSetInput, where model.LimitSpeedPlanDetailBoolExp) (*model.LimitSpeedPlanDetailMutationResponse, error)
	UpdateLimitSpeedPlanDetailByPk(ctx context.Context, inc *model.LimitSpeedPlanDetailIncInput, set *model.LimitSpeedPlanDetailSetInput, id int64) (*model1.LimitSpeedPlanDetail, error)
	UpdateLimitSpeedPlanDetailByUnionPk(ctx context.Context, inc *model.LimitSpeedPlanDetailIncInput, set *model.LimitSpeedPlanDetailSetInput, detailID string) (*model1.LimitSpeedPlanDetail, error)
	DeleteLimitSpeedPlanDetailByUnionPk(ctx context.Context, detailID string) (*model1.LimitSpeedPlanDetail, error)
	DeleteVehicleNightTravelRecord(ctx context.Context, where model.VehicleNightTravelRecordBoolExp) (*model.VehicleNightTravelRecordMutationResponse, error)
	DeleteVehicleNightTravelRecordByPk(ctx context.Context, id int64) (*model1.VehicleNightTravelRecord, error)
	InsertVehicleNightTravelRecord(ctx context.Context, objects []*model.VehicleNightTravelRecordInsertInput) (*model.VehicleNightTravelRecordMutationResponse, error)
	InsertVehicleNightTravelRecordOne(ctx context.Context, objects model.VehicleNightTravelRecordInsertInput) (*model1.VehicleNightTravelRecord, error)
	UpdateVehicleNightTravelRecord(ctx context.Context, inc *model.VehicleNightTravelRecordIncInput, set *model.VehicleNightTravelRecordSetInput, where model.VehicleNightTravelRecordBoolExp) (*model.VehicleNightTravelRecordMutationResponse, error)
	UpdateVehicleNightTravelRecordByPk(ctx context.Context, inc *model.VehicleNightTravelRecordIncInput, set *model.VehicleNightTravelRecordSetInput, id int64) (*model1.VehicleNightTravelRecord, error)
	UpdateVehicleNightTravelRecordByUnionPk(ctx context.Context, inc *model.VehicleNightTravelRecordIncInput, set *model.VehicleNightTravelRecordSetInput, recordID string) (*model1.VehicleNightTravelRecord, error)
	DeleteVehicleNightTravelRecordByUnionPk(ctx context.Context, recordID string) (*model1.VehicleNightTravelRecord, error)
	DeleteVehicleStopTravelRecord(ctx context.Context, where model.VehicleStopTravelRecordBoolExp) (*model.VehicleStopTravelRecordMutationResponse, error)
	DeleteVehicleStopTravelRecordByPk(ctx context.Context, id int64) (*model1.VehicleStopTravelRecord, error)
	InsertVehicleStopTravelRecord(ctx context.Context, objects []*model.VehicleStopTravelRecordInsertInput) (*model.VehicleStopTravelRecordMutationResponse, error)
	InsertVehicleStopTravelRecordOne(ctx context.Context, objects model.VehicleStopTravelRecordInsertInput) (*model1.VehicleStopTravelRecord, error)
	UpdateVehicleStopTravelRecord(ctx context.Context, inc *model.VehicleStopTravelRecordIncInput, set *model.VehicleStopTravelRecordSetInput, where model.VehicleStopTravelRecordBoolExp) (*model.VehicleStopTravelRecordMutationResponse, error)
	UpdateVehicleStopTravelRecordByPk(ctx context.Context, inc *model.VehicleStopTravelRecordIncInput, set *model.VehicleStopTravelRecordSetInput, id int64) (*model1.VehicleStopTravelRecord, error)
	UpdateVehicleStopTravelRecordByUnionPk(ctx context.Context, inc *model.VehicleStopTravelRecordIncInput, set *model.VehicleStopTravelRecordSetInput, recordID string) (*model1.VehicleStopTravelRecord, error)
	DeleteVehicleStopTravelRecordByUnionPk(ctx context.Context, recordID string) (*model1.VehicleStopTravelRecord, error)
}
type QueryResolver interface {
	ControlLine(ctx context.Context, distinctOn []model.ControlLineSelectColumn, limit *int, offset *int, orderBy []*model.ControlLineOrderBy, where *model.ControlLineBoolExp) ([]*model1.ControlLine, error)
	ControlLineAggregate(ctx context.Context, distinctOn []model.ControlLineSelectColumn, limit *int, offset *int, orderBy []*model.ControlLineOrderBy, where *model.ControlLineBoolExp) (*model.ControlLineAggregate, error)
	ControlLineByPk(ctx context.Context, id int64) (*model1.ControlLine, error)
	ControlLineByUnionPk(ctx context.Context, controlLineID string) (*model1.ControlLine, error)
	ControlLineTime(ctx context.Context, distinctOn []model.ControlLineTimeSelectColumn, limit *int, offset *int, orderBy []*model.ControlLineTimeOrderBy, where *model.ControlLineTimeBoolExp) ([]*model1.ControlLineTime, error)
	ControlLineTimeAggregate(ctx context.Context, distinctOn []model.ControlLineTimeSelectColumn, limit *int, offset *int, orderBy []*model.ControlLineTimeOrderBy, where *model.ControlLineTimeBoolExp) (*model.ControlLineTimeAggregate, error)
	ControlLineTimeByPk(ctx context.Context, id int64) (*model1.ControlLineTime, error)
	ControlLineTimeByUnionPk(ctx context.Context, controlLineTimeID string) (*model1.ControlLineTime, error)
	EcdFileCheckHis(ctx context.Context, distinctOn []model.EcdFileCheckHisSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileCheckHisOrderBy, where *model.EcdFileCheckHisBoolExp) ([]*model1.EcdFileCheckHis, error)
	EcdFileCheckHisAggregate(ctx context.Context, distinctOn []model.EcdFileCheckHisSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileCheckHisOrderBy, where *model.EcdFileCheckHisBoolExp) (*model.EcdFileCheckHisAggregate, error)
	EcdFileCheckHisByPk(ctx context.Context, id int64) (*model1.EcdFileCheckHis, error)
	EcdFileCheckHisByUnionPk(ctx context.Context, hisID string) (*model1.EcdFileCheckHis, error)
	EcdFileDistrict(ctx context.Context, distinctOn []model.EcdFileDistrictSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileDistrictOrderBy, where *model.EcdFileDistrictBoolExp) ([]*model1.EcdFileDistrict, error)
	EcdFileDistrictAggregate(ctx context.Context, distinctOn []model.EcdFileDistrictSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileDistrictOrderBy, where *model.EcdFileDistrictBoolExp) (*model.EcdFileDistrictAggregate, error)
	EcdFileDistrictByPk(ctx context.Context, id int64) (*model1.EcdFileDistrict, error)
	EcdFileDistrictByUnionPk(ctx context.Context, fileDistrictID string) (*model1.EcdFileDistrict, error)
	EcdFileLinePoint(ctx context.Context, distinctOn []model.EcdFileLinePointSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileLinePointOrderBy, where *model.EcdFileLinePointBoolExp) ([]*model1.EcdFileLinePoint, error)
	EcdFileLinePointAggregate(ctx context.Context, distinctOn []model.EcdFileLinePointSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileLinePointOrderBy, where *model.EcdFileLinePointBoolExp) (*model.EcdFileLinePointAggregate, error)
	EcdFileLinePointByPk(ctx context.Context, id int64) (*model1.EcdFileLinePoint, error)
	EcdFileLinePointByUnionPk(ctx context.Context, linePointID string) (*model1.EcdFileLinePoint, error)
	EcdFileMain(ctx context.Context, distinctOn []model.EcdFileMainSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileMainOrderBy, where *model.EcdFileMainBoolExp) ([]*model1.EcdFileMain, error)
	EcdFileMainAggregate(ctx context.Context, distinctOn []model.EcdFileMainSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileMainOrderBy, where *model.EcdFileMainBoolExp) (*model.EcdFileMainAggregate, error)
	EcdFileMainByPk(ctx context.Context, id int64) (*model1.EcdFileMain, error)
	EcdFileMainByUnionPk(ctx context.Context, fileMainID string) (*model1.EcdFileMain, error)
	EcdFileMainSub(ctx context.Context, distinctOn []model.EcdFileMainSubSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileMainSubOrderBy, where *model.EcdFileMainSubBoolExp) ([]*model1.EcdFileMainSub, error)
	EcdFileMainSubAggregate(ctx context.Context, distinctOn []model.EcdFileMainSubSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileMainSubOrderBy, where *model.EcdFileMainSubBoolExp) (*model.EcdFileMainSubAggregate, error)
	EcdFileMainSubByPk(ctx context.Context, id int64) (*model1.EcdFileMainSub, error)
	EcdFileMainSubByUnionPk(ctx context.Context, fileMainSubID string) (*model1.EcdFileMainSub, error)
	EcdFileVehicle(ctx context.Context, distinctOn []model.EcdFileVehicleSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileVehicleOrderBy, where *model.EcdFileVehicleBoolExp) ([]*model1.EcdFileVehicle, error)
	EcdFileVehicleAggregate(ctx context.Context, distinctOn []model.EcdFileVehicleSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileVehicleOrderBy, where *model.EcdFileVehicleBoolExp) (*model.EcdFileVehicleAggregate, error)
	EcdFileVehicleByPk(ctx context.Context, id int64) (*model1.EcdFileVehicle, error)
	EcdFileVehicleByUnionPk(ctx context.Context, fileVehicleID string) (*model1.EcdFileVehicle, error)
	EcdFileVehicleTime(ctx context.Context, distinctOn []model.EcdFileVehicleTimeSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileVehicleTimeOrderBy, where *model.EcdFileVehicleTimeBoolExp) ([]*model1.EcdFileVehicleTime, error)
	EcdFileVehicleTimeAggregate(ctx context.Context, distinctOn []model.EcdFileVehicleTimeSelectColumn, limit *int, offset *int, orderBy []*model.EcdFileVehicleTimeOrderBy, where *model.EcdFileVehicleTimeBoolExp) (*model.EcdFileVehicleTimeAggregate, error)
	EcdFileVehicleTimeByPk(ctx context.Context, id int64) (*model1.EcdFileVehicleTime, error)
	EcdFileVehicleTimeByUnionPk(ctx context.Context, vehicleTimeID string) (*model1.EcdFileVehicleTime, error)
	EcdLine(ctx context.Context, distinctOn []model.EcdLineSelectColumn, limit *int, offset *int, orderBy []*model.EcdLineOrderBy, where *model.EcdLineBoolExp) ([]*model1.EcdLine, error)
	EcdLineAggregate(ctx context.Context, distinctOn []model.EcdLineSelectColumn, limit *int, offset *int, orderBy []*model.EcdLineOrderBy, where *model.EcdLineBoolExp) (*model.EcdLineAggregate, error)
	EcdLineByPk(ctx context.Context, id int64) (*model1.EcdLine, error)
	EcdLineByUnionPk(ctx context.Context, lineID string) (*model1.EcdLine, error)
	ElectricFence(ctx context.Context, distinctOn []model.ElectricFenceSelectColumn, limit *int, offset *int, orderBy []*model.ElectricFenceOrderBy, where *model.ElectricFenceBoolExp) ([]*model1.ElectricFence, error)
	ElectricFenceAggregate(ctx context.Context, distinctOn []model.ElectricFenceSelectColumn, limit *int, offset *int, orderBy []*model.ElectricFenceOrderBy, where *model.ElectricFenceBoolExp) (*model.ElectricFenceAggregate, error)
	ElectricFenceByPk(ctx context.Context, id int64) (*model1.ElectricFence, error)
	ElectricFenceByUnionPk(ctx context.Context, electricFenceID string) (*model1.ElectricFence, error)
	ElectricFenceEnteranceRecord(ctx context.Context, distinctOn []model.ElectricFenceEnteranceRecordSelectColumn, limit *int, offset *int, orderBy []*model.ElectricFenceEnteranceRecordOrderBy, where *model.ElectricFenceEnteranceRecordBoolExp) ([]*model1.ElectricFenceEnteranceRecord, error)
	ElectricFenceEnteranceRecordAggregate(ctx context.Context, distinctOn []model.ElectricFenceEnteranceRecordSelectColumn, limit *int, offset *int, orderBy []*model.ElectricFenceEnteranceRecordOrderBy, where *model.ElectricFenceEnteranceRecordBoolExp) (*model.ElectricFenceEnteranceRecordAggregate, error)
	ElectricFenceEnteranceRecordByPk(ctx context.Context, id int64) (*model1.ElectricFenceEnteranceRecord, error)
	ElectricFenceEnteranceRecordByUnionPk(ctx context.Context, recordID string) (*model1.ElectricFenceEnteranceRecord, error)
	LimitSpeedLine(ctx context.Context, distinctOn []model.LimitSpeedLineSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedLineOrderBy, where *model.LimitSpeedLineBoolExp) ([]*model1.LimitSpeedLine, error)
	LimitSpeedLineAggregate(ctx context.Context, distinctOn []model.LimitSpeedLineSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedLineOrderBy, where *model.LimitSpeedLineBoolExp) (*model.LimitSpeedLineAggregate, error)
	LimitSpeedLineByPk(ctx context.Context, id int64) (*model1.LimitSpeedLine, error)
	LimitSpeedLineByUnionPk(ctx context.Context, limitSpeedLineID string) (*model1.LimitSpeedLine, error)
	LimitSpeedLineTime(ctx context.Context, distinctOn []model.LimitSpeedLineTimeSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedLineTimeOrderBy, where *model.LimitSpeedLineTimeBoolExp) ([]*model1.LimitSpeedLineTime, error)
	LimitSpeedLineTimeAggregate(ctx context.Context, distinctOn []model.LimitSpeedLineTimeSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedLineTimeOrderBy, where *model.LimitSpeedLineTimeBoolExp) (*model.LimitSpeedLineTimeAggregate, error)
	LimitSpeedLineTimeByPk(ctx context.Context, id int64) (*model1.LimitSpeedLineTime, error)
	LimitSpeedLineTimeByUnionPk(ctx context.Context, limitSpeedLineTimeID string) (*model1.LimitSpeedLineTime, error)
	LimitSpeedPlan(ctx context.Context, distinctOn []model.LimitSpeedPlanSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedPlanOrderBy, where *model.LimitSpeedPlanBoolExp) ([]*model1.LimitSpeedPlan, error)
	LimitSpeedPlanAggregate(ctx context.Context, distinctOn []model.LimitSpeedPlanSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedPlanOrderBy, where *model.LimitSpeedPlanBoolExp) (*model.LimitSpeedPlanAggregate, error)
	LimitSpeedPlanByPk(ctx context.Context, id int64) (*model1.LimitSpeedPlan, error)
	LimitSpeedPlanByUnionPk(ctx context.Context, limitSpeedPlanID string) (*model1.LimitSpeedPlan, error)
	LimitSpeedPlanDetail(ctx context.Context, distinctOn []model.LimitSpeedPlanDetailSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedPlanDetailOrderBy, where *model.LimitSpeedPlanDetailBoolExp) ([]*model1.LimitSpeedPlanDetail, error)
	LimitSpeedPlanDetailAggregate(ctx context.Context, distinctOn []model.LimitSpeedPlanDetailSelectColumn, limit *int, offset *int, orderBy []*model.LimitSpeedPlanDetailOrderBy, where *model.LimitSpeedPlanDetailBoolExp) (*model.LimitSpeedPlanDetailAggregate, error)
	LimitSpeedPlanDetailByPk(ctx context.Context, id int64) (*model1.LimitSpeedPlanDetail, error)
	LimitSpeedPlanDetailByUnionPk(ctx context.Context, detailID string) (*model1.LimitSpeedPlanDetail, error)
	VehicleNightTravelRecord(ctx context.Context, distinctOn []model.VehicleNightTravelRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleNightTravelRecordOrderBy, where *model.VehicleNightTravelRecordBoolExp) ([]*model1.VehicleNightTravelRecord, error)
	VehicleNightTravelRecordAggregate(ctx context.Context, distinctOn []model.VehicleNightTravelRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleNightTravelRecordOrderBy, where *model.VehicleNightTravelRecordBoolExp) (*model.VehicleNightTravelRecordAggregate, error)
	VehicleNightTravelRecordByPk(ctx context.Context, id int64) (*model1.VehicleNightTravelRecord, error)
	VehicleNightTravelRecordByUnionPk(ctx context.Context, recordID string) (*model1.VehicleNightTravelRecord, error)
	VehicleStopTravelRecord(ctx context.Context, distinctOn []model.VehicleStopTravelRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleStopTravelRecordOrderBy, where *model.VehicleStopTravelRecordBoolExp) ([]*model1.VehicleStopTravelRecord, error)
	VehicleStopTravelRecordAggregate(ctx context.Context, distinctOn []model.VehicleStopTravelRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleStopTravelRecordOrderBy, where *model.VehicleStopTravelRecordBoolExp) (*model.VehicleStopTravelRecordAggregate, error)
	VehicleStopTravelRecordByPk(ctx context.Context, id int64) (*model1.VehicleStopTravelRecord, error)
	VehicleStopTravelRecordByUnionPk(ctx context.Context, recordID string) (*model1.VehicleStopTravelRecord, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ControlLine.apply_reason":
		if e.complexity.ControlLine.ApplyReason == nil {
			break
		}

		return e.complexity.ControlLine.ApplyReason(childComplexity), true

	case "ControlLine.check_status":
		if e.complexity.ControlLine.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLine.CheckStatus(childComplexity), true

	case "ControlLine.check_time":
		if e.complexity.ControlLine.CheckTime == nil {
			break
		}

		return e.complexity.ControlLine.CheckTime(childComplexity), true

	case "ControlLine.check_user_id":
		if e.complexity.ControlLine.CheckUserID == nil {
			break
		}

		return e.complexity.ControlLine.CheckUserID(childComplexity), true

	case "ControlLine.control_level":
		if e.complexity.ControlLine.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLine.ControlLevel(childComplexity), true

	case "ControlLine.control_line_id":
		if e.complexity.ControlLine.ControlLineID == nil {
			break
		}

		return e.complexity.ControlLine.ControlLineID(childComplexity), true

	case "ControlLine.create_at":
		if e.complexity.ControlLine.CreateAt == nil {
			break
		}

		return e.complexity.ControlLine.CreateAt(childComplexity), true

	case "ControlLine.create_by":
		if e.complexity.ControlLine.CreateBy == nil {
			break
		}

		return e.complexity.ControlLine.CreateBy(childComplexity), true

	case "ControlLine.delete_at":
		if e.complexity.ControlLine.DeleteAt == nil {
			break
		}

		return e.complexity.ControlLine.DeleteAt(childComplexity), true

	case "ControlLine.delete_by":
		if e.complexity.ControlLine.DeleteBy == nil {
			break
		}

		return e.complexity.ControlLine.DeleteBy(childComplexity), true

	case "ControlLine.district_id":
		if e.complexity.ControlLine.DistrictID == nil {
			break
		}

		return e.complexity.ControlLine.DistrictID(childComplexity), true

	case "ControlLine.gis_data":
		if e.complexity.ControlLine.GisData == nil {
			break
		}

		return e.complexity.ControlLine.GisData(childComplexity), true

	case "ControlLine.id":
		if e.complexity.ControlLine.ID == nil {
			break
		}

		return e.complexity.ControlLine.ID(childComplexity), true

	case "ControlLine.is_delete":
		if e.complexity.ControlLine.IsDelete == nil {
			break
		}

		return e.complexity.ControlLine.IsDelete(childComplexity), true

	case "ControlLine.line_name":
		if e.complexity.ControlLine.LineName == nil {
			break
		}

		return e.complexity.ControlLine.LineName(childComplexity), true

	case "ControlLine.line_type":
		if e.complexity.ControlLine.LineType == nil {
			break
		}

		return e.complexity.ControlLine.LineType(childComplexity), true

	case "ControlLine.reject_reason":
		if e.complexity.ControlLine.RejectReason == nil {
			break
		}

		return e.complexity.ControlLine.RejectReason(childComplexity), true

	case "ControlLine.update_at":
		if e.complexity.ControlLine.UpdateAt == nil {
			break
		}

		return e.complexity.ControlLine.UpdateAt(childComplexity), true

	case "ControlLine.update_by":
		if e.complexity.ControlLine.UpdateBy == nil {
			break
		}

		return e.complexity.ControlLine.UpdateBy(childComplexity), true

	case "ControlLineAggregate.aggregate":
		if e.complexity.ControlLineAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ControlLineAggregate.Aggregate(childComplexity), true

	case "ControlLineAggregateFields.avg":
		if e.complexity.ControlLineAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.Avg(childComplexity), true

	case "ControlLineAggregateFields.count":
		if e.complexity.ControlLineAggregateFields.Count == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.Count(childComplexity), true

	case "ControlLineAggregateFields.max":
		if e.complexity.ControlLineAggregateFields.Max == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.Max(childComplexity), true

	case "ControlLineAggregateFields.min":
		if e.complexity.ControlLineAggregateFields.Min == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.Min(childComplexity), true

	case "ControlLineAggregateFields.stddev":
		if e.complexity.ControlLineAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.Stddev(childComplexity), true

	case "ControlLineAggregateFields.stddev_pop":
		if e.complexity.ControlLineAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.StddevPop(childComplexity), true

	case "ControlLineAggregateFields.stddev_samp":
		if e.complexity.ControlLineAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.StddevSamp(childComplexity), true

	case "ControlLineAggregateFields.sum":
		if e.complexity.ControlLineAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.Sum(childComplexity), true

	case "ControlLineAggregateFields.var_pop":
		if e.complexity.ControlLineAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.VarPop(childComplexity), true

	case "ControlLineAggregateFields.var_samp":
		if e.complexity.ControlLineAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.VarSamp(childComplexity), true

	case "ControlLineAggregateFields.variance":
		if e.complexity.ControlLineAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ControlLineAggregateFields.Variance(childComplexity), true

	case "ControlLineAvgFields.check_status":
		if e.complexity.ControlLineAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineAvgFields.CheckStatus(childComplexity), true

	case "ControlLineAvgFields.control_level":
		if e.complexity.ControlLineAvgFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineAvgFields.ControlLevel(childComplexity), true

	case "ControlLineAvgFields.id":
		if e.complexity.ControlLineAvgFields.ID == nil {
			break
		}

		return e.complexity.ControlLineAvgFields.ID(childComplexity), true

	case "ControlLineAvgFields.line_type":
		if e.complexity.ControlLineAvgFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineAvgFields.LineType(childComplexity), true

	case "ControlLineMaxFields.apply_reason":
		if e.complexity.ControlLineMaxFields.ApplyReason == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.ApplyReason(childComplexity), true

	case "ControlLineMaxFields.check_status":
		if e.complexity.ControlLineMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.CheckStatus(childComplexity), true

	case "ControlLineMaxFields.check_time":
		if e.complexity.ControlLineMaxFields.CheckTime == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.CheckTime(childComplexity), true

	case "ControlLineMaxFields.check_user_id":
		if e.complexity.ControlLineMaxFields.CheckUserID == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.CheckUserID(childComplexity), true

	case "ControlLineMaxFields.control_level":
		if e.complexity.ControlLineMaxFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.ControlLevel(childComplexity), true

	case "ControlLineMaxFields.control_line_id":
		if e.complexity.ControlLineMaxFields.ControlLineID == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.ControlLineID(childComplexity), true

	case "ControlLineMaxFields.create_at":
		if e.complexity.ControlLineMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.CreateAt(childComplexity), true

	case "ControlLineMaxFields.create_by":
		if e.complexity.ControlLineMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.CreateBy(childComplexity), true

	case "ControlLineMaxFields.delete_at":
		if e.complexity.ControlLineMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.DeleteAt(childComplexity), true

	case "ControlLineMaxFields.delete_by":
		if e.complexity.ControlLineMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.DeleteBy(childComplexity), true

	case "ControlLineMaxFields.district_id":
		if e.complexity.ControlLineMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.DistrictID(childComplexity), true

	case "ControlLineMaxFields.gis_data":
		if e.complexity.ControlLineMaxFields.GisData == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.GisData(childComplexity), true

	case "ControlLineMaxFields.id":
		if e.complexity.ControlLineMaxFields.ID == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.ID(childComplexity), true

	case "ControlLineMaxFields.is_delete":
		if e.complexity.ControlLineMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.IsDelete(childComplexity), true

	case "ControlLineMaxFields.line_name":
		if e.complexity.ControlLineMaxFields.LineName == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.LineName(childComplexity), true

	case "ControlLineMaxFields.line_type":
		if e.complexity.ControlLineMaxFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.LineType(childComplexity), true

	case "ControlLineMaxFields.reject_reason":
		if e.complexity.ControlLineMaxFields.RejectReason == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.RejectReason(childComplexity), true

	case "ControlLineMaxFields.update_at":
		if e.complexity.ControlLineMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.UpdateAt(childComplexity), true

	case "ControlLineMaxFields.update_by":
		if e.complexity.ControlLineMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.ControlLineMaxFields.UpdateBy(childComplexity), true

	case "ControlLineMinFields.apply_reason":
		if e.complexity.ControlLineMinFields.ApplyReason == nil {
			break
		}

		return e.complexity.ControlLineMinFields.ApplyReason(childComplexity), true

	case "ControlLineMinFields.check_status":
		if e.complexity.ControlLineMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineMinFields.CheckStatus(childComplexity), true

	case "ControlLineMinFields.check_time":
		if e.complexity.ControlLineMinFields.CheckTime == nil {
			break
		}

		return e.complexity.ControlLineMinFields.CheckTime(childComplexity), true

	case "ControlLineMinFields.check_user_id":
		if e.complexity.ControlLineMinFields.CheckUserID == nil {
			break
		}

		return e.complexity.ControlLineMinFields.CheckUserID(childComplexity), true

	case "ControlLineMinFields.control_level":
		if e.complexity.ControlLineMinFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineMinFields.ControlLevel(childComplexity), true

	case "ControlLineMinFields.control_line_id":
		if e.complexity.ControlLineMinFields.ControlLineID == nil {
			break
		}

		return e.complexity.ControlLineMinFields.ControlLineID(childComplexity), true

	case "ControlLineMinFields.create_at":
		if e.complexity.ControlLineMinFields.CreateAt == nil {
			break
		}

		return e.complexity.ControlLineMinFields.CreateAt(childComplexity), true

	case "ControlLineMinFields.create_by":
		if e.complexity.ControlLineMinFields.CreateBy == nil {
			break
		}

		return e.complexity.ControlLineMinFields.CreateBy(childComplexity), true

	case "ControlLineMinFields.delete_at":
		if e.complexity.ControlLineMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.ControlLineMinFields.DeleteAt(childComplexity), true

	case "ControlLineMinFields.delete_by":
		if e.complexity.ControlLineMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.ControlLineMinFields.DeleteBy(childComplexity), true

	case "ControlLineMinFields.district_id":
		if e.complexity.ControlLineMinFields.DistrictID == nil {
			break
		}

		return e.complexity.ControlLineMinFields.DistrictID(childComplexity), true

	case "ControlLineMinFields.gis_data":
		if e.complexity.ControlLineMinFields.GisData == nil {
			break
		}

		return e.complexity.ControlLineMinFields.GisData(childComplexity), true

	case "ControlLineMinFields.id":
		if e.complexity.ControlLineMinFields.ID == nil {
			break
		}

		return e.complexity.ControlLineMinFields.ID(childComplexity), true

	case "ControlLineMinFields.is_delete":
		if e.complexity.ControlLineMinFields.IsDelete == nil {
			break
		}

		return e.complexity.ControlLineMinFields.IsDelete(childComplexity), true

	case "ControlLineMinFields.line_name":
		if e.complexity.ControlLineMinFields.LineName == nil {
			break
		}

		return e.complexity.ControlLineMinFields.LineName(childComplexity), true

	case "ControlLineMinFields.line_type":
		if e.complexity.ControlLineMinFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineMinFields.LineType(childComplexity), true

	case "ControlLineMinFields.reject_reason":
		if e.complexity.ControlLineMinFields.RejectReason == nil {
			break
		}

		return e.complexity.ControlLineMinFields.RejectReason(childComplexity), true

	case "ControlLineMinFields.update_at":
		if e.complexity.ControlLineMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.ControlLineMinFields.UpdateAt(childComplexity), true

	case "ControlLineMinFields.update_by":
		if e.complexity.ControlLineMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.ControlLineMinFields.UpdateBy(childComplexity), true

	case "ControlLineMutationResponse.affected_rows":
		if e.complexity.ControlLineMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ControlLineMutationResponse.AffectedRows(childComplexity), true

	case "ControlLineMutationResponse.returning":
		if e.complexity.ControlLineMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ControlLineMutationResponse.Returning(childComplexity), true

	case "ControlLineStddevFields.check_status":
		if e.complexity.ControlLineStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineStddevFields.CheckStatus(childComplexity), true

	case "ControlLineStddevFields.control_level":
		if e.complexity.ControlLineStddevFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineStddevFields.ControlLevel(childComplexity), true

	case "ControlLineStddevFields.id":
		if e.complexity.ControlLineStddevFields.ID == nil {
			break
		}

		return e.complexity.ControlLineStddevFields.ID(childComplexity), true

	case "ControlLineStddevFields.line_type":
		if e.complexity.ControlLineStddevFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineStddevFields.LineType(childComplexity), true

	case "ControlLineStddevPopFields.check_status":
		if e.complexity.ControlLineStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineStddevPopFields.CheckStatus(childComplexity), true

	case "ControlLineStddevPopFields.control_level":
		if e.complexity.ControlLineStddevPopFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineStddevPopFields.ControlLevel(childComplexity), true

	case "ControlLineStddevPopFields.id":
		if e.complexity.ControlLineStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ControlLineStddevPopFields.ID(childComplexity), true

	case "ControlLineStddevPopFields.line_type":
		if e.complexity.ControlLineStddevPopFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineStddevPopFields.LineType(childComplexity), true

	case "ControlLineStddevSampFields.check_status":
		if e.complexity.ControlLineStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineStddevSampFields.CheckStatus(childComplexity), true

	case "ControlLineStddevSampFields.control_level":
		if e.complexity.ControlLineStddevSampFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineStddevSampFields.ControlLevel(childComplexity), true

	case "ControlLineStddevSampFields.id":
		if e.complexity.ControlLineStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ControlLineStddevSampFields.ID(childComplexity), true

	case "ControlLineStddevSampFields.line_type":
		if e.complexity.ControlLineStddevSampFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineStddevSampFields.LineType(childComplexity), true

	case "ControlLineSumFields.check_status":
		if e.complexity.ControlLineSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineSumFields.CheckStatus(childComplexity), true

	case "ControlLineSumFields.control_level":
		if e.complexity.ControlLineSumFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineSumFields.ControlLevel(childComplexity), true

	case "ControlLineSumFields.id":
		if e.complexity.ControlLineSumFields.ID == nil {
			break
		}

		return e.complexity.ControlLineSumFields.ID(childComplexity), true

	case "ControlLineSumFields.line_type":
		if e.complexity.ControlLineSumFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineSumFields.LineType(childComplexity), true

	case "ControlLineTime.control_line_id":
		if e.complexity.ControlLineTime.ControlLineID == nil {
			break
		}

		return e.complexity.ControlLineTime.ControlLineID(childComplexity), true

	case "ControlLineTime.control_line_time_id":
		if e.complexity.ControlLineTime.ControlLineTimeID == nil {
			break
		}

		return e.complexity.ControlLineTime.ControlLineTimeID(childComplexity), true

	case "ControlLineTime.create_at":
		if e.complexity.ControlLineTime.CreateAt == nil {
			break
		}

		return e.complexity.ControlLineTime.CreateAt(childComplexity), true

	case "ControlLineTime.create_by":
		if e.complexity.ControlLineTime.CreateBy == nil {
			break
		}

		return e.complexity.ControlLineTime.CreateBy(childComplexity), true

	case "ControlLineTime.delete_at":
		if e.complexity.ControlLineTime.DeleteAt == nil {
			break
		}

		return e.complexity.ControlLineTime.DeleteAt(childComplexity), true

	case "ControlLineTime.delete_by":
		if e.complexity.ControlLineTime.DeleteBy == nil {
			break
		}

		return e.complexity.ControlLineTime.DeleteBy(childComplexity), true

	case "ControlLineTime.end_time":
		if e.complexity.ControlLineTime.EndTime == nil {
			break
		}

		return e.complexity.ControlLineTime.EndTime(childComplexity), true

	case "ControlLineTime.id":
		if e.complexity.ControlLineTime.ID == nil {
			break
		}

		return e.complexity.ControlLineTime.ID(childComplexity), true

	case "ControlLineTime.is_delete":
		if e.complexity.ControlLineTime.IsDelete == nil {
			break
		}

		return e.complexity.ControlLineTime.IsDelete(childComplexity), true

	case "ControlLineTime.start_time":
		if e.complexity.ControlLineTime.StartTime == nil {
			break
		}

		return e.complexity.ControlLineTime.StartTime(childComplexity), true

	case "ControlLineTime.update_at":
		if e.complexity.ControlLineTime.UpdateAt == nil {
			break
		}

		return e.complexity.ControlLineTime.UpdateAt(childComplexity), true

	case "ControlLineTime.update_by":
		if e.complexity.ControlLineTime.UpdateBy == nil {
			break
		}

		return e.complexity.ControlLineTime.UpdateBy(childComplexity), true

	case "ControlLineTimeAggregate.aggregate":
		if e.complexity.ControlLineTimeAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregate.Aggregate(childComplexity), true

	case "ControlLineTimeAggregateFields.avg":
		if e.complexity.ControlLineTimeAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.Avg(childComplexity), true

	case "ControlLineTimeAggregateFields.count":
		if e.complexity.ControlLineTimeAggregateFields.Count == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.Count(childComplexity), true

	case "ControlLineTimeAggregateFields.max":
		if e.complexity.ControlLineTimeAggregateFields.Max == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.Max(childComplexity), true

	case "ControlLineTimeAggregateFields.min":
		if e.complexity.ControlLineTimeAggregateFields.Min == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.Min(childComplexity), true

	case "ControlLineTimeAggregateFields.stddev":
		if e.complexity.ControlLineTimeAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.Stddev(childComplexity), true

	case "ControlLineTimeAggregateFields.stddev_pop":
		if e.complexity.ControlLineTimeAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.StddevPop(childComplexity), true

	case "ControlLineTimeAggregateFields.stddev_samp":
		if e.complexity.ControlLineTimeAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.StddevSamp(childComplexity), true

	case "ControlLineTimeAggregateFields.sum":
		if e.complexity.ControlLineTimeAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.Sum(childComplexity), true

	case "ControlLineTimeAggregateFields.var_pop":
		if e.complexity.ControlLineTimeAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.VarPop(childComplexity), true

	case "ControlLineTimeAggregateFields.var_samp":
		if e.complexity.ControlLineTimeAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.VarSamp(childComplexity), true

	case "ControlLineTimeAggregateFields.variance":
		if e.complexity.ControlLineTimeAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ControlLineTimeAggregateFields.Variance(childComplexity), true

	case "ControlLineTimeAvgFields.id":
		if e.complexity.ControlLineTimeAvgFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeAvgFields.ID(childComplexity), true

	case "ControlLineTimeMaxFields.control_line_id":
		if e.complexity.ControlLineTimeMaxFields.ControlLineID == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.ControlLineID(childComplexity), true

	case "ControlLineTimeMaxFields.control_line_time_id":
		if e.complexity.ControlLineTimeMaxFields.ControlLineTimeID == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.ControlLineTimeID(childComplexity), true

	case "ControlLineTimeMaxFields.create_at":
		if e.complexity.ControlLineTimeMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.CreateAt(childComplexity), true

	case "ControlLineTimeMaxFields.create_by":
		if e.complexity.ControlLineTimeMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.CreateBy(childComplexity), true

	case "ControlLineTimeMaxFields.delete_at":
		if e.complexity.ControlLineTimeMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.DeleteAt(childComplexity), true

	case "ControlLineTimeMaxFields.delete_by":
		if e.complexity.ControlLineTimeMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.DeleteBy(childComplexity), true

	case "ControlLineTimeMaxFields.end_time":
		if e.complexity.ControlLineTimeMaxFields.EndTime == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.EndTime(childComplexity), true

	case "ControlLineTimeMaxFields.id":
		if e.complexity.ControlLineTimeMaxFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.ID(childComplexity), true

	case "ControlLineTimeMaxFields.is_delete":
		if e.complexity.ControlLineTimeMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.IsDelete(childComplexity), true

	case "ControlLineTimeMaxFields.start_time":
		if e.complexity.ControlLineTimeMaxFields.StartTime == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.StartTime(childComplexity), true

	case "ControlLineTimeMaxFields.update_at":
		if e.complexity.ControlLineTimeMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.UpdateAt(childComplexity), true

	case "ControlLineTimeMaxFields.update_by":
		if e.complexity.ControlLineTimeMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.ControlLineTimeMaxFields.UpdateBy(childComplexity), true

	case "ControlLineTimeMinFields.control_line_id":
		if e.complexity.ControlLineTimeMinFields.ControlLineID == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.ControlLineID(childComplexity), true

	case "ControlLineTimeMinFields.control_line_time_id":
		if e.complexity.ControlLineTimeMinFields.ControlLineTimeID == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.ControlLineTimeID(childComplexity), true

	case "ControlLineTimeMinFields.create_at":
		if e.complexity.ControlLineTimeMinFields.CreateAt == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.CreateAt(childComplexity), true

	case "ControlLineTimeMinFields.create_by":
		if e.complexity.ControlLineTimeMinFields.CreateBy == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.CreateBy(childComplexity), true

	case "ControlLineTimeMinFields.delete_at":
		if e.complexity.ControlLineTimeMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.DeleteAt(childComplexity), true

	case "ControlLineTimeMinFields.delete_by":
		if e.complexity.ControlLineTimeMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.DeleteBy(childComplexity), true

	case "ControlLineTimeMinFields.end_time":
		if e.complexity.ControlLineTimeMinFields.EndTime == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.EndTime(childComplexity), true

	case "ControlLineTimeMinFields.id":
		if e.complexity.ControlLineTimeMinFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.ID(childComplexity), true

	case "ControlLineTimeMinFields.is_delete":
		if e.complexity.ControlLineTimeMinFields.IsDelete == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.IsDelete(childComplexity), true

	case "ControlLineTimeMinFields.start_time":
		if e.complexity.ControlLineTimeMinFields.StartTime == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.StartTime(childComplexity), true

	case "ControlLineTimeMinFields.update_at":
		if e.complexity.ControlLineTimeMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.UpdateAt(childComplexity), true

	case "ControlLineTimeMinFields.update_by":
		if e.complexity.ControlLineTimeMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.ControlLineTimeMinFields.UpdateBy(childComplexity), true

	case "ControlLineTimeMutationResponse.affected_rows":
		if e.complexity.ControlLineTimeMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ControlLineTimeMutationResponse.AffectedRows(childComplexity), true

	case "ControlLineTimeMutationResponse.returning":
		if e.complexity.ControlLineTimeMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ControlLineTimeMutationResponse.Returning(childComplexity), true

	case "ControlLineTimeStddevFields.id":
		if e.complexity.ControlLineTimeStddevFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeStddevFields.ID(childComplexity), true

	case "ControlLineTimeStddevPopFields.id":
		if e.complexity.ControlLineTimeStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeStddevPopFields.ID(childComplexity), true

	case "ControlLineTimeStddevSampFields.id":
		if e.complexity.ControlLineTimeStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeStddevSampFields.ID(childComplexity), true

	case "ControlLineTimeSumFields.id":
		if e.complexity.ControlLineTimeSumFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeSumFields.ID(childComplexity), true

	case "ControlLineTimeVarPopFields.id":
		if e.complexity.ControlLineTimeVarPopFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeVarPopFields.ID(childComplexity), true

	case "ControlLineTimeVarSampFields.id":
		if e.complexity.ControlLineTimeVarSampFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeVarSampFields.ID(childComplexity), true

	case "ControlLineTimeVarianceFields.id":
		if e.complexity.ControlLineTimeVarianceFields.ID == nil {
			break
		}

		return e.complexity.ControlLineTimeVarianceFields.ID(childComplexity), true

	case "ControlLineVarPopFields.check_status":
		if e.complexity.ControlLineVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineVarPopFields.CheckStatus(childComplexity), true

	case "ControlLineVarPopFields.control_level":
		if e.complexity.ControlLineVarPopFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineVarPopFields.ControlLevel(childComplexity), true

	case "ControlLineVarPopFields.id":
		if e.complexity.ControlLineVarPopFields.ID == nil {
			break
		}

		return e.complexity.ControlLineVarPopFields.ID(childComplexity), true

	case "ControlLineVarPopFields.line_type":
		if e.complexity.ControlLineVarPopFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineVarPopFields.LineType(childComplexity), true

	case "ControlLineVarSampFields.check_status":
		if e.complexity.ControlLineVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineVarSampFields.CheckStatus(childComplexity), true

	case "ControlLineVarSampFields.control_level":
		if e.complexity.ControlLineVarSampFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineVarSampFields.ControlLevel(childComplexity), true

	case "ControlLineVarSampFields.id":
		if e.complexity.ControlLineVarSampFields.ID == nil {
			break
		}

		return e.complexity.ControlLineVarSampFields.ID(childComplexity), true

	case "ControlLineVarSampFields.line_type":
		if e.complexity.ControlLineVarSampFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineVarSampFields.LineType(childComplexity), true

	case "ControlLineVarianceFields.check_status":
		if e.complexity.ControlLineVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.ControlLineVarianceFields.CheckStatus(childComplexity), true

	case "ControlLineVarianceFields.control_level":
		if e.complexity.ControlLineVarianceFields.ControlLevel == nil {
			break
		}

		return e.complexity.ControlLineVarianceFields.ControlLevel(childComplexity), true

	case "ControlLineVarianceFields.id":
		if e.complexity.ControlLineVarianceFields.ID == nil {
			break
		}

		return e.complexity.ControlLineVarianceFields.ID(childComplexity), true

	case "ControlLineVarianceFields.line_type":
		if e.complexity.ControlLineVarianceFields.LineType == nil {
			break
		}

		return e.complexity.ControlLineVarianceFields.LineType(childComplexity), true

	case "EcdFileCheckHis.check_status":
		if e.complexity.EcdFileCheckHis.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.CheckStatus(childComplexity), true

	case "EcdFileCheckHis.create_at":
		if e.complexity.EcdFileCheckHis.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.CreateAt(childComplexity), true

	case "EcdFileCheckHis.create_by":
		if e.complexity.EcdFileCheckHis.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.CreateBy(childComplexity), true

	case "EcdFileCheckHis.delete_at":
		if e.complexity.EcdFileCheckHis.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.DeleteAt(childComplexity), true

	case "EcdFileCheckHis.delete_by":
		if e.complexity.EcdFileCheckHis.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.DeleteBy(childComplexity), true

	case "EcdFileCheckHis.file_main_id":
		if e.complexity.EcdFileCheckHis.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.FileMainID(childComplexity), true

	case "EcdFileCheckHis.his_id":
		if e.complexity.EcdFileCheckHis.HisID == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.HisID(childComplexity), true

	case "EcdFileCheckHis.id":
		if e.complexity.EcdFileCheckHis.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.ID(childComplexity), true

	case "EcdFileCheckHis.is_delete":
		if e.complexity.EcdFileCheckHis.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.IsDelete(childComplexity), true

	case "EcdFileCheckHis.oper_time":
		if e.complexity.EcdFileCheckHis.OperTime == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.OperTime(childComplexity), true

	case "EcdFileCheckHis.oper_type":
		if e.complexity.EcdFileCheckHis.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.OperType(childComplexity), true

	case "EcdFileCheckHis.rec_time":
		if e.complexity.EcdFileCheckHis.RecTime == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.RecTime(childComplexity), true

	case "EcdFileCheckHis.remark":
		if e.complexity.EcdFileCheckHis.Remark == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.Remark(childComplexity), true

	case "EcdFileCheckHis.suggest":
		if e.complexity.EcdFileCheckHis.Suggest == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.Suggest(childComplexity), true

	case "EcdFileCheckHis.update_at":
		if e.complexity.EcdFileCheckHis.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.UpdateAt(childComplexity), true

	case "EcdFileCheckHis.update_by":
		if e.complexity.EcdFileCheckHis.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.UpdateBy(childComplexity), true

	case "EcdFileCheckHis.user_id":
		if e.complexity.EcdFileCheckHis.UserID == nil {
			break
		}

		return e.complexity.EcdFileCheckHis.UserID(childComplexity), true

	case "EcdFileCheckHisAggregate.aggregate":
		if e.complexity.EcdFileCheckHisAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregate.Aggregate(childComplexity), true

	case "EcdFileCheckHisAggregateFields.avg":
		if e.complexity.EcdFileCheckHisAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.Avg(childComplexity), true

	case "EcdFileCheckHisAggregateFields.count":
		if e.complexity.EcdFileCheckHisAggregateFields.Count == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.Count(childComplexity), true

	case "EcdFileCheckHisAggregateFields.max":
		if e.complexity.EcdFileCheckHisAggregateFields.Max == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.Max(childComplexity), true

	case "EcdFileCheckHisAggregateFields.min":
		if e.complexity.EcdFileCheckHisAggregateFields.Min == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.Min(childComplexity), true

	case "EcdFileCheckHisAggregateFields.stddev":
		if e.complexity.EcdFileCheckHisAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.Stddev(childComplexity), true

	case "EcdFileCheckHisAggregateFields.stddev_pop":
		if e.complexity.EcdFileCheckHisAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.StddevPop(childComplexity), true

	case "EcdFileCheckHisAggregateFields.stddev_samp":
		if e.complexity.EcdFileCheckHisAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.StddevSamp(childComplexity), true

	case "EcdFileCheckHisAggregateFields.sum":
		if e.complexity.EcdFileCheckHisAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.Sum(childComplexity), true

	case "EcdFileCheckHisAggregateFields.var_pop":
		if e.complexity.EcdFileCheckHisAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.VarPop(childComplexity), true

	case "EcdFileCheckHisAggregateFields.var_samp":
		if e.complexity.EcdFileCheckHisAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.VarSamp(childComplexity), true

	case "EcdFileCheckHisAggregateFields.variance":
		if e.complexity.EcdFileCheckHisAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAggregateFields.Variance(childComplexity), true

	case "EcdFileCheckHisAvgFields.check_status":
		if e.complexity.EcdFileCheckHisAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAvgFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisAvgFields.id":
		if e.complexity.EcdFileCheckHisAvgFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAvgFields.ID(childComplexity), true

	case "EcdFileCheckHisAvgFields.oper_type":
		if e.complexity.EcdFileCheckHisAvgFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisAvgFields.OperType(childComplexity), true

	case "EcdFileCheckHisMaxFields.check_status":
		if e.complexity.EcdFileCheckHisMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisMaxFields.create_at":
		if e.complexity.EcdFileCheckHisMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.CreateAt(childComplexity), true

	case "EcdFileCheckHisMaxFields.create_by":
		if e.complexity.EcdFileCheckHisMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.CreateBy(childComplexity), true

	case "EcdFileCheckHisMaxFields.delete_at":
		if e.complexity.EcdFileCheckHisMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.DeleteAt(childComplexity), true

	case "EcdFileCheckHisMaxFields.delete_by":
		if e.complexity.EcdFileCheckHisMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.DeleteBy(childComplexity), true

	case "EcdFileCheckHisMaxFields.file_main_id":
		if e.complexity.EcdFileCheckHisMaxFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.FileMainID(childComplexity), true

	case "EcdFileCheckHisMaxFields.his_id":
		if e.complexity.EcdFileCheckHisMaxFields.HisID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.HisID(childComplexity), true

	case "EcdFileCheckHisMaxFields.id":
		if e.complexity.EcdFileCheckHisMaxFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.ID(childComplexity), true

	case "EcdFileCheckHisMaxFields.is_delete":
		if e.complexity.EcdFileCheckHisMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.IsDelete(childComplexity), true

	case "EcdFileCheckHisMaxFields.oper_time":
		if e.complexity.EcdFileCheckHisMaxFields.OperTime == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.OperTime(childComplexity), true

	case "EcdFileCheckHisMaxFields.oper_type":
		if e.complexity.EcdFileCheckHisMaxFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.OperType(childComplexity), true

	case "EcdFileCheckHisMaxFields.rec_time":
		if e.complexity.EcdFileCheckHisMaxFields.RecTime == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.RecTime(childComplexity), true

	case "EcdFileCheckHisMaxFields.remark":
		if e.complexity.EcdFileCheckHisMaxFields.Remark == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.Remark(childComplexity), true

	case "EcdFileCheckHisMaxFields.suggest":
		if e.complexity.EcdFileCheckHisMaxFields.Suggest == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.Suggest(childComplexity), true

	case "EcdFileCheckHisMaxFields.update_at":
		if e.complexity.EcdFileCheckHisMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.UpdateAt(childComplexity), true

	case "EcdFileCheckHisMaxFields.update_by":
		if e.complexity.EcdFileCheckHisMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.UpdateBy(childComplexity), true

	case "EcdFileCheckHisMaxFields.user_id":
		if e.complexity.EcdFileCheckHisMaxFields.UserID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMaxFields.UserID(childComplexity), true

	case "EcdFileCheckHisMinFields.check_status":
		if e.complexity.EcdFileCheckHisMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisMinFields.create_at":
		if e.complexity.EcdFileCheckHisMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.CreateAt(childComplexity), true

	case "EcdFileCheckHisMinFields.create_by":
		if e.complexity.EcdFileCheckHisMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.CreateBy(childComplexity), true

	case "EcdFileCheckHisMinFields.delete_at":
		if e.complexity.EcdFileCheckHisMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.DeleteAt(childComplexity), true

	case "EcdFileCheckHisMinFields.delete_by":
		if e.complexity.EcdFileCheckHisMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.DeleteBy(childComplexity), true

	case "EcdFileCheckHisMinFields.file_main_id":
		if e.complexity.EcdFileCheckHisMinFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.FileMainID(childComplexity), true

	case "EcdFileCheckHisMinFields.his_id":
		if e.complexity.EcdFileCheckHisMinFields.HisID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.HisID(childComplexity), true

	case "EcdFileCheckHisMinFields.id":
		if e.complexity.EcdFileCheckHisMinFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.ID(childComplexity), true

	case "EcdFileCheckHisMinFields.is_delete":
		if e.complexity.EcdFileCheckHisMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.IsDelete(childComplexity), true

	case "EcdFileCheckHisMinFields.oper_time":
		if e.complexity.EcdFileCheckHisMinFields.OperTime == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.OperTime(childComplexity), true

	case "EcdFileCheckHisMinFields.oper_type":
		if e.complexity.EcdFileCheckHisMinFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.OperType(childComplexity), true

	case "EcdFileCheckHisMinFields.rec_time":
		if e.complexity.EcdFileCheckHisMinFields.RecTime == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.RecTime(childComplexity), true

	case "EcdFileCheckHisMinFields.remark":
		if e.complexity.EcdFileCheckHisMinFields.Remark == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.Remark(childComplexity), true

	case "EcdFileCheckHisMinFields.suggest":
		if e.complexity.EcdFileCheckHisMinFields.Suggest == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.Suggest(childComplexity), true

	case "EcdFileCheckHisMinFields.update_at":
		if e.complexity.EcdFileCheckHisMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.UpdateAt(childComplexity), true

	case "EcdFileCheckHisMinFields.update_by":
		if e.complexity.EcdFileCheckHisMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.UpdateBy(childComplexity), true

	case "EcdFileCheckHisMinFields.user_id":
		if e.complexity.EcdFileCheckHisMinFields.UserID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMinFields.UserID(childComplexity), true

	case "EcdFileCheckHisMutationResponse.affected_rows":
		if e.complexity.EcdFileCheckHisMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMutationResponse.AffectedRows(childComplexity), true

	case "EcdFileCheckHisMutationResponse.returning":
		if e.complexity.EcdFileCheckHisMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EcdFileCheckHisMutationResponse.Returning(childComplexity), true

	case "EcdFileCheckHisStddevFields.check_status":
		if e.complexity.EcdFileCheckHisStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisStddevFields.id":
		if e.complexity.EcdFileCheckHisStddevFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevFields.ID(childComplexity), true

	case "EcdFileCheckHisStddevFields.oper_type":
		if e.complexity.EcdFileCheckHisStddevFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevFields.OperType(childComplexity), true

	case "EcdFileCheckHisStddevPopFields.check_status":
		if e.complexity.EcdFileCheckHisStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevPopFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisStddevPopFields.id":
		if e.complexity.EcdFileCheckHisStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevPopFields.ID(childComplexity), true

	case "EcdFileCheckHisStddevPopFields.oper_type":
		if e.complexity.EcdFileCheckHisStddevPopFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevPopFields.OperType(childComplexity), true

	case "EcdFileCheckHisStddevSampFields.check_status":
		if e.complexity.EcdFileCheckHisStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevSampFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisStddevSampFields.id":
		if e.complexity.EcdFileCheckHisStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevSampFields.ID(childComplexity), true

	case "EcdFileCheckHisStddevSampFields.oper_type":
		if e.complexity.EcdFileCheckHisStddevSampFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisStddevSampFields.OperType(childComplexity), true

	case "EcdFileCheckHisSumFields.check_status":
		if e.complexity.EcdFileCheckHisSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisSumFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisSumFields.id":
		if e.complexity.EcdFileCheckHisSumFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisSumFields.ID(childComplexity), true

	case "EcdFileCheckHisSumFields.oper_type":
		if e.complexity.EcdFileCheckHisSumFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisSumFields.OperType(childComplexity), true

	case "EcdFileCheckHisVarPopFields.check_status":
		if e.complexity.EcdFileCheckHisVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarPopFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisVarPopFields.id":
		if e.complexity.EcdFileCheckHisVarPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarPopFields.ID(childComplexity), true

	case "EcdFileCheckHisVarPopFields.oper_type":
		if e.complexity.EcdFileCheckHisVarPopFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarPopFields.OperType(childComplexity), true

	case "EcdFileCheckHisVarSampFields.check_status":
		if e.complexity.EcdFileCheckHisVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarSampFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisVarSampFields.id":
		if e.complexity.EcdFileCheckHisVarSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarSampFields.ID(childComplexity), true

	case "EcdFileCheckHisVarSampFields.oper_type":
		if e.complexity.EcdFileCheckHisVarSampFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarSampFields.OperType(childComplexity), true

	case "EcdFileCheckHisVarianceFields.check_status":
		if e.complexity.EcdFileCheckHisVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarianceFields.CheckStatus(childComplexity), true

	case "EcdFileCheckHisVarianceFields.id":
		if e.complexity.EcdFileCheckHisVarianceFields.ID == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarianceFields.ID(childComplexity), true

	case "EcdFileCheckHisVarianceFields.oper_type":
		if e.complexity.EcdFileCheckHisVarianceFields.OperType == nil {
			break
		}

		return e.complexity.EcdFileCheckHisVarianceFields.OperType(childComplexity), true

	case "EcdFileDistrict.create_at":
		if e.complexity.EcdFileDistrict.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileDistrict.CreateAt(childComplexity), true

	case "EcdFileDistrict.create_by":
		if e.complexity.EcdFileDistrict.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileDistrict.CreateBy(childComplexity), true

	case "EcdFileDistrict.delete_at":
		if e.complexity.EcdFileDistrict.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileDistrict.DeleteAt(childComplexity), true

	case "EcdFileDistrict.delete_by":
		if e.complexity.EcdFileDistrict.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileDistrict.DeleteBy(childComplexity), true

	case "EcdFileDistrict.district_id":
		if e.complexity.EcdFileDistrict.DistrictID == nil {
			break
		}

		return e.complexity.EcdFileDistrict.DistrictID(childComplexity), true

	case "EcdFileDistrict.file_district_id":
		if e.complexity.EcdFileDistrict.FileDistrictID == nil {
			break
		}

		return e.complexity.EcdFileDistrict.FileDistrictID(childComplexity), true

	case "EcdFileDistrict.file_main_id":
		if e.complexity.EcdFileDistrict.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileDistrict.FileMainID(childComplexity), true

	case "EcdFileDistrict.id":
		if e.complexity.EcdFileDistrict.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrict.ID(childComplexity), true

	case "EcdFileDistrict.is_delete":
		if e.complexity.EcdFileDistrict.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileDistrict.IsDelete(childComplexity), true

	case "EcdFileDistrict.update_at":
		if e.complexity.EcdFileDistrict.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileDistrict.UpdateAt(childComplexity), true

	case "EcdFileDistrict.update_by":
		if e.complexity.EcdFileDistrict.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileDistrict.UpdateBy(childComplexity), true

	case "EcdFileDistrictAggregate.aggregate":
		if e.complexity.EcdFileDistrictAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregate.Aggregate(childComplexity), true

	case "EcdFileDistrictAggregateFields.avg":
		if e.complexity.EcdFileDistrictAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.Avg(childComplexity), true

	case "EcdFileDistrictAggregateFields.count":
		if e.complexity.EcdFileDistrictAggregateFields.Count == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.Count(childComplexity), true

	case "EcdFileDistrictAggregateFields.max":
		if e.complexity.EcdFileDistrictAggregateFields.Max == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.Max(childComplexity), true

	case "EcdFileDistrictAggregateFields.min":
		if e.complexity.EcdFileDistrictAggregateFields.Min == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.Min(childComplexity), true

	case "EcdFileDistrictAggregateFields.stddev":
		if e.complexity.EcdFileDistrictAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.Stddev(childComplexity), true

	case "EcdFileDistrictAggregateFields.stddev_pop":
		if e.complexity.EcdFileDistrictAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.StddevPop(childComplexity), true

	case "EcdFileDistrictAggregateFields.stddev_samp":
		if e.complexity.EcdFileDistrictAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.StddevSamp(childComplexity), true

	case "EcdFileDistrictAggregateFields.sum":
		if e.complexity.EcdFileDistrictAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.Sum(childComplexity), true

	case "EcdFileDistrictAggregateFields.var_pop":
		if e.complexity.EcdFileDistrictAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.VarPop(childComplexity), true

	case "EcdFileDistrictAggregateFields.var_samp":
		if e.complexity.EcdFileDistrictAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.VarSamp(childComplexity), true

	case "EcdFileDistrictAggregateFields.variance":
		if e.complexity.EcdFileDistrictAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EcdFileDistrictAggregateFields.Variance(childComplexity), true

	case "EcdFileDistrictAvgFields.id":
		if e.complexity.EcdFileDistrictAvgFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictAvgFields.ID(childComplexity), true

	case "EcdFileDistrictMaxFields.create_at":
		if e.complexity.EcdFileDistrictMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.CreateAt(childComplexity), true

	case "EcdFileDistrictMaxFields.create_by":
		if e.complexity.EcdFileDistrictMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.CreateBy(childComplexity), true

	case "EcdFileDistrictMaxFields.delete_at":
		if e.complexity.EcdFileDistrictMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.DeleteAt(childComplexity), true

	case "EcdFileDistrictMaxFields.delete_by":
		if e.complexity.EcdFileDistrictMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.DeleteBy(childComplexity), true

	case "EcdFileDistrictMaxFields.district_id":
		if e.complexity.EcdFileDistrictMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.DistrictID(childComplexity), true

	case "EcdFileDistrictMaxFields.file_district_id":
		if e.complexity.EcdFileDistrictMaxFields.FileDistrictID == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.FileDistrictID(childComplexity), true

	case "EcdFileDistrictMaxFields.file_main_id":
		if e.complexity.EcdFileDistrictMaxFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.FileMainID(childComplexity), true

	case "EcdFileDistrictMaxFields.id":
		if e.complexity.EcdFileDistrictMaxFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.ID(childComplexity), true

	case "EcdFileDistrictMaxFields.is_delete":
		if e.complexity.EcdFileDistrictMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.IsDelete(childComplexity), true

	case "EcdFileDistrictMaxFields.update_at":
		if e.complexity.EcdFileDistrictMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.UpdateAt(childComplexity), true

	case "EcdFileDistrictMaxFields.update_by":
		if e.complexity.EcdFileDistrictMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileDistrictMaxFields.UpdateBy(childComplexity), true

	case "EcdFileDistrictMinFields.create_at":
		if e.complexity.EcdFileDistrictMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.CreateAt(childComplexity), true

	case "EcdFileDistrictMinFields.create_by":
		if e.complexity.EcdFileDistrictMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.CreateBy(childComplexity), true

	case "EcdFileDistrictMinFields.delete_at":
		if e.complexity.EcdFileDistrictMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.DeleteAt(childComplexity), true

	case "EcdFileDistrictMinFields.delete_by":
		if e.complexity.EcdFileDistrictMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.DeleteBy(childComplexity), true

	case "EcdFileDistrictMinFields.district_id":
		if e.complexity.EcdFileDistrictMinFields.DistrictID == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.DistrictID(childComplexity), true

	case "EcdFileDistrictMinFields.file_district_id":
		if e.complexity.EcdFileDistrictMinFields.FileDistrictID == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.FileDistrictID(childComplexity), true

	case "EcdFileDistrictMinFields.file_main_id":
		if e.complexity.EcdFileDistrictMinFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.FileMainID(childComplexity), true

	case "EcdFileDistrictMinFields.id":
		if e.complexity.EcdFileDistrictMinFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.ID(childComplexity), true

	case "EcdFileDistrictMinFields.is_delete":
		if e.complexity.EcdFileDistrictMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.IsDelete(childComplexity), true

	case "EcdFileDistrictMinFields.update_at":
		if e.complexity.EcdFileDistrictMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.UpdateAt(childComplexity), true

	case "EcdFileDistrictMinFields.update_by":
		if e.complexity.EcdFileDistrictMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileDistrictMinFields.UpdateBy(childComplexity), true

	case "EcdFileDistrictMutationResponse.affected_rows":
		if e.complexity.EcdFileDistrictMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EcdFileDistrictMutationResponse.AffectedRows(childComplexity), true

	case "EcdFileDistrictMutationResponse.returning":
		if e.complexity.EcdFileDistrictMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EcdFileDistrictMutationResponse.Returning(childComplexity), true

	case "EcdFileDistrictStddevFields.id":
		if e.complexity.EcdFileDistrictStddevFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictStddevFields.ID(childComplexity), true

	case "EcdFileDistrictStddevPopFields.id":
		if e.complexity.EcdFileDistrictStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictStddevPopFields.ID(childComplexity), true

	case "EcdFileDistrictStddevSampFields.id":
		if e.complexity.EcdFileDistrictStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictStddevSampFields.ID(childComplexity), true

	case "EcdFileDistrictSumFields.id":
		if e.complexity.EcdFileDistrictSumFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictSumFields.ID(childComplexity), true

	case "EcdFileDistrictVarPopFields.id":
		if e.complexity.EcdFileDistrictVarPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictVarPopFields.ID(childComplexity), true

	case "EcdFileDistrictVarSampFields.id":
		if e.complexity.EcdFileDistrictVarSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictVarSampFields.ID(childComplexity), true

	case "EcdFileDistrictVarianceFields.id":
		if e.complexity.EcdFileDistrictVarianceFields.ID == nil {
			break
		}

		return e.complexity.EcdFileDistrictVarianceFields.ID(childComplexity), true

	case "EcdFileLinePoint.create_at":
		if e.complexity.EcdFileLinePoint.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.CreateAt(childComplexity), true

	case "EcdFileLinePoint.create_by":
		if e.complexity.EcdFileLinePoint.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.CreateBy(childComplexity), true

	case "EcdFileLinePoint.delete_at":
		if e.complexity.EcdFileLinePoint.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.DeleteAt(childComplexity), true

	case "EcdFileLinePoint.delete_by":
		if e.complexity.EcdFileLinePoint.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.DeleteBy(childComplexity), true

	case "EcdFileLinePoint.file_main_id":
		if e.complexity.EcdFileLinePoint.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.FileMainID(childComplexity), true

	case "EcdFileLinePoint.gps_point":
		if e.complexity.EcdFileLinePoint.GpsPoint == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.GpsPoint(childComplexity), true

	case "EcdFileLinePoint.id":
		if e.complexity.EcdFileLinePoint.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.ID(childComplexity), true

	case "EcdFileLinePoint.is_delete":
		if e.complexity.EcdFileLinePoint.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.IsDelete(childComplexity), true

	case "EcdFileLinePoint.line_point_id":
		if e.complexity.EcdFileLinePoint.LinePointID == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.LinePointID(childComplexity), true

	case "EcdFileLinePoint.line_point_name":
		if e.complexity.EcdFileLinePoint.LinePointName == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.LinePointName(childComplexity), true

	case "EcdFileLinePoint.line_point_remark":
		if e.complexity.EcdFileLinePoint.LinePointRemark == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.LinePointRemark(childComplexity), true

	case "EcdFileLinePoint.map_point":
		if e.complexity.EcdFileLinePoint.MapPoint == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.MapPoint(childComplexity), true

	case "EcdFileLinePoint.point_type":
		if e.complexity.EcdFileLinePoint.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.PointType(childComplexity), true

	case "EcdFileLinePoint.update_at":
		if e.complexity.EcdFileLinePoint.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.UpdateAt(childComplexity), true

	case "EcdFileLinePoint.update_by":
		if e.complexity.EcdFileLinePoint.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileLinePoint.UpdateBy(childComplexity), true

	case "EcdFileLinePointAggregate.aggregate":
		if e.complexity.EcdFileLinePointAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregate.Aggregate(childComplexity), true

	case "EcdFileLinePointAggregateFields.avg":
		if e.complexity.EcdFileLinePointAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.Avg(childComplexity), true

	case "EcdFileLinePointAggregateFields.count":
		if e.complexity.EcdFileLinePointAggregateFields.Count == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.Count(childComplexity), true

	case "EcdFileLinePointAggregateFields.max":
		if e.complexity.EcdFileLinePointAggregateFields.Max == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.Max(childComplexity), true

	case "EcdFileLinePointAggregateFields.min":
		if e.complexity.EcdFileLinePointAggregateFields.Min == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.Min(childComplexity), true

	case "EcdFileLinePointAggregateFields.stddev":
		if e.complexity.EcdFileLinePointAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.Stddev(childComplexity), true

	case "EcdFileLinePointAggregateFields.stddev_pop":
		if e.complexity.EcdFileLinePointAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.StddevPop(childComplexity), true

	case "EcdFileLinePointAggregateFields.stddev_samp":
		if e.complexity.EcdFileLinePointAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.StddevSamp(childComplexity), true

	case "EcdFileLinePointAggregateFields.sum":
		if e.complexity.EcdFileLinePointAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.Sum(childComplexity), true

	case "EcdFileLinePointAggregateFields.var_pop":
		if e.complexity.EcdFileLinePointAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.VarPop(childComplexity), true

	case "EcdFileLinePointAggregateFields.var_samp":
		if e.complexity.EcdFileLinePointAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.VarSamp(childComplexity), true

	case "EcdFileLinePointAggregateFields.variance":
		if e.complexity.EcdFileLinePointAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EcdFileLinePointAggregateFields.Variance(childComplexity), true

	case "EcdFileLinePointAvgFields.id":
		if e.complexity.EcdFileLinePointAvgFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointAvgFields.ID(childComplexity), true

	case "EcdFileLinePointAvgFields.point_type":
		if e.complexity.EcdFileLinePointAvgFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointAvgFields.PointType(childComplexity), true

	case "EcdFileLinePointMaxFields.create_at":
		if e.complexity.EcdFileLinePointMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.CreateAt(childComplexity), true

	case "EcdFileLinePointMaxFields.create_by":
		if e.complexity.EcdFileLinePointMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.CreateBy(childComplexity), true

	case "EcdFileLinePointMaxFields.delete_at":
		if e.complexity.EcdFileLinePointMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.DeleteAt(childComplexity), true

	case "EcdFileLinePointMaxFields.delete_by":
		if e.complexity.EcdFileLinePointMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.DeleteBy(childComplexity), true

	case "EcdFileLinePointMaxFields.file_main_id":
		if e.complexity.EcdFileLinePointMaxFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.FileMainID(childComplexity), true

	case "EcdFileLinePointMaxFields.gps_point":
		if e.complexity.EcdFileLinePointMaxFields.GpsPoint == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.GpsPoint(childComplexity), true

	case "EcdFileLinePointMaxFields.id":
		if e.complexity.EcdFileLinePointMaxFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.ID(childComplexity), true

	case "EcdFileLinePointMaxFields.is_delete":
		if e.complexity.EcdFileLinePointMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.IsDelete(childComplexity), true

	case "EcdFileLinePointMaxFields.line_point_id":
		if e.complexity.EcdFileLinePointMaxFields.LinePointID == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.LinePointID(childComplexity), true

	case "EcdFileLinePointMaxFields.line_point_name":
		if e.complexity.EcdFileLinePointMaxFields.LinePointName == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.LinePointName(childComplexity), true

	case "EcdFileLinePointMaxFields.line_point_remark":
		if e.complexity.EcdFileLinePointMaxFields.LinePointRemark == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.LinePointRemark(childComplexity), true

	case "EcdFileLinePointMaxFields.map_point":
		if e.complexity.EcdFileLinePointMaxFields.MapPoint == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.MapPoint(childComplexity), true

	case "EcdFileLinePointMaxFields.point_type":
		if e.complexity.EcdFileLinePointMaxFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.PointType(childComplexity), true

	case "EcdFileLinePointMaxFields.update_at":
		if e.complexity.EcdFileLinePointMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.UpdateAt(childComplexity), true

	case "EcdFileLinePointMaxFields.update_by":
		if e.complexity.EcdFileLinePointMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileLinePointMaxFields.UpdateBy(childComplexity), true

	case "EcdFileLinePointMinFields.create_at":
		if e.complexity.EcdFileLinePointMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.CreateAt(childComplexity), true

	case "EcdFileLinePointMinFields.create_by":
		if e.complexity.EcdFileLinePointMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.CreateBy(childComplexity), true

	case "EcdFileLinePointMinFields.delete_at":
		if e.complexity.EcdFileLinePointMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.DeleteAt(childComplexity), true

	case "EcdFileLinePointMinFields.delete_by":
		if e.complexity.EcdFileLinePointMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.DeleteBy(childComplexity), true

	case "EcdFileLinePointMinFields.file_main_id":
		if e.complexity.EcdFileLinePointMinFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.FileMainID(childComplexity), true

	case "EcdFileLinePointMinFields.gps_point":
		if e.complexity.EcdFileLinePointMinFields.GpsPoint == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.GpsPoint(childComplexity), true

	case "EcdFileLinePointMinFields.id":
		if e.complexity.EcdFileLinePointMinFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.ID(childComplexity), true

	case "EcdFileLinePointMinFields.is_delete":
		if e.complexity.EcdFileLinePointMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.IsDelete(childComplexity), true

	case "EcdFileLinePointMinFields.line_point_id":
		if e.complexity.EcdFileLinePointMinFields.LinePointID == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.LinePointID(childComplexity), true

	case "EcdFileLinePointMinFields.line_point_name":
		if e.complexity.EcdFileLinePointMinFields.LinePointName == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.LinePointName(childComplexity), true

	case "EcdFileLinePointMinFields.line_point_remark":
		if e.complexity.EcdFileLinePointMinFields.LinePointRemark == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.LinePointRemark(childComplexity), true

	case "EcdFileLinePointMinFields.map_point":
		if e.complexity.EcdFileLinePointMinFields.MapPoint == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.MapPoint(childComplexity), true

	case "EcdFileLinePointMinFields.point_type":
		if e.complexity.EcdFileLinePointMinFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.PointType(childComplexity), true

	case "EcdFileLinePointMinFields.update_at":
		if e.complexity.EcdFileLinePointMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.UpdateAt(childComplexity), true

	case "EcdFileLinePointMinFields.update_by":
		if e.complexity.EcdFileLinePointMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileLinePointMinFields.UpdateBy(childComplexity), true

	case "EcdFileLinePointMutationResponse.affected_rows":
		if e.complexity.EcdFileLinePointMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EcdFileLinePointMutationResponse.AffectedRows(childComplexity), true

	case "EcdFileLinePointMutationResponse.returning":
		if e.complexity.EcdFileLinePointMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EcdFileLinePointMutationResponse.Returning(childComplexity), true

	case "EcdFileLinePointStddevFields.id":
		if e.complexity.EcdFileLinePointStddevFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointStddevFields.ID(childComplexity), true

	case "EcdFileLinePointStddevFields.point_type":
		if e.complexity.EcdFileLinePointStddevFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointStddevFields.PointType(childComplexity), true

	case "EcdFileLinePointStddevPopFields.id":
		if e.complexity.EcdFileLinePointStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointStddevPopFields.ID(childComplexity), true

	case "EcdFileLinePointStddevPopFields.point_type":
		if e.complexity.EcdFileLinePointStddevPopFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointStddevPopFields.PointType(childComplexity), true

	case "EcdFileLinePointStddevSampFields.id":
		if e.complexity.EcdFileLinePointStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointStddevSampFields.ID(childComplexity), true

	case "EcdFileLinePointStddevSampFields.point_type":
		if e.complexity.EcdFileLinePointStddevSampFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointStddevSampFields.PointType(childComplexity), true

	case "EcdFileLinePointSumFields.id":
		if e.complexity.EcdFileLinePointSumFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointSumFields.ID(childComplexity), true

	case "EcdFileLinePointSumFields.point_type":
		if e.complexity.EcdFileLinePointSumFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointSumFields.PointType(childComplexity), true

	case "EcdFileLinePointVarPopFields.id":
		if e.complexity.EcdFileLinePointVarPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointVarPopFields.ID(childComplexity), true

	case "EcdFileLinePointVarPopFields.point_type":
		if e.complexity.EcdFileLinePointVarPopFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointVarPopFields.PointType(childComplexity), true

	case "EcdFileLinePointVarSampFields.id":
		if e.complexity.EcdFileLinePointVarSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointVarSampFields.ID(childComplexity), true

	case "EcdFileLinePointVarSampFields.point_type":
		if e.complexity.EcdFileLinePointVarSampFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointVarSampFields.PointType(childComplexity), true

	case "EcdFileLinePointVarianceFields.id":
		if e.complexity.EcdFileLinePointVarianceFields.ID == nil {
			break
		}

		return e.complexity.EcdFileLinePointVarianceFields.ID(childComplexity), true

	case "EcdFileLinePointVarianceFields.point_type":
		if e.complexity.EcdFileLinePointVarianceFields.PointType == nil {
			break
		}

		return e.complexity.EcdFileLinePointVarianceFields.PointType(childComplexity), true

	case "EcdFileMain.add_district_id":
		if e.complexity.EcdFileMain.AddDistrictID == nil {
			break
		}

		return e.complexity.EcdFileMain.AddDistrictID(childComplexity), true

	case "EcdFileMain.check_status":
		if e.complexity.EcdFileMain.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMain.CheckStatus(childComplexity), true

	case "EcdFileMain.check_time":
		if e.complexity.EcdFileMain.CheckTime == nil {
			break
		}

		return e.complexity.EcdFileMain.CheckTime(childComplexity), true

	case "EcdFileMain.client_report_time":
		if e.complexity.EcdFileMain.ClientReportTime == nil {
			break
		}

		return e.complexity.EcdFileMain.ClientReportTime(childComplexity), true

	case "EcdFileMain.construct_garbage_allow_file":
		if e.complexity.EcdFileMain.ConstructGarbageAllowFile == nil {
			break
		}

		return e.complexity.EcdFileMain.ConstructGarbageAllowFile(childComplexity), true

	case "EcdFileMain.construct_id":
		if e.complexity.EcdFileMain.ConstructID == nil {
			break
		}

		return e.complexity.EcdFileMain.ConstructID(childComplexity), true

	case "EcdFileMain.construct_prove_file":
		if e.complexity.EcdFileMain.ConstructProveFile == nil {
			break
		}

		return e.complexity.EcdFileMain.ConstructProveFile(childComplexity), true

	case "EcdFileMain.construct_site_enterance_photo":
		if e.complexity.EcdFileMain.ConstructSiteEnterancePhoto == nil {
			break
		}

		return e.complexity.EcdFileMain.ConstructSiteEnterancePhoto(childComplexity), true

	case "EcdFileMain.construct_title":
		if e.complexity.EcdFileMain.ConstructTitle == nil {
			break
		}

		return e.complexity.EcdFileMain.ConstructTitle(childComplexity), true

	case "EcdFileMain.construct_wash_car_place_photo":
		if e.complexity.EcdFileMain.ConstructWashCarPlacePhoto == nil {
			break
		}

		return e.complexity.EcdFileMain.ConstructWashCarPlacePhoto(childComplexity), true

	case "EcdFileMain.create_at":
		if e.complexity.EcdFileMain.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileMain.CreateAt(childComplexity), true

	case "EcdFileMain.create_by":
		if e.complexity.EcdFileMain.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileMain.CreateBy(childComplexity), true

	case "EcdFileMain.delete_at":
		if e.complexity.EcdFileMain.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileMain.DeleteAt(childComplexity), true

	case "EcdFileMain.delete_by":
		if e.complexity.EcdFileMain.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileMain.DeleteBy(childComplexity), true

	case "EcdFileMain.district_id":
		if e.complexity.EcdFileMain.DistrictID == nil {
			break
		}

		return e.complexity.EcdFileMain.DistrictID(childComplexity), true

	case "EcdFileMain.do_construct_prove_file":
		if e.complexity.EcdFileMain.DoConstructProveFile == nil {
			break
		}

		return e.complexity.EcdFileMain.DoConstructProveFile(childComplexity), true

	case "EcdFileMain.end_point_checker_sign":
		if e.complexity.EcdFileMain.EndPointCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMain.EndPointCheckerSign(childComplexity), true

	case "EcdFileMain.end_state":
		if e.complexity.EcdFileMain.EndState == nil {
			break
		}

		return e.complexity.EcdFileMain.EndState(childComplexity), true

	case "EcdFileMain.enterprise_id":
		if e.complexity.EcdFileMain.EnterpriseID == nil {
			break
		}

		return e.complexity.EcdFileMain.EnterpriseID(childComplexity), true

	case "EcdFileMain.file_id":
		if e.complexity.EcdFileMain.FileID == nil {
			break
		}

		return e.complexity.EcdFileMain.FileID(childComplexity), true

	case "EcdFileMain.file_main_id":
		if e.complexity.EcdFileMain.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileMain.FileMainID(childComplexity), true

	case "EcdFileMain.first_cross_pid":
		if e.complexity.EcdFileMain.FirstCrossPid == nil {
			break
		}

		return e.complexity.EcdFileMain.FirstCrossPid(childComplexity), true

	case "EcdFileMain.id":
		if e.complexity.EcdFileMain.ID == nil {
			break
		}

		return e.complexity.EcdFileMain.ID(childComplexity), true

	case "EcdFileMain.is_cross_district":
		if e.complexity.EcdFileMain.IsCrossDistrict == nil {
			break
		}

		return e.complexity.EcdFileMain.IsCrossDistrict(childComplexity), true

	case "EcdFileMain.is_delete":
		if e.complexity.EcdFileMain.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileMain.IsDelete(childComplexity), true

	case "EcdFileMain.is_match_construction":
		if e.complexity.EcdFileMain.IsMatchConstruction == nil {
			break
		}

		return e.complexity.EcdFileMain.IsMatchConstruction(childComplexity), true

	case "EcdFileMain.phone_num":
		if e.complexity.EcdFileMain.PhoneNum == nil {
			break
		}

		return e.complexity.EcdFileMain.PhoneNum(childComplexity), true

	case "EcdFileMain.plan_end_time":
		if e.complexity.EcdFileMain.PlanEndTime == nil {
			break
		}

		return e.complexity.EcdFileMain.PlanEndTime(childComplexity), true

	case "EcdFileMain.plan_start_time":
		if e.complexity.EcdFileMain.PlanStartTime == nil {
			break
		}

		return e.complexity.EcdFileMain.PlanStartTime(childComplexity), true

	case "EcdFileMain.point_state":
		if e.complexity.EcdFileMain.PointState == nil {
			break
		}

		return e.complexity.EcdFileMain.PointState(childComplexity), true

	case "EcdFileMain.remark":
		if e.complexity.EcdFileMain.Remark == nil {
			break
		}

		return e.complexity.EcdFileMain.Remark(childComplexity), true

	case "EcdFileMain.return_suggest":
		if e.complexity.EcdFileMain.ReturnSuggest == nil {
			break
		}

		return e.complexity.EcdFileMain.ReturnSuggest(childComplexity), true

	case "EcdFileMain.route_board_promise_file":
		if e.complexity.EcdFileMain.RouteBoardPromiseFile == nil {
			break
		}

		return e.complexity.EcdFileMain.RouteBoardPromiseFile(childComplexity), true

	case "EcdFileMain.route_checker_sign":
		if e.complexity.EcdFileMain.RouteCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMain.RouteCheckerSign(childComplexity), true

	case "EcdFileMain.speed_time_checker_sign":
		if e.complexity.EcdFileMain.SpeedTimeCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMain.SpeedTimeCheckerSign(childComplexity), true

	case "EcdFileMain.start_point_checker_sign":
		if e.complexity.EcdFileMain.StartPointCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMain.StartPointCheckerSign(childComplexity), true

	case "EcdFileMain.sub_package_prove_file":
		if e.complexity.EcdFileMain.SubPackageProveFile == nil {
			break
		}

		return e.complexity.EcdFileMain.SubPackageProveFile(childComplexity), true

	case "EcdFileMain.title":
		if e.complexity.EcdFileMain.Title == nil {
			break
		}

		return e.complexity.EcdFileMain.Title(childComplexity), true

	case "EcdFileMain.traffic_prove_file":
		if e.complexity.EcdFileMain.TrafficProveFile == nil {
			break
		}

		return e.complexity.EcdFileMain.TrafficProveFile(childComplexity), true

	case "EcdFileMain.traffice_object_promise_file":
		if e.complexity.EcdFileMain.TrafficeObjectPromiseFile == nil {
			break
		}

		return e.complexity.EcdFileMain.TrafficeObjectPromiseFile(childComplexity), true

	case "EcdFileMain.update_at":
		if e.complexity.EcdFileMain.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileMain.UpdateAt(childComplexity), true

	case "EcdFileMain.update_by":
		if e.complexity.EcdFileMain.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileMain.UpdateBy(childComplexity), true

	case "EcdFileMainAggregate.aggregate":
		if e.complexity.EcdFileMainAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EcdFileMainAggregate.Aggregate(childComplexity), true

	case "EcdFileMainAggregateFields.avg":
		if e.complexity.EcdFileMainAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.Avg(childComplexity), true

	case "EcdFileMainAggregateFields.count":
		if e.complexity.EcdFileMainAggregateFields.Count == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.Count(childComplexity), true

	case "EcdFileMainAggregateFields.max":
		if e.complexity.EcdFileMainAggregateFields.Max == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.Max(childComplexity), true

	case "EcdFileMainAggregateFields.min":
		if e.complexity.EcdFileMainAggregateFields.Min == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.Min(childComplexity), true

	case "EcdFileMainAggregateFields.stddev":
		if e.complexity.EcdFileMainAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.Stddev(childComplexity), true

	case "EcdFileMainAggregateFields.stddev_pop":
		if e.complexity.EcdFileMainAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.StddevPop(childComplexity), true

	case "EcdFileMainAggregateFields.stddev_samp":
		if e.complexity.EcdFileMainAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.StddevSamp(childComplexity), true

	case "EcdFileMainAggregateFields.sum":
		if e.complexity.EcdFileMainAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.Sum(childComplexity), true

	case "EcdFileMainAggregateFields.var_pop":
		if e.complexity.EcdFileMainAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.VarPop(childComplexity), true

	case "EcdFileMainAggregateFields.var_samp":
		if e.complexity.EcdFileMainAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.VarSamp(childComplexity), true

	case "EcdFileMainAggregateFields.variance":
		if e.complexity.EcdFileMainAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EcdFileMainAggregateFields.Variance(childComplexity), true

	case "EcdFileMainAvgFields.check_status":
		if e.complexity.EcdFileMainAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainAvgFields.CheckStatus(childComplexity), true

	case "EcdFileMainAvgFields.end_state":
		if e.complexity.EcdFileMainAvgFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainAvgFields.EndState(childComplexity), true

	case "EcdFileMainAvgFields.id":
		if e.complexity.EcdFileMainAvgFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainAvgFields.ID(childComplexity), true

	case "EcdFileMainAvgFields.point_state":
		if e.complexity.EcdFileMainAvgFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainAvgFields.PointState(childComplexity), true

	case "EcdFileMainMaxFields.add_district_id":
		if e.complexity.EcdFileMainMaxFields.AddDistrictID == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.AddDistrictID(childComplexity), true

	case "EcdFileMainMaxFields.check_status":
		if e.complexity.EcdFileMainMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.CheckStatus(childComplexity), true

	case "EcdFileMainMaxFields.check_time":
		if e.complexity.EcdFileMainMaxFields.CheckTime == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.CheckTime(childComplexity), true

	case "EcdFileMainMaxFields.client_report_time":
		if e.complexity.EcdFileMainMaxFields.ClientReportTime == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ClientReportTime(childComplexity), true

	case "EcdFileMainMaxFields.construct_garbage_allow_file":
		if e.complexity.EcdFileMainMaxFields.ConstructGarbageAllowFile == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ConstructGarbageAllowFile(childComplexity), true

	case "EcdFileMainMaxFields.construct_id":
		if e.complexity.EcdFileMainMaxFields.ConstructID == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ConstructID(childComplexity), true

	case "EcdFileMainMaxFields.construct_prove_file":
		if e.complexity.EcdFileMainMaxFields.ConstructProveFile == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ConstructProveFile(childComplexity), true

	case "EcdFileMainMaxFields.construct_site_enterance_photo":
		if e.complexity.EcdFileMainMaxFields.ConstructSiteEnterancePhoto == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ConstructSiteEnterancePhoto(childComplexity), true

	case "EcdFileMainMaxFields.construct_title":
		if e.complexity.EcdFileMainMaxFields.ConstructTitle == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ConstructTitle(childComplexity), true

	case "EcdFileMainMaxFields.construct_wash_car_place_photo":
		if e.complexity.EcdFileMainMaxFields.ConstructWashCarPlacePhoto == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ConstructWashCarPlacePhoto(childComplexity), true

	case "EcdFileMainMaxFields.create_at":
		if e.complexity.EcdFileMainMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.CreateAt(childComplexity), true

	case "EcdFileMainMaxFields.create_by":
		if e.complexity.EcdFileMainMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.CreateBy(childComplexity), true

	case "EcdFileMainMaxFields.delete_at":
		if e.complexity.EcdFileMainMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.DeleteAt(childComplexity), true

	case "EcdFileMainMaxFields.delete_by":
		if e.complexity.EcdFileMainMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.DeleteBy(childComplexity), true

	case "EcdFileMainMaxFields.district_id":
		if e.complexity.EcdFileMainMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.DistrictID(childComplexity), true

	case "EcdFileMainMaxFields.do_construct_prove_file":
		if e.complexity.EcdFileMainMaxFields.DoConstructProveFile == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.DoConstructProveFile(childComplexity), true

	case "EcdFileMainMaxFields.end_point_checker_sign":
		if e.complexity.EcdFileMainMaxFields.EndPointCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.EndPointCheckerSign(childComplexity), true

	case "EcdFileMainMaxFields.end_state":
		if e.complexity.EcdFileMainMaxFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.EndState(childComplexity), true

	case "EcdFileMainMaxFields.enterprise_id":
		if e.complexity.EcdFileMainMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.EnterpriseID(childComplexity), true

	case "EcdFileMainMaxFields.file_id":
		if e.complexity.EcdFileMainMaxFields.FileID == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.FileID(childComplexity), true

	case "EcdFileMainMaxFields.file_main_id":
		if e.complexity.EcdFileMainMaxFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.FileMainID(childComplexity), true

	case "EcdFileMainMaxFields.first_cross_pid":
		if e.complexity.EcdFileMainMaxFields.FirstCrossPid == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.FirstCrossPid(childComplexity), true

	case "EcdFileMainMaxFields.id":
		if e.complexity.EcdFileMainMaxFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ID(childComplexity), true

	case "EcdFileMainMaxFields.is_cross_district":
		if e.complexity.EcdFileMainMaxFields.IsCrossDistrict == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.IsCrossDistrict(childComplexity), true

	case "EcdFileMainMaxFields.is_delete":
		if e.complexity.EcdFileMainMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.IsDelete(childComplexity), true

	case "EcdFileMainMaxFields.is_match_construction":
		if e.complexity.EcdFileMainMaxFields.IsMatchConstruction == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.IsMatchConstruction(childComplexity), true

	case "EcdFileMainMaxFields.phone_num":
		if e.complexity.EcdFileMainMaxFields.PhoneNum == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.PhoneNum(childComplexity), true

	case "EcdFileMainMaxFields.plan_end_time":
		if e.complexity.EcdFileMainMaxFields.PlanEndTime == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.PlanEndTime(childComplexity), true

	case "EcdFileMainMaxFields.plan_start_time":
		if e.complexity.EcdFileMainMaxFields.PlanStartTime == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.PlanStartTime(childComplexity), true

	case "EcdFileMainMaxFields.point_state":
		if e.complexity.EcdFileMainMaxFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.PointState(childComplexity), true

	case "EcdFileMainMaxFields.remark":
		if e.complexity.EcdFileMainMaxFields.Remark == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.Remark(childComplexity), true

	case "EcdFileMainMaxFields.return_suggest":
		if e.complexity.EcdFileMainMaxFields.ReturnSuggest == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.ReturnSuggest(childComplexity), true

	case "EcdFileMainMaxFields.route_board_promise_file":
		if e.complexity.EcdFileMainMaxFields.RouteBoardPromiseFile == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.RouteBoardPromiseFile(childComplexity), true

	case "EcdFileMainMaxFields.route_checker_sign":
		if e.complexity.EcdFileMainMaxFields.RouteCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.RouteCheckerSign(childComplexity), true

	case "EcdFileMainMaxFields.speed_time_checker_sign":
		if e.complexity.EcdFileMainMaxFields.SpeedTimeCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.SpeedTimeCheckerSign(childComplexity), true

	case "EcdFileMainMaxFields.start_point_checker_sign":
		if e.complexity.EcdFileMainMaxFields.StartPointCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.StartPointCheckerSign(childComplexity), true

	case "EcdFileMainMaxFields.sub_package_prove_file":
		if e.complexity.EcdFileMainMaxFields.SubPackageProveFile == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.SubPackageProveFile(childComplexity), true

	case "EcdFileMainMaxFields.title":
		if e.complexity.EcdFileMainMaxFields.Title == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.Title(childComplexity), true

	case "EcdFileMainMaxFields.traffic_prove_file":
		if e.complexity.EcdFileMainMaxFields.TrafficProveFile == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.TrafficProveFile(childComplexity), true

	case "EcdFileMainMaxFields.traffice_object_promise_file":
		if e.complexity.EcdFileMainMaxFields.TrafficeObjectPromiseFile == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.TrafficeObjectPromiseFile(childComplexity), true

	case "EcdFileMainMaxFields.update_at":
		if e.complexity.EcdFileMainMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.UpdateAt(childComplexity), true

	case "EcdFileMainMaxFields.update_by":
		if e.complexity.EcdFileMainMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileMainMaxFields.UpdateBy(childComplexity), true

	case "EcdFileMainMinFields.add_district_id":
		if e.complexity.EcdFileMainMinFields.AddDistrictID == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.AddDistrictID(childComplexity), true

	case "EcdFileMainMinFields.check_status":
		if e.complexity.EcdFileMainMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.CheckStatus(childComplexity), true

	case "EcdFileMainMinFields.check_time":
		if e.complexity.EcdFileMainMinFields.CheckTime == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.CheckTime(childComplexity), true

	case "EcdFileMainMinFields.client_report_time":
		if e.complexity.EcdFileMainMinFields.ClientReportTime == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ClientReportTime(childComplexity), true

	case "EcdFileMainMinFields.construct_garbage_allow_file":
		if e.complexity.EcdFileMainMinFields.ConstructGarbageAllowFile == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ConstructGarbageAllowFile(childComplexity), true

	case "EcdFileMainMinFields.construct_id":
		if e.complexity.EcdFileMainMinFields.ConstructID == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ConstructID(childComplexity), true

	case "EcdFileMainMinFields.construct_prove_file":
		if e.complexity.EcdFileMainMinFields.ConstructProveFile == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ConstructProveFile(childComplexity), true

	case "EcdFileMainMinFields.construct_site_enterance_photo":
		if e.complexity.EcdFileMainMinFields.ConstructSiteEnterancePhoto == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ConstructSiteEnterancePhoto(childComplexity), true

	case "EcdFileMainMinFields.construct_title":
		if e.complexity.EcdFileMainMinFields.ConstructTitle == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ConstructTitle(childComplexity), true

	case "EcdFileMainMinFields.construct_wash_car_place_photo":
		if e.complexity.EcdFileMainMinFields.ConstructWashCarPlacePhoto == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ConstructWashCarPlacePhoto(childComplexity), true

	case "EcdFileMainMinFields.create_at":
		if e.complexity.EcdFileMainMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.CreateAt(childComplexity), true

	case "EcdFileMainMinFields.create_by":
		if e.complexity.EcdFileMainMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.CreateBy(childComplexity), true

	case "EcdFileMainMinFields.delete_at":
		if e.complexity.EcdFileMainMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.DeleteAt(childComplexity), true

	case "EcdFileMainMinFields.delete_by":
		if e.complexity.EcdFileMainMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.DeleteBy(childComplexity), true

	case "EcdFileMainMinFields.district_id":
		if e.complexity.EcdFileMainMinFields.DistrictID == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.DistrictID(childComplexity), true

	case "EcdFileMainMinFields.do_construct_prove_file":
		if e.complexity.EcdFileMainMinFields.DoConstructProveFile == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.DoConstructProveFile(childComplexity), true

	case "EcdFileMainMinFields.end_point_checker_sign":
		if e.complexity.EcdFileMainMinFields.EndPointCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.EndPointCheckerSign(childComplexity), true

	case "EcdFileMainMinFields.end_state":
		if e.complexity.EcdFileMainMinFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.EndState(childComplexity), true

	case "EcdFileMainMinFields.enterprise_id":
		if e.complexity.EcdFileMainMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.EnterpriseID(childComplexity), true

	case "EcdFileMainMinFields.file_id":
		if e.complexity.EcdFileMainMinFields.FileID == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.FileID(childComplexity), true

	case "EcdFileMainMinFields.file_main_id":
		if e.complexity.EcdFileMainMinFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.FileMainID(childComplexity), true

	case "EcdFileMainMinFields.first_cross_pid":
		if e.complexity.EcdFileMainMinFields.FirstCrossPid == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.FirstCrossPid(childComplexity), true

	case "EcdFileMainMinFields.id":
		if e.complexity.EcdFileMainMinFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ID(childComplexity), true

	case "EcdFileMainMinFields.is_cross_district":
		if e.complexity.EcdFileMainMinFields.IsCrossDistrict == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.IsCrossDistrict(childComplexity), true

	case "EcdFileMainMinFields.is_delete":
		if e.complexity.EcdFileMainMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.IsDelete(childComplexity), true

	case "EcdFileMainMinFields.is_match_construction":
		if e.complexity.EcdFileMainMinFields.IsMatchConstruction == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.IsMatchConstruction(childComplexity), true

	case "EcdFileMainMinFields.phone_num":
		if e.complexity.EcdFileMainMinFields.PhoneNum == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.PhoneNum(childComplexity), true

	case "EcdFileMainMinFields.plan_end_time":
		if e.complexity.EcdFileMainMinFields.PlanEndTime == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.PlanEndTime(childComplexity), true

	case "EcdFileMainMinFields.plan_start_time":
		if e.complexity.EcdFileMainMinFields.PlanStartTime == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.PlanStartTime(childComplexity), true

	case "EcdFileMainMinFields.point_state":
		if e.complexity.EcdFileMainMinFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.PointState(childComplexity), true

	case "EcdFileMainMinFields.remark":
		if e.complexity.EcdFileMainMinFields.Remark == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.Remark(childComplexity), true

	case "EcdFileMainMinFields.return_suggest":
		if e.complexity.EcdFileMainMinFields.ReturnSuggest == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.ReturnSuggest(childComplexity), true

	case "EcdFileMainMinFields.route_board_promise_file":
		if e.complexity.EcdFileMainMinFields.RouteBoardPromiseFile == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.RouteBoardPromiseFile(childComplexity), true

	case "EcdFileMainMinFields.route_checker_sign":
		if e.complexity.EcdFileMainMinFields.RouteCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.RouteCheckerSign(childComplexity), true

	case "EcdFileMainMinFields.speed_time_checker_sign":
		if e.complexity.EcdFileMainMinFields.SpeedTimeCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.SpeedTimeCheckerSign(childComplexity), true

	case "EcdFileMainMinFields.start_point_checker_sign":
		if e.complexity.EcdFileMainMinFields.StartPointCheckerSign == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.StartPointCheckerSign(childComplexity), true

	case "EcdFileMainMinFields.sub_package_prove_file":
		if e.complexity.EcdFileMainMinFields.SubPackageProveFile == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.SubPackageProveFile(childComplexity), true

	case "EcdFileMainMinFields.title":
		if e.complexity.EcdFileMainMinFields.Title == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.Title(childComplexity), true

	case "EcdFileMainMinFields.traffic_prove_file":
		if e.complexity.EcdFileMainMinFields.TrafficProveFile == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.TrafficProveFile(childComplexity), true

	case "EcdFileMainMinFields.traffice_object_promise_file":
		if e.complexity.EcdFileMainMinFields.TrafficeObjectPromiseFile == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.TrafficeObjectPromiseFile(childComplexity), true

	case "EcdFileMainMinFields.update_at":
		if e.complexity.EcdFileMainMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.UpdateAt(childComplexity), true

	case "EcdFileMainMinFields.update_by":
		if e.complexity.EcdFileMainMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileMainMinFields.UpdateBy(childComplexity), true

	case "EcdFileMainMutationResponse.affected_rows":
		if e.complexity.EcdFileMainMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EcdFileMainMutationResponse.AffectedRows(childComplexity), true

	case "EcdFileMainMutationResponse.returning":
		if e.complexity.EcdFileMainMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EcdFileMainMutationResponse.Returning(childComplexity), true

	case "EcdFileMainStddevFields.check_status":
		if e.complexity.EcdFileMainStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainStddevFields.CheckStatus(childComplexity), true

	case "EcdFileMainStddevFields.end_state":
		if e.complexity.EcdFileMainStddevFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainStddevFields.EndState(childComplexity), true

	case "EcdFileMainStddevFields.id":
		if e.complexity.EcdFileMainStddevFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainStddevFields.ID(childComplexity), true

	case "EcdFileMainStddevFields.point_state":
		if e.complexity.EcdFileMainStddevFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainStddevFields.PointState(childComplexity), true

	case "EcdFileMainStddevPopFields.check_status":
		if e.complexity.EcdFileMainStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainStddevPopFields.CheckStatus(childComplexity), true

	case "EcdFileMainStddevPopFields.end_state":
		if e.complexity.EcdFileMainStddevPopFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainStddevPopFields.EndState(childComplexity), true

	case "EcdFileMainStddevPopFields.id":
		if e.complexity.EcdFileMainStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainStddevPopFields.ID(childComplexity), true

	case "EcdFileMainStddevPopFields.point_state":
		if e.complexity.EcdFileMainStddevPopFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainStddevPopFields.PointState(childComplexity), true

	case "EcdFileMainStddevSampFields.check_status":
		if e.complexity.EcdFileMainStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainStddevSampFields.CheckStatus(childComplexity), true

	case "EcdFileMainStddevSampFields.end_state":
		if e.complexity.EcdFileMainStddevSampFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainStddevSampFields.EndState(childComplexity), true

	case "EcdFileMainStddevSampFields.id":
		if e.complexity.EcdFileMainStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainStddevSampFields.ID(childComplexity), true

	case "EcdFileMainStddevSampFields.point_state":
		if e.complexity.EcdFileMainStddevSampFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainStddevSampFields.PointState(childComplexity), true

	case "EcdFileMainSub.address":
		if e.complexity.EcdFileMainSub.Address == nil {
			break
		}

		return e.complexity.EcdFileMainSub.Address(childComplexity), true

	case "EcdFileMainSub.construct_director_name":
		if e.complexity.EcdFileMainSub.ConstructDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ConstructDirectorName(childComplexity), true

	case "EcdFileMainSub.construct_phone":
		if e.complexity.EcdFileMainSub.ConstructPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ConstructPhone(childComplexity), true

	case "EcdFileMainSub.construct_prove_num":
		if e.complexity.EcdFileMainSub.ConstructProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ConstructProveNum(childComplexity), true

	case "EcdFileMainSub.construct_unit":
		if e.complexity.EcdFileMainSub.ConstructUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ConstructUnit(childComplexity), true

	case "EcdFileMainSub.contract_director_name":
		if e.complexity.EcdFileMainSub.ContractDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ContractDirectorName(childComplexity), true

	case "EcdFileMainSub.contract_phone":
		if e.complexity.EcdFileMainSub.ContractPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ContractPhone(childComplexity), true

	case "EcdFileMainSub.contract_prove_num":
		if e.complexity.EcdFileMainSub.ContractProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ContractProveNum(childComplexity), true

	case "EcdFileMainSub.contract_unit":
		if e.complexity.EcdFileMainSub.ContractUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ContractUnit(childComplexity), true

	case "EcdFileMainSub.create_at":
		if e.complexity.EcdFileMainSub.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileMainSub.CreateAt(childComplexity), true

	case "EcdFileMainSub.create_by":
		if e.complexity.EcdFileMainSub.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileMainSub.CreateBy(childComplexity), true

	case "EcdFileMainSub.delete_at":
		if e.complexity.EcdFileMainSub.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileMainSub.DeleteAt(childComplexity), true

	case "EcdFileMainSub.delete_by":
		if e.complexity.EcdFileMainSub.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileMainSub.DeleteBy(childComplexity), true

	case "EcdFileMainSub.facts":
		if e.complexity.EcdFileMainSub.Facts == nil {
			break
		}

		return e.complexity.EcdFileMainSub.Facts(childComplexity), true

	case "EcdFileMainSub.file_main_id":
		if e.complexity.EcdFileMainSub.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileMainSub.FileMainID(childComplexity), true

	case "EcdFileMainSub.file_main_sub_id":
		if e.complexity.EcdFileMainSub.FileMainSubID == nil {
			break
		}

		return e.complexity.EcdFileMainSub.FileMainSubID(childComplexity), true

	case "EcdFileMainSub.id":
		if e.complexity.EcdFileMainSub.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSub.ID(childComplexity), true

	case "EcdFileMainSub.is_delete":
		if e.complexity.EcdFileMainSub.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileMainSub.IsDelete(childComplexity), true

	case "EcdFileMainSub.package_director_name":
		if e.complexity.EcdFileMainSub.PackageDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSub.PackageDirectorName(childComplexity), true

	case "EcdFileMainSub.package_phone":
		if e.complexity.EcdFileMainSub.PackagePhone == nil {
			break
		}

		return e.complexity.EcdFileMainSub.PackagePhone(childComplexity), true

	case "EcdFileMainSub.package_prove_num":
		if e.complexity.EcdFileMainSub.PackageProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSub.PackageProveNum(childComplexity), true

	case "EcdFileMainSub.plan_deal_area":
		if e.complexity.EcdFileMainSub.PlanDealArea == nil {
			break
		}

		return e.complexity.EcdFileMainSub.PlanDealArea(childComplexity), true

	case "EcdFileMainSub.plan_end_time":
		if e.complexity.EcdFileMainSub.PlanEndTime == nil {
			break
		}

		return e.complexity.EcdFileMainSub.PlanEndTime(childComplexity), true

	case "EcdFileMainSub.plan_start_time":
		if e.complexity.EcdFileMainSub.PlanStartTime == nil {
			break
		}

		return e.complexity.EcdFileMainSub.PlanStartTime(childComplexity), true

	case "EcdFileMainSub.plan_trans_lines":
		if e.complexity.EcdFileMainSub.PlanTransLines == nil {
			break
		}

		return e.complexity.EcdFileMainSub.PlanTransLines(childComplexity), true

	case "EcdFileMainSub.plan_trans_volume":
		if e.complexity.EcdFileMainSub.PlanTransVolume == nil {
			break
		}

		return e.complexity.EcdFileMainSub.PlanTransVolume(childComplexity), true

	case "EcdFileMainSub.sub_package_unit":
		if e.complexity.EcdFileMainSub.SubPackageUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSub.SubPackageUnit(childComplexity), true

	case "EcdFileMainSub.traffic_director_name":
		if e.complexity.EcdFileMainSub.TrafficDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSub.TrafficDirectorName(childComplexity), true

	case "EcdFileMainSub.traffic_phone":
		if e.complexity.EcdFileMainSub.TrafficPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSub.TrafficPhone(childComplexity), true

	case "EcdFileMainSub.traffic_prove_num":
		if e.complexity.EcdFileMainSub.TrafficProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSub.TrafficProveNum(childComplexity), true

	case "EcdFileMainSub.traffic_unit":
		if e.complexity.EcdFileMainSub.TrafficUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSub.TrafficUnit(childComplexity), true

	case "EcdFileMainSub.update_at":
		if e.complexity.EcdFileMainSub.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileMainSub.UpdateAt(childComplexity), true

	case "EcdFileMainSub.update_by":
		if e.complexity.EcdFileMainSub.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileMainSub.UpdateBy(childComplexity), true

	case "EcdFileMainSub.wl_type":
		if e.complexity.EcdFileMainSub.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSub.WlType(childComplexity), true

	case "EcdFileMainSubAggregate.aggregate":
		if e.complexity.EcdFileMainSubAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregate.Aggregate(childComplexity), true

	case "EcdFileMainSubAggregateFields.avg":
		if e.complexity.EcdFileMainSubAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.Avg(childComplexity), true

	case "EcdFileMainSubAggregateFields.count":
		if e.complexity.EcdFileMainSubAggregateFields.Count == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.Count(childComplexity), true

	case "EcdFileMainSubAggregateFields.max":
		if e.complexity.EcdFileMainSubAggregateFields.Max == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.Max(childComplexity), true

	case "EcdFileMainSubAggregateFields.min":
		if e.complexity.EcdFileMainSubAggregateFields.Min == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.Min(childComplexity), true

	case "EcdFileMainSubAggregateFields.stddev":
		if e.complexity.EcdFileMainSubAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.Stddev(childComplexity), true

	case "EcdFileMainSubAggregateFields.stddev_pop":
		if e.complexity.EcdFileMainSubAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.StddevPop(childComplexity), true

	case "EcdFileMainSubAggregateFields.stddev_samp":
		if e.complexity.EcdFileMainSubAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.StddevSamp(childComplexity), true

	case "EcdFileMainSubAggregateFields.sum":
		if e.complexity.EcdFileMainSubAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.Sum(childComplexity), true

	case "EcdFileMainSubAggregateFields.var_pop":
		if e.complexity.EcdFileMainSubAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.VarPop(childComplexity), true

	case "EcdFileMainSubAggregateFields.var_samp":
		if e.complexity.EcdFileMainSubAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.VarSamp(childComplexity), true

	case "EcdFileMainSubAggregateFields.variance":
		if e.complexity.EcdFileMainSubAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EcdFileMainSubAggregateFields.Variance(childComplexity), true

	case "EcdFileMainSubAvgFields.id":
		if e.complexity.EcdFileMainSubAvgFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubAvgFields.ID(childComplexity), true

	case "EcdFileMainSubAvgFields.wl_type":
		if e.complexity.EcdFileMainSubAvgFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubAvgFields.WlType(childComplexity), true

	case "EcdFileMainSubMaxFields.address":
		if e.complexity.EcdFileMainSubMaxFields.Address == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.Address(childComplexity), true

	case "EcdFileMainSubMaxFields.construct_director_name":
		if e.complexity.EcdFileMainSubMaxFields.ConstructDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ConstructDirectorName(childComplexity), true

	case "EcdFileMainSubMaxFields.construct_phone":
		if e.complexity.EcdFileMainSubMaxFields.ConstructPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ConstructPhone(childComplexity), true

	case "EcdFileMainSubMaxFields.construct_prove_num":
		if e.complexity.EcdFileMainSubMaxFields.ConstructProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ConstructProveNum(childComplexity), true

	case "EcdFileMainSubMaxFields.construct_unit":
		if e.complexity.EcdFileMainSubMaxFields.ConstructUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ConstructUnit(childComplexity), true

	case "EcdFileMainSubMaxFields.contract_director_name":
		if e.complexity.EcdFileMainSubMaxFields.ContractDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ContractDirectorName(childComplexity), true

	case "EcdFileMainSubMaxFields.contract_phone":
		if e.complexity.EcdFileMainSubMaxFields.ContractPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ContractPhone(childComplexity), true

	case "EcdFileMainSubMaxFields.contract_prove_num":
		if e.complexity.EcdFileMainSubMaxFields.ContractProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ContractProveNum(childComplexity), true

	case "EcdFileMainSubMaxFields.contract_unit":
		if e.complexity.EcdFileMainSubMaxFields.ContractUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ContractUnit(childComplexity), true

	case "EcdFileMainSubMaxFields.create_at":
		if e.complexity.EcdFileMainSubMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.CreateAt(childComplexity), true

	case "EcdFileMainSubMaxFields.create_by":
		if e.complexity.EcdFileMainSubMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.CreateBy(childComplexity), true

	case "EcdFileMainSubMaxFields.delete_at":
		if e.complexity.EcdFileMainSubMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.DeleteAt(childComplexity), true

	case "EcdFileMainSubMaxFields.delete_by":
		if e.complexity.EcdFileMainSubMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.DeleteBy(childComplexity), true

	case "EcdFileMainSubMaxFields.facts":
		if e.complexity.EcdFileMainSubMaxFields.Facts == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.Facts(childComplexity), true

	case "EcdFileMainSubMaxFields.file_main_id":
		if e.complexity.EcdFileMainSubMaxFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.FileMainID(childComplexity), true

	case "EcdFileMainSubMaxFields.file_main_sub_id":
		if e.complexity.EcdFileMainSubMaxFields.FileMainSubID == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.FileMainSubID(childComplexity), true

	case "EcdFileMainSubMaxFields.id":
		if e.complexity.EcdFileMainSubMaxFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.ID(childComplexity), true

	case "EcdFileMainSubMaxFields.is_delete":
		if e.complexity.EcdFileMainSubMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.IsDelete(childComplexity), true

	case "EcdFileMainSubMaxFields.package_director_name":
		if e.complexity.EcdFileMainSubMaxFields.PackageDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.PackageDirectorName(childComplexity), true

	case "EcdFileMainSubMaxFields.package_phone":
		if e.complexity.EcdFileMainSubMaxFields.PackagePhone == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.PackagePhone(childComplexity), true

	case "EcdFileMainSubMaxFields.package_prove_num":
		if e.complexity.EcdFileMainSubMaxFields.PackageProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.PackageProveNum(childComplexity), true

	case "EcdFileMainSubMaxFields.plan_deal_area":
		if e.complexity.EcdFileMainSubMaxFields.PlanDealArea == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.PlanDealArea(childComplexity), true

	case "EcdFileMainSubMaxFields.plan_end_time":
		if e.complexity.EcdFileMainSubMaxFields.PlanEndTime == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.PlanEndTime(childComplexity), true

	case "EcdFileMainSubMaxFields.plan_start_time":
		if e.complexity.EcdFileMainSubMaxFields.PlanStartTime == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.PlanStartTime(childComplexity), true

	case "EcdFileMainSubMaxFields.plan_trans_lines":
		if e.complexity.EcdFileMainSubMaxFields.PlanTransLines == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.PlanTransLines(childComplexity), true

	case "EcdFileMainSubMaxFields.plan_trans_volume":
		if e.complexity.EcdFileMainSubMaxFields.PlanTransVolume == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.PlanTransVolume(childComplexity), true

	case "EcdFileMainSubMaxFields.sub_package_unit":
		if e.complexity.EcdFileMainSubMaxFields.SubPackageUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.SubPackageUnit(childComplexity), true

	case "EcdFileMainSubMaxFields.traffic_director_name":
		if e.complexity.EcdFileMainSubMaxFields.TrafficDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.TrafficDirectorName(childComplexity), true

	case "EcdFileMainSubMaxFields.traffic_phone":
		if e.complexity.EcdFileMainSubMaxFields.TrafficPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.TrafficPhone(childComplexity), true

	case "EcdFileMainSubMaxFields.traffic_prove_num":
		if e.complexity.EcdFileMainSubMaxFields.TrafficProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.TrafficProveNum(childComplexity), true

	case "EcdFileMainSubMaxFields.traffic_unit":
		if e.complexity.EcdFileMainSubMaxFields.TrafficUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.TrafficUnit(childComplexity), true

	case "EcdFileMainSubMaxFields.update_at":
		if e.complexity.EcdFileMainSubMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.UpdateAt(childComplexity), true

	case "EcdFileMainSubMaxFields.update_by":
		if e.complexity.EcdFileMainSubMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.UpdateBy(childComplexity), true

	case "EcdFileMainSubMaxFields.wl_type":
		if e.complexity.EcdFileMainSubMaxFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubMaxFields.WlType(childComplexity), true

	case "EcdFileMainSubMinFields.address":
		if e.complexity.EcdFileMainSubMinFields.Address == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.Address(childComplexity), true

	case "EcdFileMainSubMinFields.construct_director_name":
		if e.complexity.EcdFileMainSubMinFields.ConstructDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ConstructDirectorName(childComplexity), true

	case "EcdFileMainSubMinFields.construct_phone":
		if e.complexity.EcdFileMainSubMinFields.ConstructPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ConstructPhone(childComplexity), true

	case "EcdFileMainSubMinFields.construct_prove_num":
		if e.complexity.EcdFileMainSubMinFields.ConstructProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ConstructProveNum(childComplexity), true

	case "EcdFileMainSubMinFields.construct_unit":
		if e.complexity.EcdFileMainSubMinFields.ConstructUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ConstructUnit(childComplexity), true

	case "EcdFileMainSubMinFields.contract_director_name":
		if e.complexity.EcdFileMainSubMinFields.ContractDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ContractDirectorName(childComplexity), true

	case "EcdFileMainSubMinFields.contract_phone":
		if e.complexity.EcdFileMainSubMinFields.ContractPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ContractPhone(childComplexity), true

	case "EcdFileMainSubMinFields.contract_prove_num":
		if e.complexity.EcdFileMainSubMinFields.ContractProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ContractProveNum(childComplexity), true

	case "EcdFileMainSubMinFields.contract_unit":
		if e.complexity.EcdFileMainSubMinFields.ContractUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ContractUnit(childComplexity), true

	case "EcdFileMainSubMinFields.create_at":
		if e.complexity.EcdFileMainSubMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.CreateAt(childComplexity), true

	case "EcdFileMainSubMinFields.create_by":
		if e.complexity.EcdFileMainSubMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.CreateBy(childComplexity), true

	case "EcdFileMainSubMinFields.delete_at":
		if e.complexity.EcdFileMainSubMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.DeleteAt(childComplexity), true

	case "EcdFileMainSubMinFields.delete_by":
		if e.complexity.EcdFileMainSubMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.DeleteBy(childComplexity), true

	case "EcdFileMainSubMinFields.facts":
		if e.complexity.EcdFileMainSubMinFields.Facts == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.Facts(childComplexity), true

	case "EcdFileMainSubMinFields.file_main_id":
		if e.complexity.EcdFileMainSubMinFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.FileMainID(childComplexity), true

	case "EcdFileMainSubMinFields.file_main_sub_id":
		if e.complexity.EcdFileMainSubMinFields.FileMainSubID == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.FileMainSubID(childComplexity), true

	case "EcdFileMainSubMinFields.id":
		if e.complexity.EcdFileMainSubMinFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.ID(childComplexity), true

	case "EcdFileMainSubMinFields.is_delete":
		if e.complexity.EcdFileMainSubMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.IsDelete(childComplexity), true

	case "EcdFileMainSubMinFields.package_director_name":
		if e.complexity.EcdFileMainSubMinFields.PackageDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.PackageDirectorName(childComplexity), true

	case "EcdFileMainSubMinFields.package_phone":
		if e.complexity.EcdFileMainSubMinFields.PackagePhone == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.PackagePhone(childComplexity), true

	case "EcdFileMainSubMinFields.package_prove_num":
		if e.complexity.EcdFileMainSubMinFields.PackageProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.PackageProveNum(childComplexity), true

	case "EcdFileMainSubMinFields.plan_deal_area":
		if e.complexity.EcdFileMainSubMinFields.PlanDealArea == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.PlanDealArea(childComplexity), true

	case "EcdFileMainSubMinFields.plan_end_time":
		if e.complexity.EcdFileMainSubMinFields.PlanEndTime == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.PlanEndTime(childComplexity), true

	case "EcdFileMainSubMinFields.plan_start_time":
		if e.complexity.EcdFileMainSubMinFields.PlanStartTime == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.PlanStartTime(childComplexity), true

	case "EcdFileMainSubMinFields.plan_trans_lines":
		if e.complexity.EcdFileMainSubMinFields.PlanTransLines == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.PlanTransLines(childComplexity), true

	case "EcdFileMainSubMinFields.plan_trans_volume":
		if e.complexity.EcdFileMainSubMinFields.PlanTransVolume == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.PlanTransVolume(childComplexity), true

	case "EcdFileMainSubMinFields.sub_package_unit":
		if e.complexity.EcdFileMainSubMinFields.SubPackageUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.SubPackageUnit(childComplexity), true

	case "EcdFileMainSubMinFields.traffic_director_name":
		if e.complexity.EcdFileMainSubMinFields.TrafficDirectorName == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.TrafficDirectorName(childComplexity), true

	case "EcdFileMainSubMinFields.traffic_phone":
		if e.complexity.EcdFileMainSubMinFields.TrafficPhone == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.TrafficPhone(childComplexity), true

	case "EcdFileMainSubMinFields.traffic_prove_num":
		if e.complexity.EcdFileMainSubMinFields.TrafficProveNum == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.TrafficProveNum(childComplexity), true

	case "EcdFileMainSubMinFields.traffic_unit":
		if e.complexity.EcdFileMainSubMinFields.TrafficUnit == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.TrafficUnit(childComplexity), true

	case "EcdFileMainSubMinFields.update_at":
		if e.complexity.EcdFileMainSubMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.UpdateAt(childComplexity), true

	case "EcdFileMainSubMinFields.update_by":
		if e.complexity.EcdFileMainSubMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.UpdateBy(childComplexity), true

	case "EcdFileMainSubMinFields.wl_type":
		if e.complexity.EcdFileMainSubMinFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubMinFields.WlType(childComplexity), true

	case "EcdFileMainSubMutationResponse.affected_rows":
		if e.complexity.EcdFileMainSubMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EcdFileMainSubMutationResponse.AffectedRows(childComplexity), true

	case "EcdFileMainSubMutationResponse.returning":
		if e.complexity.EcdFileMainSubMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EcdFileMainSubMutationResponse.Returning(childComplexity), true

	case "EcdFileMainSubStddevFields.id":
		if e.complexity.EcdFileMainSubStddevFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubStddevFields.ID(childComplexity), true

	case "EcdFileMainSubStddevFields.wl_type":
		if e.complexity.EcdFileMainSubStddevFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubStddevFields.WlType(childComplexity), true

	case "EcdFileMainSubStddevPopFields.id":
		if e.complexity.EcdFileMainSubStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubStddevPopFields.ID(childComplexity), true

	case "EcdFileMainSubStddevPopFields.wl_type":
		if e.complexity.EcdFileMainSubStddevPopFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubStddevPopFields.WlType(childComplexity), true

	case "EcdFileMainSubStddevSampFields.id":
		if e.complexity.EcdFileMainSubStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubStddevSampFields.ID(childComplexity), true

	case "EcdFileMainSubStddevSampFields.wl_type":
		if e.complexity.EcdFileMainSubStddevSampFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubStddevSampFields.WlType(childComplexity), true

	case "EcdFileMainSubSumFields.id":
		if e.complexity.EcdFileMainSubSumFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubSumFields.ID(childComplexity), true

	case "EcdFileMainSubSumFields.wl_type":
		if e.complexity.EcdFileMainSubSumFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubSumFields.WlType(childComplexity), true

	case "EcdFileMainSubVarPopFields.id":
		if e.complexity.EcdFileMainSubVarPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubVarPopFields.ID(childComplexity), true

	case "EcdFileMainSubVarPopFields.wl_type":
		if e.complexity.EcdFileMainSubVarPopFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubVarPopFields.WlType(childComplexity), true

	case "EcdFileMainSubVarSampFields.id":
		if e.complexity.EcdFileMainSubVarSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubVarSampFields.ID(childComplexity), true

	case "EcdFileMainSubVarSampFields.wl_type":
		if e.complexity.EcdFileMainSubVarSampFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubVarSampFields.WlType(childComplexity), true

	case "EcdFileMainSubVarianceFields.id":
		if e.complexity.EcdFileMainSubVarianceFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSubVarianceFields.ID(childComplexity), true

	case "EcdFileMainSubVarianceFields.wl_type":
		if e.complexity.EcdFileMainSubVarianceFields.WlType == nil {
			break
		}

		return e.complexity.EcdFileMainSubVarianceFields.WlType(childComplexity), true

	case "EcdFileMainSumFields.check_status":
		if e.complexity.EcdFileMainSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainSumFields.CheckStatus(childComplexity), true

	case "EcdFileMainSumFields.end_state":
		if e.complexity.EcdFileMainSumFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainSumFields.EndState(childComplexity), true

	case "EcdFileMainSumFields.id":
		if e.complexity.EcdFileMainSumFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainSumFields.ID(childComplexity), true

	case "EcdFileMainSumFields.point_state":
		if e.complexity.EcdFileMainSumFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainSumFields.PointState(childComplexity), true

	case "EcdFileMainVarPopFields.check_status":
		if e.complexity.EcdFileMainVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainVarPopFields.CheckStatus(childComplexity), true

	case "EcdFileMainVarPopFields.end_state":
		if e.complexity.EcdFileMainVarPopFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainVarPopFields.EndState(childComplexity), true

	case "EcdFileMainVarPopFields.id":
		if e.complexity.EcdFileMainVarPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainVarPopFields.ID(childComplexity), true

	case "EcdFileMainVarPopFields.point_state":
		if e.complexity.EcdFileMainVarPopFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainVarPopFields.PointState(childComplexity), true

	case "EcdFileMainVarSampFields.check_status":
		if e.complexity.EcdFileMainVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainVarSampFields.CheckStatus(childComplexity), true

	case "EcdFileMainVarSampFields.end_state":
		if e.complexity.EcdFileMainVarSampFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainVarSampFields.EndState(childComplexity), true

	case "EcdFileMainVarSampFields.id":
		if e.complexity.EcdFileMainVarSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainVarSampFields.ID(childComplexity), true

	case "EcdFileMainVarSampFields.point_state":
		if e.complexity.EcdFileMainVarSampFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainVarSampFields.PointState(childComplexity), true

	case "EcdFileMainVarianceFields.check_status":
		if e.complexity.EcdFileMainVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileMainVarianceFields.CheckStatus(childComplexity), true

	case "EcdFileMainVarianceFields.end_state":
		if e.complexity.EcdFileMainVarianceFields.EndState == nil {
			break
		}

		return e.complexity.EcdFileMainVarianceFields.EndState(childComplexity), true

	case "EcdFileMainVarianceFields.id":
		if e.complexity.EcdFileMainVarianceFields.ID == nil {
			break
		}

		return e.complexity.EcdFileMainVarianceFields.ID(childComplexity), true

	case "EcdFileMainVarianceFields.point_state":
		if e.complexity.EcdFileMainVarianceFields.PointState == nil {
			break
		}

		return e.complexity.EcdFileMainVarianceFields.PointState(childComplexity), true

	case "EcdFileVehicle.check_status":
		if e.complexity.EcdFileVehicle.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicle.CheckStatus(childComplexity), true

	case "EcdFileVehicle.create_at":
		if e.complexity.EcdFileVehicle.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicle.CreateAt(childComplexity), true

	case "EcdFileVehicle.create_by":
		if e.complexity.EcdFileVehicle.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicle.CreateBy(childComplexity), true

	case "EcdFileVehicle.delete_at":
		if e.complexity.EcdFileVehicle.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileVehicle.DeleteAt(childComplexity), true

	case "EcdFileVehicle.delete_by":
		if e.complexity.EcdFileVehicle.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileVehicle.DeleteBy(childComplexity), true

	case "EcdFileVehicle.file_main_id":
		if e.complexity.EcdFileVehicle.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileVehicle.FileMainID(childComplexity), true

	case "EcdFileVehicle.file_vehicle_id":
		if e.complexity.EcdFileVehicle.FileVehicleID == nil {
			break
		}

		return e.complexity.EcdFileVehicle.FileVehicleID(childComplexity), true

	case "EcdFileVehicle.id":
		if e.complexity.EcdFileVehicle.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicle.ID(childComplexity), true

	case "EcdFileVehicle.is_delete":
		if e.complexity.EcdFileVehicle.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileVehicle.IsDelete(childComplexity), true

	case "EcdFileVehicle.update_at":
		if e.complexity.EcdFileVehicle.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicle.UpdateAt(childComplexity), true

	case "EcdFileVehicle.update_by":
		if e.complexity.EcdFileVehicle.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicle.UpdateBy(childComplexity), true

	case "EcdFileVehicle.vehicle_id":
		if e.complexity.EcdFileVehicle.VehicleID == nil {
			break
		}

		return e.complexity.EcdFileVehicle.VehicleID(childComplexity), true

	case "EcdFileVehicleAggregate.aggregate":
		if e.complexity.EcdFileVehicleAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregate.Aggregate(childComplexity), true

	case "EcdFileVehicleAggregateFields.avg":
		if e.complexity.EcdFileVehicleAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.Avg(childComplexity), true

	case "EcdFileVehicleAggregateFields.count":
		if e.complexity.EcdFileVehicleAggregateFields.Count == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.Count(childComplexity), true

	case "EcdFileVehicleAggregateFields.max":
		if e.complexity.EcdFileVehicleAggregateFields.Max == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.Max(childComplexity), true

	case "EcdFileVehicleAggregateFields.min":
		if e.complexity.EcdFileVehicleAggregateFields.Min == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.Min(childComplexity), true

	case "EcdFileVehicleAggregateFields.stddev":
		if e.complexity.EcdFileVehicleAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.Stddev(childComplexity), true

	case "EcdFileVehicleAggregateFields.stddev_pop":
		if e.complexity.EcdFileVehicleAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.StddevPop(childComplexity), true

	case "EcdFileVehicleAggregateFields.stddev_samp":
		if e.complexity.EcdFileVehicleAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.StddevSamp(childComplexity), true

	case "EcdFileVehicleAggregateFields.sum":
		if e.complexity.EcdFileVehicleAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.Sum(childComplexity), true

	case "EcdFileVehicleAggregateFields.var_pop":
		if e.complexity.EcdFileVehicleAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.VarPop(childComplexity), true

	case "EcdFileVehicleAggregateFields.var_samp":
		if e.complexity.EcdFileVehicleAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.VarSamp(childComplexity), true

	case "EcdFileVehicleAggregateFields.variance":
		if e.complexity.EcdFileVehicleAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EcdFileVehicleAggregateFields.Variance(childComplexity), true

	case "EcdFileVehicleAvgFields.check_status":
		if e.complexity.EcdFileVehicleAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleAvgFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleAvgFields.id":
		if e.complexity.EcdFileVehicleAvgFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleAvgFields.ID(childComplexity), true

	case "EcdFileVehicleMaxFields.check_status":
		if e.complexity.EcdFileVehicleMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleMaxFields.create_at":
		if e.complexity.EcdFileVehicleMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.CreateAt(childComplexity), true

	case "EcdFileVehicleMaxFields.create_by":
		if e.complexity.EcdFileVehicleMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.CreateBy(childComplexity), true

	case "EcdFileVehicleMaxFields.delete_at":
		if e.complexity.EcdFileVehicleMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.DeleteAt(childComplexity), true

	case "EcdFileVehicleMaxFields.delete_by":
		if e.complexity.EcdFileVehicleMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.DeleteBy(childComplexity), true

	case "EcdFileVehicleMaxFields.file_main_id":
		if e.complexity.EcdFileVehicleMaxFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.FileMainID(childComplexity), true

	case "EcdFileVehicleMaxFields.file_vehicle_id":
		if e.complexity.EcdFileVehicleMaxFields.FileVehicleID == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.FileVehicleID(childComplexity), true

	case "EcdFileVehicleMaxFields.id":
		if e.complexity.EcdFileVehicleMaxFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.ID(childComplexity), true

	case "EcdFileVehicleMaxFields.is_delete":
		if e.complexity.EcdFileVehicleMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.IsDelete(childComplexity), true

	case "EcdFileVehicleMaxFields.update_at":
		if e.complexity.EcdFileVehicleMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.UpdateAt(childComplexity), true

	case "EcdFileVehicleMaxFields.update_by":
		if e.complexity.EcdFileVehicleMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.UpdateBy(childComplexity), true

	case "EcdFileVehicleMaxFields.vehicle_id":
		if e.complexity.EcdFileVehicleMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.EcdFileVehicleMaxFields.VehicleID(childComplexity), true

	case "EcdFileVehicleMinFields.check_status":
		if e.complexity.EcdFileVehicleMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleMinFields.create_at":
		if e.complexity.EcdFileVehicleMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.CreateAt(childComplexity), true

	case "EcdFileVehicleMinFields.create_by":
		if e.complexity.EcdFileVehicleMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.CreateBy(childComplexity), true

	case "EcdFileVehicleMinFields.delete_at":
		if e.complexity.EcdFileVehicleMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.DeleteAt(childComplexity), true

	case "EcdFileVehicleMinFields.delete_by":
		if e.complexity.EcdFileVehicleMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.DeleteBy(childComplexity), true

	case "EcdFileVehicleMinFields.file_main_id":
		if e.complexity.EcdFileVehicleMinFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.FileMainID(childComplexity), true

	case "EcdFileVehicleMinFields.file_vehicle_id":
		if e.complexity.EcdFileVehicleMinFields.FileVehicleID == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.FileVehicleID(childComplexity), true

	case "EcdFileVehicleMinFields.id":
		if e.complexity.EcdFileVehicleMinFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.ID(childComplexity), true

	case "EcdFileVehicleMinFields.is_delete":
		if e.complexity.EcdFileVehicleMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.IsDelete(childComplexity), true

	case "EcdFileVehicleMinFields.update_at":
		if e.complexity.EcdFileVehicleMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.UpdateAt(childComplexity), true

	case "EcdFileVehicleMinFields.update_by":
		if e.complexity.EcdFileVehicleMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.UpdateBy(childComplexity), true

	case "EcdFileVehicleMinFields.vehicle_id":
		if e.complexity.EcdFileVehicleMinFields.VehicleID == nil {
			break
		}

		return e.complexity.EcdFileVehicleMinFields.VehicleID(childComplexity), true

	case "EcdFileVehicleMutationResponse.affected_rows":
		if e.complexity.EcdFileVehicleMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EcdFileVehicleMutationResponse.AffectedRows(childComplexity), true

	case "EcdFileVehicleMutationResponse.returning":
		if e.complexity.EcdFileVehicleMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EcdFileVehicleMutationResponse.Returning(childComplexity), true

	case "EcdFileVehicleStddevFields.check_status":
		if e.complexity.EcdFileVehicleStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleStddevFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleStddevFields.id":
		if e.complexity.EcdFileVehicleStddevFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleStddevFields.ID(childComplexity), true

	case "EcdFileVehicleStddevPopFields.check_status":
		if e.complexity.EcdFileVehicleStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleStddevPopFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleStddevPopFields.id":
		if e.complexity.EcdFileVehicleStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleStddevPopFields.ID(childComplexity), true

	case "EcdFileVehicleStddevSampFields.check_status":
		if e.complexity.EcdFileVehicleStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleStddevSampFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleStddevSampFields.id":
		if e.complexity.EcdFileVehicleStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleStddevSampFields.ID(childComplexity), true

	case "EcdFileVehicleSumFields.check_status":
		if e.complexity.EcdFileVehicleSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleSumFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleSumFields.id":
		if e.complexity.EcdFileVehicleSumFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleSumFields.ID(childComplexity), true

	case "EcdFileVehicleTime.check_status":
		if e.complexity.EcdFileVehicleTime.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.CheckStatus(childComplexity), true

	case "EcdFileVehicleTime.check_time":
		if e.complexity.EcdFileVehicleTime.CheckTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.CheckTime(childComplexity), true

	case "EcdFileVehicleTime.create_at":
		if e.complexity.EcdFileVehicleTime.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.CreateAt(childComplexity), true

	case "EcdFileVehicleTime.create_by":
		if e.complexity.EcdFileVehicleTime.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.CreateBy(childComplexity), true

	case "EcdFileVehicleTime.delete_at":
		if e.complexity.EcdFileVehicleTime.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.DeleteAt(childComplexity), true

	case "EcdFileVehicleTime.delete_by":
		if e.complexity.EcdFileVehicleTime.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.DeleteBy(childComplexity), true

	case "EcdFileVehicleTime.end_date":
		if e.complexity.EcdFileVehicleTime.EndDate == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.EndDate(childComplexity), true

	case "EcdFileVehicleTime.end_time":
		if e.complexity.EcdFileVehicleTime.EndTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.EndTime(childComplexity), true

	case "EcdFileVehicleTime.file_main_id":
		if e.complexity.EcdFileVehicleTime.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.FileMainID(childComplexity), true

	case "EcdFileVehicleTime.id":
		if e.complexity.EcdFileVehicleTime.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.ID(childComplexity), true

	case "EcdFileVehicleTime.is_check":
		if e.complexity.EcdFileVehicleTime.IsCheck == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.IsCheck(childComplexity), true

	case "EcdFileVehicleTime.is_delete":
		if e.complexity.EcdFileVehicleTime.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.IsDelete(childComplexity), true

	case "EcdFileVehicleTime.line_id":
		if e.complexity.EcdFileVehicleTime.LineID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.LineID(childComplexity), true

	case "EcdFileVehicleTime.start_date":
		if e.complexity.EcdFileVehicleTime.StartDate == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.StartDate(childComplexity), true

	case "EcdFileVehicleTime.start_time":
		if e.complexity.EcdFileVehicleTime.StartTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.StartTime(childComplexity), true

	case "EcdFileVehicleTime.update_at":
		if e.complexity.EcdFileVehicleTime.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.UpdateAt(childComplexity), true

	case "EcdFileVehicleTime.update_by":
		if e.complexity.EcdFileVehicleTime.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.UpdateBy(childComplexity), true

	case "EcdFileVehicleTime.vechile_id":
		if e.complexity.EcdFileVehicleTime.VechileID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.VechileID(childComplexity), true

	case "EcdFileVehicleTime.vehicle_time_id":
		if e.complexity.EcdFileVehicleTime.VehicleTimeID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTime.VehicleTimeID(childComplexity), true

	case "EcdFileVehicleTimeAggregate.aggregate":
		if e.complexity.EcdFileVehicleTimeAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregate.Aggregate(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.avg":
		if e.complexity.EcdFileVehicleTimeAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.Avg(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.count":
		if e.complexity.EcdFileVehicleTimeAggregateFields.Count == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.Count(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.max":
		if e.complexity.EcdFileVehicleTimeAggregateFields.Max == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.Max(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.min":
		if e.complexity.EcdFileVehicleTimeAggregateFields.Min == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.Min(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.stddev":
		if e.complexity.EcdFileVehicleTimeAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.Stddev(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.stddev_pop":
		if e.complexity.EcdFileVehicleTimeAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.StddevPop(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.stddev_samp":
		if e.complexity.EcdFileVehicleTimeAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.StddevSamp(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.sum":
		if e.complexity.EcdFileVehicleTimeAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.Sum(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.var_pop":
		if e.complexity.EcdFileVehicleTimeAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.VarPop(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.var_samp":
		if e.complexity.EcdFileVehicleTimeAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.VarSamp(childComplexity), true

	case "EcdFileVehicleTimeAggregateFields.variance":
		if e.complexity.EcdFileVehicleTimeAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAggregateFields.Variance(childComplexity), true

	case "EcdFileVehicleTimeAvgFields.check_status":
		if e.complexity.EcdFileVehicleTimeAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAvgFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeAvgFields.id":
		if e.complexity.EcdFileVehicleTimeAvgFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeAvgFields.ID(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.check_status":
		if e.complexity.EcdFileVehicleTimeMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.check_time":
		if e.complexity.EcdFileVehicleTimeMaxFields.CheckTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.CheckTime(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.create_at":
		if e.complexity.EcdFileVehicleTimeMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.CreateAt(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.create_by":
		if e.complexity.EcdFileVehicleTimeMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.CreateBy(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.delete_at":
		if e.complexity.EcdFileVehicleTimeMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.DeleteAt(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.delete_by":
		if e.complexity.EcdFileVehicleTimeMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.DeleteBy(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.end_date":
		if e.complexity.EcdFileVehicleTimeMaxFields.EndDate == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.EndDate(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.end_time":
		if e.complexity.EcdFileVehicleTimeMaxFields.EndTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.EndTime(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.file_main_id":
		if e.complexity.EcdFileVehicleTimeMaxFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.FileMainID(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.id":
		if e.complexity.EcdFileVehicleTimeMaxFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.ID(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.is_check":
		if e.complexity.EcdFileVehicleTimeMaxFields.IsCheck == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.IsCheck(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.is_delete":
		if e.complexity.EcdFileVehicleTimeMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.IsDelete(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.line_id":
		if e.complexity.EcdFileVehicleTimeMaxFields.LineID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.LineID(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.start_date":
		if e.complexity.EcdFileVehicleTimeMaxFields.StartDate == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.StartDate(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.start_time":
		if e.complexity.EcdFileVehicleTimeMaxFields.StartTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.StartTime(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.update_at":
		if e.complexity.EcdFileVehicleTimeMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.UpdateAt(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.update_by":
		if e.complexity.EcdFileVehicleTimeMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.UpdateBy(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.vechile_id":
		if e.complexity.EcdFileVehicleTimeMaxFields.VechileID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.VechileID(childComplexity), true

	case "EcdFileVehicleTimeMaxFields.vehicle_time_id":
		if e.complexity.EcdFileVehicleTimeMaxFields.VehicleTimeID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMaxFields.VehicleTimeID(childComplexity), true

	case "EcdFileVehicleTimeMinFields.check_status":
		if e.complexity.EcdFileVehicleTimeMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeMinFields.check_time":
		if e.complexity.EcdFileVehicleTimeMinFields.CheckTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.CheckTime(childComplexity), true

	case "EcdFileVehicleTimeMinFields.create_at":
		if e.complexity.EcdFileVehicleTimeMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.CreateAt(childComplexity), true

	case "EcdFileVehicleTimeMinFields.create_by":
		if e.complexity.EcdFileVehicleTimeMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.CreateBy(childComplexity), true

	case "EcdFileVehicleTimeMinFields.delete_at":
		if e.complexity.EcdFileVehicleTimeMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.DeleteAt(childComplexity), true

	case "EcdFileVehicleTimeMinFields.delete_by":
		if e.complexity.EcdFileVehicleTimeMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.DeleteBy(childComplexity), true

	case "EcdFileVehicleTimeMinFields.end_date":
		if e.complexity.EcdFileVehicleTimeMinFields.EndDate == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.EndDate(childComplexity), true

	case "EcdFileVehicleTimeMinFields.end_time":
		if e.complexity.EcdFileVehicleTimeMinFields.EndTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.EndTime(childComplexity), true

	case "EcdFileVehicleTimeMinFields.file_main_id":
		if e.complexity.EcdFileVehicleTimeMinFields.FileMainID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.FileMainID(childComplexity), true

	case "EcdFileVehicleTimeMinFields.id":
		if e.complexity.EcdFileVehicleTimeMinFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.ID(childComplexity), true

	case "EcdFileVehicleTimeMinFields.is_check":
		if e.complexity.EcdFileVehicleTimeMinFields.IsCheck == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.IsCheck(childComplexity), true

	case "EcdFileVehicleTimeMinFields.is_delete":
		if e.complexity.EcdFileVehicleTimeMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.IsDelete(childComplexity), true

	case "EcdFileVehicleTimeMinFields.line_id":
		if e.complexity.EcdFileVehicleTimeMinFields.LineID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.LineID(childComplexity), true

	case "EcdFileVehicleTimeMinFields.start_date":
		if e.complexity.EcdFileVehicleTimeMinFields.StartDate == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.StartDate(childComplexity), true

	case "EcdFileVehicleTimeMinFields.start_time":
		if e.complexity.EcdFileVehicleTimeMinFields.StartTime == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.StartTime(childComplexity), true

	case "EcdFileVehicleTimeMinFields.update_at":
		if e.complexity.EcdFileVehicleTimeMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.UpdateAt(childComplexity), true

	case "EcdFileVehicleTimeMinFields.update_by":
		if e.complexity.EcdFileVehicleTimeMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.UpdateBy(childComplexity), true

	case "EcdFileVehicleTimeMinFields.vechile_id":
		if e.complexity.EcdFileVehicleTimeMinFields.VechileID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.VechileID(childComplexity), true

	case "EcdFileVehicleTimeMinFields.vehicle_time_id":
		if e.complexity.EcdFileVehicleTimeMinFields.VehicleTimeID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMinFields.VehicleTimeID(childComplexity), true

	case "EcdFileVehicleTimeMutationResponse.affected_rows":
		if e.complexity.EcdFileVehicleTimeMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMutationResponse.AffectedRows(childComplexity), true

	case "EcdFileVehicleTimeMutationResponse.returning":
		if e.complexity.EcdFileVehicleTimeMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeMutationResponse.Returning(childComplexity), true

	case "EcdFileVehicleTimeStddevFields.check_status":
		if e.complexity.EcdFileVehicleTimeStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeStddevFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeStddevFields.id":
		if e.complexity.EcdFileVehicleTimeStddevFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeStddevFields.ID(childComplexity), true

	case "EcdFileVehicleTimeStddevPopFields.check_status":
		if e.complexity.EcdFileVehicleTimeStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeStddevPopFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeStddevPopFields.id":
		if e.complexity.EcdFileVehicleTimeStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeStddevPopFields.ID(childComplexity), true

	case "EcdFileVehicleTimeStddevSampFields.check_status":
		if e.complexity.EcdFileVehicleTimeStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeStddevSampFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeStddevSampFields.id":
		if e.complexity.EcdFileVehicleTimeStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeStddevSampFields.ID(childComplexity), true

	case "EcdFileVehicleTimeSumFields.check_status":
		if e.complexity.EcdFileVehicleTimeSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeSumFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeSumFields.id":
		if e.complexity.EcdFileVehicleTimeSumFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeSumFields.ID(childComplexity), true

	case "EcdFileVehicleTimeVarPopFields.check_status":
		if e.complexity.EcdFileVehicleTimeVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeVarPopFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeVarPopFields.id":
		if e.complexity.EcdFileVehicleTimeVarPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeVarPopFields.ID(childComplexity), true

	case "EcdFileVehicleTimeVarSampFields.check_status":
		if e.complexity.EcdFileVehicleTimeVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeVarSampFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeVarSampFields.id":
		if e.complexity.EcdFileVehicleTimeVarSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeVarSampFields.ID(childComplexity), true

	case "EcdFileVehicleTimeVarianceFields.check_status":
		if e.complexity.EcdFileVehicleTimeVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeVarianceFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleTimeVarianceFields.id":
		if e.complexity.EcdFileVehicleTimeVarianceFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleTimeVarianceFields.ID(childComplexity), true

	case "EcdFileVehicleVarPopFields.check_status":
		if e.complexity.EcdFileVehicleVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleVarPopFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleVarPopFields.id":
		if e.complexity.EcdFileVehicleVarPopFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleVarPopFields.ID(childComplexity), true

	case "EcdFileVehicleVarSampFields.check_status":
		if e.complexity.EcdFileVehicleVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleVarSampFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleVarSampFields.id":
		if e.complexity.EcdFileVehicleVarSampFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleVarSampFields.ID(childComplexity), true

	case "EcdFileVehicleVarianceFields.check_status":
		if e.complexity.EcdFileVehicleVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.EcdFileVehicleVarianceFields.CheckStatus(childComplexity), true

	case "EcdFileVehicleVarianceFields.id":
		if e.complexity.EcdFileVehicleVarianceFields.ID == nil {
			break
		}

		return e.complexity.EcdFileVehicleVarianceFields.ID(childComplexity), true

	case "EcdLine.audit_time":
		if e.complexity.EcdLine.AuditTime == nil {
			break
		}

		return e.complexity.EcdLine.AuditTime(childComplexity), true

	case "EcdLine.audit_user_id":
		if e.complexity.EcdLine.AuditUserID == nil {
			break
		}

		return e.complexity.EcdLine.AuditUserID(childComplexity), true

	case "EcdLine.create_at":
		if e.complexity.EcdLine.CreateAt == nil {
			break
		}

		return e.complexity.EcdLine.CreateAt(childComplexity), true

	case "EcdLine.create_by":
		if e.complexity.EcdLine.CreateBy == nil {
			break
		}

		return e.complexity.EcdLine.CreateBy(childComplexity), true

	case "EcdLine.delete_at":
		if e.complexity.EcdLine.DeleteAt == nil {
			break
		}

		return e.complexity.EcdLine.DeleteAt(childComplexity), true

	case "EcdLine.delete_by":
		if e.complexity.EcdLine.DeleteBy == nil {
			break
		}

		return e.complexity.EcdLine.DeleteBy(childComplexity), true

	case "EcdLine.enterprise_id":
		if e.complexity.EcdLine.EnterpriseID == nil {
			break
		}

		return e.complexity.EcdLine.EnterpriseID(childComplexity), true

	case "EcdLine.gis_data":
		if e.complexity.EcdLine.GisData == nil {
			break
		}

		return e.complexity.EcdLine.GisData(childComplexity), true

	case "EcdLine.id":
		if e.complexity.EcdLine.ID == nil {
			break
		}

		return e.complexity.EcdLine.ID(childComplexity), true

	case "EcdLine.is_delete":
		if e.complexity.EcdLine.IsDelete == nil {
			break
		}

		return e.complexity.EcdLine.IsDelete(childComplexity), true

	case "EcdLine.is_resolve_desc":
		if e.complexity.EcdLine.IsResolveDesc == nil {
			break
		}

		return e.complexity.EcdLine.IsResolveDesc(childComplexity), true

	case "EcdLine.line_desc":
		if e.complexity.EcdLine.LineDesc == nil {
			break
		}

		return e.complexity.EcdLine.LineDesc(childComplexity), true

	case "EcdLine.line_id":
		if e.complexity.EcdLine.LineID == nil {
			break
		}

		return e.complexity.EcdLine.LineID(childComplexity), true

	case "EcdLine.line_name":
		if e.complexity.EcdLine.LineName == nil {
			break
		}

		return e.complexity.EcdLine.LineName(childComplexity), true

	case "EcdLine.update_at":
		if e.complexity.EcdLine.UpdateAt == nil {
			break
		}

		return e.complexity.EcdLine.UpdateAt(childComplexity), true

	case "EcdLine.update_by":
		if e.complexity.EcdLine.UpdateBy == nil {
			break
		}

		return e.complexity.EcdLine.UpdateBy(childComplexity), true

	case "EcdLineAggregate.aggregate":
		if e.complexity.EcdLineAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EcdLineAggregate.Aggregate(childComplexity), true

	case "EcdLineAggregateFields.avg":
		if e.complexity.EcdLineAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.Avg(childComplexity), true

	case "EcdLineAggregateFields.count":
		if e.complexity.EcdLineAggregateFields.Count == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.Count(childComplexity), true

	case "EcdLineAggregateFields.max":
		if e.complexity.EcdLineAggregateFields.Max == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.Max(childComplexity), true

	case "EcdLineAggregateFields.min":
		if e.complexity.EcdLineAggregateFields.Min == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.Min(childComplexity), true

	case "EcdLineAggregateFields.stddev":
		if e.complexity.EcdLineAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.Stddev(childComplexity), true

	case "EcdLineAggregateFields.stddev_pop":
		if e.complexity.EcdLineAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.StddevPop(childComplexity), true

	case "EcdLineAggregateFields.stddev_samp":
		if e.complexity.EcdLineAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.StddevSamp(childComplexity), true

	case "EcdLineAggregateFields.sum":
		if e.complexity.EcdLineAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.Sum(childComplexity), true

	case "EcdLineAggregateFields.var_pop":
		if e.complexity.EcdLineAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.VarPop(childComplexity), true

	case "EcdLineAggregateFields.var_samp":
		if e.complexity.EcdLineAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.VarSamp(childComplexity), true

	case "EcdLineAggregateFields.variance":
		if e.complexity.EcdLineAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EcdLineAggregateFields.Variance(childComplexity), true

	case "EcdLineAvgFields.id":
		if e.complexity.EcdLineAvgFields.ID == nil {
			break
		}

		return e.complexity.EcdLineAvgFields.ID(childComplexity), true

	case "EcdLineMaxFields.audit_time":
		if e.complexity.EcdLineMaxFields.AuditTime == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.AuditTime(childComplexity), true

	case "EcdLineMaxFields.audit_user_id":
		if e.complexity.EcdLineMaxFields.AuditUserID == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.AuditUserID(childComplexity), true

	case "EcdLineMaxFields.create_at":
		if e.complexity.EcdLineMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.CreateAt(childComplexity), true

	case "EcdLineMaxFields.create_by":
		if e.complexity.EcdLineMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.CreateBy(childComplexity), true

	case "EcdLineMaxFields.delete_at":
		if e.complexity.EcdLineMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.DeleteAt(childComplexity), true

	case "EcdLineMaxFields.delete_by":
		if e.complexity.EcdLineMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.DeleteBy(childComplexity), true

	case "EcdLineMaxFields.enterprise_id":
		if e.complexity.EcdLineMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.EnterpriseID(childComplexity), true

	case "EcdLineMaxFields.gis_data":
		if e.complexity.EcdLineMaxFields.GisData == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.GisData(childComplexity), true

	case "EcdLineMaxFields.id":
		if e.complexity.EcdLineMaxFields.ID == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.ID(childComplexity), true

	case "EcdLineMaxFields.is_delete":
		if e.complexity.EcdLineMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.IsDelete(childComplexity), true

	case "EcdLineMaxFields.is_resolve_desc":
		if e.complexity.EcdLineMaxFields.IsResolveDesc == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.IsResolveDesc(childComplexity), true

	case "EcdLineMaxFields.line_desc":
		if e.complexity.EcdLineMaxFields.LineDesc == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.LineDesc(childComplexity), true

	case "EcdLineMaxFields.line_id":
		if e.complexity.EcdLineMaxFields.LineID == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.LineID(childComplexity), true

	case "EcdLineMaxFields.line_name":
		if e.complexity.EcdLineMaxFields.LineName == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.LineName(childComplexity), true

	case "EcdLineMaxFields.update_at":
		if e.complexity.EcdLineMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.UpdateAt(childComplexity), true

	case "EcdLineMaxFields.update_by":
		if e.complexity.EcdLineMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdLineMaxFields.UpdateBy(childComplexity), true

	case "EcdLineMinFields.audit_time":
		if e.complexity.EcdLineMinFields.AuditTime == nil {
			break
		}

		return e.complexity.EcdLineMinFields.AuditTime(childComplexity), true

	case "EcdLineMinFields.audit_user_id":
		if e.complexity.EcdLineMinFields.AuditUserID == nil {
			break
		}

		return e.complexity.EcdLineMinFields.AuditUserID(childComplexity), true

	case "EcdLineMinFields.create_at":
		if e.complexity.EcdLineMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EcdLineMinFields.CreateAt(childComplexity), true

	case "EcdLineMinFields.create_by":
		if e.complexity.EcdLineMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EcdLineMinFields.CreateBy(childComplexity), true

	case "EcdLineMinFields.delete_at":
		if e.complexity.EcdLineMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EcdLineMinFields.DeleteAt(childComplexity), true

	case "EcdLineMinFields.delete_by":
		if e.complexity.EcdLineMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EcdLineMinFields.DeleteBy(childComplexity), true

	case "EcdLineMinFields.enterprise_id":
		if e.complexity.EcdLineMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EcdLineMinFields.EnterpriseID(childComplexity), true

	case "EcdLineMinFields.gis_data":
		if e.complexity.EcdLineMinFields.GisData == nil {
			break
		}

		return e.complexity.EcdLineMinFields.GisData(childComplexity), true

	case "EcdLineMinFields.id":
		if e.complexity.EcdLineMinFields.ID == nil {
			break
		}

		return e.complexity.EcdLineMinFields.ID(childComplexity), true

	case "EcdLineMinFields.is_delete":
		if e.complexity.EcdLineMinFields.IsDelete == nil {
			break
		}

		return e.complexity.EcdLineMinFields.IsDelete(childComplexity), true

	case "EcdLineMinFields.is_resolve_desc":
		if e.complexity.EcdLineMinFields.IsResolveDesc == nil {
			break
		}

		return e.complexity.EcdLineMinFields.IsResolveDesc(childComplexity), true

	case "EcdLineMinFields.line_desc":
		if e.complexity.EcdLineMinFields.LineDesc == nil {
			break
		}

		return e.complexity.EcdLineMinFields.LineDesc(childComplexity), true

	case "EcdLineMinFields.line_id":
		if e.complexity.EcdLineMinFields.LineID == nil {
			break
		}

		return e.complexity.EcdLineMinFields.LineID(childComplexity), true

	case "EcdLineMinFields.line_name":
		if e.complexity.EcdLineMinFields.LineName == nil {
			break
		}

		return e.complexity.EcdLineMinFields.LineName(childComplexity), true

	case "EcdLineMinFields.update_at":
		if e.complexity.EcdLineMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EcdLineMinFields.UpdateAt(childComplexity), true

	case "EcdLineMinFields.update_by":
		if e.complexity.EcdLineMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EcdLineMinFields.UpdateBy(childComplexity), true

	case "EcdLineMutationResponse.affected_rows":
		if e.complexity.EcdLineMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EcdLineMutationResponse.AffectedRows(childComplexity), true

	case "EcdLineMutationResponse.returning":
		if e.complexity.EcdLineMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EcdLineMutationResponse.Returning(childComplexity), true

	case "EcdLineStddevFields.id":
		if e.complexity.EcdLineStddevFields.ID == nil {
			break
		}

		return e.complexity.EcdLineStddevFields.ID(childComplexity), true

	case "EcdLineStddevPopFields.id":
		if e.complexity.EcdLineStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EcdLineStddevPopFields.ID(childComplexity), true

	case "EcdLineStddevSampFields.id":
		if e.complexity.EcdLineStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EcdLineStddevSampFields.ID(childComplexity), true

	case "EcdLineSumFields.id":
		if e.complexity.EcdLineSumFields.ID == nil {
			break
		}

		return e.complexity.EcdLineSumFields.ID(childComplexity), true

	case "EcdLineVarPopFields.id":
		if e.complexity.EcdLineVarPopFields.ID == nil {
			break
		}

		return e.complexity.EcdLineVarPopFields.ID(childComplexity), true

	case "EcdLineVarSampFields.id":
		if e.complexity.EcdLineVarSampFields.ID == nil {
			break
		}

		return e.complexity.EcdLineVarSampFields.ID(childComplexity), true

	case "EcdLineVarianceFields.id":
		if e.complexity.EcdLineVarianceFields.ID == nil {
			break
		}

		return e.complexity.EcdLineVarianceFields.ID(childComplexity), true

	case "ElectricFence.address":
		if e.complexity.ElectricFence.Address == nil {
			break
		}

		return e.complexity.ElectricFence.Address(childComplexity), true

	case "ElectricFence.area_type":
		if e.complexity.ElectricFence.AreaType == nil {
			break
		}

		return e.complexity.ElectricFence.AreaType(childComplexity), true

	case "ElectricFence.create_at":
		if e.complexity.ElectricFence.CreateAt == nil {
			break
		}

		return e.complexity.ElectricFence.CreateAt(childComplexity), true

	case "ElectricFence.create_by":
		if e.complexity.ElectricFence.CreateBy == nil {
			break
		}

		return e.complexity.ElectricFence.CreateBy(childComplexity), true

	case "ElectricFence.delete_at":
		if e.complexity.ElectricFence.DeleteAt == nil {
			break
		}

		return e.complexity.ElectricFence.DeleteAt(childComplexity), true

	case "ElectricFence.delete_by":
		if e.complexity.ElectricFence.DeleteBy == nil {
			break
		}

		return e.complexity.ElectricFence.DeleteBy(childComplexity), true

	case "ElectricFence.district_id":
		if e.complexity.ElectricFence.DistrictID == nil {
			break
		}

		return e.complexity.ElectricFence.DistrictID(childComplexity), true

	case "ElectricFence.electric_fence_id":
		if e.complexity.ElectricFence.ElectricFenceID == nil {
			break
		}

		return e.complexity.ElectricFence.ElectricFenceID(childComplexity), true

	case "ElectricFence.fence_name":
		if e.complexity.ElectricFence.FenceName == nil {
			break
		}

		return e.complexity.ElectricFence.FenceName(childComplexity), true

	case "ElectricFence.fence_type":
		if e.complexity.ElectricFence.FenceType == nil {
			break
		}

		return e.complexity.ElectricFence.FenceType(childComplexity), true

	case "ElectricFence.gis_data":
		if e.complexity.ElectricFence.GisData == nil {
			break
		}

		return e.complexity.ElectricFence.GisData(childComplexity), true

	case "ElectricFence.id":
		if e.complexity.ElectricFence.ID == nil {
			break
		}

		return e.complexity.ElectricFence.ID(childComplexity), true

	case "ElectricFence.is_delete":
		if e.complexity.ElectricFence.IsDelete == nil {
			break
		}

		return e.complexity.ElectricFence.IsDelete(childComplexity), true

	case "ElectricFence.update_at":
		if e.complexity.ElectricFence.UpdateAt == nil {
			break
		}

		return e.complexity.ElectricFence.UpdateAt(childComplexity), true

	case "ElectricFence.update_by":
		if e.complexity.ElectricFence.UpdateBy == nil {
			break
		}

		return e.complexity.ElectricFence.UpdateBy(childComplexity), true

	case "ElectricFenceAggregate.aggregate":
		if e.complexity.ElectricFenceAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ElectricFenceAggregate.Aggregate(childComplexity), true

	case "ElectricFenceAggregateFields.avg":
		if e.complexity.ElectricFenceAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.Avg(childComplexity), true

	case "ElectricFenceAggregateFields.count":
		if e.complexity.ElectricFenceAggregateFields.Count == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.Count(childComplexity), true

	case "ElectricFenceAggregateFields.max":
		if e.complexity.ElectricFenceAggregateFields.Max == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.Max(childComplexity), true

	case "ElectricFenceAggregateFields.min":
		if e.complexity.ElectricFenceAggregateFields.Min == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.Min(childComplexity), true

	case "ElectricFenceAggregateFields.stddev":
		if e.complexity.ElectricFenceAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.Stddev(childComplexity), true

	case "ElectricFenceAggregateFields.stddev_pop":
		if e.complexity.ElectricFenceAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.StddevPop(childComplexity), true

	case "ElectricFenceAggregateFields.stddev_samp":
		if e.complexity.ElectricFenceAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.StddevSamp(childComplexity), true

	case "ElectricFenceAggregateFields.sum":
		if e.complexity.ElectricFenceAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.Sum(childComplexity), true

	case "ElectricFenceAggregateFields.var_pop":
		if e.complexity.ElectricFenceAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.VarPop(childComplexity), true

	case "ElectricFenceAggregateFields.var_samp":
		if e.complexity.ElectricFenceAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.VarSamp(childComplexity), true

	case "ElectricFenceAggregateFields.variance":
		if e.complexity.ElectricFenceAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ElectricFenceAggregateFields.Variance(childComplexity), true

	case "ElectricFenceAvgFields.area_type":
		if e.complexity.ElectricFenceAvgFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceAvgFields.AreaType(childComplexity), true

	case "ElectricFenceAvgFields.fence_type":
		if e.complexity.ElectricFenceAvgFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceAvgFields.FenceType(childComplexity), true

	case "ElectricFenceAvgFields.id":
		if e.complexity.ElectricFenceAvgFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceAvgFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecord.create_at":
		if e.complexity.ElectricFenceEnteranceRecord.CreateAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.CreateAt(childComplexity), true

	case "ElectricFenceEnteranceRecord.create_by":
		if e.complexity.ElectricFenceEnteranceRecord.CreateBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.CreateBy(childComplexity), true

	case "ElectricFenceEnteranceRecord.delete_at":
		if e.complexity.ElectricFenceEnteranceRecord.DeleteAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.DeleteAt(childComplexity), true

	case "ElectricFenceEnteranceRecord.delete_by":
		if e.complexity.ElectricFenceEnteranceRecord.DeleteBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.DeleteBy(childComplexity), true

	case "ElectricFenceEnteranceRecord.electric_fence_id":
		if e.complexity.ElectricFenceEnteranceRecord.ElectricFenceID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.ElectricFenceID(childComplexity), true

	case "ElectricFenceEnteranceRecord.id":
		if e.complexity.ElectricFenceEnteranceRecord.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.ID(childComplexity), true

	case "ElectricFenceEnteranceRecord.in_time":
		if e.complexity.ElectricFenceEnteranceRecord.InTime == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.InTime(childComplexity), true

	case "ElectricFenceEnteranceRecord.is_delete":
		if e.complexity.ElectricFenceEnteranceRecord.IsDelete == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.IsDelete(childComplexity), true

	case "ElectricFenceEnteranceRecord.is_online":
		if e.complexity.ElectricFenceEnteranceRecord.IsOnline == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.IsOnline(childComplexity), true

	case "ElectricFenceEnteranceRecord.is_out":
		if e.complexity.ElectricFenceEnteranceRecord.IsOut == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.IsOut(childComplexity), true

	case "ElectricFenceEnteranceRecord.out_time":
		if e.complexity.ElectricFenceEnteranceRecord.OutTime == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.OutTime(childComplexity), true

	case "ElectricFenceEnteranceRecord.position":
		if e.complexity.ElectricFenceEnteranceRecord.Position == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.Position(childComplexity), true

	case "ElectricFenceEnteranceRecord.record_id":
		if e.complexity.ElectricFenceEnteranceRecord.RecordID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.RecordID(childComplexity), true

	case "ElectricFenceEnteranceRecord.update_at":
		if e.complexity.ElectricFenceEnteranceRecord.UpdateAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.UpdateAt(childComplexity), true

	case "ElectricFenceEnteranceRecord.update_by":
		if e.complexity.ElectricFenceEnteranceRecord.UpdateBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.UpdateBy(childComplexity), true

	case "ElectricFenceEnteranceRecord.vehicle_id":
		if e.complexity.ElectricFenceEnteranceRecord.VehicleID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecord.VehicleID(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregate.aggregate":
		if e.complexity.ElectricFenceEnteranceRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregate.Aggregate(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.avg":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.Avg(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.count":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.Count(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.max":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.Max(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.min":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.Min(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.stddev":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.Stddev(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.stddev_pop":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.StddevPop(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.stddev_samp":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.StddevSamp(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.sum":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.Sum(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.var_pop":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.VarPop(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.var_samp":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.VarSamp(childComplexity), true

	case "ElectricFenceEnteranceRecordAggregateFields.variance":
		if e.complexity.ElectricFenceEnteranceRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAggregateFields.Variance(childComplexity), true

	case "ElectricFenceEnteranceRecordAvgFields.id":
		if e.complexity.ElectricFenceEnteranceRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordAvgFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.create_at":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.CreateAt(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.create_by":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.CreateBy(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.delete_at":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.DeleteAt(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.delete_by":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.DeleteBy(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.electric_fence_id":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.ElectricFenceID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.ElectricFenceID(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.id":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.in_time":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.InTime == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.InTime(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.is_delete":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.IsDelete(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.is_online":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.IsOnline == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.IsOnline(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.is_out":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.IsOut == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.IsOut(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.out_time":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.OutTime == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.OutTime(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.position":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.Position == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.Position(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.record_id":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.RecordID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.RecordID(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.update_at":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.UpdateAt(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.update_by":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.UpdateBy(childComplexity), true

	case "ElectricFenceEnteranceRecordMaxFields.vehicle_id":
		if e.complexity.ElectricFenceEnteranceRecordMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMaxFields.VehicleID(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.create_at":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.CreateAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.CreateAt(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.create_by":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.CreateBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.CreateBy(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.delete_at":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.DeleteAt(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.delete_by":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.DeleteBy(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.electric_fence_id":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.ElectricFenceID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.ElectricFenceID(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.id":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.in_time":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.InTime == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.InTime(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.is_delete":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.IsDelete == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.IsDelete(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.is_online":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.IsOnline == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.IsOnline(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.is_out":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.IsOut == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.IsOut(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.out_time":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.OutTime == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.OutTime(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.position":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.Position == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.Position(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.record_id":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.RecordID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.RecordID(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.update_at":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.UpdateAt(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.update_by":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.UpdateBy(childComplexity), true

	case "ElectricFenceEnteranceRecordMinFields.vehicle_id":
		if e.complexity.ElectricFenceEnteranceRecordMinFields.VehicleID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMinFields.VehicleID(childComplexity), true

	case "ElectricFenceEnteranceRecordMutationResponse.affected_rows":
		if e.complexity.ElectricFenceEnteranceRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMutationResponse.AffectedRows(childComplexity), true

	case "ElectricFenceEnteranceRecordMutationResponse.returning":
		if e.complexity.ElectricFenceEnteranceRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordMutationResponse.Returning(childComplexity), true

	case "ElectricFenceEnteranceRecordStddevFields.id":
		if e.complexity.ElectricFenceEnteranceRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordStddevFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordStddevPopFields.id":
		if e.complexity.ElectricFenceEnteranceRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordStddevPopFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordStddevSampFields.id":
		if e.complexity.ElectricFenceEnteranceRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordStddevSampFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordSumFields.id":
		if e.complexity.ElectricFenceEnteranceRecordSumFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordSumFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordVarPopFields.id":
		if e.complexity.ElectricFenceEnteranceRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordVarPopFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordVarSampFields.id":
		if e.complexity.ElectricFenceEnteranceRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordVarSampFields.ID(childComplexity), true

	case "ElectricFenceEnteranceRecordVarianceFields.id":
		if e.complexity.ElectricFenceEnteranceRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceEnteranceRecordVarianceFields.ID(childComplexity), true

	case "ElectricFenceMaxFields.address":
		if e.complexity.ElectricFenceMaxFields.Address == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.Address(childComplexity), true

	case "ElectricFenceMaxFields.area_type":
		if e.complexity.ElectricFenceMaxFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.AreaType(childComplexity), true

	case "ElectricFenceMaxFields.create_at":
		if e.complexity.ElectricFenceMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.CreateAt(childComplexity), true

	case "ElectricFenceMaxFields.create_by":
		if e.complexity.ElectricFenceMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.CreateBy(childComplexity), true

	case "ElectricFenceMaxFields.delete_at":
		if e.complexity.ElectricFenceMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.DeleteAt(childComplexity), true

	case "ElectricFenceMaxFields.delete_by":
		if e.complexity.ElectricFenceMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.DeleteBy(childComplexity), true

	case "ElectricFenceMaxFields.district_id":
		if e.complexity.ElectricFenceMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.DistrictID(childComplexity), true

	case "ElectricFenceMaxFields.electric_fence_id":
		if e.complexity.ElectricFenceMaxFields.ElectricFenceID == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.ElectricFenceID(childComplexity), true

	case "ElectricFenceMaxFields.fence_name":
		if e.complexity.ElectricFenceMaxFields.FenceName == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.FenceName(childComplexity), true

	case "ElectricFenceMaxFields.fence_type":
		if e.complexity.ElectricFenceMaxFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.FenceType(childComplexity), true

	case "ElectricFenceMaxFields.gis_data":
		if e.complexity.ElectricFenceMaxFields.GisData == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.GisData(childComplexity), true

	case "ElectricFenceMaxFields.id":
		if e.complexity.ElectricFenceMaxFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.ID(childComplexity), true

	case "ElectricFenceMaxFields.is_delete":
		if e.complexity.ElectricFenceMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.IsDelete(childComplexity), true

	case "ElectricFenceMaxFields.update_at":
		if e.complexity.ElectricFenceMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.UpdateAt(childComplexity), true

	case "ElectricFenceMaxFields.update_by":
		if e.complexity.ElectricFenceMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.ElectricFenceMaxFields.UpdateBy(childComplexity), true

	case "ElectricFenceMinFields.address":
		if e.complexity.ElectricFenceMinFields.Address == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.Address(childComplexity), true

	case "ElectricFenceMinFields.area_type":
		if e.complexity.ElectricFenceMinFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.AreaType(childComplexity), true

	case "ElectricFenceMinFields.create_at":
		if e.complexity.ElectricFenceMinFields.CreateAt == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.CreateAt(childComplexity), true

	case "ElectricFenceMinFields.create_by":
		if e.complexity.ElectricFenceMinFields.CreateBy == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.CreateBy(childComplexity), true

	case "ElectricFenceMinFields.delete_at":
		if e.complexity.ElectricFenceMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.DeleteAt(childComplexity), true

	case "ElectricFenceMinFields.delete_by":
		if e.complexity.ElectricFenceMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.DeleteBy(childComplexity), true

	case "ElectricFenceMinFields.district_id":
		if e.complexity.ElectricFenceMinFields.DistrictID == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.DistrictID(childComplexity), true

	case "ElectricFenceMinFields.electric_fence_id":
		if e.complexity.ElectricFenceMinFields.ElectricFenceID == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.ElectricFenceID(childComplexity), true

	case "ElectricFenceMinFields.fence_name":
		if e.complexity.ElectricFenceMinFields.FenceName == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.FenceName(childComplexity), true

	case "ElectricFenceMinFields.fence_type":
		if e.complexity.ElectricFenceMinFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.FenceType(childComplexity), true

	case "ElectricFenceMinFields.gis_data":
		if e.complexity.ElectricFenceMinFields.GisData == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.GisData(childComplexity), true

	case "ElectricFenceMinFields.id":
		if e.complexity.ElectricFenceMinFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.ID(childComplexity), true

	case "ElectricFenceMinFields.is_delete":
		if e.complexity.ElectricFenceMinFields.IsDelete == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.IsDelete(childComplexity), true

	case "ElectricFenceMinFields.update_at":
		if e.complexity.ElectricFenceMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.UpdateAt(childComplexity), true

	case "ElectricFenceMinFields.update_by":
		if e.complexity.ElectricFenceMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.ElectricFenceMinFields.UpdateBy(childComplexity), true

	case "ElectricFenceMutationResponse.affected_rows":
		if e.complexity.ElectricFenceMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.ElectricFenceMutationResponse.AffectedRows(childComplexity), true

	case "ElectricFenceMutationResponse.returning":
		if e.complexity.ElectricFenceMutationResponse.Returning == nil {
			break
		}

		return e.complexity.ElectricFenceMutationResponse.Returning(childComplexity), true

	case "ElectricFenceStddevFields.area_type":
		if e.complexity.ElectricFenceStddevFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceStddevFields.AreaType(childComplexity), true

	case "ElectricFenceStddevFields.fence_type":
		if e.complexity.ElectricFenceStddevFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceStddevFields.FenceType(childComplexity), true

	case "ElectricFenceStddevFields.id":
		if e.complexity.ElectricFenceStddevFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceStddevFields.ID(childComplexity), true

	case "ElectricFenceStddevPopFields.area_type":
		if e.complexity.ElectricFenceStddevPopFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceStddevPopFields.AreaType(childComplexity), true

	case "ElectricFenceStddevPopFields.fence_type":
		if e.complexity.ElectricFenceStddevPopFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceStddevPopFields.FenceType(childComplexity), true

	case "ElectricFenceStddevPopFields.id":
		if e.complexity.ElectricFenceStddevPopFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceStddevPopFields.ID(childComplexity), true

	case "ElectricFenceStddevSampFields.area_type":
		if e.complexity.ElectricFenceStddevSampFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceStddevSampFields.AreaType(childComplexity), true

	case "ElectricFenceStddevSampFields.fence_type":
		if e.complexity.ElectricFenceStddevSampFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceStddevSampFields.FenceType(childComplexity), true

	case "ElectricFenceStddevSampFields.id":
		if e.complexity.ElectricFenceStddevSampFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceStddevSampFields.ID(childComplexity), true

	case "ElectricFenceSumFields.area_type":
		if e.complexity.ElectricFenceSumFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceSumFields.AreaType(childComplexity), true

	case "ElectricFenceSumFields.fence_type":
		if e.complexity.ElectricFenceSumFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceSumFields.FenceType(childComplexity), true

	case "ElectricFenceSumFields.id":
		if e.complexity.ElectricFenceSumFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceSumFields.ID(childComplexity), true

	case "ElectricFenceVarPopFields.area_type":
		if e.complexity.ElectricFenceVarPopFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceVarPopFields.AreaType(childComplexity), true

	case "ElectricFenceVarPopFields.fence_type":
		if e.complexity.ElectricFenceVarPopFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceVarPopFields.FenceType(childComplexity), true

	case "ElectricFenceVarPopFields.id":
		if e.complexity.ElectricFenceVarPopFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceVarPopFields.ID(childComplexity), true

	case "ElectricFenceVarSampFields.area_type":
		if e.complexity.ElectricFenceVarSampFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceVarSampFields.AreaType(childComplexity), true

	case "ElectricFenceVarSampFields.fence_type":
		if e.complexity.ElectricFenceVarSampFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceVarSampFields.FenceType(childComplexity), true

	case "ElectricFenceVarSampFields.id":
		if e.complexity.ElectricFenceVarSampFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceVarSampFields.ID(childComplexity), true

	case "ElectricFenceVarianceFields.area_type":
		if e.complexity.ElectricFenceVarianceFields.AreaType == nil {
			break
		}

		return e.complexity.ElectricFenceVarianceFields.AreaType(childComplexity), true

	case "ElectricFenceVarianceFields.fence_type":
		if e.complexity.ElectricFenceVarianceFields.FenceType == nil {
			break
		}

		return e.complexity.ElectricFenceVarianceFields.FenceType(childComplexity), true

	case "ElectricFenceVarianceFields.id":
		if e.complexity.ElectricFenceVarianceFields.ID == nil {
			break
		}

		return e.complexity.ElectricFenceVarianceFields.ID(childComplexity), true

	case "LimitSpeedLine.apply_reason":
		if e.complexity.LimitSpeedLine.ApplyReason == nil {
			break
		}

		return e.complexity.LimitSpeedLine.ApplyReason(childComplexity), true

	case "LimitSpeedLine.check_status":
		if e.complexity.LimitSpeedLine.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLine.CheckStatus(childComplexity), true

	case "LimitSpeedLine.check_time":
		if e.complexity.LimitSpeedLine.CheckTime == nil {
			break
		}

		return e.complexity.LimitSpeedLine.CheckTime(childComplexity), true

	case "LimitSpeedLine.check_user_id":
		if e.complexity.LimitSpeedLine.CheckUserID == nil {
			break
		}

		return e.complexity.LimitSpeedLine.CheckUserID(childComplexity), true

	case "LimitSpeedLine.control_level":
		if e.complexity.LimitSpeedLine.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLine.ControlLevel(childComplexity), true

	case "LimitSpeedLine.create_at":
		if e.complexity.LimitSpeedLine.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLine.CreateAt(childComplexity), true

	case "LimitSpeedLine.create_by":
		if e.complexity.LimitSpeedLine.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLine.CreateBy(childComplexity), true

	case "LimitSpeedLine.delete_at":
		if e.complexity.LimitSpeedLine.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedLine.DeleteAt(childComplexity), true

	case "LimitSpeedLine.delete_by":
		if e.complexity.LimitSpeedLine.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedLine.DeleteBy(childComplexity), true

	case "LimitSpeedLine.district_id":
		if e.complexity.LimitSpeedLine.DistrictID == nil {
			break
		}

		return e.complexity.LimitSpeedLine.DistrictID(childComplexity), true

	case "LimitSpeedLine.gis_data":
		if e.complexity.LimitSpeedLine.GisData == nil {
			break
		}

		return e.complexity.LimitSpeedLine.GisData(childComplexity), true

	case "LimitSpeedLine.id":
		if e.complexity.LimitSpeedLine.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLine.ID(childComplexity), true

	case "LimitSpeedLine.is_delete":
		if e.complexity.LimitSpeedLine.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedLine.IsDelete(childComplexity), true

	case "LimitSpeedLine.limit_speed_line_id":
		if e.complexity.LimitSpeedLine.LimitSpeedLineID == nil {
			break
		}

		return e.complexity.LimitSpeedLine.LimitSpeedLineID(childComplexity), true

	case "LimitSpeedLine.line_name":
		if e.complexity.LimitSpeedLine.LineName == nil {
			break
		}

		return e.complexity.LimitSpeedLine.LineName(childComplexity), true

	case "LimitSpeedLine.line_type":
		if e.complexity.LimitSpeedLine.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLine.LineType(childComplexity), true

	case "LimitSpeedLine.reject_reason":
		if e.complexity.LimitSpeedLine.RejectReason == nil {
			break
		}

		return e.complexity.LimitSpeedLine.RejectReason(childComplexity), true

	case "LimitSpeedLine.update_at":
		if e.complexity.LimitSpeedLine.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLine.UpdateAt(childComplexity), true

	case "LimitSpeedLine.update_by":
		if e.complexity.LimitSpeedLine.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLine.UpdateBy(childComplexity), true

	case "LimitSpeedLineAggregate.aggregate":
		if e.complexity.LimitSpeedLineAggregate.Aggregate == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregate.Aggregate(childComplexity), true

	case "LimitSpeedLineAggregateFields.avg":
		if e.complexity.LimitSpeedLineAggregateFields.Avg == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.Avg(childComplexity), true

	case "LimitSpeedLineAggregateFields.count":
		if e.complexity.LimitSpeedLineAggregateFields.Count == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.Count(childComplexity), true

	case "LimitSpeedLineAggregateFields.max":
		if e.complexity.LimitSpeedLineAggregateFields.Max == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.Max(childComplexity), true

	case "LimitSpeedLineAggregateFields.min":
		if e.complexity.LimitSpeedLineAggregateFields.Min == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.Min(childComplexity), true

	case "LimitSpeedLineAggregateFields.stddev":
		if e.complexity.LimitSpeedLineAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.Stddev(childComplexity), true

	case "LimitSpeedLineAggregateFields.stddev_pop":
		if e.complexity.LimitSpeedLineAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.StddevPop(childComplexity), true

	case "LimitSpeedLineAggregateFields.stddev_samp":
		if e.complexity.LimitSpeedLineAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.StddevSamp(childComplexity), true

	case "LimitSpeedLineAggregateFields.sum":
		if e.complexity.LimitSpeedLineAggregateFields.Sum == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.Sum(childComplexity), true

	case "LimitSpeedLineAggregateFields.var_pop":
		if e.complexity.LimitSpeedLineAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.VarPop(childComplexity), true

	case "LimitSpeedLineAggregateFields.var_samp":
		if e.complexity.LimitSpeedLineAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.VarSamp(childComplexity), true

	case "LimitSpeedLineAggregateFields.variance":
		if e.complexity.LimitSpeedLineAggregateFields.Variance == nil {
			break
		}

		return e.complexity.LimitSpeedLineAggregateFields.Variance(childComplexity), true

	case "LimitSpeedLineAvgFields.check_status":
		if e.complexity.LimitSpeedLineAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineAvgFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineAvgFields.control_level":
		if e.complexity.LimitSpeedLineAvgFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineAvgFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineAvgFields.id":
		if e.complexity.LimitSpeedLineAvgFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineAvgFields.ID(childComplexity), true

	case "LimitSpeedLineAvgFields.line_type":
		if e.complexity.LimitSpeedLineAvgFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineAvgFields.LineType(childComplexity), true

	case "LimitSpeedLineMaxFields.apply_reason":
		if e.complexity.LimitSpeedLineMaxFields.ApplyReason == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.ApplyReason(childComplexity), true

	case "LimitSpeedLineMaxFields.check_status":
		if e.complexity.LimitSpeedLineMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineMaxFields.check_time":
		if e.complexity.LimitSpeedLineMaxFields.CheckTime == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.CheckTime(childComplexity), true

	case "LimitSpeedLineMaxFields.check_user_id":
		if e.complexity.LimitSpeedLineMaxFields.CheckUserID == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.CheckUserID(childComplexity), true

	case "LimitSpeedLineMaxFields.control_level":
		if e.complexity.LimitSpeedLineMaxFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineMaxFields.create_at":
		if e.complexity.LimitSpeedLineMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.CreateAt(childComplexity), true

	case "LimitSpeedLineMaxFields.create_by":
		if e.complexity.LimitSpeedLineMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.CreateBy(childComplexity), true

	case "LimitSpeedLineMaxFields.delete_at":
		if e.complexity.LimitSpeedLineMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.DeleteAt(childComplexity), true

	case "LimitSpeedLineMaxFields.delete_by":
		if e.complexity.LimitSpeedLineMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.DeleteBy(childComplexity), true

	case "LimitSpeedLineMaxFields.district_id":
		if e.complexity.LimitSpeedLineMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.DistrictID(childComplexity), true

	case "LimitSpeedLineMaxFields.gis_data":
		if e.complexity.LimitSpeedLineMaxFields.GisData == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.GisData(childComplexity), true

	case "LimitSpeedLineMaxFields.id":
		if e.complexity.LimitSpeedLineMaxFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.ID(childComplexity), true

	case "LimitSpeedLineMaxFields.is_delete":
		if e.complexity.LimitSpeedLineMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.IsDelete(childComplexity), true

	case "LimitSpeedLineMaxFields.limit_speed_line_id":
		if e.complexity.LimitSpeedLineMaxFields.LimitSpeedLineID == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.LimitSpeedLineID(childComplexity), true

	case "LimitSpeedLineMaxFields.line_name":
		if e.complexity.LimitSpeedLineMaxFields.LineName == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.LineName(childComplexity), true

	case "LimitSpeedLineMaxFields.line_type":
		if e.complexity.LimitSpeedLineMaxFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.LineType(childComplexity), true

	case "LimitSpeedLineMaxFields.reject_reason":
		if e.complexity.LimitSpeedLineMaxFields.RejectReason == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.RejectReason(childComplexity), true

	case "LimitSpeedLineMaxFields.update_at":
		if e.complexity.LimitSpeedLineMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.UpdateAt(childComplexity), true

	case "LimitSpeedLineMaxFields.update_by":
		if e.complexity.LimitSpeedLineMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineMaxFields.UpdateBy(childComplexity), true

	case "LimitSpeedLineMinFields.apply_reason":
		if e.complexity.LimitSpeedLineMinFields.ApplyReason == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.ApplyReason(childComplexity), true

	case "LimitSpeedLineMinFields.check_status":
		if e.complexity.LimitSpeedLineMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineMinFields.check_time":
		if e.complexity.LimitSpeedLineMinFields.CheckTime == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.CheckTime(childComplexity), true

	case "LimitSpeedLineMinFields.check_user_id":
		if e.complexity.LimitSpeedLineMinFields.CheckUserID == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.CheckUserID(childComplexity), true

	case "LimitSpeedLineMinFields.control_level":
		if e.complexity.LimitSpeedLineMinFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineMinFields.create_at":
		if e.complexity.LimitSpeedLineMinFields.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.CreateAt(childComplexity), true

	case "LimitSpeedLineMinFields.create_by":
		if e.complexity.LimitSpeedLineMinFields.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.CreateBy(childComplexity), true

	case "LimitSpeedLineMinFields.delete_at":
		if e.complexity.LimitSpeedLineMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.DeleteAt(childComplexity), true

	case "LimitSpeedLineMinFields.delete_by":
		if e.complexity.LimitSpeedLineMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.DeleteBy(childComplexity), true

	case "LimitSpeedLineMinFields.district_id":
		if e.complexity.LimitSpeedLineMinFields.DistrictID == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.DistrictID(childComplexity), true

	case "LimitSpeedLineMinFields.gis_data":
		if e.complexity.LimitSpeedLineMinFields.GisData == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.GisData(childComplexity), true

	case "LimitSpeedLineMinFields.id":
		if e.complexity.LimitSpeedLineMinFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.ID(childComplexity), true

	case "LimitSpeedLineMinFields.is_delete":
		if e.complexity.LimitSpeedLineMinFields.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.IsDelete(childComplexity), true

	case "LimitSpeedLineMinFields.limit_speed_line_id":
		if e.complexity.LimitSpeedLineMinFields.LimitSpeedLineID == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.LimitSpeedLineID(childComplexity), true

	case "LimitSpeedLineMinFields.line_name":
		if e.complexity.LimitSpeedLineMinFields.LineName == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.LineName(childComplexity), true

	case "LimitSpeedLineMinFields.line_type":
		if e.complexity.LimitSpeedLineMinFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.LineType(childComplexity), true

	case "LimitSpeedLineMinFields.reject_reason":
		if e.complexity.LimitSpeedLineMinFields.RejectReason == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.RejectReason(childComplexity), true

	case "LimitSpeedLineMinFields.update_at":
		if e.complexity.LimitSpeedLineMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.UpdateAt(childComplexity), true

	case "LimitSpeedLineMinFields.update_by":
		if e.complexity.LimitSpeedLineMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineMinFields.UpdateBy(childComplexity), true

	case "LimitSpeedLineMutationResponse.affected_rows":
		if e.complexity.LimitSpeedLineMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.LimitSpeedLineMutationResponse.AffectedRows(childComplexity), true

	case "LimitSpeedLineMutationResponse.returning":
		if e.complexity.LimitSpeedLineMutationResponse.Returning == nil {
			break
		}

		return e.complexity.LimitSpeedLineMutationResponse.Returning(childComplexity), true

	case "LimitSpeedLineStddevFields.check_status":
		if e.complexity.LimitSpeedLineStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineStddevFields.control_level":
		if e.complexity.LimitSpeedLineStddevFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineStddevFields.id":
		if e.complexity.LimitSpeedLineStddevFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevFields.ID(childComplexity), true

	case "LimitSpeedLineStddevFields.line_type":
		if e.complexity.LimitSpeedLineStddevFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevFields.LineType(childComplexity), true

	case "LimitSpeedLineStddevPopFields.check_status":
		if e.complexity.LimitSpeedLineStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevPopFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineStddevPopFields.control_level":
		if e.complexity.LimitSpeedLineStddevPopFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevPopFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineStddevPopFields.id":
		if e.complexity.LimitSpeedLineStddevPopFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevPopFields.ID(childComplexity), true

	case "LimitSpeedLineStddevPopFields.line_type":
		if e.complexity.LimitSpeedLineStddevPopFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevPopFields.LineType(childComplexity), true

	case "LimitSpeedLineStddevSampFields.check_status":
		if e.complexity.LimitSpeedLineStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevSampFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineStddevSampFields.control_level":
		if e.complexity.LimitSpeedLineStddevSampFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevSampFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineStddevSampFields.id":
		if e.complexity.LimitSpeedLineStddevSampFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevSampFields.ID(childComplexity), true

	case "LimitSpeedLineStddevSampFields.line_type":
		if e.complexity.LimitSpeedLineStddevSampFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineStddevSampFields.LineType(childComplexity), true

	case "LimitSpeedLineSumFields.check_status":
		if e.complexity.LimitSpeedLineSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineSumFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineSumFields.control_level":
		if e.complexity.LimitSpeedLineSumFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineSumFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineSumFields.id":
		if e.complexity.LimitSpeedLineSumFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineSumFields.ID(childComplexity), true

	case "LimitSpeedLineSumFields.line_type":
		if e.complexity.LimitSpeedLineSumFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineSumFields.LineType(childComplexity), true

	case "LimitSpeedLineTime.create_at":
		if e.complexity.LimitSpeedLineTime.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.CreateAt(childComplexity), true

	case "LimitSpeedLineTime.create_by":
		if e.complexity.LimitSpeedLineTime.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.CreateBy(childComplexity), true

	case "LimitSpeedLineTime.delete_at":
		if e.complexity.LimitSpeedLineTime.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.DeleteAt(childComplexity), true

	case "LimitSpeedLineTime.delete_by":
		if e.complexity.LimitSpeedLineTime.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.DeleteBy(childComplexity), true

	case "LimitSpeedLineTime.end_time":
		if e.complexity.LimitSpeedLineTime.EndTime == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.EndTime(childComplexity), true

	case "LimitSpeedLineTime.id":
		if e.complexity.LimitSpeedLineTime.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.ID(childComplexity), true

	case "LimitSpeedLineTime.is_delete":
		if e.complexity.LimitSpeedLineTime.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.IsDelete(childComplexity), true

	case "LimitSpeedLineTime.limit_speed_line_id":
		if e.complexity.LimitSpeedLineTime.LimitSpeedLineID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.LimitSpeedLineID(childComplexity), true

	case "LimitSpeedLineTime.limit_speed_line_time_id":
		if e.complexity.LimitSpeedLineTime.LimitSpeedLineTimeID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.LimitSpeedLineTimeID(childComplexity), true

	case "LimitSpeedLineTime.speed":
		if e.complexity.LimitSpeedLineTime.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.Speed(childComplexity), true

	case "LimitSpeedLineTime.start_time":
		if e.complexity.LimitSpeedLineTime.StartTime == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.StartTime(childComplexity), true

	case "LimitSpeedLineTime.update_at":
		if e.complexity.LimitSpeedLineTime.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.UpdateAt(childComplexity), true

	case "LimitSpeedLineTime.update_by":
		if e.complexity.LimitSpeedLineTime.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTime.UpdateBy(childComplexity), true

	case "LimitSpeedLineTimeAggregate.aggregate":
		if e.complexity.LimitSpeedLineTimeAggregate.Aggregate == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregate.Aggregate(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.avg":
		if e.complexity.LimitSpeedLineTimeAggregateFields.Avg == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.Avg(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.count":
		if e.complexity.LimitSpeedLineTimeAggregateFields.Count == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.Count(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.max":
		if e.complexity.LimitSpeedLineTimeAggregateFields.Max == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.Max(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.min":
		if e.complexity.LimitSpeedLineTimeAggregateFields.Min == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.Min(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.stddev":
		if e.complexity.LimitSpeedLineTimeAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.Stddev(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.stddev_pop":
		if e.complexity.LimitSpeedLineTimeAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.StddevPop(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.stddev_samp":
		if e.complexity.LimitSpeedLineTimeAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.StddevSamp(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.sum":
		if e.complexity.LimitSpeedLineTimeAggregateFields.Sum == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.Sum(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.var_pop":
		if e.complexity.LimitSpeedLineTimeAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.VarPop(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.var_samp":
		if e.complexity.LimitSpeedLineTimeAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.VarSamp(childComplexity), true

	case "LimitSpeedLineTimeAggregateFields.variance":
		if e.complexity.LimitSpeedLineTimeAggregateFields.Variance == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAggregateFields.Variance(childComplexity), true

	case "LimitSpeedLineTimeAvgFields.id":
		if e.complexity.LimitSpeedLineTimeAvgFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAvgFields.ID(childComplexity), true

	case "LimitSpeedLineTimeAvgFields.speed":
		if e.complexity.LimitSpeedLineTimeAvgFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeAvgFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.create_at":
		if e.complexity.LimitSpeedLineTimeMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.CreateAt(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.create_by":
		if e.complexity.LimitSpeedLineTimeMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.CreateBy(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.delete_at":
		if e.complexity.LimitSpeedLineTimeMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.DeleteAt(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.delete_by":
		if e.complexity.LimitSpeedLineTimeMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.DeleteBy(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.end_time":
		if e.complexity.LimitSpeedLineTimeMaxFields.EndTime == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.EndTime(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.id":
		if e.complexity.LimitSpeedLineTimeMaxFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.ID(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.is_delete":
		if e.complexity.LimitSpeedLineTimeMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.IsDelete(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.limit_speed_line_id":
		if e.complexity.LimitSpeedLineTimeMaxFields.LimitSpeedLineID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.LimitSpeedLineID(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.limit_speed_line_time_id":
		if e.complexity.LimitSpeedLineTimeMaxFields.LimitSpeedLineTimeID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.LimitSpeedLineTimeID(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.speed":
		if e.complexity.LimitSpeedLineTimeMaxFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.start_time":
		if e.complexity.LimitSpeedLineTimeMaxFields.StartTime == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.StartTime(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.update_at":
		if e.complexity.LimitSpeedLineTimeMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.UpdateAt(childComplexity), true

	case "LimitSpeedLineTimeMaxFields.update_by":
		if e.complexity.LimitSpeedLineTimeMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMaxFields.UpdateBy(childComplexity), true

	case "LimitSpeedLineTimeMinFields.create_at":
		if e.complexity.LimitSpeedLineTimeMinFields.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.CreateAt(childComplexity), true

	case "LimitSpeedLineTimeMinFields.create_by":
		if e.complexity.LimitSpeedLineTimeMinFields.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.CreateBy(childComplexity), true

	case "LimitSpeedLineTimeMinFields.delete_at":
		if e.complexity.LimitSpeedLineTimeMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.DeleteAt(childComplexity), true

	case "LimitSpeedLineTimeMinFields.delete_by":
		if e.complexity.LimitSpeedLineTimeMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.DeleteBy(childComplexity), true

	case "LimitSpeedLineTimeMinFields.end_time":
		if e.complexity.LimitSpeedLineTimeMinFields.EndTime == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.EndTime(childComplexity), true

	case "LimitSpeedLineTimeMinFields.id":
		if e.complexity.LimitSpeedLineTimeMinFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.ID(childComplexity), true

	case "LimitSpeedLineTimeMinFields.is_delete":
		if e.complexity.LimitSpeedLineTimeMinFields.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.IsDelete(childComplexity), true

	case "LimitSpeedLineTimeMinFields.limit_speed_line_id":
		if e.complexity.LimitSpeedLineTimeMinFields.LimitSpeedLineID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.LimitSpeedLineID(childComplexity), true

	case "LimitSpeedLineTimeMinFields.limit_speed_line_time_id":
		if e.complexity.LimitSpeedLineTimeMinFields.LimitSpeedLineTimeID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.LimitSpeedLineTimeID(childComplexity), true

	case "LimitSpeedLineTimeMinFields.speed":
		if e.complexity.LimitSpeedLineTimeMinFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeMinFields.start_time":
		if e.complexity.LimitSpeedLineTimeMinFields.StartTime == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.StartTime(childComplexity), true

	case "LimitSpeedLineTimeMinFields.update_at":
		if e.complexity.LimitSpeedLineTimeMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.UpdateAt(childComplexity), true

	case "LimitSpeedLineTimeMinFields.update_by":
		if e.complexity.LimitSpeedLineTimeMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMinFields.UpdateBy(childComplexity), true

	case "LimitSpeedLineTimeMutationResponse.affected_rows":
		if e.complexity.LimitSpeedLineTimeMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMutationResponse.AffectedRows(childComplexity), true

	case "LimitSpeedLineTimeMutationResponse.returning":
		if e.complexity.LimitSpeedLineTimeMutationResponse.Returning == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeMutationResponse.Returning(childComplexity), true

	case "LimitSpeedLineTimeStddevFields.id":
		if e.complexity.LimitSpeedLineTimeStddevFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeStddevFields.ID(childComplexity), true

	case "LimitSpeedLineTimeStddevFields.speed":
		if e.complexity.LimitSpeedLineTimeStddevFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeStddevFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeStddevPopFields.id":
		if e.complexity.LimitSpeedLineTimeStddevPopFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeStddevPopFields.ID(childComplexity), true

	case "LimitSpeedLineTimeStddevPopFields.speed":
		if e.complexity.LimitSpeedLineTimeStddevPopFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeStddevPopFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeStddevSampFields.id":
		if e.complexity.LimitSpeedLineTimeStddevSampFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeStddevSampFields.ID(childComplexity), true

	case "LimitSpeedLineTimeStddevSampFields.speed":
		if e.complexity.LimitSpeedLineTimeStddevSampFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeStddevSampFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeSumFields.id":
		if e.complexity.LimitSpeedLineTimeSumFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeSumFields.ID(childComplexity), true

	case "LimitSpeedLineTimeSumFields.speed":
		if e.complexity.LimitSpeedLineTimeSumFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeSumFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeVarPopFields.id":
		if e.complexity.LimitSpeedLineTimeVarPopFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeVarPopFields.ID(childComplexity), true

	case "LimitSpeedLineTimeVarPopFields.speed":
		if e.complexity.LimitSpeedLineTimeVarPopFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeVarPopFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeVarSampFields.id":
		if e.complexity.LimitSpeedLineTimeVarSampFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeVarSampFields.ID(childComplexity), true

	case "LimitSpeedLineTimeVarSampFields.speed":
		if e.complexity.LimitSpeedLineTimeVarSampFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeVarSampFields.Speed(childComplexity), true

	case "LimitSpeedLineTimeVarianceFields.id":
		if e.complexity.LimitSpeedLineTimeVarianceFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeVarianceFields.ID(childComplexity), true

	case "LimitSpeedLineTimeVarianceFields.speed":
		if e.complexity.LimitSpeedLineTimeVarianceFields.Speed == nil {
			break
		}

		return e.complexity.LimitSpeedLineTimeVarianceFields.Speed(childComplexity), true

	case "LimitSpeedLineVarPopFields.check_status":
		if e.complexity.LimitSpeedLineVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarPopFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineVarPopFields.control_level":
		if e.complexity.LimitSpeedLineVarPopFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarPopFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineVarPopFields.id":
		if e.complexity.LimitSpeedLineVarPopFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarPopFields.ID(childComplexity), true

	case "LimitSpeedLineVarPopFields.line_type":
		if e.complexity.LimitSpeedLineVarPopFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarPopFields.LineType(childComplexity), true

	case "LimitSpeedLineVarSampFields.check_status":
		if e.complexity.LimitSpeedLineVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarSampFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineVarSampFields.control_level":
		if e.complexity.LimitSpeedLineVarSampFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarSampFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineVarSampFields.id":
		if e.complexity.LimitSpeedLineVarSampFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarSampFields.ID(childComplexity), true

	case "LimitSpeedLineVarSampFields.line_type":
		if e.complexity.LimitSpeedLineVarSampFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarSampFields.LineType(childComplexity), true

	case "LimitSpeedLineVarianceFields.check_status":
		if e.complexity.LimitSpeedLineVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarianceFields.CheckStatus(childComplexity), true

	case "LimitSpeedLineVarianceFields.control_level":
		if e.complexity.LimitSpeedLineVarianceFields.ControlLevel == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarianceFields.ControlLevel(childComplexity), true

	case "LimitSpeedLineVarianceFields.id":
		if e.complexity.LimitSpeedLineVarianceFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarianceFields.ID(childComplexity), true

	case "LimitSpeedLineVarianceFields.line_type":
		if e.complexity.LimitSpeedLineVarianceFields.LineType == nil {
			break
		}

		return e.complexity.LimitSpeedLineVarianceFields.LineType(childComplexity), true

	case "LimitSpeedPlan.create_at":
		if e.complexity.LimitSpeedPlan.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.CreateAt(childComplexity), true

	case "LimitSpeedPlan.create_by":
		if e.complexity.LimitSpeedPlan.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.CreateBy(childComplexity), true

	case "LimitSpeedPlan.delete_at":
		if e.complexity.LimitSpeedPlan.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.DeleteAt(childComplexity), true

	case "LimitSpeedPlan.delete_by":
		if e.complexity.LimitSpeedPlan.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.DeleteBy(childComplexity), true

	case "LimitSpeedPlan.enterprise_id":
		if e.complexity.LimitSpeedPlan.EnterpriseID == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.EnterpriseID(childComplexity), true

	case "LimitSpeedPlan.id":
		if e.complexity.LimitSpeedPlan.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.ID(childComplexity), true

	case "LimitSpeedPlan.is_delete":
		if e.complexity.LimitSpeedPlan.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.IsDelete(childComplexity), true

	case "LimitSpeedPlan.limit_speed_plan_id":
		if e.complexity.LimitSpeedPlan.LimitSpeedPlanID == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.LimitSpeedPlanID(childComplexity), true

	case "LimitSpeedPlan.plan_name":
		if e.complexity.LimitSpeedPlan.PlanName == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.PlanName(childComplexity), true

	case "LimitSpeedPlan.remark":
		if e.complexity.LimitSpeedPlan.Remark == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.Remark(childComplexity), true

	case "LimitSpeedPlan.update_at":
		if e.complexity.LimitSpeedPlan.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.UpdateAt(childComplexity), true

	case "LimitSpeedPlan.update_by":
		if e.complexity.LimitSpeedPlan.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlan.UpdateBy(childComplexity), true

	case "LimitSpeedPlanAggregate.aggregate":
		if e.complexity.LimitSpeedPlanAggregate.Aggregate == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregate.Aggregate(childComplexity), true

	case "LimitSpeedPlanAggregateFields.avg":
		if e.complexity.LimitSpeedPlanAggregateFields.Avg == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.Avg(childComplexity), true

	case "LimitSpeedPlanAggregateFields.count":
		if e.complexity.LimitSpeedPlanAggregateFields.Count == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.Count(childComplexity), true

	case "LimitSpeedPlanAggregateFields.max":
		if e.complexity.LimitSpeedPlanAggregateFields.Max == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.Max(childComplexity), true

	case "LimitSpeedPlanAggregateFields.min":
		if e.complexity.LimitSpeedPlanAggregateFields.Min == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.Min(childComplexity), true

	case "LimitSpeedPlanAggregateFields.stddev":
		if e.complexity.LimitSpeedPlanAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.Stddev(childComplexity), true

	case "LimitSpeedPlanAggregateFields.stddev_pop":
		if e.complexity.LimitSpeedPlanAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.StddevPop(childComplexity), true

	case "LimitSpeedPlanAggregateFields.stddev_samp":
		if e.complexity.LimitSpeedPlanAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.StddevSamp(childComplexity), true

	case "LimitSpeedPlanAggregateFields.sum":
		if e.complexity.LimitSpeedPlanAggregateFields.Sum == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.Sum(childComplexity), true

	case "LimitSpeedPlanAggregateFields.var_pop":
		if e.complexity.LimitSpeedPlanAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.VarPop(childComplexity), true

	case "LimitSpeedPlanAggregateFields.var_samp":
		if e.complexity.LimitSpeedPlanAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.VarSamp(childComplexity), true

	case "LimitSpeedPlanAggregateFields.variance":
		if e.complexity.LimitSpeedPlanAggregateFields.Variance == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAggregateFields.Variance(childComplexity), true

	case "LimitSpeedPlanAvgFields.id":
		if e.complexity.LimitSpeedPlanAvgFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanAvgFields.ID(childComplexity), true

	case "LimitSpeedPlanDetail.create_at":
		if e.complexity.LimitSpeedPlanDetail.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.CreateAt(childComplexity), true

	case "LimitSpeedPlanDetail.create_by":
		if e.complexity.LimitSpeedPlanDetail.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.CreateBy(childComplexity), true

	case "LimitSpeedPlanDetail.delete_at":
		if e.complexity.LimitSpeedPlanDetail.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.DeleteAt(childComplexity), true

	case "LimitSpeedPlanDetail.delete_by":
		if e.complexity.LimitSpeedPlanDetail.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.DeleteBy(childComplexity), true

	case "LimitSpeedPlanDetail.detail_id":
		if e.complexity.LimitSpeedPlanDetail.DetailID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.DetailID(childComplexity), true

	case "LimitSpeedPlanDetail.id":
		if e.complexity.LimitSpeedPlanDetail.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.ID(childComplexity), true

	case "LimitSpeedPlanDetail.is_delete":
		if e.complexity.LimitSpeedPlanDetail.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.IsDelete(childComplexity), true

	case "LimitSpeedPlanDetail.is_night_limit":
		if e.complexity.LimitSpeedPlanDetail.IsNightLimit == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.IsNightLimit(childComplexity), true

	case "LimitSpeedPlanDetail.limit_speed":
		if e.complexity.LimitSpeedPlanDetail.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetail.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetail.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetail.night_time_begin":
		if e.complexity.LimitSpeedPlanDetail.NightTimeBegin == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.NightTimeBegin(childComplexity), true

	case "LimitSpeedPlanDetail.night_time_end":
		if e.complexity.LimitSpeedPlanDetail.NightTimeEnd == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.NightTimeEnd(childComplexity), true

	case "LimitSpeedPlanDetail.plan_id":
		if e.complexity.LimitSpeedPlanDetail.PlanID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.PlanID(childComplexity), true

	case "LimitSpeedPlanDetail.road_level":
		if e.complexity.LimitSpeedPlanDetail.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetail.update_at":
		if e.complexity.LimitSpeedPlanDetail.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.UpdateAt(childComplexity), true

	case "LimitSpeedPlanDetail.update_by":
		if e.complexity.LimitSpeedPlanDetail.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetail.UpdateBy(childComplexity), true

	case "LimitSpeedPlanDetailAggregate.aggregate":
		if e.complexity.LimitSpeedPlanDetailAggregate.Aggregate == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregate.Aggregate(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.avg":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.Avg == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.Avg(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.count":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.Count == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.Count(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.max":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.Max == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.Max(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.min":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.Min == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.Min(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.stddev":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.Stddev(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.stddev_pop":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.StddevPop(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.stddev_samp":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.StddevSamp(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.sum":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.Sum == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.Sum(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.var_pop":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.VarPop(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.var_samp":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.VarSamp(childComplexity), true

	case "LimitSpeedPlanDetailAggregateFields.variance":
		if e.complexity.LimitSpeedPlanDetailAggregateFields.Variance == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAggregateFields.Variance(childComplexity), true

	case "LimitSpeedPlanDetailAvgFields.id":
		if e.complexity.LimitSpeedPlanDetailAvgFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAvgFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailAvgFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailAvgFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAvgFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailAvgFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailAvgFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAvgFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailAvgFields.road_level":
		if e.complexity.LimitSpeedPlanDetailAvgFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailAvgFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.create_at":
		if e.complexity.LimitSpeedPlanDetailMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.CreateAt(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.create_by":
		if e.complexity.LimitSpeedPlanDetailMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.CreateBy(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.delete_at":
		if e.complexity.LimitSpeedPlanDetailMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.DeleteAt(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.delete_by":
		if e.complexity.LimitSpeedPlanDetailMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.DeleteBy(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.detail_id":
		if e.complexity.LimitSpeedPlanDetailMaxFields.DetailID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.DetailID(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.id":
		if e.complexity.LimitSpeedPlanDetailMaxFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.is_delete":
		if e.complexity.LimitSpeedPlanDetailMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.IsDelete(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.is_night_limit":
		if e.complexity.LimitSpeedPlanDetailMaxFields.IsNightLimit == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.IsNightLimit(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailMaxFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailMaxFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.night_time_begin":
		if e.complexity.LimitSpeedPlanDetailMaxFields.NightTimeBegin == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.NightTimeBegin(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.night_time_end":
		if e.complexity.LimitSpeedPlanDetailMaxFields.NightTimeEnd == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.NightTimeEnd(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.plan_id":
		if e.complexity.LimitSpeedPlanDetailMaxFields.PlanID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.PlanID(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.road_level":
		if e.complexity.LimitSpeedPlanDetailMaxFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.update_at":
		if e.complexity.LimitSpeedPlanDetailMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.UpdateAt(childComplexity), true

	case "LimitSpeedPlanDetailMaxFields.update_by":
		if e.complexity.LimitSpeedPlanDetailMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMaxFields.UpdateBy(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.create_at":
		if e.complexity.LimitSpeedPlanDetailMinFields.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.CreateAt(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.create_by":
		if e.complexity.LimitSpeedPlanDetailMinFields.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.CreateBy(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.delete_at":
		if e.complexity.LimitSpeedPlanDetailMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.DeleteAt(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.delete_by":
		if e.complexity.LimitSpeedPlanDetailMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.DeleteBy(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.detail_id":
		if e.complexity.LimitSpeedPlanDetailMinFields.DetailID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.DetailID(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.id":
		if e.complexity.LimitSpeedPlanDetailMinFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.is_delete":
		if e.complexity.LimitSpeedPlanDetailMinFields.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.IsDelete(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.is_night_limit":
		if e.complexity.LimitSpeedPlanDetailMinFields.IsNightLimit == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.IsNightLimit(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailMinFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailMinFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.night_time_begin":
		if e.complexity.LimitSpeedPlanDetailMinFields.NightTimeBegin == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.NightTimeBegin(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.night_time_end":
		if e.complexity.LimitSpeedPlanDetailMinFields.NightTimeEnd == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.NightTimeEnd(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.plan_id":
		if e.complexity.LimitSpeedPlanDetailMinFields.PlanID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.PlanID(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.road_level":
		if e.complexity.LimitSpeedPlanDetailMinFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.update_at":
		if e.complexity.LimitSpeedPlanDetailMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.UpdateAt(childComplexity), true

	case "LimitSpeedPlanDetailMinFields.update_by":
		if e.complexity.LimitSpeedPlanDetailMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMinFields.UpdateBy(childComplexity), true

	case "LimitSpeedPlanDetailMutationResponse.affected_rows":
		if e.complexity.LimitSpeedPlanDetailMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMutationResponse.AffectedRows(childComplexity), true

	case "LimitSpeedPlanDetailMutationResponse.returning":
		if e.complexity.LimitSpeedPlanDetailMutationResponse.Returning == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailMutationResponse.Returning(childComplexity), true

	case "LimitSpeedPlanDetailStddevFields.id":
		if e.complexity.LimitSpeedPlanDetailStddevFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailStddevFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailStddevFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailStddevFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailStddevFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailStddevFields.road_level":
		if e.complexity.LimitSpeedPlanDetailStddevFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailStddevPopFields.id":
		if e.complexity.LimitSpeedPlanDetailStddevPopFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevPopFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailStddevPopFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailStddevPopFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevPopFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailStddevPopFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailStddevPopFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevPopFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailStddevPopFields.road_level":
		if e.complexity.LimitSpeedPlanDetailStddevPopFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevPopFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailStddevSampFields.id":
		if e.complexity.LimitSpeedPlanDetailStddevSampFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevSampFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailStddevSampFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailStddevSampFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevSampFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailStddevSampFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailStddevSampFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevSampFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailStddevSampFields.road_level":
		if e.complexity.LimitSpeedPlanDetailStddevSampFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailStddevSampFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailSumFields.id":
		if e.complexity.LimitSpeedPlanDetailSumFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailSumFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailSumFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailSumFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailSumFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailSumFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailSumFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailSumFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailSumFields.road_level":
		if e.complexity.LimitSpeedPlanDetailSumFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailSumFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailVarPopFields.id":
		if e.complexity.LimitSpeedPlanDetailVarPopFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarPopFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailVarPopFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailVarPopFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarPopFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailVarPopFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailVarPopFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarPopFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailVarPopFields.road_level":
		if e.complexity.LimitSpeedPlanDetailVarPopFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarPopFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailVarSampFields.id":
		if e.complexity.LimitSpeedPlanDetailVarSampFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarSampFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailVarSampFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailVarSampFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarSampFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailVarSampFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailVarSampFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarSampFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailVarSampFields.road_level":
		if e.complexity.LimitSpeedPlanDetailVarSampFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarSampFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanDetailVarianceFields.id":
		if e.complexity.LimitSpeedPlanDetailVarianceFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarianceFields.ID(childComplexity), true

	case "LimitSpeedPlanDetailVarianceFields.limit_speed":
		if e.complexity.LimitSpeedPlanDetailVarianceFields.LimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarianceFields.LimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailVarianceFields.night_limit_speed":
		if e.complexity.LimitSpeedPlanDetailVarianceFields.NightLimitSpeed == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarianceFields.NightLimitSpeed(childComplexity), true

	case "LimitSpeedPlanDetailVarianceFields.road_level":
		if e.complexity.LimitSpeedPlanDetailVarianceFields.RoadLevel == nil {
			break
		}

		return e.complexity.LimitSpeedPlanDetailVarianceFields.RoadLevel(childComplexity), true

	case "LimitSpeedPlanMaxFields.create_at":
		if e.complexity.LimitSpeedPlanMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.CreateAt(childComplexity), true

	case "LimitSpeedPlanMaxFields.create_by":
		if e.complexity.LimitSpeedPlanMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.CreateBy(childComplexity), true

	case "LimitSpeedPlanMaxFields.delete_at":
		if e.complexity.LimitSpeedPlanMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.DeleteAt(childComplexity), true

	case "LimitSpeedPlanMaxFields.delete_by":
		if e.complexity.LimitSpeedPlanMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.DeleteBy(childComplexity), true

	case "LimitSpeedPlanMaxFields.enterprise_id":
		if e.complexity.LimitSpeedPlanMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.EnterpriseID(childComplexity), true

	case "LimitSpeedPlanMaxFields.id":
		if e.complexity.LimitSpeedPlanMaxFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.ID(childComplexity), true

	case "LimitSpeedPlanMaxFields.is_delete":
		if e.complexity.LimitSpeedPlanMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.IsDelete(childComplexity), true

	case "LimitSpeedPlanMaxFields.limit_speed_plan_id":
		if e.complexity.LimitSpeedPlanMaxFields.LimitSpeedPlanID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.LimitSpeedPlanID(childComplexity), true

	case "LimitSpeedPlanMaxFields.plan_name":
		if e.complexity.LimitSpeedPlanMaxFields.PlanName == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.PlanName(childComplexity), true

	case "LimitSpeedPlanMaxFields.remark":
		if e.complexity.LimitSpeedPlanMaxFields.Remark == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.Remark(childComplexity), true

	case "LimitSpeedPlanMaxFields.update_at":
		if e.complexity.LimitSpeedPlanMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.UpdateAt(childComplexity), true

	case "LimitSpeedPlanMaxFields.update_by":
		if e.complexity.LimitSpeedPlanMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMaxFields.UpdateBy(childComplexity), true

	case "LimitSpeedPlanMinFields.create_at":
		if e.complexity.LimitSpeedPlanMinFields.CreateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.CreateAt(childComplexity), true

	case "LimitSpeedPlanMinFields.create_by":
		if e.complexity.LimitSpeedPlanMinFields.CreateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.CreateBy(childComplexity), true

	case "LimitSpeedPlanMinFields.delete_at":
		if e.complexity.LimitSpeedPlanMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.DeleteAt(childComplexity), true

	case "LimitSpeedPlanMinFields.delete_by":
		if e.complexity.LimitSpeedPlanMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.DeleteBy(childComplexity), true

	case "LimitSpeedPlanMinFields.enterprise_id":
		if e.complexity.LimitSpeedPlanMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.EnterpriseID(childComplexity), true

	case "LimitSpeedPlanMinFields.id":
		if e.complexity.LimitSpeedPlanMinFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.ID(childComplexity), true

	case "LimitSpeedPlanMinFields.is_delete":
		if e.complexity.LimitSpeedPlanMinFields.IsDelete == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.IsDelete(childComplexity), true

	case "LimitSpeedPlanMinFields.limit_speed_plan_id":
		if e.complexity.LimitSpeedPlanMinFields.LimitSpeedPlanID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.LimitSpeedPlanID(childComplexity), true

	case "LimitSpeedPlanMinFields.plan_name":
		if e.complexity.LimitSpeedPlanMinFields.PlanName == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.PlanName(childComplexity), true

	case "LimitSpeedPlanMinFields.remark":
		if e.complexity.LimitSpeedPlanMinFields.Remark == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.Remark(childComplexity), true

	case "LimitSpeedPlanMinFields.update_at":
		if e.complexity.LimitSpeedPlanMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.UpdateAt(childComplexity), true

	case "LimitSpeedPlanMinFields.update_by":
		if e.complexity.LimitSpeedPlanMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMinFields.UpdateBy(childComplexity), true

	case "LimitSpeedPlanMutationResponse.affected_rows":
		if e.complexity.LimitSpeedPlanMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMutationResponse.AffectedRows(childComplexity), true

	case "LimitSpeedPlanMutationResponse.returning":
		if e.complexity.LimitSpeedPlanMutationResponse.Returning == nil {
			break
		}

		return e.complexity.LimitSpeedPlanMutationResponse.Returning(childComplexity), true

	case "LimitSpeedPlanStddevFields.id":
		if e.complexity.LimitSpeedPlanStddevFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanStddevFields.ID(childComplexity), true

	case "LimitSpeedPlanStddevPopFields.id":
		if e.complexity.LimitSpeedPlanStddevPopFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanStddevPopFields.ID(childComplexity), true

	case "LimitSpeedPlanStddevSampFields.id":
		if e.complexity.LimitSpeedPlanStddevSampFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanStddevSampFields.ID(childComplexity), true

	case "LimitSpeedPlanSumFields.id":
		if e.complexity.LimitSpeedPlanSumFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanSumFields.ID(childComplexity), true

	case "LimitSpeedPlanVarPopFields.id":
		if e.complexity.LimitSpeedPlanVarPopFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanVarPopFields.ID(childComplexity), true

	case "LimitSpeedPlanVarSampFields.id":
		if e.complexity.LimitSpeedPlanVarSampFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanVarSampFields.ID(childComplexity), true

	case "LimitSpeedPlanVarianceFields.id":
		if e.complexity.LimitSpeedPlanVarianceFields.ID == nil {
			break
		}

		return e.complexity.LimitSpeedPlanVarianceFields.ID(childComplexity), true

	case "Mutation.delete_control_line":
		if e.complexity.Mutation.DeleteControlLine == nil {
			break
		}

		args, err := ec.field_Mutation_delete_control_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlLine(childComplexity, args["where"].(model.ControlLineBoolExp)), true

	case "Mutation.delete_control_line_by_pk":
		if e.complexity.Mutation.DeleteControlLineByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_control_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlLineByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_control_line_by_union_pk":
		if e.complexity.Mutation.DeleteControlLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_control_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlLineByUnionPk(childComplexity, args["control_line_id"].(string)), true

	case "Mutation.delete_control_line_time":
		if e.complexity.Mutation.DeleteControlLineTime == nil {
			break
		}

		args, err := ec.field_Mutation_delete_control_line_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlLineTime(childComplexity, args["where"].(model.ControlLineTimeBoolExp)), true

	case "Mutation.delete_control_line_time_by_pk":
		if e.complexity.Mutation.DeleteControlLineTimeByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_control_line_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlLineTimeByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_control_line_time_by_union_pk":
		if e.complexity.Mutation.DeleteControlLineTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_control_line_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteControlLineTimeByUnionPk(childComplexity, args["control_line_time_id"].(string)), true

	case "Mutation.delete_ecd_file_check_his":
		if e.complexity.Mutation.DeleteEcdFileCheckHis == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_check_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileCheckHis(childComplexity, args["where"].(model.EcdFileCheckHisBoolExp)), true

	case "Mutation.delete_ecd_file_check_his_by_pk":
		if e.complexity.Mutation.DeleteEcdFileCheckHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_check_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileCheckHisByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ecd_file_check_his_by_union_pk":
		if e.complexity.Mutation.DeleteEcdFileCheckHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_check_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileCheckHisByUnionPk(childComplexity, args["his_id"].(string)), true

	case "Mutation.delete_ecd_file_district":
		if e.complexity.Mutation.DeleteEcdFileDistrict == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_district_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileDistrict(childComplexity, args["where"].(model.EcdFileDistrictBoolExp)), true

	case "Mutation.delete_ecd_file_district_by_pk":
		if e.complexity.Mutation.DeleteEcdFileDistrictByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_district_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileDistrictByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ecd_file_district_by_union_pk":
		if e.complexity.Mutation.DeleteEcdFileDistrictByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_district_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileDistrictByUnionPk(childComplexity, args["file_district_id"].(string)), true

	case "Mutation.delete_ecd_file_line_point":
		if e.complexity.Mutation.DeleteEcdFileLinePoint == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_line_point_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileLinePoint(childComplexity, args["where"].(model.EcdFileLinePointBoolExp)), true

	case "Mutation.delete_ecd_file_line_point_by_pk":
		if e.complexity.Mutation.DeleteEcdFileLinePointByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_line_point_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileLinePointByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ecd_file_line_point_by_union_pk":
		if e.complexity.Mutation.DeleteEcdFileLinePointByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_line_point_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileLinePointByUnionPk(childComplexity, args["line_point_id"].(string)), true

	case "Mutation.delete_ecd_file_main":
		if e.complexity.Mutation.DeleteEcdFileMain == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_main_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileMain(childComplexity, args["where"].(model.EcdFileMainBoolExp)), true

	case "Mutation.delete_ecd_file_main_by_pk":
		if e.complexity.Mutation.DeleteEcdFileMainByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_main_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileMainByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ecd_file_main_by_union_pk":
		if e.complexity.Mutation.DeleteEcdFileMainByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_main_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileMainByUnionPk(childComplexity, args["file_main_id"].(string)), true

	case "Mutation.delete_ecd_file_main_sub":
		if e.complexity.Mutation.DeleteEcdFileMainSub == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_main_sub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileMainSub(childComplexity, args["where"].(model.EcdFileMainSubBoolExp)), true

	case "Mutation.delete_ecd_file_main_sub_by_pk":
		if e.complexity.Mutation.DeleteEcdFileMainSubByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_main_sub_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileMainSubByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ecd_file_main_sub_by_union_pk":
		if e.complexity.Mutation.DeleteEcdFileMainSubByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_main_sub_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileMainSubByUnionPk(childComplexity, args["file_main_sub_id"].(string)), true

	case "Mutation.delete_ecd_file_vehicle":
		if e.complexity.Mutation.DeleteEcdFileVehicle == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_vehicle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileVehicle(childComplexity, args["where"].(model.EcdFileVehicleBoolExp)), true

	case "Mutation.delete_ecd_file_vehicle_by_pk":
		if e.complexity.Mutation.DeleteEcdFileVehicleByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_vehicle_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileVehicleByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ecd_file_vehicle_by_union_pk":
		if e.complexity.Mutation.DeleteEcdFileVehicleByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_vehicle_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileVehicleByUnionPk(childComplexity, args["file_vehicle_id"].(string)), true

	case "Mutation.delete_ecd_file_vehicle_time":
		if e.complexity.Mutation.DeleteEcdFileVehicleTime == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_vehicle_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileVehicleTime(childComplexity, args["where"].(model.EcdFileVehicleTimeBoolExp)), true

	case "Mutation.delete_ecd_file_vehicle_time_by_pk":
		if e.complexity.Mutation.DeleteEcdFileVehicleTimeByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_vehicle_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileVehicleTimeByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ecd_file_vehicle_time_by_union_pk":
		if e.complexity.Mutation.DeleteEcdFileVehicleTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_file_vehicle_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdFileVehicleTimeByUnionPk(childComplexity, args["vehicle_time_id"].(string)), true

	case "Mutation.delete_ecd_line":
		if e.complexity.Mutation.DeleteEcdLine == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdLine(childComplexity, args["where"].(model.EcdLineBoolExp)), true

	case "Mutation.delete_ecd_line_by_pk":
		if e.complexity.Mutation.DeleteEcdLineByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdLineByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_ecd_line_by_union_pk":
		if e.complexity.Mutation.DeleteEcdLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_ecd_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEcdLineByUnionPk(childComplexity, args["line_id"].(string)), true

	case "Mutation.delete_electric_fence":
		if e.complexity.Mutation.DeleteElectricFence == nil {
			break
		}

		args, err := ec.field_Mutation_delete_electric_fence_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteElectricFence(childComplexity, args["where"].(model.ElectricFenceBoolExp)), true

	case "Mutation.delete_electric_fence_by_pk":
		if e.complexity.Mutation.DeleteElectricFenceByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_electric_fence_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteElectricFenceByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_electric_fence_by_union_pk":
		if e.complexity.Mutation.DeleteElectricFenceByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_electric_fence_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteElectricFenceByUnionPk(childComplexity, args["electric_fence_id"].(string)), true

	case "Mutation.delete_electric_fence_enterance_record":
		if e.complexity.Mutation.DeleteElectricFenceEnteranceRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_electric_fence_enterance_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteElectricFenceEnteranceRecord(childComplexity, args["where"].(model.ElectricFenceEnteranceRecordBoolExp)), true

	case "Mutation.delete_electric_fence_enterance_record_by_pk":
		if e.complexity.Mutation.DeleteElectricFenceEnteranceRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_electric_fence_enterance_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteElectricFenceEnteranceRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_electric_fence_enterance_record_by_union_pk":
		if e.complexity.Mutation.DeleteElectricFenceEnteranceRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_electric_fence_enterance_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteElectricFenceEnteranceRecordByUnionPk(childComplexity, args["record_id"].(string)), true

	case "Mutation.delete_limit_speed_line":
		if e.complexity.Mutation.DeleteLimitSpeedLine == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedLine(childComplexity, args["where"].(model.LimitSpeedLineBoolExp)), true

	case "Mutation.delete_limit_speed_line_by_pk":
		if e.complexity.Mutation.DeleteLimitSpeedLineByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedLineByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_limit_speed_line_by_union_pk":
		if e.complexity.Mutation.DeleteLimitSpeedLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedLineByUnionPk(childComplexity, args["limit_speed_line_id"].(string)), true

	case "Mutation.delete_limit_speed_line_time":
		if e.complexity.Mutation.DeleteLimitSpeedLineTime == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_line_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedLineTime(childComplexity, args["where"].(model.LimitSpeedLineTimeBoolExp)), true

	case "Mutation.delete_limit_speed_line_time_by_pk":
		if e.complexity.Mutation.DeleteLimitSpeedLineTimeByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_line_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedLineTimeByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_limit_speed_line_time_by_union_pk":
		if e.complexity.Mutation.DeleteLimitSpeedLineTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_line_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedLineTimeByUnionPk(childComplexity, args["limit_speed_line_time_id"].(string)), true

	case "Mutation.delete_limit_speed_plan":
		if e.complexity.Mutation.DeleteLimitSpeedPlan == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_plan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedPlan(childComplexity, args["where"].(model.LimitSpeedPlanBoolExp)), true

	case "Mutation.delete_limit_speed_plan_by_pk":
		if e.complexity.Mutation.DeleteLimitSpeedPlanByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_plan_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedPlanByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_limit_speed_plan_by_union_pk":
		if e.complexity.Mutation.DeleteLimitSpeedPlanByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_plan_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedPlanByUnionPk(childComplexity, args["limit_speed_plan_id"].(string)), true

	case "Mutation.delete_limit_speed_plan_detail":
		if e.complexity.Mutation.DeleteLimitSpeedPlanDetail == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_plan_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedPlanDetail(childComplexity, args["where"].(model.LimitSpeedPlanDetailBoolExp)), true

	case "Mutation.delete_limit_speed_plan_detail_by_pk":
		if e.complexity.Mutation.DeleteLimitSpeedPlanDetailByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_plan_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedPlanDetailByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_limit_speed_plan_detail_by_union_pk":
		if e.complexity.Mutation.DeleteLimitSpeedPlanDetailByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_limit_speed_plan_detail_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLimitSpeedPlanDetailByUnionPk(childComplexity, args["detail_id"].(string)), true

	case "Mutation.delete_vehicle_night_travel_record":
		if e.complexity.Mutation.DeleteVehicleNightTravelRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_night_travel_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleNightTravelRecord(childComplexity, args["where"].(model.VehicleNightTravelRecordBoolExp)), true

	case "Mutation.delete_vehicle_night_travel_record_by_pk":
		if e.complexity.Mutation.DeleteVehicleNightTravelRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_night_travel_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleNightTravelRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_night_travel_record_by_union_pk":
		if e.complexity.Mutation.DeleteVehicleNightTravelRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_night_travel_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleNightTravelRecordByUnionPk(childComplexity, args["record_id"].(string)), true

	case "Mutation.delete_vehicle_stop_travel_record":
		if e.complexity.Mutation.DeleteVehicleStopTravelRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_stop_travel_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleStopTravelRecord(childComplexity, args["where"].(model.VehicleStopTravelRecordBoolExp)), true

	case "Mutation.delete_vehicle_stop_travel_record_by_pk":
		if e.complexity.Mutation.DeleteVehicleStopTravelRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_stop_travel_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleStopTravelRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_stop_travel_record_by_union_pk":
		if e.complexity.Mutation.DeleteVehicleStopTravelRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_stop_travel_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleStopTravelRecordByUnionPk(childComplexity, args["record_id"].(string)), true

	case "Mutation.insert_control_line":
		if e.complexity.Mutation.InsertControlLine == nil {
			break
		}

		args, err := ec.field_Mutation_insert_control_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertControlLine(childComplexity, args["objects"].([]*model.ControlLineInsertInput)), true

	case "Mutation.insert_control_line_one":
		if e.complexity.Mutation.InsertControlLineOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_control_line_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertControlLineOne(childComplexity, args["objects"].(model.ControlLineInsertInput)), true

	case "Mutation.insert_control_line_time":
		if e.complexity.Mutation.InsertControlLineTime == nil {
			break
		}

		args, err := ec.field_Mutation_insert_control_line_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertControlLineTime(childComplexity, args["objects"].([]*model.ControlLineTimeInsertInput)), true

	case "Mutation.insert_control_line_time_one":
		if e.complexity.Mutation.InsertControlLineTimeOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_control_line_time_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertControlLineTimeOne(childComplexity, args["objects"].(model.ControlLineTimeInsertInput)), true

	case "Mutation.insert_ecd_file_check_his":
		if e.complexity.Mutation.InsertEcdFileCheckHis == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_check_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileCheckHis(childComplexity, args["objects"].([]*model.EcdFileCheckHisInsertInput)), true

	case "Mutation.insert_ecd_file_check_his_one":
		if e.complexity.Mutation.InsertEcdFileCheckHisOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_check_his_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileCheckHisOne(childComplexity, args["objects"].(model.EcdFileCheckHisInsertInput)), true

	case "Mutation.insert_ecd_file_district":
		if e.complexity.Mutation.InsertEcdFileDistrict == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_district_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileDistrict(childComplexity, args["objects"].([]*model.EcdFileDistrictInsertInput)), true

	case "Mutation.insert_ecd_file_district_one":
		if e.complexity.Mutation.InsertEcdFileDistrictOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_district_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileDistrictOne(childComplexity, args["objects"].(model.EcdFileDistrictInsertInput)), true

	case "Mutation.insert_ecd_file_line_point":
		if e.complexity.Mutation.InsertEcdFileLinePoint == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_line_point_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileLinePoint(childComplexity, args["objects"].([]*model.EcdFileLinePointInsertInput)), true

	case "Mutation.insert_ecd_file_line_point_one":
		if e.complexity.Mutation.InsertEcdFileLinePointOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_line_point_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileLinePointOne(childComplexity, args["objects"].(model.EcdFileLinePointInsertInput)), true

	case "Mutation.insert_ecd_file_main":
		if e.complexity.Mutation.InsertEcdFileMain == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_main_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileMain(childComplexity, args["objects"].([]*model.EcdFileMainInsertInput)), true

	case "Mutation.insert_ecd_file_main_one":
		if e.complexity.Mutation.InsertEcdFileMainOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_main_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileMainOne(childComplexity, args["objects"].(model.EcdFileMainInsertInput)), true

	case "Mutation.insert_ecd_file_main_sub":
		if e.complexity.Mutation.InsertEcdFileMainSub == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_main_sub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileMainSub(childComplexity, args["objects"].([]*model.EcdFileMainSubInsertInput)), true

	case "Mutation.insert_ecd_file_main_sub_one":
		if e.complexity.Mutation.InsertEcdFileMainSubOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_main_sub_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileMainSubOne(childComplexity, args["objects"].(model.EcdFileMainSubInsertInput)), true

	case "Mutation.insert_ecd_file_vehicle":
		if e.complexity.Mutation.InsertEcdFileVehicle == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_vehicle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileVehicle(childComplexity, args["objects"].([]*model.EcdFileVehicleInsertInput)), true

	case "Mutation.insert_ecd_file_vehicle_one":
		if e.complexity.Mutation.InsertEcdFileVehicleOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_vehicle_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileVehicleOne(childComplexity, args["objects"].(model.EcdFileVehicleInsertInput)), true

	case "Mutation.insert_ecd_file_vehicle_time":
		if e.complexity.Mutation.InsertEcdFileVehicleTime == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_vehicle_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileVehicleTime(childComplexity, args["objects"].([]*model.EcdFileVehicleTimeInsertInput)), true

	case "Mutation.insert_ecd_file_vehicle_time_one":
		if e.complexity.Mutation.InsertEcdFileVehicleTimeOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_file_vehicle_time_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdFileVehicleTimeOne(childComplexity, args["objects"].(model.EcdFileVehicleTimeInsertInput)), true

	case "Mutation.insert_ecd_line":
		if e.complexity.Mutation.InsertEcdLine == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdLine(childComplexity, args["objects"].([]*model.EcdLineInsertInput)), true

	case "Mutation.insert_ecd_line_one":
		if e.complexity.Mutation.InsertEcdLineOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_ecd_line_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEcdLineOne(childComplexity, args["objects"].(model.EcdLineInsertInput)), true

	case "Mutation.insert_electric_fence":
		if e.complexity.Mutation.InsertElectricFence == nil {
			break
		}

		args, err := ec.field_Mutation_insert_electric_fence_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertElectricFence(childComplexity, args["objects"].([]*model.ElectricFenceInsertInput)), true

	case "Mutation.insert_electric_fence_enterance_record":
		if e.complexity.Mutation.InsertElectricFenceEnteranceRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_electric_fence_enterance_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertElectricFenceEnteranceRecord(childComplexity, args["objects"].([]*model.ElectricFenceEnteranceRecordInsertInput)), true

	case "Mutation.insert_electric_fence_enterance_record_one":
		if e.complexity.Mutation.InsertElectricFenceEnteranceRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_electric_fence_enterance_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertElectricFenceEnteranceRecordOne(childComplexity, args["objects"].(model.ElectricFenceEnteranceRecordInsertInput)), true

	case "Mutation.insert_electric_fence_one":
		if e.complexity.Mutation.InsertElectricFenceOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_electric_fence_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertElectricFenceOne(childComplexity, args["objects"].(model.ElectricFenceInsertInput)), true

	case "Mutation.insert_limit_speed_line":
		if e.complexity.Mutation.InsertLimitSpeedLine == nil {
			break
		}

		args, err := ec.field_Mutation_insert_limit_speed_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertLimitSpeedLine(childComplexity, args["objects"].([]*model.LimitSpeedLineInsertInput)), true

	case "Mutation.insert_limit_speed_line_one":
		if e.complexity.Mutation.InsertLimitSpeedLineOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_limit_speed_line_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertLimitSpeedLineOne(childComplexity, args["objects"].(model.LimitSpeedLineInsertInput)), true

	case "Mutation.insert_limit_speed_line_time":
		if e.complexity.Mutation.InsertLimitSpeedLineTime == nil {
			break
		}

		args, err := ec.field_Mutation_insert_limit_speed_line_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertLimitSpeedLineTime(childComplexity, args["objects"].([]*model.LimitSpeedLineTimeInsertInput)), true

	case "Mutation.insert_limit_speed_line_time_one":
		if e.complexity.Mutation.InsertLimitSpeedLineTimeOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_limit_speed_line_time_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertLimitSpeedLineTimeOne(childComplexity, args["objects"].(model.LimitSpeedLineTimeInsertInput)), true

	case "Mutation.insert_limit_speed_plan":
		if e.complexity.Mutation.InsertLimitSpeedPlan == nil {
			break
		}

		args, err := ec.field_Mutation_insert_limit_speed_plan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertLimitSpeedPlan(childComplexity, args["objects"].([]*model.LimitSpeedPlanInsertInput)), true

	case "Mutation.insert_limit_speed_plan_detail":
		if e.complexity.Mutation.InsertLimitSpeedPlanDetail == nil {
			break
		}

		args, err := ec.field_Mutation_insert_limit_speed_plan_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertLimitSpeedPlanDetail(childComplexity, args["objects"].([]*model.LimitSpeedPlanDetailInsertInput)), true

	case "Mutation.insert_limit_speed_plan_detail_one":
		if e.complexity.Mutation.InsertLimitSpeedPlanDetailOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_limit_speed_plan_detail_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertLimitSpeedPlanDetailOne(childComplexity, args["objects"].(model.LimitSpeedPlanDetailInsertInput)), true

	case "Mutation.insert_limit_speed_plan_one":
		if e.complexity.Mutation.InsertLimitSpeedPlanOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_limit_speed_plan_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertLimitSpeedPlanOne(childComplexity, args["objects"].(model.LimitSpeedPlanInsertInput)), true

	case "Mutation.insert_vehicle_night_travel_record":
		if e.complexity.Mutation.InsertVehicleNightTravelRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_night_travel_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleNightTravelRecord(childComplexity, args["objects"].([]*model.VehicleNightTravelRecordInsertInput)), true

	case "Mutation.insert_vehicle_night_travel_record_one":
		if e.complexity.Mutation.InsertVehicleNightTravelRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_night_travel_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleNightTravelRecordOne(childComplexity, args["objects"].(model.VehicleNightTravelRecordInsertInput)), true

	case "Mutation.insert_vehicle_stop_travel_record":
		if e.complexity.Mutation.InsertVehicleStopTravelRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_stop_travel_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleStopTravelRecord(childComplexity, args["objects"].([]*model.VehicleStopTravelRecordInsertInput)), true

	case "Mutation.insert_vehicle_stop_travel_record_one":
		if e.complexity.Mutation.InsertVehicleStopTravelRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_stop_travel_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleStopTravelRecordOne(childComplexity, args["objects"].(model.VehicleStopTravelRecordInsertInput)), true

	case "Mutation.update_control_line":
		if e.complexity.Mutation.UpdateControlLine == nil {
			break
		}

		args, err := ec.field_Mutation_update_control_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlLine(childComplexity, args["_inc"].(*model.ControlLineIncInput), args["_set"].(*model.ControlLineSetInput), args["where"].(model.ControlLineBoolExp)), true

	case "Mutation.update_control_line_by_pk":
		if e.complexity.Mutation.UpdateControlLineByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_control_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlLineByPk(childComplexity, args["_inc"].(*model.ControlLineIncInput), args["_set"].(*model.ControlLineSetInput), args["id"].(int64)), true

	case "Mutation.update_control_line_by_union_pk":
		if e.complexity.Mutation.UpdateControlLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_control_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlLineByUnionPk(childComplexity, args["_inc"].(*model.ControlLineIncInput), args["_set"].(*model.ControlLineSetInput), args["control_line_id"].(string)), true

	case "Mutation.update_control_line_time":
		if e.complexity.Mutation.UpdateControlLineTime == nil {
			break
		}

		args, err := ec.field_Mutation_update_control_line_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlLineTime(childComplexity, args["_inc"].(*model.ControlLineTimeIncInput), args["_set"].(*model.ControlLineTimeSetInput), args["where"].(model.ControlLineTimeBoolExp)), true

	case "Mutation.update_control_line_time_by_pk":
		if e.complexity.Mutation.UpdateControlLineTimeByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_control_line_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlLineTimeByPk(childComplexity, args["_inc"].(*model.ControlLineTimeIncInput), args["_set"].(*model.ControlLineTimeSetInput), args["id"].(int64)), true

	case "Mutation.update_control_line_time_by_union_pk":
		if e.complexity.Mutation.UpdateControlLineTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_control_line_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateControlLineTimeByUnionPk(childComplexity, args["_inc"].(*model.ControlLineTimeIncInput), args["_set"].(*model.ControlLineTimeSetInput), args["control_line_time_id"].(string)), true

	case "Mutation.update_ecd_file_check_his":
		if e.complexity.Mutation.UpdateEcdFileCheckHis == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_check_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileCheckHis(childComplexity, args["_inc"].(*model.EcdFileCheckHisIncInput), args["_set"].(*model.EcdFileCheckHisSetInput), args["where"].(model.EcdFileCheckHisBoolExp)), true

	case "Mutation.update_ecd_file_check_his_by_pk":
		if e.complexity.Mutation.UpdateEcdFileCheckHisByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_check_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileCheckHisByPk(childComplexity, args["_inc"].(*model.EcdFileCheckHisIncInput), args["_set"].(*model.EcdFileCheckHisSetInput), args["id"].(int64)), true

	case "Mutation.update_ecd_file_check_his_by_union_pk":
		if e.complexity.Mutation.UpdateEcdFileCheckHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_check_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileCheckHisByUnionPk(childComplexity, args["_inc"].(*model.EcdFileCheckHisIncInput), args["_set"].(*model.EcdFileCheckHisSetInput), args["his_id"].(string)), true

	case "Mutation.update_ecd_file_district":
		if e.complexity.Mutation.UpdateEcdFileDistrict == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_district_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileDistrict(childComplexity, args["_inc"].(*model.EcdFileDistrictIncInput), args["_set"].(*model.EcdFileDistrictSetInput), args["where"].(model.EcdFileDistrictBoolExp)), true

	case "Mutation.update_ecd_file_district_by_pk":
		if e.complexity.Mutation.UpdateEcdFileDistrictByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_district_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileDistrictByPk(childComplexity, args["_inc"].(*model.EcdFileDistrictIncInput), args["_set"].(*model.EcdFileDistrictSetInput), args["id"].(int64)), true

	case "Mutation.update_ecd_file_district_by_union_pk":
		if e.complexity.Mutation.UpdateEcdFileDistrictByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_district_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileDistrictByUnionPk(childComplexity, args["_inc"].(*model.EcdFileDistrictIncInput), args["_set"].(*model.EcdFileDistrictSetInput), args["file_district_id"].(string)), true

	case "Mutation.update_ecd_file_line_point":
		if e.complexity.Mutation.UpdateEcdFileLinePoint == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_line_point_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileLinePoint(childComplexity, args["_inc"].(*model.EcdFileLinePointIncInput), args["_set"].(*model.EcdFileLinePointSetInput), args["where"].(model.EcdFileLinePointBoolExp)), true

	case "Mutation.update_ecd_file_line_point_by_pk":
		if e.complexity.Mutation.UpdateEcdFileLinePointByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_line_point_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileLinePointByPk(childComplexity, args["_inc"].(*model.EcdFileLinePointIncInput), args["_set"].(*model.EcdFileLinePointSetInput), args["id"].(int64)), true

	case "Mutation.update_ecd_file_line_point_by_union_pk":
		if e.complexity.Mutation.UpdateEcdFileLinePointByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_line_point_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileLinePointByUnionPk(childComplexity, args["_inc"].(*model.EcdFileLinePointIncInput), args["_set"].(*model.EcdFileLinePointSetInput), args["line_point_id"].(string)), true

	case "Mutation.update_ecd_file_main":
		if e.complexity.Mutation.UpdateEcdFileMain == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_main_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileMain(childComplexity, args["_inc"].(*model.EcdFileMainIncInput), args["_set"].(*model.EcdFileMainSetInput), args["where"].(model.EcdFileMainBoolExp)), true

	case "Mutation.update_ecd_file_main_by_pk":
		if e.complexity.Mutation.UpdateEcdFileMainByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_main_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileMainByPk(childComplexity, args["_inc"].(*model.EcdFileMainIncInput), args["_set"].(*model.EcdFileMainSetInput), args["id"].(int64)), true

	case "Mutation.update_ecd_file_main_by_union_pk":
		if e.complexity.Mutation.UpdateEcdFileMainByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_main_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileMainByUnionPk(childComplexity, args["_inc"].(*model.EcdFileMainIncInput), args["_set"].(*model.EcdFileMainSetInput), args["file_main_id"].(string)), true

	case "Mutation.update_ecd_file_main_sub":
		if e.complexity.Mutation.UpdateEcdFileMainSub == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_main_sub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileMainSub(childComplexity, args["_inc"].(*model.EcdFileMainSubIncInput), args["_set"].(*model.EcdFileMainSubSetInput), args["where"].(model.EcdFileMainSubBoolExp)), true

	case "Mutation.update_ecd_file_main_sub_by_pk":
		if e.complexity.Mutation.UpdateEcdFileMainSubByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_main_sub_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileMainSubByPk(childComplexity, args["_inc"].(*model.EcdFileMainSubIncInput), args["_set"].(*model.EcdFileMainSubSetInput), args["id"].(int64)), true

	case "Mutation.update_ecd_file_main_sub_by_union_pk":
		if e.complexity.Mutation.UpdateEcdFileMainSubByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_main_sub_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileMainSubByUnionPk(childComplexity, args["_inc"].(*model.EcdFileMainSubIncInput), args["_set"].(*model.EcdFileMainSubSetInput), args["file_main_sub_id"].(string)), true

	case "Mutation.update_ecd_file_vehicle":
		if e.complexity.Mutation.UpdateEcdFileVehicle == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_vehicle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileVehicle(childComplexity, args["_inc"].(*model.EcdFileVehicleIncInput), args["_set"].(*model.EcdFileVehicleSetInput), args["where"].(model.EcdFileVehicleBoolExp)), true

	case "Mutation.update_ecd_file_vehicle_by_pk":
		if e.complexity.Mutation.UpdateEcdFileVehicleByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_vehicle_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileVehicleByPk(childComplexity, args["_inc"].(*model.EcdFileVehicleIncInput), args["_set"].(*model.EcdFileVehicleSetInput), args["id"].(int64)), true

	case "Mutation.update_ecd_file_vehicle_by_union_pk":
		if e.complexity.Mutation.UpdateEcdFileVehicleByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_vehicle_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileVehicleByUnionPk(childComplexity, args["_inc"].(*model.EcdFileVehicleIncInput), args["_set"].(*model.EcdFileVehicleSetInput), args["file_vehicle_id"].(string)), true

	case "Mutation.update_ecd_file_vehicle_time":
		if e.complexity.Mutation.UpdateEcdFileVehicleTime == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_vehicle_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileVehicleTime(childComplexity, args["_inc"].(*model.EcdFileVehicleTimeIncInput), args["_set"].(*model.EcdFileVehicleTimeSetInput), args["where"].(model.EcdFileVehicleTimeBoolExp)), true

	case "Mutation.update_ecd_file_vehicle_time_by_pk":
		if e.complexity.Mutation.UpdateEcdFileVehicleTimeByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_vehicle_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileVehicleTimeByPk(childComplexity, args["_inc"].(*model.EcdFileVehicleTimeIncInput), args["_set"].(*model.EcdFileVehicleTimeSetInput), args["id"].(int64)), true

	case "Mutation.update_ecd_file_vehicle_time_by_union_pk":
		if e.complexity.Mutation.UpdateEcdFileVehicleTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_file_vehicle_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdFileVehicleTimeByUnionPk(childComplexity, args["_inc"].(*model.EcdFileVehicleTimeIncInput), args["_set"].(*model.EcdFileVehicleTimeSetInput), args["vehicle_time_id"].(string)), true

	case "Mutation.update_ecd_line":
		if e.complexity.Mutation.UpdateEcdLine == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdLine(childComplexity, args["_inc"].(*model.EcdLineIncInput), args["_set"].(*model.EcdLineSetInput), args["where"].(model.EcdLineBoolExp)), true

	case "Mutation.update_ecd_line_by_pk":
		if e.complexity.Mutation.UpdateEcdLineByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdLineByPk(childComplexity, args["_inc"].(*model.EcdLineIncInput), args["_set"].(*model.EcdLineSetInput), args["id"].(int64)), true

	case "Mutation.update_ecd_line_by_union_pk":
		if e.complexity.Mutation.UpdateEcdLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_ecd_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEcdLineByUnionPk(childComplexity, args["_inc"].(*model.EcdLineIncInput), args["_set"].(*model.EcdLineSetInput), args["line_id"].(string)), true

	case "Mutation.update_electric_fence":
		if e.complexity.Mutation.UpdateElectricFence == nil {
			break
		}

		args, err := ec.field_Mutation_update_electric_fence_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateElectricFence(childComplexity, args["_inc"].(*model.ElectricFenceIncInput), args["_set"].(*model.ElectricFenceSetInput), args["where"].(model.ElectricFenceBoolExp)), true

	case "Mutation.update_electric_fence_by_pk":
		if e.complexity.Mutation.UpdateElectricFenceByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_electric_fence_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateElectricFenceByPk(childComplexity, args["_inc"].(*model.ElectricFenceIncInput), args["_set"].(*model.ElectricFenceSetInput), args["id"].(int64)), true

	case "Mutation.update_electric_fence_by_union_pk":
		if e.complexity.Mutation.UpdateElectricFenceByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_electric_fence_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateElectricFenceByUnionPk(childComplexity, args["_inc"].(*model.ElectricFenceIncInput), args["_set"].(*model.ElectricFenceSetInput), args["electric_fence_id"].(string)), true

	case "Mutation.update_electric_fence_enterance_record":
		if e.complexity.Mutation.UpdateElectricFenceEnteranceRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_electric_fence_enterance_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateElectricFenceEnteranceRecord(childComplexity, args["_inc"].(*model.ElectricFenceEnteranceRecordIncInput), args["_set"].(*model.ElectricFenceEnteranceRecordSetInput), args["where"].(model.ElectricFenceEnteranceRecordBoolExp)), true

	case "Mutation.update_electric_fence_enterance_record_by_pk":
		if e.complexity.Mutation.UpdateElectricFenceEnteranceRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_electric_fence_enterance_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateElectricFenceEnteranceRecordByPk(childComplexity, args["_inc"].(*model.ElectricFenceEnteranceRecordIncInput), args["_set"].(*model.ElectricFenceEnteranceRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_electric_fence_enterance_record_by_union_pk":
		if e.complexity.Mutation.UpdateElectricFenceEnteranceRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_electric_fence_enterance_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateElectricFenceEnteranceRecordByUnionPk(childComplexity, args["_inc"].(*model.ElectricFenceEnteranceRecordIncInput), args["_set"].(*model.ElectricFenceEnteranceRecordSetInput), args["record_id"].(string)), true

	case "Mutation.update_limit_speed_line":
		if e.complexity.Mutation.UpdateLimitSpeedLine == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedLine(childComplexity, args["_inc"].(*model.LimitSpeedLineIncInput), args["_set"].(*model.LimitSpeedLineSetInput), args["where"].(model.LimitSpeedLineBoolExp)), true

	case "Mutation.update_limit_speed_line_by_pk":
		if e.complexity.Mutation.UpdateLimitSpeedLineByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedLineByPk(childComplexity, args["_inc"].(*model.LimitSpeedLineIncInput), args["_set"].(*model.LimitSpeedLineSetInput), args["id"].(int64)), true

	case "Mutation.update_limit_speed_line_by_union_pk":
		if e.complexity.Mutation.UpdateLimitSpeedLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedLineByUnionPk(childComplexity, args["_inc"].(*model.LimitSpeedLineIncInput), args["_set"].(*model.LimitSpeedLineSetInput), args["limit_speed_line_id"].(string)), true

	case "Mutation.update_limit_speed_line_time":
		if e.complexity.Mutation.UpdateLimitSpeedLineTime == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_line_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedLineTime(childComplexity, args["_inc"].(*model.LimitSpeedLineTimeIncInput), args["_set"].(*model.LimitSpeedLineTimeSetInput), args["where"].(model.LimitSpeedLineTimeBoolExp)), true

	case "Mutation.update_limit_speed_line_time_by_pk":
		if e.complexity.Mutation.UpdateLimitSpeedLineTimeByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_line_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedLineTimeByPk(childComplexity, args["_inc"].(*model.LimitSpeedLineTimeIncInput), args["_set"].(*model.LimitSpeedLineTimeSetInput), args["id"].(int64)), true

	case "Mutation.update_limit_speed_line_time_by_union_pk":
		if e.complexity.Mutation.UpdateLimitSpeedLineTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_line_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedLineTimeByUnionPk(childComplexity, args["_inc"].(*model.LimitSpeedLineTimeIncInput), args["_set"].(*model.LimitSpeedLineTimeSetInput), args["limit_speed_line_time_id"].(string)), true

	case "Mutation.update_limit_speed_plan":
		if e.complexity.Mutation.UpdateLimitSpeedPlan == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_plan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedPlan(childComplexity, args["_inc"].(*model.LimitSpeedPlanIncInput), args["_set"].(*model.LimitSpeedPlanSetInput), args["where"].(model.LimitSpeedPlanBoolExp)), true

	case "Mutation.update_limit_speed_plan_by_pk":
		if e.complexity.Mutation.UpdateLimitSpeedPlanByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_plan_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedPlanByPk(childComplexity, args["_inc"].(*model.LimitSpeedPlanIncInput), args["_set"].(*model.LimitSpeedPlanSetInput), args["id"].(int64)), true

	case "Mutation.update_limit_speed_plan_by_union_pk":
		if e.complexity.Mutation.UpdateLimitSpeedPlanByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_plan_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedPlanByUnionPk(childComplexity, args["_inc"].(*model.LimitSpeedPlanIncInput), args["_set"].(*model.LimitSpeedPlanSetInput), args["limit_speed_plan_id"].(string)), true

	case "Mutation.update_limit_speed_plan_detail":
		if e.complexity.Mutation.UpdateLimitSpeedPlanDetail == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_plan_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedPlanDetail(childComplexity, args["_inc"].(*model.LimitSpeedPlanDetailIncInput), args["_set"].(*model.LimitSpeedPlanDetailSetInput), args["where"].(model.LimitSpeedPlanDetailBoolExp)), true

	case "Mutation.update_limit_speed_plan_detail_by_pk":
		if e.complexity.Mutation.UpdateLimitSpeedPlanDetailByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_plan_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedPlanDetailByPk(childComplexity, args["_inc"].(*model.LimitSpeedPlanDetailIncInput), args["_set"].(*model.LimitSpeedPlanDetailSetInput), args["id"].(int64)), true

	case "Mutation.update_limit_speed_plan_detail_by_union_pk":
		if e.complexity.Mutation.UpdateLimitSpeedPlanDetailByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_limit_speed_plan_detail_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLimitSpeedPlanDetailByUnionPk(childComplexity, args["_inc"].(*model.LimitSpeedPlanDetailIncInput), args["_set"].(*model.LimitSpeedPlanDetailSetInput), args["detail_id"].(string)), true

	case "Mutation.update_vehicle_night_travel_record":
		if e.complexity.Mutation.UpdateVehicleNightTravelRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_night_travel_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleNightTravelRecord(childComplexity, args["_inc"].(*model.VehicleNightTravelRecordIncInput), args["_set"].(*model.VehicleNightTravelRecordSetInput), args["where"].(model.VehicleNightTravelRecordBoolExp)), true

	case "Mutation.update_vehicle_night_travel_record_by_pk":
		if e.complexity.Mutation.UpdateVehicleNightTravelRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_night_travel_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleNightTravelRecordByPk(childComplexity, args["_inc"].(*model.VehicleNightTravelRecordIncInput), args["_set"].(*model.VehicleNightTravelRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_night_travel_record_by_union_pk":
		if e.complexity.Mutation.UpdateVehicleNightTravelRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_night_travel_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleNightTravelRecordByUnionPk(childComplexity, args["_inc"].(*model.VehicleNightTravelRecordIncInput), args["_set"].(*model.VehicleNightTravelRecordSetInput), args["record_id"].(string)), true

	case "Mutation.update_vehicle_stop_travel_record":
		if e.complexity.Mutation.UpdateVehicleStopTravelRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_stop_travel_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleStopTravelRecord(childComplexity, args["_inc"].(*model.VehicleStopTravelRecordIncInput), args["_set"].(*model.VehicleStopTravelRecordSetInput), args["where"].(model.VehicleStopTravelRecordBoolExp)), true

	case "Mutation.update_vehicle_stop_travel_record_by_pk":
		if e.complexity.Mutation.UpdateVehicleStopTravelRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_stop_travel_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleStopTravelRecordByPk(childComplexity, args["_inc"].(*model.VehicleStopTravelRecordIncInput), args["_set"].(*model.VehicleStopTravelRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_stop_travel_record_by_union_pk":
		if e.complexity.Mutation.UpdateVehicleStopTravelRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_stop_travel_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleStopTravelRecordByUnionPk(childComplexity, args["_inc"].(*model.VehicleStopTravelRecordIncInput), args["_set"].(*model.VehicleStopTravelRecordSetInput), args["record_id"].(string)), true

	case "Query.control_line":
		if e.complexity.Query.ControlLine == nil {
			break
		}

		args, err := ec.field_Query_control_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlLine(childComplexity, args["distinct_on"].([]model.ControlLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ControlLineOrderBy), args["where"].(*model.ControlLineBoolExp)), true

	case "Query.control_line_aggregate":
		if e.complexity.Query.ControlLineAggregate == nil {
			break
		}

		args, err := ec.field_Query_control_line_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlLineAggregate(childComplexity, args["distinct_on"].([]model.ControlLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ControlLineOrderBy), args["where"].(*model.ControlLineBoolExp)), true

	case "Query.control_line_by_pk":
		if e.complexity.Query.ControlLineByPk == nil {
			break
		}

		args, err := ec.field_Query_control_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlLineByPk(childComplexity, args["id"].(int64)), true

	case "Query.control_line_by_union_pk":
		if e.complexity.Query.ControlLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_control_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlLineByUnionPk(childComplexity, args["control_line_id"].(string)), true

	case "Query.control_line_time":
		if e.complexity.Query.ControlLineTime == nil {
			break
		}

		args, err := ec.field_Query_control_line_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlLineTime(childComplexity, args["distinct_on"].([]model.ControlLineTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ControlLineTimeOrderBy), args["where"].(*model.ControlLineTimeBoolExp)), true

	case "Query.control_line_time_aggregate":
		if e.complexity.Query.ControlLineTimeAggregate == nil {
			break
		}

		args, err := ec.field_Query_control_line_time_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlLineTimeAggregate(childComplexity, args["distinct_on"].([]model.ControlLineTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ControlLineTimeOrderBy), args["where"].(*model.ControlLineTimeBoolExp)), true

	case "Query.control_line_time_by_pk":
		if e.complexity.Query.ControlLineTimeByPk == nil {
			break
		}

		args, err := ec.field_Query_control_line_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlLineTimeByPk(childComplexity, args["id"].(int64)), true

	case "Query.control_line_time_by_union_pk":
		if e.complexity.Query.ControlLineTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_control_line_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ControlLineTimeByUnionPk(childComplexity, args["control_line_time_id"].(string)), true

	case "Query.ecd_file_check_his":
		if e.complexity.Query.EcdFileCheckHis == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_check_his_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileCheckHis(childComplexity, args["distinct_on"].([]model.EcdFileCheckHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileCheckHisOrderBy), args["where"].(*model.EcdFileCheckHisBoolExp)), true

	case "Query.ecd_file_check_his_aggregate":
		if e.complexity.Query.EcdFileCheckHisAggregate == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_check_his_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileCheckHisAggregate(childComplexity, args["distinct_on"].([]model.EcdFileCheckHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileCheckHisOrderBy), args["where"].(*model.EcdFileCheckHisBoolExp)), true

	case "Query.ecd_file_check_his_by_pk":
		if e.complexity.Query.EcdFileCheckHisByPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_check_his_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileCheckHisByPk(childComplexity, args["id"].(int64)), true

	case "Query.ecd_file_check_his_by_union_pk":
		if e.complexity.Query.EcdFileCheckHisByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_check_his_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileCheckHisByUnionPk(childComplexity, args["his_id"].(string)), true

	case "Query.ecd_file_district":
		if e.complexity.Query.EcdFileDistrict == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_district_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileDistrict(childComplexity, args["distinct_on"].([]model.EcdFileDistrictSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileDistrictOrderBy), args["where"].(*model.EcdFileDistrictBoolExp)), true

	case "Query.ecd_file_district_aggregate":
		if e.complexity.Query.EcdFileDistrictAggregate == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_district_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileDistrictAggregate(childComplexity, args["distinct_on"].([]model.EcdFileDistrictSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileDistrictOrderBy), args["where"].(*model.EcdFileDistrictBoolExp)), true

	case "Query.ecd_file_district_by_pk":
		if e.complexity.Query.EcdFileDistrictByPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_district_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileDistrictByPk(childComplexity, args["id"].(int64)), true

	case "Query.ecd_file_district_by_union_pk":
		if e.complexity.Query.EcdFileDistrictByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_district_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileDistrictByUnionPk(childComplexity, args["file_district_id"].(string)), true

	case "Query.ecd_file_line_point":
		if e.complexity.Query.EcdFileLinePoint == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_line_point_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileLinePoint(childComplexity, args["distinct_on"].([]model.EcdFileLinePointSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileLinePointOrderBy), args["where"].(*model.EcdFileLinePointBoolExp)), true

	case "Query.ecd_file_line_point_aggregate":
		if e.complexity.Query.EcdFileLinePointAggregate == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_line_point_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileLinePointAggregate(childComplexity, args["distinct_on"].([]model.EcdFileLinePointSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileLinePointOrderBy), args["where"].(*model.EcdFileLinePointBoolExp)), true

	case "Query.ecd_file_line_point_by_pk":
		if e.complexity.Query.EcdFileLinePointByPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_line_point_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileLinePointByPk(childComplexity, args["id"].(int64)), true

	case "Query.ecd_file_line_point_by_union_pk":
		if e.complexity.Query.EcdFileLinePointByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_line_point_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileLinePointByUnionPk(childComplexity, args["line_point_id"].(string)), true

	case "Query.ecd_file_main":
		if e.complexity.Query.EcdFileMain == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_main_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileMain(childComplexity, args["distinct_on"].([]model.EcdFileMainSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileMainOrderBy), args["where"].(*model.EcdFileMainBoolExp)), true

	case "Query.ecd_file_main_aggregate":
		if e.complexity.Query.EcdFileMainAggregate == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_main_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileMainAggregate(childComplexity, args["distinct_on"].([]model.EcdFileMainSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileMainOrderBy), args["where"].(*model.EcdFileMainBoolExp)), true

	case "Query.ecd_file_main_by_pk":
		if e.complexity.Query.EcdFileMainByPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_main_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileMainByPk(childComplexity, args["id"].(int64)), true

	case "Query.ecd_file_main_by_union_pk":
		if e.complexity.Query.EcdFileMainByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_main_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileMainByUnionPk(childComplexity, args["file_main_id"].(string)), true

	case "Query.ecd_file_main_sub":
		if e.complexity.Query.EcdFileMainSub == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_main_sub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileMainSub(childComplexity, args["distinct_on"].([]model.EcdFileMainSubSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileMainSubOrderBy), args["where"].(*model.EcdFileMainSubBoolExp)), true

	case "Query.ecd_file_main_sub_aggregate":
		if e.complexity.Query.EcdFileMainSubAggregate == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_main_sub_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileMainSubAggregate(childComplexity, args["distinct_on"].([]model.EcdFileMainSubSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileMainSubOrderBy), args["where"].(*model.EcdFileMainSubBoolExp)), true

	case "Query.ecd_file_main_sub_by_pk":
		if e.complexity.Query.EcdFileMainSubByPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_main_sub_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileMainSubByPk(childComplexity, args["id"].(int64)), true

	case "Query.ecd_file_main_sub_by_union_pk":
		if e.complexity.Query.EcdFileMainSubByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_main_sub_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileMainSubByUnionPk(childComplexity, args["file_main_sub_id"].(string)), true

	case "Query.ecd_file_vehicle":
		if e.complexity.Query.EcdFileVehicle == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_vehicle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileVehicle(childComplexity, args["distinct_on"].([]model.EcdFileVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileVehicleOrderBy), args["where"].(*model.EcdFileVehicleBoolExp)), true

	case "Query.ecd_file_vehicle_aggregate":
		if e.complexity.Query.EcdFileVehicleAggregate == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_vehicle_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileVehicleAggregate(childComplexity, args["distinct_on"].([]model.EcdFileVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileVehicleOrderBy), args["where"].(*model.EcdFileVehicleBoolExp)), true

	case "Query.ecd_file_vehicle_by_pk":
		if e.complexity.Query.EcdFileVehicleByPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_vehicle_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileVehicleByPk(childComplexity, args["id"].(int64)), true

	case "Query.ecd_file_vehicle_by_union_pk":
		if e.complexity.Query.EcdFileVehicleByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_vehicle_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileVehicleByUnionPk(childComplexity, args["file_vehicle_id"].(string)), true

	case "Query.ecd_file_vehicle_time":
		if e.complexity.Query.EcdFileVehicleTime == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_vehicle_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileVehicleTime(childComplexity, args["distinct_on"].([]model.EcdFileVehicleTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileVehicleTimeOrderBy), args["where"].(*model.EcdFileVehicleTimeBoolExp)), true

	case "Query.ecd_file_vehicle_time_aggregate":
		if e.complexity.Query.EcdFileVehicleTimeAggregate == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_vehicle_time_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileVehicleTimeAggregate(childComplexity, args["distinct_on"].([]model.EcdFileVehicleTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileVehicleTimeOrderBy), args["where"].(*model.EcdFileVehicleTimeBoolExp)), true

	case "Query.ecd_file_vehicle_time_by_pk":
		if e.complexity.Query.EcdFileVehicleTimeByPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_vehicle_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileVehicleTimeByPk(childComplexity, args["id"].(int64)), true

	case "Query.ecd_file_vehicle_time_by_union_pk":
		if e.complexity.Query.EcdFileVehicleTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_file_vehicle_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdFileVehicleTimeByUnionPk(childComplexity, args["vehicle_time_id"].(string)), true

	case "Query.ecd_line":
		if e.complexity.Query.EcdLine == nil {
			break
		}

		args, err := ec.field_Query_ecd_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdLine(childComplexity, args["distinct_on"].([]model.EcdLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdLineOrderBy), args["where"].(*model.EcdLineBoolExp)), true

	case "Query.ecd_line_aggregate":
		if e.complexity.Query.EcdLineAggregate == nil {
			break
		}

		args, err := ec.field_Query_ecd_line_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdLineAggregate(childComplexity, args["distinct_on"].([]model.EcdLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdLineOrderBy), args["where"].(*model.EcdLineBoolExp)), true

	case "Query.ecd_line_by_pk":
		if e.complexity.Query.EcdLineByPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdLineByPk(childComplexity, args["id"].(int64)), true

	case "Query.ecd_line_by_union_pk":
		if e.complexity.Query.EcdLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_ecd_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EcdLineByUnionPk(childComplexity, args["line_id"].(string)), true

	case "Query.electric_fence":
		if e.complexity.Query.ElectricFence == nil {
			break
		}

		args, err := ec.field_Query_electric_fence_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElectricFence(childComplexity, args["distinct_on"].([]model.ElectricFenceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ElectricFenceOrderBy), args["where"].(*model.ElectricFenceBoolExp)), true

	case "Query.electric_fence_aggregate":
		if e.complexity.Query.ElectricFenceAggregate == nil {
			break
		}

		args, err := ec.field_Query_electric_fence_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElectricFenceAggregate(childComplexity, args["distinct_on"].([]model.ElectricFenceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ElectricFenceOrderBy), args["where"].(*model.ElectricFenceBoolExp)), true

	case "Query.electric_fence_by_pk":
		if e.complexity.Query.ElectricFenceByPk == nil {
			break
		}

		args, err := ec.field_Query_electric_fence_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElectricFenceByPk(childComplexity, args["id"].(int64)), true

	case "Query.electric_fence_by_union_pk":
		if e.complexity.Query.ElectricFenceByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_electric_fence_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElectricFenceByUnionPk(childComplexity, args["electric_fence_id"].(string)), true

	case "Query.electric_fence_enterance_record":
		if e.complexity.Query.ElectricFenceEnteranceRecord == nil {
			break
		}

		args, err := ec.field_Query_electric_fence_enterance_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElectricFenceEnteranceRecord(childComplexity, args["distinct_on"].([]model.ElectricFenceEnteranceRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ElectricFenceEnteranceRecordOrderBy), args["where"].(*model.ElectricFenceEnteranceRecordBoolExp)), true

	case "Query.electric_fence_enterance_record_aggregate":
		if e.complexity.Query.ElectricFenceEnteranceRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_electric_fence_enterance_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElectricFenceEnteranceRecordAggregate(childComplexity, args["distinct_on"].([]model.ElectricFenceEnteranceRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ElectricFenceEnteranceRecordOrderBy), args["where"].(*model.ElectricFenceEnteranceRecordBoolExp)), true

	case "Query.electric_fence_enterance_record_by_pk":
		if e.complexity.Query.ElectricFenceEnteranceRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_electric_fence_enterance_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElectricFenceEnteranceRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.electric_fence_enterance_record_by_union_pk":
		if e.complexity.Query.ElectricFenceEnteranceRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_electric_fence_enterance_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElectricFenceEnteranceRecordByUnionPk(childComplexity, args["record_id"].(string)), true

	case "Query.limit_speed_line":
		if e.complexity.Query.LimitSpeedLine == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_line_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedLine(childComplexity, args["distinct_on"].([]model.LimitSpeedLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedLineOrderBy), args["where"].(*model.LimitSpeedLineBoolExp)), true

	case "Query.limit_speed_line_aggregate":
		if e.complexity.Query.LimitSpeedLineAggregate == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_line_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedLineAggregate(childComplexity, args["distinct_on"].([]model.LimitSpeedLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedLineOrderBy), args["where"].(*model.LimitSpeedLineBoolExp)), true

	case "Query.limit_speed_line_by_pk":
		if e.complexity.Query.LimitSpeedLineByPk == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_line_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedLineByPk(childComplexity, args["id"].(int64)), true

	case "Query.limit_speed_line_by_union_pk":
		if e.complexity.Query.LimitSpeedLineByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_line_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedLineByUnionPk(childComplexity, args["limit_speed_line_id"].(string)), true

	case "Query.limit_speed_line_time":
		if e.complexity.Query.LimitSpeedLineTime == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_line_time_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedLineTime(childComplexity, args["distinct_on"].([]model.LimitSpeedLineTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedLineTimeOrderBy), args["where"].(*model.LimitSpeedLineTimeBoolExp)), true

	case "Query.limit_speed_line_time_aggregate":
		if e.complexity.Query.LimitSpeedLineTimeAggregate == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_line_time_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedLineTimeAggregate(childComplexity, args["distinct_on"].([]model.LimitSpeedLineTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedLineTimeOrderBy), args["where"].(*model.LimitSpeedLineTimeBoolExp)), true

	case "Query.limit_speed_line_time_by_pk":
		if e.complexity.Query.LimitSpeedLineTimeByPk == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_line_time_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedLineTimeByPk(childComplexity, args["id"].(int64)), true

	case "Query.limit_speed_line_time_by_union_pk":
		if e.complexity.Query.LimitSpeedLineTimeByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_line_time_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedLineTimeByUnionPk(childComplexity, args["limit_speed_line_time_id"].(string)), true

	case "Query.limit_speed_plan":
		if e.complexity.Query.LimitSpeedPlan == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_plan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedPlan(childComplexity, args["distinct_on"].([]model.LimitSpeedPlanSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedPlanOrderBy), args["where"].(*model.LimitSpeedPlanBoolExp)), true

	case "Query.limit_speed_plan_aggregate":
		if e.complexity.Query.LimitSpeedPlanAggregate == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_plan_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedPlanAggregate(childComplexity, args["distinct_on"].([]model.LimitSpeedPlanSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedPlanOrderBy), args["where"].(*model.LimitSpeedPlanBoolExp)), true

	case "Query.limit_speed_plan_by_pk":
		if e.complexity.Query.LimitSpeedPlanByPk == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_plan_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedPlanByPk(childComplexity, args["id"].(int64)), true

	case "Query.limit_speed_plan_by_union_pk":
		if e.complexity.Query.LimitSpeedPlanByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_plan_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedPlanByUnionPk(childComplexity, args["limit_speed_plan_id"].(string)), true

	case "Query.limit_speed_plan_detail":
		if e.complexity.Query.LimitSpeedPlanDetail == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_plan_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedPlanDetail(childComplexity, args["distinct_on"].([]model.LimitSpeedPlanDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedPlanDetailOrderBy), args["where"].(*model.LimitSpeedPlanDetailBoolExp)), true

	case "Query.limit_speed_plan_detail_aggregate":
		if e.complexity.Query.LimitSpeedPlanDetailAggregate == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_plan_detail_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedPlanDetailAggregate(childComplexity, args["distinct_on"].([]model.LimitSpeedPlanDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedPlanDetailOrderBy), args["where"].(*model.LimitSpeedPlanDetailBoolExp)), true

	case "Query.limit_speed_plan_detail_by_pk":
		if e.complexity.Query.LimitSpeedPlanDetailByPk == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_plan_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedPlanDetailByPk(childComplexity, args["id"].(int64)), true

	case "Query.limit_speed_plan_detail_by_union_pk":
		if e.complexity.Query.LimitSpeedPlanDetailByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_limit_speed_plan_detail_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LimitSpeedPlanDetailByUnionPk(childComplexity, args["detail_id"].(string)), true

	case "Query.vehicle_night_travel_record":
		if e.complexity.Query.VehicleNightTravelRecord == nil {
			break
		}

		args, err := ec.field_Query_vehicle_night_travel_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleNightTravelRecord(childComplexity, args["distinct_on"].([]model.VehicleNightTravelRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleNightTravelRecordOrderBy), args["where"].(*model.VehicleNightTravelRecordBoolExp)), true

	case "Query.vehicle_night_travel_record_aggregate":
		if e.complexity.Query.VehicleNightTravelRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_night_travel_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleNightTravelRecordAggregate(childComplexity, args["distinct_on"].([]model.VehicleNightTravelRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleNightTravelRecordOrderBy), args["where"].(*model.VehicleNightTravelRecordBoolExp)), true

	case "Query.vehicle_night_travel_record_by_pk":
		if e.complexity.Query.VehicleNightTravelRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_night_travel_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleNightTravelRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_night_travel_record_by_union_pk":
		if e.complexity.Query.VehicleNightTravelRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_night_travel_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleNightTravelRecordByUnionPk(childComplexity, args["record_id"].(string)), true

	case "Query.vehicle_stop_travel_record":
		if e.complexity.Query.VehicleStopTravelRecord == nil {
			break
		}

		args, err := ec.field_Query_vehicle_stop_travel_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleStopTravelRecord(childComplexity, args["distinct_on"].([]model.VehicleStopTravelRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleStopTravelRecordOrderBy), args["where"].(*model.VehicleStopTravelRecordBoolExp)), true

	case "Query.vehicle_stop_travel_record_aggregate":
		if e.complexity.Query.VehicleStopTravelRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_stop_travel_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleStopTravelRecordAggregate(childComplexity, args["distinct_on"].([]model.VehicleStopTravelRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleStopTravelRecordOrderBy), args["where"].(*model.VehicleStopTravelRecordBoolExp)), true

	case "Query.vehicle_stop_travel_record_by_pk":
		if e.complexity.Query.VehicleStopTravelRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_stop_travel_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleStopTravelRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_stop_travel_record_by_union_pk":
		if e.complexity.Query.VehicleStopTravelRecordByUnionPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_stop_travel_record_by_union_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleStopTravelRecordByUnionPk(childComplexity, args["record_id"].(string)), true

	case "VehicleNightTravelRecord.cause":
		if e.complexity.VehicleNightTravelRecord.Cause == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.Cause(childComplexity), true

	case "VehicleNightTravelRecord.create_at":
		if e.complexity.VehicleNightTravelRecord.CreateAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.CreateAt(childComplexity), true

	case "VehicleNightTravelRecord.create_by":
		if e.complexity.VehicleNightTravelRecord.CreateBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.CreateBy(childComplexity), true

	case "VehicleNightTravelRecord.delete_at":
		if e.complexity.VehicleNightTravelRecord.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.DeleteAt(childComplexity), true

	case "VehicleNightTravelRecord.delete_by":
		if e.complexity.VehicleNightTravelRecord.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.DeleteBy(childComplexity), true

	case "VehicleNightTravelRecord.enterprise_id":
		if e.complexity.VehicleNightTravelRecord.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.EnterpriseID(childComplexity), true

	case "VehicleNightTravelRecord.id":
		if e.complexity.VehicleNightTravelRecord.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.ID(childComplexity), true

	case "VehicleNightTravelRecord.is_delete":
		if e.complexity.VehicleNightTravelRecord.IsDelete == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.IsDelete(childComplexity), true

	case "VehicleNightTravelRecord.record_end_time":
		if e.complexity.VehicleNightTravelRecord.RecordEndTime == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.RecordEndTime(childComplexity), true

	case "VehicleNightTravelRecord.record_id":
		if e.complexity.VehicleNightTravelRecord.RecordID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.RecordID(childComplexity), true

	case "VehicleNightTravelRecord.record_start_time":
		if e.complexity.VehicleNightTravelRecord.RecordStartTime == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.RecordStartTime(childComplexity), true

	case "VehicleNightTravelRecord.remark":
		if e.complexity.VehicleNightTravelRecord.Remark == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.Remark(childComplexity), true

	case "VehicleNightTravelRecord.route":
		if e.complexity.VehicleNightTravelRecord.Route == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.Route(childComplexity), true

	case "VehicleNightTravelRecord.service_type":
		if e.complexity.VehicleNightTravelRecord.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.ServiceType(childComplexity), true

	case "VehicleNightTravelRecord.sprg_id":
		if e.complexity.VehicleNightTravelRecord.SprgID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.SprgID(childComplexity), true

	case "VehicleNightTravelRecord.status":
		if e.complexity.VehicleNightTravelRecord.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.Status(childComplexity), true

	case "VehicleNightTravelRecord.update_at":
		if e.complexity.VehicleNightTravelRecord.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.UpdateAt(childComplexity), true

	case "VehicleNightTravelRecord.update_by":
		if e.complexity.VehicleNightTravelRecord.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.UpdateBy(childComplexity), true

	case "VehicleNightTravelRecord.vehicle_id":
		if e.complexity.VehicleNightTravelRecord.VehicleID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.VehicleID(childComplexity), true

	case "VehicleNightTravelRecord.vehicle_type":
		if e.complexity.VehicleNightTravelRecord.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecord.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordAggregate.aggregate":
		if e.complexity.VehicleNightTravelRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregate.Aggregate(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.avg":
		if e.complexity.VehicleNightTravelRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.Avg(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.count":
		if e.complexity.VehicleNightTravelRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.Count(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.max":
		if e.complexity.VehicleNightTravelRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.Max(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.min":
		if e.complexity.VehicleNightTravelRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.Min(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.stddev":
		if e.complexity.VehicleNightTravelRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.Stddev(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.stddev_pop":
		if e.complexity.VehicleNightTravelRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.StddevPop(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.stddev_samp":
		if e.complexity.VehicleNightTravelRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.StddevSamp(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.sum":
		if e.complexity.VehicleNightTravelRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.Sum(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.var_pop":
		if e.complexity.VehicleNightTravelRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.VarPop(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.var_samp":
		if e.complexity.VehicleNightTravelRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.VarSamp(childComplexity), true

	case "VehicleNightTravelRecordAggregateFields.variance":
		if e.complexity.VehicleNightTravelRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAggregateFields.Variance(childComplexity), true

	case "VehicleNightTravelRecordAvgFields.id":
		if e.complexity.VehicleNightTravelRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAvgFields.ID(childComplexity), true

	case "VehicleNightTravelRecordAvgFields.service_type":
		if e.complexity.VehicleNightTravelRecordAvgFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAvgFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordAvgFields.status":
		if e.complexity.VehicleNightTravelRecordAvgFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAvgFields.Status(childComplexity), true

	case "VehicleNightTravelRecordAvgFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordAvgFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordAvgFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.cause":
		if e.complexity.VehicleNightTravelRecordMaxFields.Cause == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.Cause(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.create_at":
		if e.complexity.VehicleNightTravelRecordMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.CreateAt(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.create_by":
		if e.complexity.VehicleNightTravelRecordMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.CreateBy(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.delete_at":
		if e.complexity.VehicleNightTravelRecordMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.DeleteAt(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.delete_by":
		if e.complexity.VehicleNightTravelRecordMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.DeleteBy(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.enterprise_id":
		if e.complexity.VehicleNightTravelRecordMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.EnterpriseID(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.id":
		if e.complexity.VehicleNightTravelRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.ID(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.is_delete":
		if e.complexity.VehicleNightTravelRecordMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.IsDelete(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.record_end_time":
		if e.complexity.VehicleNightTravelRecordMaxFields.RecordEndTime == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.RecordEndTime(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.record_id":
		if e.complexity.VehicleNightTravelRecordMaxFields.RecordID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.RecordID(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.record_start_time":
		if e.complexity.VehicleNightTravelRecordMaxFields.RecordStartTime == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.RecordStartTime(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.remark":
		if e.complexity.VehicleNightTravelRecordMaxFields.Remark == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.Remark(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.route":
		if e.complexity.VehicleNightTravelRecordMaxFields.Route == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.Route(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.service_type":
		if e.complexity.VehicleNightTravelRecordMaxFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.sprg_id":
		if e.complexity.VehicleNightTravelRecordMaxFields.SprgID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.SprgID(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.status":
		if e.complexity.VehicleNightTravelRecordMaxFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.Status(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.update_at":
		if e.complexity.VehicleNightTravelRecordMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.UpdateAt(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.update_by":
		if e.complexity.VehicleNightTravelRecordMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.UpdateBy(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.vehicle_id":
		if e.complexity.VehicleNightTravelRecordMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.VehicleID(childComplexity), true

	case "VehicleNightTravelRecordMaxFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordMaxFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMaxFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordMinFields.cause":
		if e.complexity.VehicleNightTravelRecordMinFields.Cause == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.Cause(childComplexity), true

	case "VehicleNightTravelRecordMinFields.create_at":
		if e.complexity.VehicleNightTravelRecordMinFields.CreateAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.CreateAt(childComplexity), true

	case "VehicleNightTravelRecordMinFields.create_by":
		if e.complexity.VehicleNightTravelRecordMinFields.CreateBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.CreateBy(childComplexity), true

	case "VehicleNightTravelRecordMinFields.delete_at":
		if e.complexity.VehicleNightTravelRecordMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.DeleteAt(childComplexity), true

	case "VehicleNightTravelRecordMinFields.delete_by":
		if e.complexity.VehicleNightTravelRecordMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.DeleteBy(childComplexity), true

	case "VehicleNightTravelRecordMinFields.enterprise_id":
		if e.complexity.VehicleNightTravelRecordMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.EnterpriseID(childComplexity), true

	case "VehicleNightTravelRecordMinFields.id":
		if e.complexity.VehicleNightTravelRecordMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.ID(childComplexity), true

	case "VehicleNightTravelRecordMinFields.is_delete":
		if e.complexity.VehicleNightTravelRecordMinFields.IsDelete == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.IsDelete(childComplexity), true

	case "VehicleNightTravelRecordMinFields.record_end_time":
		if e.complexity.VehicleNightTravelRecordMinFields.RecordEndTime == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.RecordEndTime(childComplexity), true

	case "VehicleNightTravelRecordMinFields.record_id":
		if e.complexity.VehicleNightTravelRecordMinFields.RecordID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.RecordID(childComplexity), true

	case "VehicleNightTravelRecordMinFields.record_start_time":
		if e.complexity.VehicleNightTravelRecordMinFields.RecordStartTime == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.RecordStartTime(childComplexity), true

	case "VehicleNightTravelRecordMinFields.remark":
		if e.complexity.VehicleNightTravelRecordMinFields.Remark == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.Remark(childComplexity), true

	case "VehicleNightTravelRecordMinFields.route":
		if e.complexity.VehicleNightTravelRecordMinFields.Route == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.Route(childComplexity), true

	case "VehicleNightTravelRecordMinFields.service_type":
		if e.complexity.VehicleNightTravelRecordMinFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordMinFields.sprg_id":
		if e.complexity.VehicleNightTravelRecordMinFields.SprgID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.SprgID(childComplexity), true

	case "VehicleNightTravelRecordMinFields.status":
		if e.complexity.VehicleNightTravelRecordMinFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.Status(childComplexity), true

	case "VehicleNightTravelRecordMinFields.update_at":
		if e.complexity.VehicleNightTravelRecordMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.UpdateAt(childComplexity), true

	case "VehicleNightTravelRecordMinFields.update_by":
		if e.complexity.VehicleNightTravelRecordMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.UpdateBy(childComplexity), true

	case "VehicleNightTravelRecordMinFields.vehicle_id":
		if e.complexity.VehicleNightTravelRecordMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.VehicleID(childComplexity), true

	case "VehicleNightTravelRecordMinFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordMinFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMinFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordMutationResponse.affected_rows":
		if e.complexity.VehicleNightTravelRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMutationResponse.AffectedRows(childComplexity), true

	case "VehicleNightTravelRecordMutationResponse.returning":
		if e.complexity.VehicleNightTravelRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordMutationResponse.Returning(childComplexity), true

	case "VehicleNightTravelRecordStddevFields.id":
		if e.complexity.VehicleNightTravelRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevFields.ID(childComplexity), true

	case "VehicleNightTravelRecordStddevFields.service_type":
		if e.complexity.VehicleNightTravelRecordStddevFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordStddevFields.status":
		if e.complexity.VehicleNightTravelRecordStddevFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevFields.Status(childComplexity), true

	case "VehicleNightTravelRecordStddevFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordStddevFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordStddevPopFields.id":
		if e.complexity.VehicleNightTravelRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevPopFields.ID(childComplexity), true

	case "VehicleNightTravelRecordStddevPopFields.service_type":
		if e.complexity.VehicleNightTravelRecordStddevPopFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevPopFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordStddevPopFields.status":
		if e.complexity.VehicleNightTravelRecordStddevPopFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevPopFields.Status(childComplexity), true

	case "VehicleNightTravelRecordStddevPopFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordStddevPopFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevPopFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordStddevSampFields.id":
		if e.complexity.VehicleNightTravelRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevSampFields.ID(childComplexity), true

	case "VehicleNightTravelRecordStddevSampFields.service_type":
		if e.complexity.VehicleNightTravelRecordStddevSampFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevSampFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordStddevSampFields.status":
		if e.complexity.VehicleNightTravelRecordStddevSampFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevSampFields.Status(childComplexity), true

	case "VehicleNightTravelRecordStddevSampFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordStddevSampFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordStddevSampFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordSumFields.id":
		if e.complexity.VehicleNightTravelRecordSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordSumFields.ID(childComplexity), true

	case "VehicleNightTravelRecordSumFields.service_type":
		if e.complexity.VehicleNightTravelRecordSumFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordSumFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordSumFields.status":
		if e.complexity.VehicleNightTravelRecordSumFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordSumFields.Status(childComplexity), true

	case "VehicleNightTravelRecordSumFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordSumFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordSumFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordVarPopFields.id":
		if e.complexity.VehicleNightTravelRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarPopFields.ID(childComplexity), true

	case "VehicleNightTravelRecordVarPopFields.service_type":
		if e.complexity.VehicleNightTravelRecordVarPopFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarPopFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordVarPopFields.status":
		if e.complexity.VehicleNightTravelRecordVarPopFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarPopFields.Status(childComplexity), true

	case "VehicleNightTravelRecordVarPopFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordVarPopFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarPopFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordVarSampFields.id":
		if e.complexity.VehicleNightTravelRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarSampFields.ID(childComplexity), true

	case "VehicleNightTravelRecordVarSampFields.service_type":
		if e.complexity.VehicleNightTravelRecordVarSampFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarSampFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordVarSampFields.status":
		if e.complexity.VehicleNightTravelRecordVarSampFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarSampFields.Status(childComplexity), true

	case "VehicleNightTravelRecordVarSampFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordVarSampFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarSampFields.VehicleType(childComplexity), true

	case "VehicleNightTravelRecordVarianceFields.id":
		if e.complexity.VehicleNightTravelRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarianceFields.ID(childComplexity), true

	case "VehicleNightTravelRecordVarianceFields.service_type":
		if e.complexity.VehicleNightTravelRecordVarianceFields.ServiceType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarianceFields.ServiceType(childComplexity), true

	case "VehicleNightTravelRecordVarianceFields.status":
		if e.complexity.VehicleNightTravelRecordVarianceFields.Status == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarianceFields.Status(childComplexity), true

	case "VehicleNightTravelRecordVarianceFields.vehicle_type":
		if e.complexity.VehicleNightTravelRecordVarianceFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleNightTravelRecordVarianceFields.VehicleType(childComplexity), true

	case "VehicleStopTravelRecord.bill_id":
		if e.complexity.VehicleStopTravelRecord.BillID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.BillID(childComplexity), true

	case "VehicleStopTravelRecord.cause":
		if e.complexity.VehicleStopTravelRecord.Cause == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.Cause(childComplexity), true

	case "VehicleStopTravelRecord.create_at":
		if e.complexity.VehicleStopTravelRecord.CreateAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.CreateAt(childComplexity), true

	case "VehicleStopTravelRecord.create_by":
		if e.complexity.VehicleStopTravelRecord.CreateBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.CreateBy(childComplexity), true

	case "VehicleStopTravelRecord.delete_at":
		if e.complexity.VehicleStopTravelRecord.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.DeleteAt(childComplexity), true

	case "VehicleStopTravelRecord.delete_by":
		if e.complexity.VehicleStopTravelRecord.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.DeleteBy(childComplexity), true

	case "VehicleStopTravelRecord.effect_end_time":
		if e.complexity.VehicleStopTravelRecord.EffectEndTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.EffectEndTime(childComplexity), true

	case "VehicleStopTravelRecord.effect_start_time":
		if e.complexity.VehicleStopTravelRecord.EffectStartTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.EffectStartTime(childComplexity), true

	case "VehicleStopTravelRecord.id":
		if e.complexity.VehicleStopTravelRecord.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.ID(childComplexity), true

	case "VehicleStopTravelRecord.is_delete":
		if e.complexity.VehicleStopTravelRecord.IsDelete == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.IsDelete(childComplexity), true

	case "VehicleStopTravelRecord.is_effect":
		if e.complexity.VehicleStopTravelRecord.IsEffect == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.IsEffect(childComplexity), true

	case "VehicleStopTravelRecord.record_end_time":
		if e.complexity.VehicleStopTravelRecord.RecordEndTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.RecordEndTime(childComplexity), true

	case "VehicleStopTravelRecord.record_id":
		if e.complexity.VehicleStopTravelRecord.RecordID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.RecordID(childComplexity), true

	case "VehicleStopTravelRecord.record_start_time":
		if e.complexity.VehicleStopTravelRecord.RecordStartTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.RecordStartTime(childComplexity), true

	case "VehicleStopTravelRecord.record_user_id":
		if e.complexity.VehicleStopTravelRecord.RecordUserID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.RecordUserID(childComplexity), true

	case "VehicleStopTravelRecord.update_at":
		if e.complexity.VehicleStopTravelRecord.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.UpdateAt(childComplexity), true

	case "VehicleStopTravelRecord.update_by":
		if e.complexity.VehicleStopTravelRecord.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.UpdateBy(childComplexity), true

	case "VehicleStopTravelRecord.vehicle_id":
		if e.complexity.VehicleStopTravelRecord.VehicleID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecord.VehicleID(childComplexity), true

	case "VehicleStopTravelRecordAggregate.aggregate":
		if e.complexity.VehicleStopTravelRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregate.Aggregate(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.avg":
		if e.complexity.VehicleStopTravelRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.Avg(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.count":
		if e.complexity.VehicleStopTravelRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.Count(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.max":
		if e.complexity.VehicleStopTravelRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.Max(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.min":
		if e.complexity.VehicleStopTravelRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.Min(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.stddev":
		if e.complexity.VehicleStopTravelRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.Stddev(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.stddev_pop":
		if e.complexity.VehicleStopTravelRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.StddevPop(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.stddev_samp":
		if e.complexity.VehicleStopTravelRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.StddevSamp(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.sum":
		if e.complexity.VehicleStopTravelRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.Sum(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.var_pop":
		if e.complexity.VehicleStopTravelRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.VarPop(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.var_samp":
		if e.complexity.VehicleStopTravelRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.VarSamp(childComplexity), true

	case "VehicleStopTravelRecordAggregateFields.variance":
		if e.complexity.VehicleStopTravelRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAggregateFields.Variance(childComplexity), true

	case "VehicleStopTravelRecordAvgFields.id":
		if e.complexity.VehicleStopTravelRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordAvgFields.ID(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.bill_id":
		if e.complexity.VehicleStopTravelRecordMaxFields.BillID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.BillID(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.cause":
		if e.complexity.VehicleStopTravelRecordMaxFields.Cause == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.Cause(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.create_at":
		if e.complexity.VehicleStopTravelRecordMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.CreateAt(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.create_by":
		if e.complexity.VehicleStopTravelRecordMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.CreateBy(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.delete_at":
		if e.complexity.VehicleStopTravelRecordMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.DeleteAt(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.delete_by":
		if e.complexity.VehicleStopTravelRecordMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.DeleteBy(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.effect_end_time":
		if e.complexity.VehicleStopTravelRecordMaxFields.EffectEndTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.EffectEndTime(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.effect_start_time":
		if e.complexity.VehicleStopTravelRecordMaxFields.EffectStartTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.EffectStartTime(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.id":
		if e.complexity.VehicleStopTravelRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.ID(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.is_delete":
		if e.complexity.VehicleStopTravelRecordMaxFields.IsDelete == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.IsDelete(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.is_effect":
		if e.complexity.VehicleStopTravelRecordMaxFields.IsEffect == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.IsEffect(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.record_end_time":
		if e.complexity.VehicleStopTravelRecordMaxFields.RecordEndTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.RecordEndTime(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.record_id":
		if e.complexity.VehicleStopTravelRecordMaxFields.RecordID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.RecordID(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.record_start_time":
		if e.complexity.VehicleStopTravelRecordMaxFields.RecordStartTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.RecordStartTime(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.record_user_id":
		if e.complexity.VehicleStopTravelRecordMaxFields.RecordUserID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.RecordUserID(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.update_at":
		if e.complexity.VehicleStopTravelRecordMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.UpdateAt(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.update_by":
		if e.complexity.VehicleStopTravelRecordMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.UpdateBy(childComplexity), true

	case "VehicleStopTravelRecordMaxFields.vehicle_id":
		if e.complexity.VehicleStopTravelRecordMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMaxFields.VehicleID(childComplexity), true

	case "VehicleStopTravelRecordMinFields.bill_id":
		if e.complexity.VehicleStopTravelRecordMinFields.BillID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.BillID(childComplexity), true

	case "VehicleStopTravelRecordMinFields.cause":
		if e.complexity.VehicleStopTravelRecordMinFields.Cause == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.Cause(childComplexity), true

	case "VehicleStopTravelRecordMinFields.create_at":
		if e.complexity.VehicleStopTravelRecordMinFields.CreateAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.CreateAt(childComplexity), true

	case "VehicleStopTravelRecordMinFields.create_by":
		if e.complexity.VehicleStopTravelRecordMinFields.CreateBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.CreateBy(childComplexity), true

	case "VehicleStopTravelRecordMinFields.delete_at":
		if e.complexity.VehicleStopTravelRecordMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.DeleteAt(childComplexity), true

	case "VehicleStopTravelRecordMinFields.delete_by":
		if e.complexity.VehicleStopTravelRecordMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.DeleteBy(childComplexity), true

	case "VehicleStopTravelRecordMinFields.effect_end_time":
		if e.complexity.VehicleStopTravelRecordMinFields.EffectEndTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.EffectEndTime(childComplexity), true

	case "VehicleStopTravelRecordMinFields.effect_start_time":
		if e.complexity.VehicleStopTravelRecordMinFields.EffectStartTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.EffectStartTime(childComplexity), true

	case "VehicleStopTravelRecordMinFields.id":
		if e.complexity.VehicleStopTravelRecordMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.ID(childComplexity), true

	case "VehicleStopTravelRecordMinFields.is_delete":
		if e.complexity.VehicleStopTravelRecordMinFields.IsDelete == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.IsDelete(childComplexity), true

	case "VehicleStopTravelRecordMinFields.is_effect":
		if e.complexity.VehicleStopTravelRecordMinFields.IsEffect == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.IsEffect(childComplexity), true

	case "VehicleStopTravelRecordMinFields.record_end_time":
		if e.complexity.VehicleStopTravelRecordMinFields.RecordEndTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.RecordEndTime(childComplexity), true

	case "VehicleStopTravelRecordMinFields.record_id":
		if e.complexity.VehicleStopTravelRecordMinFields.RecordID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.RecordID(childComplexity), true

	case "VehicleStopTravelRecordMinFields.record_start_time":
		if e.complexity.VehicleStopTravelRecordMinFields.RecordStartTime == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.RecordStartTime(childComplexity), true

	case "VehicleStopTravelRecordMinFields.record_user_id":
		if e.complexity.VehicleStopTravelRecordMinFields.RecordUserID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.RecordUserID(childComplexity), true

	case "VehicleStopTravelRecordMinFields.update_at":
		if e.complexity.VehicleStopTravelRecordMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.UpdateAt(childComplexity), true

	case "VehicleStopTravelRecordMinFields.update_by":
		if e.complexity.VehicleStopTravelRecordMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.UpdateBy(childComplexity), true

	case "VehicleStopTravelRecordMinFields.vehicle_id":
		if e.complexity.VehicleStopTravelRecordMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMinFields.VehicleID(childComplexity), true

	case "VehicleStopTravelRecordMutationResponse.affected_rows":
		if e.complexity.VehicleStopTravelRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMutationResponse.AffectedRows(childComplexity), true

	case "VehicleStopTravelRecordMutationResponse.returning":
		if e.complexity.VehicleStopTravelRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordMutationResponse.Returning(childComplexity), true

	case "VehicleStopTravelRecordStddevFields.id":
		if e.complexity.VehicleStopTravelRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordStddevFields.ID(childComplexity), true

	case "VehicleStopTravelRecordStddevPopFields.id":
		if e.complexity.VehicleStopTravelRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordStddevPopFields.ID(childComplexity), true

	case "VehicleStopTravelRecordStddevSampFields.id":
		if e.complexity.VehicleStopTravelRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordStddevSampFields.ID(childComplexity), true

	case "VehicleStopTravelRecordSumFields.id":
		if e.complexity.VehicleStopTravelRecordSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordSumFields.ID(childComplexity), true

	case "VehicleStopTravelRecordVarPopFields.id":
		if e.complexity.VehicleStopTravelRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordVarPopFields.ID(childComplexity), true

	case "VehicleStopTravelRecordVarSampFields.id":
		if e.complexity.VehicleStopTravelRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordVarSampFields.ID(childComplexity), true

	case "VehicleStopTravelRecordVarianceFields.id":
		if e.complexity.VehicleStopTravelRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleStopTravelRecordVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/control_line.graphqls", Input: `"""
管控路线
"""
type ControlLine {
	"""
	ID
	"""
	id: Bigint!
	"""
	管制路线ID
	"""
	control_line_id: String!
	"""
	路线名称
	"""
	line_name: String
	"""
	路线类型(1路线 2区域)
	"""
	line_type: Int
	"""
	区域ID
	"""
	district_id: String
	"""
	管控等级
	"""
	control_level: Int
	"""
	申请原因
	"""
	apply_reason: String
	"""
	审核状态
	"""
	check_status: Int
	"""
	审核时间
	"""
	check_time: Timestamptz
	"""
	审核人ID
	"""
	check_user_id: String
	"""
	退回原因
	"""
	reject_reason: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	线路数据
	"""
	gis_data: String
}
"""
aggregated selection of "control_line"
"""
type ControlLineAggregate {
	aggregate: ControlLineAggregateFields
}
"""
aggregate fields of "control_line"
"""
type ControlLineAggregateFields {
	avg: ControlLineAvgFields
	count: Int
	max: ControlLineMaxFields
	min: ControlLineMinFields
	stddev: ControlLineStddevFields
	stddev_pop: ControlLineStddevPopFields
	stddev_samp: ControlLineStddevSampFields
	sum: ControlLineSumFields
	var_pop: ControlLineVarPopFields
	var_samp: ControlLineVarSampFields
	variance: ControlLineVarianceFields
}
"""
aggregate avg on columns of table "control_line"
"""
type ControlLineAvgFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate max on columns of table "control_line"
"""
type ControlLineMaxFields {
	id: Bigint
	control_line_id: String
	line_name: String
	line_type: Int
	district_id: String
	control_level: Int
	apply_reason: String
	check_status: Int
	check_time: Timestamptz
	check_user_id: String
	reject_reason: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
aggregate min on columns of table "control_line"
"""
type ControlLineMinFields {
	id: Bigint
	control_line_id: String
	line_name: String
	line_type: Int
	district_id: String
	control_level: Int
	apply_reason: String
	check_status: Int
	check_time: Timestamptz
	check_user_id: String
	reject_reason: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
aggregate stddev on columns of table "control_line"
"""
type ControlLineStddevFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate stddev_pop on columns of table "control_line"
"""
type ControlLineStddevPopFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate stddev_samp on columns of table "control_line"
"""
type ControlLineStddevSampFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate sum on columns of table "control_line"
"""
type ControlLineSumFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate var_pop on columns of table "control_line"
"""
type ControlLineVarPopFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate var_samp on columns of table "control_line"
"""
type ControlLineVarSampFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate variance on columns of table "control_line"
"""
type ControlLineVarianceFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
response of any mutation on the table "control_line"
"""
type ControlLineMutationResponse {
	affected_rows: Int!
	returning: [ControlLine!]!
}
"""
ordering options when selecting data from "control_line"
"""
input ControlLineOrderBy {
	id: OrderBy
	control_line_id: OrderBy
	line_name: OrderBy
	line_type: OrderBy
	district_id: OrderBy
	control_level: OrderBy
	apply_reason: OrderBy
	check_status: OrderBy
	check_time: OrderBy
	check_user_id: OrderBy
	reject_reason: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	gis_data: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'control_line'.
"""
input ControlLineBoolExp {
	_and: [ControlLineBoolExp]
	_not: ControlLineBoolExp
	_or: [ControlLineBoolExp]
	id: BigintComparisonExp
	control_line_id: StringComparisonExp
	line_name: StringComparisonExp
	line_type: IntComparisonExp
	district_id: StringComparisonExp
	control_level: IntComparisonExp
	apply_reason: StringComparisonExp
	check_status: IntComparisonExp
	check_time: TimestamptzComparisonExp
	check_user_id: StringComparisonExp
	reject_reason: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	gis_data: StringComparisonExp
}
"""
input type for inserting data into table "control_line"
"""
input ControlLineInsertInput {
	line_name: String
	line_type: Int
	district_id: String
	control_level: Int
	apply_reason: String
	check_status: Int
	check_time: Timestamptz
	check_user_id: String
	reject_reason: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	gis_data: String
}
"""
input type for incrementing integer column in table "control_line"
"""
input ControlLineIncInput {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
input type for updating data in table "control_line"
"""
input ControlLineSetInput {
	id: Bigint
	control_line_id: String
	line_name: String
	line_type: Int
	district_id: String
	control_level: Int
	apply_reason: String
	check_status: Int
	check_time: Timestamptz
	check_user_id: String
	reject_reason: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
可选select
"""
enum ControlLineSelectColumn {
	"""
	ID
	"""
	id
	"""
	管制路线ID
	"""
	control_line_id
	"""
	路线名称
	"""
	line_name
	"""
	路线类型(1路线 2区域)
	"""
	line_type
	"""
	区域ID
	"""
	district_id
	"""
	管控等级
	"""
	control_level
	"""
	申请原因
	"""
	apply_reason
	"""
	审核状态
	"""
	check_status
	"""
	审核时间
	"""
	check_time
	"""
	审核人ID
	"""
	check_user_id
	"""
	退回原因
	"""
	reject_reason
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	线路数据
	"""
	gis_data
}
extend type Query {
	"""
	列表查询
	"""
	control_line(distinct_on: [ControlLineSelectColumn!], limit: Int, offset: Int, order_by: [ControlLineOrderBy!], where: ControlLineBoolExp): [ControlLine!]!
	"""
	聚合查询
	"""
	control_line_aggregate(distinct_on: [ControlLineSelectColumn!], limit: Int, offset: Int, order_by: [ControlLineOrderBy!], where: ControlLineBoolExp): ControlLineAggregate!
	"""
	主键查询
	"""
	control_line_by_pk(id: Bigint!): ControlLine!
	"""
	联合主键查询
	"""
	control_line_by_union_pk(control_line_id: String!): ControlLine!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_control_line(where: ControlLineBoolExp!): ControlLineMutationResponse
	"""
	根据主键删除记录
	"""
	delete_control_line_by_pk(id: Bigint!): ControlLine
	"""
	插入
	"""
	insert_control_line(objects: [ControlLineInsertInput!]!): ControlLineMutationResponse
	"""
	插入一条记录
	"""
	insert_control_line_one(objects: ControlLineInsertInput!): ControlLine
	"""
	更新
	"""
	update_control_line(_inc: ControlLineIncInput, _set: ControlLineSetInput, where: ControlLineBoolExp!): ControlLineMutationResponse
	"""
	根据主键更新
	"""
	update_control_line_by_pk(_inc: ControlLineIncInput, _set: ControlLineSetInput, id: Bigint!): ControlLine
	"""
	根据联合主键更新
	"""
	update_control_line_by_union_pk(_inc: ControlLineIncInput, _set: ControlLineSetInput, control_line_id: String!): ControlLine
	"""
	根据联合主键删除记录
	"""
	delete_control_line_by_union_pk(control_line_id: String!): ControlLine
}
`, BuiltIn: false},
	{Name: "graph/graphqls/control_line_time.graphqls", Input: `type ControlLineTime {
	"""
	ID
	"""
	id: Bigint!
	"""
	管控路线时间段表ID
	"""
	control_line_time_id: String!
	"""
	管控路线ID
	"""
	control_line_id: String!
	"""
	开始时间
	"""
	start_time: Timestamptz!
	"""
	结束时间
	"""
	end_time: Timestamptz!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "control_line_time"
"""
type ControlLineTimeAggregate {
	aggregate: ControlLineTimeAggregateFields
}
"""
aggregate fields of "control_line_time"
"""
type ControlLineTimeAggregateFields {
	avg: ControlLineTimeAvgFields
	count: Int
	max: ControlLineTimeMaxFields
	min: ControlLineTimeMinFields
	stddev: ControlLineTimeStddevFields
	stddev_pop: ControlLineTimeStddevPopFields
	stddev_samp: ControlLineTimeStddevSampFields
	sum: ControlLineTimeSumFields
	var_pop: ControlLineTimeVarPopFields
	var_samp: ControlLineTimeVarSampFields
	variance: ControlLineTimeVarianceFields
}
"""
aggregate avg on columns of table "control_line_time"
"""
type ControlLineTimeAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "control_line_time"
"""
type ControlLineTimeMaxFields {
	id: Bigint
	control_line_time_id: String
	control_line_id: String
	start_time: Timestamptz
	end_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "control_line_time"
"""
type ControlLineTimeMinFields {
	id: Bigint
	control_line_time_id: String
	control_line_id: String
	start_time: Timestamptz
	end_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "control_line_time"
"""
type ControlLineTimeStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "control_line_time"
"""
type ControlLineTimeStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "control_line_time"
"""
type ControlLineTimeStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "control_line_time"
"""
type ControlLineTimeSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "control_line_time"
"""
type ControlLineTimeVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "control_line_time"
"""
type ControlLineTimeVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "control_line_time"
"""
type ControlLineTimeVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "control_line_time"
"""
type ControlLineTimeMutationResponse {
	affected_rows: Int!
	returning: [ControlLineTime!]!
}
"""
ordering options when selecting data from "control_line_time"
"""
input ControlLineTimeOrderBy {
	id: OrderBy
	control_line_time_id: OrderBy
	control_line_id: OrderBy
	start_time: OrderBy
	end_time: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'control_line_time'.
"""
input ControlLineTimeBoolExp {
	_and: [ControlLineTimeBoolExp]
	_not: ControlLineTimeBoolExp
	_or: [ControlLineTimeBoolExp]
	id: BigintComparisonExp
	control_line_time_id: StringComparisonExp
	control_line_id: StringComparisonExp
	start_time: TimestamptzComparisonExp
	end_time: TimestamptzComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "control_line_time"
"""
input ControlLineTimeInsertInput {
	control_line_id: String!
	start_time: Timestamptz!
	end_time: Timestamptz!
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "control_line_time"
"""
input ControlLineTimeIncInput {
	id: Bigint
}
"""
input type for updating data in table "control_line_time"
"""
input ControlLineTimeSetInput {
	id: Bigint
	control_line_time_id: String
	control_line_id: String
	start_time: Timestamptz
	end_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum ControlLineTimeSelectColumn {
	"""
	ID
	"""
	id
	"""
	管控路线时间段表ID
	"""
	control_line_time_id
	"""
	管控路线ID
	"""
	control_line_id
	"""
	开始时间
	"""
	start_time
	"""
	结束时间
	"""
	end_time
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	control_line_time(distinct_on: [ControlLineTimeSelectColumn!], limit: Int, offset: Int, order_by: [ControlLineTimeOrderBy!], where: ControlLineTimeBoolExp): [ControlLineTime!]!
	"""
	聚合查询
	"""
	control_line_time_aggregate(distinct_on: [ControlLineTimeSelectColumn!], limit: Int, offset: Int, order_by: [ControlLineTimeOrderBy!], where: ControlLineTimeBoolExp): ControlLineTimeAggregate!
	"""
	主键查询
	"""
	control_line_time_by_pk(id: Bigint!): ControlLineTime!
	"""
	联合主键查询
	"""
	control_line_time_by_union_pk(control_line_time_id: String!): ControlLineTime!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_control_line_time(where: ControlLineTimeBoolExp!): ControlLineTimeMutationResponse
	"""
	根据主键删除记录
	"""
	delete_control_line_time_by_pk(id: Bigint!): ControlLineTime
	"""
	插入
	"""
	insert_control_line_time(objects: [ControlLineTimeInsertInput!]!): ControlLineTimeMutationResponse
	"""
	插入一条记录
	"""
	insert_control_line_time_one(objects: ControlLineTimeInsertInput!): ControlLineTime
	"""
	更新
	"""
	update_control_line_time(_inc: ControlLineTimeIncInput, _set: ControlLineTimeSetInput, where: ControlLineTimeBoolExp!): ControlLineTimeMutationResponse
	"""
	根据主键更新
	"""
	update_control_line_time_by_pk(_inc: ControlLineTimeIncInput, _set: ControlLineTimeSetInput, id: Bigint!): ControlLineTime
	"""
	根据联合主键更新
	"""
	update_control_line_time_by_union_pk(_inc: ControlLineTimeIncInput, _set: ControlLineTimeSetInput, control_line_time_id: String!): ControlLineTime
	"""
	根据联合主键删除记录
	"""
	delete_control_line_time_by_union_pk(control_line_time_id: String!): ControlLineTime
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ecd_file_check_his.graphqls", Input: `"""
工程审批记录
"""
type EcdFileCheckHis {
	"""
	ID
	"""
	id: Bigint!
	"""
	工程审批记录ID
	"""
	his_id: String!
	"""
	报备主表ID
	"""
	file_main_id: String!
	"""
	操作人ID
	"""
	user_id: String!
	"""
	操作类型
	"""
	oper_type: Int!
	"""
	审批状态 0审核通过 1退回
	"""
	check_status: Int!
	"""
	接收时间
	"""
	rec_time: Timestamptz
	"""
	操作时间
	"""
	oper_time: Timestamptz
	"""
	意见
	"""
	suggest: String
	"""
	备注
	"""
	remark: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean
}
"""
aggregated selection of "ecd_file_check_his"
"""
type EcdFileCheckHisAggregate {
	aggregate: EcdFileCheckHisAggregateFields
}
"""
aggregate fields of "ecd_file_check_his"
"""
type EcdFileCheckHisAggregateFields {
	avg: EcdFileCheckHisAvgFields
	count: Int
	max: EcdFileCheckHisMaxFields
	min: EcdFileCheckHisMinFields
	stddev: EcdFileCheckHisStddevFields
	stddev_pop: EcdFileCheckHisStddevPopFields
	stddev_samp: EcdFileCheckHisStddevSampFields
	sum: EcdFileCheckHisSumFields
	var_pop: EcdFileCheckHisVarPopFields
	var_samp: EcdFileCheckHisVarSampFields
	variance: EcdFileCheckHisVarianceFields
}
"""
aggregate avg on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisAvgFields {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
aggregate max on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisMaxFields {
	id: Bigint
	his_id: String
	file_main_id: String
	user_id: String
	oper_type: Int
	check_status: Int
	rec_time: Timestamptz
	oper_time: Timestamptz
	suggest: String
	remark: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisMinFields {
	id: Bigint
	his_id: String
	file_main_id: String
	user_id: String
	oper_type: Int
	check_status: Int
	rec_time: Timestamptz
	oper_time: Timestamptz
	suggest: String
	remark: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisStddevFields {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
aggregate stddev_pop on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisStddevPopFields {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
aggregate stddev_samp on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisStddevSampFields {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
aggregate sum on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisSumFields {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
aggregate var_pop on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisVarPopFields {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
aggregate var_samp on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisVarSampFields {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
aggregate variance on columns of table "ecd_file_check_his"
"""
type EcdFileCheckHisVarianceFields {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
response of any mutation on the table "ecd_file_check_his"
"""
type EcdFileCheckHisMutationResponse {
	affected_rows: Int!
	returning: [EcdFileCheckHis!]!
}
"""
ordering options when selecting data from "ecd_file_check_his"
"""
input EcdFileCheckHisOrderBy {
	id: OrderBy
	his_id: OrderBy
	file_main_id: OrderBy
	user_id: OrderBy
	oper_type: OrderBy
	check_status: OrderBy
	rec_time: OrderBy
	oper_time: OrderBy
	suggest: OrderBy
	remark: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_check_his'.
"""
input EcdFileCheckHisBoolExp {
	_and: [EcdFileCheckHisBoolExp]
	_not: EcdFileCheckHisBoolExp
	_or: [EcdFileCheckHisBoolExp]
	id: BigintComparisonExp
	his_id: StringComparisonExp
	file_main_id: StringComparisonExp
	user_id: StringComparisonExp
	oper_type: IntComparisonExp
	check_status: IntComparisonExp
	rec_time: TimestamptzComparisonExp
	oper_time: TimestamptzComparisonExp
	suggest: StringComparisonExp
	remark: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "ecd_file_check_his"
"""
input EcdFileCheckHisInsertInput {
	file_main_id: String!
	user_id: String!
	oper_type: Int!
	check_status: Int!
	rec_time: Timestamptz
	oper_time: Timestamptz
	suggest: String
	remark: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
input type for incrementing integer column in table "ecd_file_check_his"
"""
input EcdFileCheckHisIncInput {
	id: Bigint
	oper_type: Int
	check_status: Int
}
"""
input type for updating data in table "ecd_file_check_his"
"""
input EcdFileCheckHisSetInput {
	id: Bigint
	his_id: String
	file_main_id: String
	user_id: String
	oper_type: Int
	check_status: Int
	rec_time: Timestamptz
	oper_time: Timestamptz
	suggest: String
	remark: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EcdFileCheckHisSelectColumn {
	"""
	ID
	"""
	id
	"""
	工程审批记录ID
	"""
	his_id
	"""
	报备主表ID
	"""
	file_main_id
	"""
	操作人ID
	"""
	user_id
	"""
	操作类型
	"""
	oper_type
	"""
	审批状态 0审核通过 1退回
	"""
	check_status
	"""
	接收时间
	"""
	rec_time
	"""
	操作时间
	"""
	oper_time
	"""
	意见
	"""
	suggest
	"""
	备注
	"""
	remark
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	ecd_file_check_his(distinct_on: [EcdFileCheckHisSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileCheckHisOrderBy!], where: EcdFileCheckHisBoolExp): [EcdFileCheckHis!]!
	"""
	聚合查询
	"""
	ecd_file_check_his_aggregate(distinct_on: [EcdFileCheckHisSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileCheckHisOrderBy!], where: EcdFileCheckHisBoolExp): EcdFileCheckHisAggregate!
	"""
	主键查询
	"""
	ecd_file_check_his_by_pk(id: Bigint!): EcdFileCheckHis!
	"""
	联合主键查询
	"""
	ecd_file_check_his_by_union_pk(his_id: String!): EcdFileCheckHis!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ecd_file_check_his(where: EcdFileCheckHisBoolExp!): EcdFileCheckHisMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ecd_file_check_his_by_pk(id: Bigint!): EcdFileCheckHis
	"""
	插入
	"""
	insert_ecd_file_check_his(objects: [EcdFileCheckHisInsertInput!]!): EcdFileCheckHisMutationResponse
	"""
	插入一条记录
	"""
	insert_ecd_file_check_his_one(objects: EcdFileCheckHisInsertInput!): EcdFileCheckHis
	"""
	更新
	"""
	update_ecd_file_check_his(_inc: EcdFileCheckHisIncInput, _set: EcdFileCheckHisSetInput, where: EcdFileCheckHisBoolExp!): EcdFileCheckHisMutationResponse
	"""
	根据主键更新
	"""
	update_ecd_file_check_his_by_pk(_inc: EcdFileCheckHisIncInput, _set: EcdFileCheckHisSetInput, id: Bigint!): EcdFileCheckHis
	"""
	根据联合主键更新
	"""
	update_ecd_file_check_his_by_union_pk(_inc: EcdFileCheckHisIncInput, _set: EcdFileCheckHisSetInput, his_id: String!): EcdFileCheckHis
	"""
	根据联合主键删除记录
	"""
	delete_ecd_file_check_his_by_union_pk(his_id: String!): EcdFileCheckHis
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ecd_file_district.graphqls", Input: `"""
工程跨区表
"""
type EcdFileDistrict {
	"""
	ID
	"""
	id: Bigint!
	"""
	工程跨区表ID
	"""
	file_district_id: String!
	"""
	报备主表ID
	"""
	file_main_id: String!
	"""
	区域ID
	"""
	district_id: String!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "ecd_file_district"
"""
type EcdFileDistrictAggregate {
	aggregate: EcdFileDistrictAggregateFields
}
"""
aggregate fields of "ecd_file_district"
"""
type EcdFileDistrictAggregateFields {
	avg: EcdFileDistrictAvgFields
	count: Int
	max: EcdFileDistrictMaxFields
	min: EcdFileDistrictMinFields
	stddev: EcdFileDistrictStddevFields
	stddev_pop: EcdFileDistrictStddevPopFields
	stddev_samp: EcdFileDistrictStddevSampFields
	sum: EcdFileDistrictSumFields
	var_pop: EcdFileDistrictVarPopFields
	var_samp: EcdFileDistrictVarSampFields
	variance: EcdFileDistrictVarianceFields
}
"""
aggregate avg on columns of table "ecd_file_district"
"""
type EcdFileDistrictAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "ecd_file_district"
"""
type EcdFileDistrictMaxFields {
	id: Bigint
	file_district_id: String
	file_main_id: String
	district_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "ecd_file_district"
"""
type EcdFileDistrictMinFields {
	id: Bigint
	file_district_id: String
	file_main_id: String
	district_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "ecd_file_district"
"""
type EcdFileDistrictStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "ecd_file_district"
"""
type EcdFileDistrictStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "ecd_file_district"
"""
type EcdFileDistrictStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "ecd_file_district"
"""
type EcdFileDistrictSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "ecd_file_district"
"""
type EcdFileDistrictVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "ecd_file_district"
"""
type EcdFileDistrictVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "ecd_file_district"
"""
type EcdFileDistrictVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "ecd_file_district"
"""
type EcdFileDistrictMutationResponse {
	affected_rows: Int!
	returning: [EcdFileDistrict!]!
}
"""
ordering options when selecting data from "ecd_file_district"
"""
input EcdFileDistrictOrderBy {
	id: OrderBy
	file_district_id: OrderBy
	file_main_id: OrderBy
	district_id: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_district'.
"""
input EcdFileDistrictBoolExp {
	_and: [EcdFileDistrictBoolExp]
	_not: EcdFileDistrictBoolExp
	_or: [EcdFileDistrictBoolExp]
	id: BigintComparisonExp
	file_district_id: StringComparisonExp
	file_main_id: StringComparisonExp
	district_id: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "ecd_file_district"
"""
input EcdFileDistrictInsertInput {
	file_main_id: String!
	district_id: String!
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "ecd_file_district"
"""
input EcdFileDistrictIncInput {
	id: Bigint
}
"""
input type for updating data in table "ecd_file_district"
"""
input EcdFileDistrictSetInput {
	id: Bigint
	file_district_id: String
	file_main_id: String
	district_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EcdFileDistrictSelectColumn {
	"""
	ID
	"""
	id
	"""
	工程跨区表ID
	"""
	file_district_id
	"""
	报备主表ID
	"""
	file_main_id
	"""
	区域ID
	"""
	district_id
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	ecd_file_district(distinct_on: [EcdFileDistrictSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileDistrictOrderBy!], where: EcdFileDistrictBoolExp): [EcdFileDistrict!]!
	"""
	聚合查询
	"""
	ecd_file_district_aggregate(distinct_on: [EcdFileDistrictSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileDistrictOrderBy!], where: EcdFileDistrictBoolExp): EcdFileDistrictAggregate!
	"""
	主键查询
	"""
	ecd_file_district_by_pk(id: Bigint!): EcdFileDistrict!
	"""
	联合主键查询
	"""
	ecd_file_district_by_union_pk(file_district_id: String!): EcdFileDistrict!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ecd_file_district(where: EcdFileDistrictBoolExp!): EcdFileDistrictMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ecd_file_district_by_pk(id: Bigint!): EcdFileDistrict
	"""
	插入
	"""
	insert_ecd_file_district(objects: [EcdFileDistrictInsertInput!]!): EcdFileDistrictMutationResponse
	"""
	插入一条记录
	"""
	insert_ecd_file_district_one(objects: EcdFileDistrictInsertInput!): EcdFileDistrict
	"""
	更新
	"""
	update_ecd_file_district(_inc: EcdFileDistrictIncInput, _set: EcdFileDistrictSetInput, where: EcdFileDistrictBoolExp!): EcdFileDistrictMutationResponse
	"""
	根据主键更新
	"""
	update_ecd_file_district_by_pk(_inc: EcdFileDistrictIncInput, _set: EcdFileDistrictSetInput, id: Bigint!): EcdFileDistrict
	"""
	根据联合主键更新
	"""
	update_ecd_file_district_by_union_pk(_inc: EcdFileDistrictIncInput, _set: EcdFileDistrictSetInput, file_district_id: String!): EcdFileDistrict
	"""
	根据联合主键删除记录
	"""
	delete_ecd_file_district_by_union_pk(file_district_id: String!): EcdFileDistrict
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ecd_file_line_point.graphqls", Input: `"""
工程报备-采集位置信息点
"""
type EcdFileLinePoint {
	"""
	ID
	"""
	id: Bigint!
	"""
	工程报备采集位置信息点ID
	"""
	line_point_id: String!
	"""
	报备主表ID
	"""
	file_main_id: String!
	"""
	gps位置点
	"""
	gps_point: Point
	"""
	地图位置点
	"""
	map_point: Point
	"""
	信息点名称
	"""
	line_point_name: String
	"""
	信息点备注
	"""
	line_point_remark: String
	"""
	信息点类型 0停车点 1起点 2终点 3修车点
	"""
	point_type: Int
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "ecd_file_line_point"
"""
type EcdFileLinePointAggregate {
	aggregate: EcdFileLinePointAggregateFields
}
"""
aggregate fields of "ecd_file_line_point"
"""
type EcdFileLinePointAggregateFields {
	avg: EcdFileLinePointAvgFields
	count: Int
	max: EcdFileLinePointMaxFields
	min: EcdFileLinePointMinFields
	stddev: EcdFileLinePointStddevFields
	stddev_pop: EcdFileLinePointStddevPopFields
	stddev_samp: EcdFileLinePointStddevSampFields
	sum: EcdFileLinePointSumFields
	var_pop: EcdFileLinePointVarPopFields
	var_samp: EcdFileLinePointVarSampFields
	variance: EcdFileLinePointVarianceFields
}
"""
aggregate avg on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointAvgFields {
	id: Bigint
	point_type: Int
}
"""
aggregate max on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointMaxFields {
	id: Bigint
	line_point_id: String
	file_main_id: String
	gps_point: Point
	map_point: Point
	line_point_name: String
	line_point_remark: String
	point_type: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointMinFields {
	id: Bigint
	line_point_id: String
	file_main_id: String
	gps_point: Point
	map_point: Point
	line_point_name: String
	line_point_remark: String
	point_type: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointStddevFields {
	id: Bigint
	point_type: Int
}
"""
aggregate stddev_pop on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointStddevPopFields {
	id: Bigint
	point_type: Int
}
"""
aggregate stddev_samp on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointStddevSampFields {
	id: Bigint
	point_type: Int
}
"""
aggregate sum on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointSumFields {
	id: Bigint
	point_type: Int
}
"""
aggregate var_pop on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointVarPopFields {
	id: Bigint
	point_type: Int
}
"""
aggregate var_samp on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointVarSampFields {
	id: Bigint
	point_type: Int
}
"""
aggregate variance on columns of table "ecd_file_line_point"
"""
type EcdFileLinePointVarianceFields {
	id: Bigint
	point_type: Int
}
"""
response of any mutation on the table "ecd_file_line_point"
"""
type EcdFileLinePointMutationResponse {
	affected_rows: Int!
	returning: [EcdFileLinePoint!]!
}
"""
ordering options when selecting data from "ecd_file_line_point"
"""
input EcdFileLinePointOrderBy {
	id: OrderBy
	line_point_id: OrderBy
	file_main_id: OrderBy
	gps_point: OrderBy
	map_point: OrderBy
	line_point_name: OrderBy
	line_point_remark: OrderBy
	point_type: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_line_point'.
"""
input EcdFileLinePointBoolExp {
	_and: [EcdFileLinePointBoolExp]
	_not: EcdFileLinePointBoolExp
	_or: [EcdFileLinePointBoolExp]
	id: BigintComparisonExp
	line_point_id: StringComparisonExp
	file_main_id: StringComparisonExp
	gps_point: PointComparisonExp
	map_point: PointComparisonExp
	line_point_name: StringComparisonExp
	line_point_remark: StringComparisonExp
	point_type: IntComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "ecd_file_line_point"
"""
input EcdFileLinePointInsertInput {
	file_main_id: String!
	gps_point: Point
	map_point: Point
	line_point_name: String
	line_point_remark: String
	point_type: Int
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "ecd_file_line_point"
"""
input EcdFileLinePointIncInput {
	id: Bigint
	point_type: Int
}
"""
input type for updating data in table "ecd_file_line_point"
"""
input EcdFileLinePointSetInput {
	id: Bigint
	line_point_id: String
	file_main_id: String
	gps_point: Point
	map_point: Point
	line_point_name: String
	line_point_remark: String
	point_type: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EcdFileLinePointSelectColumn {
	"""
	ID
	"""
	id
	"""
	工程报备采集位置信息点ID
	"""
	line_point_id
	"""
	报备主表ID
	"""
	file_main_id
	"""
	gps位置点
	"""
	gps_point
	"""
	地图位置点
	"""
	map_point
	"""
	信息点名称
	"""
	line_point_name
	"""
	信息点备注
	"""
	line_point_remark
	"""
	信息点类型 0停车点 1起点 2终点 3修车点
	"""
	point_type
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	ecd_file_line_point(distinct_on: [EcdFileLinePointSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileLinePointOrderBy!], where: EcdFileLinePointBoolExp): [EcdFileLinePoint!]!
	"""
	聚合查询
	"""
	ecd_file_line_point_aggregate(distinct_on: [EcdFileLinePointSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileLinePointOrderBy!], where: EcdFileLinePointBoolExp): EcdFileLinePointAggregate!
	"""
	主键查询
	"""
	ecd_file_line_point_by_pk(id: Bigint!): EcdFileLinePoint!
	"""
	联合主键查询
	"""
	ecd_file_line_point_by_union_pk(line_point_id: String!): EcdFileLinePoint!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ecd_file_line_point(where: EcdFileLinePointBoolExp!): EcdFileLinePointMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ecd_file_line_point_by_pk(id: Bigint!): EcdFileLinePoint
	"""
	插入
	"""
	insert_ecd_file_line_point(objects: [EcdFileLinePointInsertInput!]!): EcdFileLinePointMutationResponse
	"""
	插入一条记录
	"""
	insert_ecd_file_line_point_one(objects: EcdFileLinePointInsertInput!): EcdFileLinePoint
	"""
	更新
	"""
	update_ecd_file_line_point(_inc: EcdFileLinePointIncInput, _set: EcdFileLinePointSetInput, where: EcdFileLinePointBoolExp!): EcdFileLinePointMutationResponse
	"""
	根据主键更新
	"""
	update_ecd_file_line_point_by_pk(_inc: EcdFileLinePointIncInput, _set: EcdFileLinePointSetInput, id: Bigint!): EcdFileLinePoint
	"""
	根据联合主键更新
	"""
	update_ecd_file_line_point_by_union_pk(_inc: EcdFileLinePointIncInput, _set: EcdFileLinePointSetInput, line_point_id: String!): EcdFileLinePoint
	"""
	根据联合主键删除记录
	"""
	delete_ecd_file_line_point_by_union_pk(line_point_id: String!): EcdFileLinePoint
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ecd_file_main.graphqls", Input: `"""
工程报备主表
"""
type EcdFileMain {
	"""
	ID
	"""
	id: Bigint!
	"""
	工程报备主表ID
	"""
	file_main_id: String!
	"""
	工程单号
	"""
	file_id: String!
	"""
	报备企业ID
	"""
	enterprise_id: String!
	"""
	区域ID
	"""
	district_id: String
	"""
	是否跨区
	"""
	is_cross_district: Boolean
	"""
	第一个跨区ID
	"""
	first_cross_pid: String
	"""
	计划运输起止日期(起始)
	"""
	plan_start_time: Timestamptz
	"""
	计划运输起止日期(截止)
	"""
	plan_end_time: Timestamptz
	"""
	审核时间
	"""
	check_time: Timestamptz
	"""
	审批状态(11.未审批 12.已审批)
	"""
	check_status: Int
	"""
	联系电话
	"""
	phone_num: String
	"""
	废土处置核准(0未审核 1已审核)
	"""
	point_state: Int
	"""
	是否审批完成(0未完成 1-完成 2退回)
	"""
	end_state: Int
	"""
	工程名称
	"""
	title: String
	"""
	提交工程报备的区域ID
	"""
	add_district_id: String
	"""
	起点审批人签名
	"""
	start_point_checker_sign: String
	"""
	终点审批人签名
	"""
	end_point_checker_sign: String
	"""
	路线审批人签名
	"""
	route_checker_sign: String
	"""
	车速时间审批人签名
	"""
	speed_time_checker_sign: String
	"""
	退回意见
	"""
	return_suggest: String
	"""
	建筑工程名称
	"""
	construct_title: String
	"""
	建筑工程ID
	"""
	construct_id: String
	"""
	是否匹配抓怕工地
	"""
	is_match_construction: Boolean
	"""
	提交时间
	"""
	client_report_time: Timestamptz
	"""
	建筑合同
	"""
	construct_prove_file: String
	"""
	施工合同
	"""
	do_construct_prove_file: String
	"""
	土方分包合同
	"""
	sub_package_prove_file: String
	"""
	运输合同
	"""
	traffic_prove_file: String
	"""
	路线牌工作相关规定承诺书
	"""
	route_board_promise_file: String
	"""
	运输主题责任承诺书
	"""
	traffice_object_promise_file: String
	"""
	建筑废土处置核准许可证
	"""
	construct_garbage_allow_file: String
	"""
	工地进出口照片
	"""
	construct_site_enterance_photo: String
	"""
	工地洗车台照片
	"""
	construct_wash_car_place_photo: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	备注
	"""
	remark: String
}
"""
aggregated selection of "ecd_file_main"
"""
type EcdFileMainAggregate {
	aggregate: EcdFileMainAggregateFields
}
"""
aggregate fields of "ecd_file_main"
"""
type EcdFileMainAggregateFields {
	avg: EcdFileMainAvgFields
	count: Int
	max: EcdFileMainMaxFields
	min: EcdFileMainMinFields
	stddev: EcdFileMainStddevFields
	stddev_pop: EcdFileMainStddevPopFields
	stddev_samp: EcdFileMainStddevSampFields
	sum: EcdFileMainSumFields
	var_pop: EcdFileMainVarPopFields
	var_samp: EcdFileMainVarSampFields
	variance: EcdFileMainVarianceFields
}
"""
aggregate avg on columns of table "ecd_file_main"
"""
type EcdFileMainAvgFields {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
aggregate max on columns of table "ecd_file_main"
"""
type EcdFileMainMaxFields {
	id: Bigint
	file_main_id: String
	file_id: String
	enterprise_id: String
	district_id: String
	is_cross_district: Boolean
	first_cross_pid: String
	plan_start_time: Timestamptz
	plan_end_time: Timestamptz
	check_time: Timestamptz
	check_status: Int
	phone_num: String
	point_state: Int
	end_state: Int
	title: String
	add_district_id: String
	start_point_checker_sign: String
	end_point_checker_sign: String
	route_checker_sign: String
	speed_time_checker_sign: String
	return_suggest: String
	construct_title: String
	construct_id: String
	is_match_construction: Boolean
	client_report_time: Timestamptz
	construct_prove_file: String
	do_construct_prove_file: String
	sub_package_prove_file: String
	traffic_prove_file: String
	route_board_promise_file: String
	traffice_object_promise_file: String
	construct_garbage_allow_file: String
	construct_site_enterance_photo: String
	construct_wash_car_place_photo: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remark: String
}
"""
aggregate min on columns of table "ecd_file_main"
"""
type EcdFileMainMinFields {
	id: Bigint
	file_main_id: String
	file_id: String
	enterprise_id: String
	district_id: String
	is_cross_district: Boolean
	first_cross_pid: String
	plan_start_time: Timestamptz
	plan_end_time: Timestamptz
	check_time: Timestamptz
	check_status: Int
	phone_num: String
	point_state: Int
	end_state: Int
	title: String
	add_district_id: String
	start_point_checker_sign: String
	end_point_checker_sign: String
	route_checker_sign: String
	speed_time_checker_sign: String
	return_suggest: String
	construct_title: String
	construct_id: String
	is_match_construction: Boolean
	client_report_time: Timestamptz
	construct_prove_file: String
	do_construct_prove_file: String
	sub_package_prove_file: String
	traffic_prove_file: String
	route_board_promise_file: String
	traffice_object_promise_file: String
	construct_garbage_allow_file: String
	construct_site_enterance_photo: String
	construct_wash_car_place_photo: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remark: String
}
"""
aggregate stddev on columns of table "ecd_file_main"
"""
type EcdFileMainStddevFields {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
aggregate stddev_pop on columns of table "ecd_file_main"
"""
type EcdFileMainStddevPopFields {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
aggregate stddev_samp on columns of table "ecd_file_main"
"""
type EcdFileMainStddevSampFields {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
aggregate sum on columns of table "ecd_file_main"
"""
type EcdFileMainSumFields {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
aggregate var_pop on columns of table "ecd_file_main"
"""
type EcdFileMainVarPopFields {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
aggregate var_samp on columns of table "ecd_file_main"
"""
type EcdFileMainVarSampFields {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
aggregate variance on columns of table "ecd_file_main"
"""
type EcdFileMainVarianceFields {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
response of any mutation on the table "ecd_file_main"
"""
type EcdFileMainMutationResponse {
	affected_rows: Int!
	returning: [EcdFileMain!]!
}
"""
ordering options when selecting data from "ecd_file_main"
"""
input EcdFileMainOrderBy {
	id: OrderBy
	file_main_id: OrderBy
	file_id: OrderBy
	enterprise_id: OrderBy
	district_id: OrderBy
	is_cross_district: OrderBy
	first_cross_pid: OrderBy
	plan_start_time: OrderBy
	plan_end_time: OrderBy
	check_time: OrderBy
	check_status: OrderBy
	phone_num: OrderBy
	point_state: OrderBy
	end_state: OrderBy
	title: OrderBy
	add_district_id: OrderBy
	start_point_checker_sign: OrderBy
	end_point_checker_sign: OrderBy
	route_checker_sign: OrderBy
	speed_time_checker_sign: OrderBy
	return_suggest: OrderBy
	construct_title: OrderBy
	construct_id: OrderBy
	is_match_construction: OrderBy
	client_report_time: OrderBy
	construct_prove_file: OrderBy
	do_construct_prove_file: OrderBy
	sub_package_prove_file: OrderBy
	traffic_prove_file: OrderBy
	route_board_promise_file: OrderBy
	traffice_object_promise_file: OrderBy
	construct_garbage_allow_file: OrderBy
	construct_site_enterance_photo: OrderBy
	construct_wash_car_place_photo: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	remark: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_main'.
"""
input EcdFileMainBoolExp {
	_and: [EcdFileMainBoolExp]
	_not: EcdFileMainBoolExp
	_or: [EcdFileMainBoolExp]
	id: BigintComparisonExp
	file_main_id: StringComparisonExp
	file_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	district_id: StringComparisonExp
	is_cross_district: BooleanComparisonExp
	first_cross_pid: StringComparisonExp
	plan_start_time: TimestamptzComparisonExp
	plan_end_time: TimestamptzComparisonExp
	check_time: TimestamptzComparisonExp
	check_status: IntComparisonExp
	phone_num: StringComparisonExp
	point_state: IntComparisonExp
	end_state: IntComparisonExp
	title: StringComparisonExp
	add_district_id: StringComparisonExp
	start_point_checker_sign: StringComparisonExp
	end_point_checker_sign: StringComparisonExp
	route_checker_sign: StringComparisonExp
	speed_time_checker_sign: StringComparisonExp
	return_suggest: StringComparisonExp
	construct_title: StringComparisonExp
	construct_id: StringComparisonExp
	is_match_construction: BooleanComparisonExp
	client_report_time: TimestamptzComparisonExp
	construct_prove_file: StringComparisonExp
	do_construct_prove_file: StringComparisonExp
	sub_package_prove_file: StringComparisonExp
	traffic_prove_file: StringComparisonExp
	route_board_promise_file: StringComparisonExp
	traffice_object_promise_file: StringComparisonExp
	construct_garbage_allow_file: StringComparisonExp
	construct_site_enterance_photo: StringComparisonExp
	construct_wash_car_place_photo: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	remark: StringComparisonExp
}
"""
input type for inserting data into table "ecd_file_main"
"""
input EcdFileMainInsertInput {
	file_id: String!
	enterprise_id: String!
	district_id: String
	is_cross_district: Boolean
	first_cross_pid: String
	plan_start_time: Timestamptz
	plan_end_time: Timestamptz
	check_time: Timestamptz
	check_status: Int
	phone_num: String
	point_state: Int
	end_state: Int
	title: String
	add_district_id: String
	start_point_checker_sign: String
	end_point_checker_sign: String
	route_checker_sign: String
	speed_time_checker_sign: String
	return_suggest: String
	construct_title: String
	construct_id: String
	is_match_construction: Boolean
	client_report_time: Timestamptz
	construct_prove_file: String
	do_construct_prove_file: String
	sub_package_prove_file: String
	traffic_prove_file: String
	route_board_promise_file: String
	traffice_object_promise_file: String
	construct_garbage_allow_file: String
	construct_site_enterance_photo: String
	construct_wash_car_place_photo: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	remark: String
}
"""
input type for incrementing integer column in table "ecd_file_main"
"""
input EcdFileMainIncInput {
	id: Bigint
	check_status: Int
	point_state: Int
	end_state: Int
}
"""
input type for updating data in table "ecd_file_main"
"""
input EcdFileMainSetInput {
	id: Bigint
	file_main_id: String
	file_id: String
	enterprise_id: String
	district_id: String
	is_cross_district: Boolean
	first_cross_pid: String
	plan_start_time: Timestamptz
	plan_end_time: Timestamptz
	check_time: Timestamptz
	check_status: Int
	phone_num: String
	point_state: Int
	end_state: Int
	title: String
	add_district_id: String
	start_point_checker_sign: String
	end_point_checker_sign: String
	route_checker_sign: String
	speed_time_checker_sign: String
	return_suggest: String
	construct_title: String
	construct_id: String
	is_match_construction: Boolean
	client_report_time: Timestamptz
	construct_prove_file: String
	do_construct_prove_file: String
	sub_package_prove_file: String
	traffic_prove_file: String
	route_board_promise_file: String
	traffice_object_promise_file: String
	construct_garbage_allow_file: String
	construct_site_enterance_photo: String
	construct_wash_car_place_photo: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remark: String
}
"""
可选select
"""
enum EcdFileMainSelectColumn {
	"""
	ID
	"""
	id
	"""
	工程报备主表ID
	"""
	file_main_id
	"""
	工程单号
	"""
	file_id
	"""
	报备企业ID
	"""
	enterprise_id
	"""
	区域ID
	"""
	district_id
	"""
	是否跨区
	"""
	is_cross_district
	"""
	第一个跨区ID
	"""
	first_cross_pid
	"""
	计划运输起止日期(起始)
	"""
	plan_start_time
	"""
	计划运输起止日期(截止)
	"""
	plan_end_time
	"""
	审核时间
	"""
	check_time
	"""
	审批状态(11.未审批 12.已审批)
	"""
	check_status
	"""
	联系电话
	"""
	phone_num
	"""
	废土处置核准(0未审核 1已审核)
	"""
	point_state
	"""
	是否审批完成(0未完成 1-完成 2退回)
	"""
	end_state
	"""
	工程名称
	"""
	title
	"""
	提交工程报备的区域ID
	"""
	add_district_id
	"""
	起点审批人签名
	"""
	start_point_checker_sign
	"""
	终点审批人签名
	"""
	end_point_checker_sign
	"""
	路线审批人签名
	"""
	route_checker_sign
	"""
	车速时间审批人签名
	"""
	speed_time_checker_sign
	"""
	退回意见
	"""
	return_suggest
	"""
	建筑工程名称
	"""
	construct_title
	"""
	建筑工程ID
	"""
	construct_id
	"""
	是否匹配抓怕工地
	"""
	is_match_construction
	"""
	提交时间
	"""
	client_report_time
	"""
	建筑合同
	"""
	construct_prove_file
	"""
	施工合同
	"""
	do_construct_prove_file
	"""
	土方分包合同
	"""
	sub_package_prove_file
	"""
	运输合同
	"""
	traffic_prove_file
	"""
	路线牌工作相关规定承诺书
	"""
	route_board_promise_file
	"""
	运输主题责任承诺书
	"""
	traffice_object_promise_file
	"""
	建筑废土处置核准许可证
	"""
	construct_garbage_allow_file
	"""
	工地进出口照片
	"""
	construct_site_enterance_photo
	"""
	工地洗车台照片
	"""
	construct_wash_car_place_photo
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	备注
	"""
	remark
}
extend type Query {
	"""
	列表查询
	"""
	ecd_file_main(distinct_on: [EcdFileMainSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileMainOrderBy!], where: EcdFileMainBoolExp): [EcdFileMain!]!
	"""
	聚合查询
	"""
	ecd_file_main_aggregate(distinct_on: [EcdFileMainSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileMainOrderBy!], where: EcdFileMainBoolExp): EcdFileMainAggregate!
	"""
	主键查询
	"""
	ecd_file_main_by_pk(id: Bigint!): EcdFileMain!
	"""
	联合主键查询
	"""
	ecd_file_main_by_union_pk(file_main_id: String!): EcdFileMain!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ecd_file_main(where: EcdFileMainBoolExp!): EcdFileMainMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ecd_file_main_by_pk(id: Bigint!): EcdFileMain
	"""
	插入
	"""
	insert_ecd_file_main(objects: [EcdFileMainInsertInput!]!): EcdFileMainMutationResponse
	"""
	插入一条记录
	"""
	insert_ecd_file_main_one(objects: EcdFileMainInsertInput!): EcdFileMain
	"""
	更新
	"""
	update_ecd_file_main(_inc: EcdFileMainIncInput, _set: EcdFileMainSetInput, where: EcdFileMainBoolExp!): EcdFileMainMutationResponse
	"""
	根据主键更新
	"""
	update_ecd_file_main_by_pk(_inc: EcdFileMainIncInput, _set: EcdFileMainSetInput, id: Bigint!): EcdFileMain
	"""
	根据联合主键更新
	"""
	update_ecd_file_main_by_union_pk(_inc: EcdFileMainIncInput, _set: EcdFileMainSetInput, file_main_id: String!): EcdFileMain
	"""
	根据联合主键删除记录
	"""
	delete_ecd_file_main_by_union_pk(file_main_id: String!): EcdFileMain
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ecd_file_main_sub.graphqls", Input: `"""
工程报备附属表
"""
type EcdFileMainSub {
	"""
	ID
	"""
	id: Bigint!
	"""
	工程报备附属表ID
	"""
	file_main_sub_id: String!
	"""
	报备主表ID
	"""
	file_main_id: String
	"""
	地址
	"""
	address: String
	"""
	建筑单位
	"""
	construct_unit: String
	"""
	建筑单位-负责人姓名
	"""
	construct_director_name: String
	"""
	建筑单位-联系电话
	"""
	construct_phone: String
	"""
	施工总承包单位
	"""
	contract_unit: String
	"""
	施工总承包单位-负责人姓名
	"""
	contract_director_name: String
	"""
	施工总承包单位-联系电话
	"""
	contract_phone: String
	"""
	运输单位
	"""
	traffic_unit: String
	"""
	运输单位-负责人姓名
	"""
	traffic_director_name: String
	"""
	运输单位-联系电话
	"""
	traffic_phone: String
	"""
	废土类别
	"""
	wl_type: Int
	"""
	废土-计划处置场地
	"""
	plan_deal_area: String
	"""
	废土-计划运输方量
	"""
	plan_trans_volume: String
	"""
	废土-计划运输时段（起始）
	"""
	plan_start_time: String
	"""
	废土-计划运输时间(截止)
	"""
	plan_end_time: String
	"""
	废土-计划运输路线
	"""
	plan_trans_lines: String
	"""
	建筑合同号
	"""
	construct_prove_num: String
	"""
	施工合同号
	"""
	contract_prove_num: String
	"""
	运输合同号
	"""
	traffic_prove_num: String
	"""
	土方分包单位
	"""
	sub_package_unit: String
	"""
	分包合同号
	"""
	package_prove_num: String
	"""
	分包-负责人姓名
	"""
	package_director_name: String
	"""
	分包-联系电话
	"""
	package_phone: String
	"""
	工程概况
	"""
	facts: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "ecd_file_main_sub"
"""
type EcdFileMainSubAggregate {
	aggregate: EcdFileMainSubAggregateFields
}
"""
aggregate fields of "ecd_file_main_sub"
"""
type EcdFileMainSubAggregateFields {
	avg: EcdFileMainSubAvgFields
	count: Int
	max: EcdFileMainSubMaxFields
	min: EcdFileMainSubMinFields
	stddev: EcdFileMainSubStddevFields
	stddev_pop: EcdFileMainSubStddevPopFields
	stddev_samp: EcdFileMainSubStddevSampFields
	sum: EcdFileMainSubSumFields
	var_pop: EcdFileMainSubVarPopFields
	var_samp: EcdFileMainSubVarSampFields
	variance: EcdFileMainSubVarianceFields
}
"""
aggregate avg on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubAvgFields {
	id: Bigint
	wl_type: Int
}
"""
aggregate max on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubMaxFields {
	id: Bigint
	file_main_sub_id: String
	file_main_id: String
	address: String
	construct_unit: String
	construct_director_name: String
	construct_phone: String
	contract_unit: String
	contract_director_name: String
	contract_phone: String
	traffic_unit: String
	traffic_director_name: String
	traffic_phone: String
	wl_type: Int
	plan_deal_area: String
	plan_trans_volume: String
	plan_start_time: String
	plan_end_time: String
	plan_trans_lines: String
	construct_prove_num: String
	contract_prove_num: String
	traffic_prove_num: String
	sub_package_unit: String
	package_prove_num: String
	package_director_name: String
	package_phone: String
	facts: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubMinFields {
	id: Bigint
	file_main_sub_id: String
	file_main_id: String
	address: String
	construct_unit: String
	construct_director_name: String
	construct_phone: String
	contract_unit: String
	contract_director_name: String
	contract_phone: String
	traffic_unit: String
	traffic_director_name: String
	traffic_phone: String
	wl_type: Int
	plan_deal_area: String
	plan_trans_volume: String
	plan_start_time: String
	plan_end_time: String
	plan_trans_lines: String
	construct_prove_num: String
	contract_prove_num: String
	traffic_prove_num: String
	sub_package_unit: String
	package_prove_num: String
	package_director_name: String
	package_phone: String
	facts: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubStddevFields {
	id: Bigint
	wl_type: Int
}
"""
aggregate stddev_pop on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubStddevPopFields {
	id: Bigint
	wl_type: Int
}
"""
aggregate stddev_samp on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubStddevSampFields {
	id: Bigint
	wl_type: Int
}
"""
aggregate sum on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubSumFields {
	id: Bigint
	wl_type: Int
}
"""
aggregate var_pop on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubVarPopFields {
	id: Bigint
	wl_type: Int
}
"""
aggregate var_samp on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubVarSampFields {
	id: Bigint
	wl_type: Int
}
"""
aggregate variance on columns of table "ecd_file_main_sub"
"""
type EcdFileMainSubVarianceFields {
	id: Bigint
	wl_type: Int
}
"""
response of any mutation on the table "ecd_file_main_sub"
"""
type EcdFileMainSubMutationResponse {
	affected_rows: Int!
	returning: [EcdFileMainSub!]!
}
"""
ordering options when selecting data from "ecd_file_main_sub"
"""
input EcdFileMainSubOrderBy {
	id: OrderBy
	file_main_sub_id: OrderBy
	file_main_id: OrderBy
	address: OrderBy
	construct_unit: OrderBy
	construct_director_name: OrderBy
	construct_phone: OrderBy
	contract_unit: OrderBy
	contract_director_name: OrderBy
	contract_phone: OrderBy
	traffic_unit: OrderBy
	traffic_director_name: OrderBy
	traffic_phone: OrderBy
	wl_type: OrderBy
	plan_deal_area: OrderBy
	plan_trans_volume: OrderBy
	plan_start_time: OrderBy
	plan_end_time: OrderBy
	plan_trans_lines: OrderBy
	construct_prove_num: OrderBy
	contract_prove_num: OrderBy
	traffic_prove_num: OrderBy
	sub_package_unit: OrderBy
	package_prove_num: OrderBy
	package_director_name: OrderBy
	package_phone: OrderBy
	facts: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_main_sub'.
"""
input EcdFileMainSubBoolExp {
	_and: [EcdFileMainSubBoolExp]
	_not: EcdFileMainSubBoolExp
	_or: [EcdFileMainSubBoolExp]
	id: BigintComparisonExp
	file_main_sub_id: StringComparisonExp
	file_main_id: StringComparisonExp
	address: StringComparisonExp
	construct_unit: StringComparisonExp
	construct_director_name: StringComparisonExp
	construct_phone: StringComparisonExp
	contract_unit: StringComparisonExp
	contract_director_name: StringComparisonExp
	contract_phone: StringComparisonExp
	traffic_unit: StringComparisonExp
	traffic_director_name: StringComparisonExp
	traffic_phone: StringComparisonExp
	wl_type: IntComparisonExp
	plan_deal_area: StringComparisonExp
	plan_trans_volume: StringComparisonExp
	plan_start_time: StringComparisonExp
	plan_end_time: StringComparisonExp
	plan_trans_lines: StringComparisonExp
	construct_prove_num: StringComparisonExp
	contract_prove_num: StringComparisonExp
	traffic_prove_num: StringComparisonExp
	sub_package_unit: StringComparisonExp
	package_prove_num: StringComparisonExp
	package_director_name: StringComparisonExp
	package_phone: StringComparisonExp
	facts: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "ecd_file_main_sub"
"""
input EcdFileMainSubInsertInput {
	file_main_id: String
	address: String
	construct_unit: String
	construct_director_name: String
	construct_phone: String
	contract_unit: String
	contract_director_name: String
	contract_phone: String
	traffic_unit: String
	traffic_director_name: String
	traffic_phone: String
	wl_type: Int
	plan_deal_area: String
	plan_trans_volume: String
	plan_start_time: String
	plan_end_time: String
	plan_trans_lines: String
	construct_prove_num: String
	contract_prove_num: String
	traffic_prove_num: String
	sub_package_unit: String
	package_prove_num: String
	package_director_name: String
	package_phone: String
	facts: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "ecd_file_main_sub"
"""
input EcdFileMainSubIncInput {
	id: Bigint
	wl_type: Int
}
"""
input type for updating data in table "ecd_file_main_sub"
"""
input EcdFileMainSubSetInput {
	id: Bigint
	file_main_sub_id: String
	file_main_id: String
	address: String
	construct_unit: String
	construct_director_name: String
	construct_phone: String
	contract_unit: String
	contract_director_name: String
	contract_phone: String
	traffic_unit: String
	traffic_director_name: String
	traffic_phone: String
	wl_type: Int
	plan_deal_area: String
	plan_trans_volume: String
	plan_start_time: String
	plan_end_time: String
	plan_trans_lines: String
	construct_prove_num: String
	contract_prove_num: String
	traffic_prove_num: String
	sub_package_unit: String
	package_prove_num: String
	package_director_name: String
	package_phone: String
	facts: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EcdFileMainSubSelectColumn {
	"""
	ID
	"""
	id
	"""
	工程报备附属表ID
	"""
	file_main_sub_id
	"""
	报备主表ID
	"""
	file_main_id
	"""
	地址
	"""
	address
	"""
	建筑单位
	"""
	construct_unit
	"""
	建筑单位-负责人姓名
	"""
	construct_director_name
	"""
	建筑单位-联系电话
	"""
	construct_phone
	"""
	施工总承包单位
	"""
	contract_unit
	"""
	施工总承包单位-负责人姓名
	"""
	contract_director_name
	"""
	施工总承包单位-联系电话
	"""
	contract_phone
	"""
	运输单位
	"""
	traffic_unit
	"""
	运输单位-负责人姓名
	"""
	traffic_director_name
	"""
	运输单位-联系电话
	"""
	traffic_phone
	"""
	废土类别
	"""
	wl_type
	"""
	废土-计划处置场地
	"""
	plan_deal_area
	"""
	废土-计划运输方量
	"""
	plan_trans_volume
	"""
	废土-计划运输时段（起始）
	"""
	plan_start_time
	"""
	废土-计划运输时间(截止)
	"""
	plan_end_time
	"""
	废土-计划运输路线
	"""
	plan_trans_lines
	"""
	建筑合同号
	"""
	construct_prove_num
	"""
	施工合同号
	"""
	contract_prove_num
	"""
	运输合同号
	"""
	traffic_prove_num
	"""
	土方分包单位
	"""
	sub_package_unit
	"""
	分包合同号
	"""
	package_prove_num
	"""
	分包-负责人姓名
	"""
	package_director_name
	"""
	分包-联系电话
	"""
	package_phone
	"""
	工程概况
	"""
	facts
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	ecd_file_main_sub(distinct_on: [EcdFileMainSubSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileMainSubOrderBy!], where: EcdFileMainSubBoolExp): [EcdFileMainSub!]!
	"""
	聚合查询
	"""
	ecd_file_main_sub_aggregate(distinct_on: [EcdFileMainSubSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileMainSubOrderBy!], where: EcdFileMainSubBoolExp): EcdFileMainSubAggregate!
	"""
	主键查询
	"""
	ecd_file_main_sub_by_pk(id: Bigint!): EcdFileMainSub!
	"""
	联合主键查询
	"""
	ecd_file_main_sub_by_union_pk(file_main_sub_id: String!): EcdFileMainSub!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ecd_file_main_sub(where: EcdFileMainSubBoolExp!): EcdFileMainSubMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ecd_file_main_sub_by_pk(id: Bigint!): EcdFileMainSub
	"""
	插入
	"""
	insert_ecd_file_main_sub(objects: [EcdFileMainSubInsertInput!]!): EcdFileMainSubMutationResponse
	"""
	插入一条记录
	"""
	insert_ecd_file_main_sub_one(objects: EcdFileMainSubInsertInput!): EcdFileMainSub
	"""
	更新
	"""
	update_ecd_file_main_sub(_inc: EcdFileMainSubIncInput, _set: EcdFileMainSubSetInput, where: EcdFileMainSubBoolExp!): EcdFileMainSubMutationResponse
	"""
	根据主键更新
	"""
	update_ecd_file_main_sub_by_pk(_inc: EcdFileMainSubIncInput, _set: EcdFileMainSubSetInput, id: Bigint!): EcdFileMainSub
	"""
	根据联合主键更新
	"""
	update_ecd_file_main_sub_by_union_pk(_inc: EcdFileMainSubIncInput, _set: EcdFileMainSubSetInput, file_main_sub_id: String!): EcdFileMainSub
	"""
	根据联合主键删除记录
	"""
	delete_ecd_file_main_sub_by_union_pk(file_main_sub_id: String!): EcdFileMainSub
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ecd_file_vehicle.graphqls", Input: `"""
工程报备车辆表
"""
type EcdFileVehicle {
	"""
	ID
	"""
	id: Bigint!
	"""
	工程报备车辆表ID
	"""
	file_vehicle_id: String!
	"""
	报备主表ID
	"""
	file_main_id: String!
	"""
	车辆ID
	"""
	vehicle_id: String
	"""
	审核状态
	"""
	check_status: Int
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "ecd_file_vehicle"
"""
type EcdFileVehicleAggregate {
	aggregate: EcdFileVehicleAggregateFields
}
"""
aggregate fields of "ecd_file_vehicle"
"""
type EcdFileVehicleAggregateFields {
	avg: EcdFileVehicleAvgFields
	count: Int
	max: EcdFileVehicleMaxFields
	min: EcdFileVehicleMinFields
	stddev: EcdFileVehicleStddevFields
	stddev_pop: EcdFileVehicleStddevPopFields
	stddev_samp: EcdFileVehicleStddevSampFields
	sum: EcdFileVehicleSumFields
	var_pop: EcdFileVehicleVarPopFields
	var_samp: EcdFileVehicleVarSampFields
	variance: EcdFileVehicleVarianceFields
}
"""
aggregate avg on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleAvgFields {
	id: Bigint
	check_status: Int
}
"""
aggregate max on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleMaxFields {
	id: Bigint
	file_vehicle_id: String
	file_main_id: String
	vehicle_id: String
	check_status: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleMinFields {
	id: Bigint
	file_vehicle_id: String
	file_main_id: String
	vehicle_id: String
	check_status: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleStddevFields {
	id: Bigint
	check_status: Int
}
"""
aggregate stddev_pop on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleStddevPopFields {
	id: Bigint
	check_status: Int
}
"""
aggregate stddev_samp on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleStddevSampFields {
	id: Bigint
	check_status: Int
}
"""
aggregate sum on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleSumFields {
	id: Bigint
	check_status: Int
}
"""
aggregate var_pop on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleVarPopFields {
	id: Bigint
	check_status: Int
}
"""
aggregate var_samp on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleVarSampFields {
	id: Bigint
	check_status: Int
}
"""
aggregate variance on columns of table "ecd_file_vehicle"
"""
type EcdFileVehicleVarianceFields {
	id: Bigint
	check_status: Int
}
"""
response of any mutation on the table "ecd_file_vehicle"
"""
type EcdFileVehicleMutationResponse {
	affected_rows: Int!
	returning: [EcdFileVehicle!]!
}
"""
ordering options when selecting data from "ecd_file_vehicle"
"""
input EcdFileVehicleOrderBy {
	id: OrderBy
	file_vehicle_id: OrderBy
	file_main_id: OrderBy
	vehicle_id: OrderBy
	check_status: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_vehicle'.
"""
input EcdFileVehicleBoolExp {
	_and: [EcdFileVehicleBoolExp]
	_not: EcdFileVehicleBoolExp
	_or: [EcdFileVehicleBoolExp]
	id: BigintComparisonExp
	file_vehicle_id: StringComparisonExp
	file_main_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	check_status: IntComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "ecd_file_vehicle"
"""
input EcdFileVehicleInsertInput {
	file_main_id: String!
	vehicle_id: String
	check_status: Int
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "ecd_file_vehicle"
"""
input EcdFileVehicleIncInput {
	id: Bigint
	check_status: Int
}
"""
input type for updating data in table "ecd_file_vehicle"
"""
input EcdFileVehicleSetInput {
	id: Bigint
	file_vehicle_id: String
	file_main_id: String
	vehicle_id: String
	check_status: Int
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EcdFileVehicleSelectColumn {
	"""
	ID
	"""
	id
	"""
	工程报备车辆表ID
	"""
	file_vehicle_id
	"""
	报备主表ID
	"""
	file_main_id
	"""
	车辆ID
	"""
	vehicle_id
	"""
	审核状态
	"""
	check_status
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	ecd_file_vehicle(distinct_on: [EcdFileVehicleSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileVehicleOrderBy!], where: EcdFileVehicleBoolExp): [EcdFileVehicle!]!
	"""
	聚合查询
	"""
	ecd_file_vehicle_aggregate(distinct_on: [EcdFileVehicleSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileVehicleOrderBy!], where: EcdFileVehicleBoolExp): EcdFileVehicleAggregate!
	"""
	主键查询
	"""
	ecd_file_vehicle_by_pk(id: Bigint!): EcdFileVehicle!
	"""
	联合主键查询
	"""
	ecd_file_vehicle_by_union_pk(file_vehicle_id: String!): EcdFileVehicle!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ecd_file_vehicle(where: EcdFileVehicleBoolExp!): EcdFileVehicleMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ecd_file_vehicle_by_pk(id: Bigint!): EcdFileVehicle
	"""
	插入
	"""
	insert_ecd_file_vehicle(objects: [EcdFileVehicleInsertInput!]!): EcdFileVehicleMutationResponse
	"""
	插入一条记录
	"""
	insert_ecd_file_vehicle_one(objects: EcdFileVehicleInsertInput!): EcdFileVehicle
	"""
	更新
	"""
	update_ecd_file_vehicle(_inc: EcdFileVehicleIncInput, _set: EcdFileVehicleSetInput, where: EcdFileVehicleBoolExp!): EcdFileVehicleMutationResponse
	"""
	根据主键更新
	"""
	update_ecd_file_vehicle_by_pk(_inc: EcdFileVehicleIncInput, _set: EcdFileVehicleSetInput, id: Bigint!): EcdFileVehicle
	"""
	根据联合主键更新
	"""
	update_ecd_file_vehicle_by_union_pk(_inc: EcdFileVehicleIncInput, _set: EcdFileVehicleSetInput, file_vehicle_id: String!): EcdFileVehicle
	"""
	根据联合主键删除记录
	"""
	delete_ecd_file_vehicle_by_union_pk(file_vehicle_id: String!): EcdFileVehicle
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ecd_file_vehicle_time.graphqls", Input: `"""
工程报备-车辆运行时间表
"""
type EcdFileVehicleTime {
	"""
	ID
	"""
	id: Bigint!
	"""
	工程审批-车辆运行时间表ID
	"""
	vehicle_time_id: String!
	"""
	报备主表ID
	"""
	file_main_id: String!
	"""
	车辆ID
	"""
	vechile_id: String!
	"""
	运行起始日期
	"""
	start_date: Timestamptz
	"""
	运行截止日期
	"""
	end_date: Timestamptz
	"""
	运行起始时间
	"""
	start_time: Timestamptz
	"""
	运行截止时间
	"""
	end_time: Timestamptz
	"""
	审批状态 0未审批 1正常 2废弃
	"""
	check_status: Int
	"""
	是否审批完成
	"""
	is_check: Boolean!
	"""
	审批时间
	"""
	check_time: Timestamptz
	"""
	路线ID
	"""
	line_id: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeAggregate {
	aggregate: EcdFileVehicleTimeAggregateFields
}
"""
aggregate fields of "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeAggregateFields {
	avg: EcdFileVehicleTimeAvgFields
	count: Int
	max: EcdFileVehicleTimeMaxFields
	min: EcdFileVehicleTimeMinFields
	stddev: EcdFileVehicleTimeStddevFields
	stddev_pop: EcdFileVehicleTimeStddevPopFields
	stddev_samp: EcdFileVehicleTimeStddevSampFields
	sum: EcdFileVehicleTimeSumFields
	var_pop: EcdFileVehicleTimeVarPopFields
	var_samp: EcdFileVehicleTimeVarSampFields
	variance: EcdFileVehicleTimeVarianceFields
}
"""
aggregate avg on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeAvgFields {
	id: Bigint
	check_status: Int
}
"""
aggregate max on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeMaxFields {
	id: Bigint
	vehicle_time_id: String
	file_main_id: String
	vechile_id: String
	start_date: Timestamptz
	end_date: Timestamptz
	start_time: Timestamptz
	end_time: Timestamptz
	check_status: Int
	is_check: Boolean
	check_time: Timestamptz
	line_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeMinFields {
	id: Bigint
	vehicle_time_id: String
	file_main_id: String
	vechile_id: String
	start_date: Timestamptz
	end_date: Timestamptz
	start_time: Timestamptz
	end_time: Timestamptz
	check_status: Int
	is_check: Boolean
	check_time: Timestamptz
	line_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeStddevFields {
	id: Bigint
	check_status: Int
}
"""
aggregate stddev_pop on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeStddevPopFields {
	id: Bigint
	check_status: Int
}
"""
aggregate stddev_samp on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeStddevSampFields {
	id: Bigint
	check_status: Int
}
"""
aggregate sum on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeSumFields {
	id: Bigint
	check_status: Int
}
"""
aggregate var_pop on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeVarPopFields {
	id: Bigint
	check_status: Int
}
"""
aggregate var_samp on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeVarSampFields {
	id: Bigint
	check_status: Int
}
"""
aggregate variance on columns of table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeVarianceFields {
	id: Bigint
	check_status: Int
}
"""
response of any mutation on the table "ecd_file_vehicle_time"
"""
type EcdFileVehicleTimeMutationResponse {
	affected_rows: Int!
	returning: [EcdFileVehicleTime!]!
}
"""
ordering options when selecting data from "ecd_file_vehicle_time"
"""
input EcdFileVehicleTimeOrderBy {
	id: OrderBy
	vehicle_time_id: OrderBy
	file_main_id: OrderBy
	vechile_id: OrderBy
	start_date: OrderBy
	end_date: OrderBy
	start_time: OrderBy
	end_time: OrderBy
	check_status: OrderBy
	is_check: OrderBy
	check_time: OrderBy
	line_id: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_file_vehicle_time'.
"""
input EcdFileVehicleTimeBoolExp {
	_and: [EcdFileVehicleTimeBoolExp]
	_not: EcdFileVehicleTimeBoolExp
	_or: [EcdFileVehicleTimeBoolExp]
	id: BigintComparisonExp
	vehicle_time_id: StringComparisonExp
	file_main_id: StringComparisonExp
	vechile_id: StringComparisonExp
	start_date: TimestamptzComparisonExp
	end_date: TimestamptzComparisonExp
	start_time: TimestamptzComparisonExp
	end_time: TimestamptzComparisonExp
	check_status: IntComparisonExp
	is_check: BooleanComparisonExp
	check_time: TimestamptzComparisonExp
	line_id: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "ecd_file_vehicle_time"
"""
input EcdFileVehicleTimeInsertInput {
	file_main_id: String!
	vechile_id: String!
	start_date: Timestamptz
	end_date: Timestamptz
	start_time: Timestamptz
	end_time: Timestamptz
	check_status: Int
	is_check: Boolean!
	check_time: Timestamptz
	line_id: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "ecd_file_vehicle_time"
"""
input EcdFileVehicleTimeIncInput {
	id: Bigint
	check_status: Int
}
"""
input type for updating data in table "ecd_file_vehicle_time"
"""
input EcdFileVehicleTimeSetInput {
	id: Bigint
	vehicle_time_id: String
	file_main_id: String
	vechile_id: String
	start_date: Timestamptz
	end_date: Timestamptz
	start_time: Timestamptz
	end_time: Timestamptz
	check_status: Int
	is_check: Boolean
	check_time: Timestamptz
	line_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum EcdFileVehicleTimeSelectColumn {
	"""
	ID
	"""
	id
	"""
	工程审批-车辆运行时间表ID
	"""
	vehicle_time_id
	"""
	报备主表ID
	"""
	file_main_id
	"""
	车辆ID
	"""
	vechile_id
	"""
	运行起始日期
	"""
	start_date
	"""
	运行截止日期
	"""
	end_date
	"""
	运行起始时间
	"""
	start_time
	"""
	运行截止时间
	"""
	end_time
	"""
	审批状态 0未审批 1正常 2废弃
	"""
	check_status
	"""
	是否审批完成
	"""
	is_check
	"""
	审批时间
	"""
	check_time
	"""
	路线ID
	"""
	line_id
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	修改时间
	"""
	update_at
	"""
	修改人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	ecd_file_vehicle_time(distinct_on: [EcdFileVehicleTimeSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileVehicleTimeOrderBy!], where: EcdFileVehicleTimeBoolExp): [EcdFileVehicleTime!]!
	"""
	聚合查询
	"""
	ecd_file_vehicle_time_aggregate(distinct_on: [EcdFileVehicleTimeSelectColumn!], limit: Int, offset: Int, order_by: [EcdFileVehicleTimeOrderBy!], where: EcdFileVehicleTimeBoolExp): EcdFileVehicleTimeAggregate!
	"""
	主键查询
	"""
	ecd_file_vehicle_time_by_pk(id: Bigint!): EcdFileVehicleTime!
	"""
	联合主键查询
	"""
	ecd_file_vehicle_time_by_union_pk(vehicle_time_id: String!): EcdFileVehicleTime!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ecd_file_vehicle_time(where: EcdFileVehicleTimeBoolExp!): EcdFileVehicleTimeMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ecd_file_vehicle_time_by_pk(id: Bigint!): EcdFileVehicleTime
	"""
	插入
	"""
	insert_ecd_file_vehicle_time(objects: [EcdFileVehicleTimeInsertInput!]!): EcdFileVehicleTimeMutationResponse
	"""
	插入一条记录
	"""
	insert_ecd_file_vehicle_time_one(objects: EcdFileVehicleTimeInsertInput!): EcdFileVehicleTime
	"""
	更新
	"""
	update_ecd_file_vehicle_time(_inc: EcdFileVehicleTimeIncInput, _set: EcdFileVehicleTimeSetInput, where: EcdFileVehicleTimeBoolExp!): EcdFileVehicleTimeMutationResponse
	"""
	根据主键更新
	"""
	update_ecd_file_vehicle_time_by_pk(_inc: EcdFileVehicleTimeIncInput, _set: EcdFileVehicleTimeSetInput, id: Bigint!): EcdFileVehicleTime
	"""
	根据联合主键更新
	"""
	update_ecd_file_vehicle_time_by_union_pk(_inc: EcdFileVehicleTimeIncInput, _set: EcdFileVehicleTimeSetInput, vehicle_time_id: String!): EcdFileVehicleTime
	"""
	根据联合主键删除记录
	"""
	delete_ecd_file_vehicle_time_by_union_pk(vehicle_time_id: String!): EcdFileVehicleTime
}
`, BuiltIn: false},
	{Name: "graph/graphqls/ecd_line.graphqls", Input: `"""
工程审批路线表
"""
type EcdLine {
	"""
	ID
	"""
	id: Bigint!
	"""
	工程审批路线表ID
	"""
	line_id: String!
	"""
	路线名称
	"""
	line_name: String!
	"""
	所属企业ID
	"""
	enterprise_id: String
	"""
	路线描述
	"""
	line_desc: String
	"""
	审批人
	"""
	audit_user_id: String
	"""
	审批时间
	"""
	audit_time: Timestamptz
	"""
	是否解析描述
	"""
	is_resolve_desc: Boolean!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	线路数据
	"""
	gis_data: String
}
"""
aggregated selection of "ecd_line"
"""
type EcdLineAggregate {
	aggregate: EcdLineAggregateFields
}
"""
aggregate fields of "ecd_line"
"""
type EcdLineAggregateFields {
	avg: EcdLineAvgFields
	count: Int
	max: EcdLineMaxFields
	min: EcdLineMinFields
	stddev: EcdLineStddevFields
	stddev_pop: EcdLineStddevPopFields
	stddev_samp: EcdLineStddevSampFields
	sum: EcdLineSumFields
	var_pop: EcdLineVarPopFields
	var_samp: EcdLineVarSampFields
	variance: EcdLineVarianceFields
}
"""
aggregate avg on columns of table "ecd_line"
"""
type EcdLineAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "ecd_line"
"""
type EcdLineMaxFields {
	id: Bigint
	line_id: String
	line_name: String
	enterprise_id: String
	line_desc: String
	audit_user_id: String
	audit_time: Timestamptz
	is_resolve_desc: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
aggregate min on columns of table "ecd_line"
"""
type EcdLineMinFields {
	id: Bigint
	line_id: String
	line_name: String
	enterprise_id: String
	line_desc: String
	audit_user_id: String
	audit_time: Timestamptz
	is_resolve_desc: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
aggregate stddev on columns of table "ecd_line"
"""
type EcdLineStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "ecd_line"
"""
type EcdLineStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "ecd_line"
"""
type EcdLineStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "ecd_line"
"""
type EcdLineSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "ecd_line"
"""
type EcdLineVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "ecd_line"
"""
type EcdLineVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "ecd_line"
"""
type EcdLineVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "ecd_line"
"""
type EcdLineMutationResponse {
	affected_rows: Int!
	returning: [EcdLine!]!
}
"""
ordering options when selecting data from "ecd_line"
"""
input EcdLineOrderBy {
	id: OrderBy
	line_id: OrderBy
	line_name: OrderBy
	enterprise_id: OrderBy
	line_desc: OrderBy
	audit_user_id: OrderBy
	audit_time: OrderBy
	is_resolve_desc: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	gis_data: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'ecd_line'.
"""
input EcdLineBoolExp {
	_and: [EcdLineBoolExp]
	_not: EcdLineBoolExp
	_or: [EcdLineBoolExp]
	id: BigintComparisonExp
	line_id: StringComparisonExp
	line_name: StringComparisonExp
	enterprise_id: StringComparisonExp
	line_desc: StringComparisonExp
	audit_user_id: StringComparisonExp
	audit_time: TimestamptzComparisonExp
	is_resolve_desc: BooleanComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	gis_data: StringComparisonExp
}
"""
input type for inserting data into table "ecd_line"
"""
input EcdLineInsertInput {
	line_name: String!
	enterprise_id: String
	line_desc: String
	audit_user_id: String
	audit_time: Timestamptz
	is_resolve_desc: Boolean!
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	gis_data: String
}
"""
input type for incrementing integer column in table "ecd_line"
"""
input EcdLineIncInput {
	id: Bigint
}
"""
input type for updating data in table "ecd_line"
"""
input EcdLineSetInput {
	id: Bigint
	line_id: String
	line_name: String
	enterprise_id: String
	line_desc: String
	audit_user_id: String
	audit_time: Timestamptz
	is_resolve_desc: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
可选select
"""
enum EcdLineSelectColumn {
	"""
	ID
	"""
	id
	"""
	工程审批路线表ID
	"""
	line_id
	"""
	路线名称
	"""
	line_name
	"""
	所属企业ID
	"""
	enterprise_id
	"""
	路线描述
	"""
	line_desc
	"""
	审批人
	"""
	audit_user_id
	"""
	审批时间
	"""
	audit_time
	"""
	是否解析描述
	"""
	is_resolve_desc
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	线路数据
	"""
	gis_data
}
extend type Query {
	"""
	列表查询
	"""
	ecd_line(distinct_on: [EcdLineSelectColumn!], limit: Int, offset: Int, order_by: [EcdLineOrderBy!], where: EcdLineBoolExp): [EcdLine!]!
	"""
	聚合查询
	"""
	ecd_line_aggregate(distinct_on: [EcdLineSelectColumn!], limit: Int, offset: Int, order_by: [EcdLineOrderBy!], where: EcdLineBoolExp): EcdLineAggregate!
	"""
	主键查询
	"""
	ecd_line_by_pk(id: Bigint!): EcdLine!
	"""
	联合主键查询
	"""
	ecd_line_by_union_pk(line_id: String!): EcdLine!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_ecd_line(where: EcdLineBoolExp!): EcdLineMutationResponse
	"""
	根据主键删除记录
	"""
	delete_ecd_line_by_pk(id: Bigint!): EcdLine
	"""
	插入
	"""
	insert_ecd_line(objects: [EcdLineInsertInput!]!): EcdLineMutationResponse
	"""
	插入一条记录
	"""
	insert_ecd_line_one(objects: EcdLineInsertInput!): EcdLine
	"""
	更新
	"""
	update_ecd_line(_inc: EcdLineIncInput, _set: EcdLineSetInput, where: EcdLineBoolExp!): EcdLineMutationResponse
	"""
	根据主键更新
	"""
	update_ecd_line_by_pk(_inc: EcdLineIncInput, _set: EcdLineSetInput, id: Bigint!): EcdLine
	"""
	根据联合主键更新
	"""
	update_ecd_line_by_union_pk(_inc: EcdLineIncInput, _set: EcdLineSetInput, line_id: String!): EcdLine
	"""
	根据联合主键删除记录
	"""
	delete_ecd_line_by_union_pk(line_id: String!): EcdLine
}
`, BuiltIn: false},
	{Name: "graph/graphqls/electric_fence.graphqls", Input: `"""
电子围栏
"""
type ElectricFence {
	"""
	ID
	"""
	id: Bigint!
	"""
	电子围栏ID
	"""
	electric_fence_id: String!
	"""
	区域类型(1矩形 2圆形 3多边形)
	"""
	area_type: Int!
	"""
	围栏类型(1消纳场 2工地 3工程 4重点区域)
	"""
	fence_type: Int
	"""
	围栏名称
	"""
	fence_name: String
	"""
	地点
	"""
	address: String
	"""
	所属区域
	"""
	district_id: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	围栏数据
	"""
	gis_data: String
}
"""
aggregated selection of "electric_fence"
"""
type ElectricFenceAggregate {
	aggregate: ElectricFenceAggregateFields
}
"""
aggregate fields of "electric_fence"
"""
type ElectricFenceAggregateFields {
	avg: ElectricFenceAvgFields
	count: Int
	max: ElectricFenceMaxFields
	min: ElectricFenceMinFields
	stddev: ElectricFenceStddevFields
	stddev_pop: ElectricFenceStddevPopFields
	stddev_samp: ElectricFenceStddevSampFields
	sum: ElectricFenceSumFields
	var_pop: ElectricFenceVarPopFields
	var_samp: ElectricFenceVarSampFields
	variance: ElectricFenceVarianceFields
}
"""
aggregate avg on columns of table "electric_fence"
"""
type ElectricFenceAvgFields {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
aggregate max on columns of table "electric_fence"
"""
type ElectricFenceMaxFields {
	id: Bigint
	electric_fence_id: String
	area_type: Int
	fence_type: Int
	fence_name: String
	address: String
	district_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
aggregate min on columns of table "electric_fence"
"""
type ElectricFenceMinFields {
	id: Bigint
	electric_fence_id: String
	area_type: Int
	fence_type: Int
	fence_name: String
	address: String
	district_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
aggregate stddev on columns of table "electric_fence"
"""
type ElectricFenceStddevFields {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
aggregate stddev_pop on columns of table "electric_fence"
"""
type ElectricFenceStddevPopFields {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
aggregate stddev_samp on columns of table "electric_fence"
"""
type ElectricFenceStddevSampFields {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
aggregate sum on columns of table "electric_fence"
"""
type ElectricFenceSumFields {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
aggregate var_pop on columns of table "electric_fence"
"""
type ElectricFenceVarPopFields {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
aggregate var_samp on columns of table "electric_fence"
"""
type ElectricFenceVarSampFields {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
aggregate variance on columns of table "electric_fence"
"""
type ElectricFenceVarianceFields {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
response of any mutation on the table "electric_fence"
"""
type ElectricFenceMutationResponse {
	affected_rows: Int!
	returning: [ElectricFence!]!
}
"""
ordering options when selecting data from "electric_fence"
"""
input ElectricFenceOrderBy {
	id: OrderBy
	electric_fence_id: OrderBy
	area_type: OrderBy
	fence_type: OrderBy
	fence_name: OrderBy
	address: OrderBy
	district_id: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	gis_data: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'electric_fence'.
"""
input ElectricFenceBoolExp {
	_and: [ElectricFenceBoolExp]
	_not: ElectricFenceBoolExp
	_or: [ElectricFenceBoolExp]
	id: BigintComparisonExp
	electric_fence_id: StringComparisonExp
	area_type: IntComparisonExp
	fence_type: IntComparisonExp
	fence_name: StringComparisonExp
	address: StringComparisonExp
	district_id: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	gis_data: StringComparisonExp
}
"""
input type for inserting data into table "electric_fence"
"""
input ElectricFenceInsertInput {
	area_type: Int!
	fence_type: Int
	fence_name: String
	address: String
	district_id: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	gis_data: String
}
"""
input type for incrementing integer column in table "electric_fence"
"""
input ElectricFenceIncInput {
	id: Bigint
	area_type: Int
	fence_type: Int
}
"""
input type for updating data in table "electric_fence"
"""
input ElectricFenceSetInput {
	id: Bigint
	electric_fence_id: String
	area_type: Int
	fence_type: Int
	fence_name: String
	address: String
	district_id: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
可选select
"""
enum ElectricFenceSelectColumn {
	"""
	ID
	"""
	id
	"""
	电子围栏ID
	"""
	electric_fence_id
	"""
	区域类型(1矩形 2圆形 3多边形)
	"""
	area_type
	"""
	围栏类型(1消纳场 2工地 3工程 4重点区域)
	"""
	fence_type
	"""
	围栏名称
	"""
	fence_name
	"""
	地点
	"""
	address
	"""
	所属区域
	"""
	district_id
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	围栏数据
	"""
	gis_data
}
extend type Query {
	"""
	列表查询
	"""
	electric_fence(distinct_on: [ElectricFenceSelectColumn!], limit: Int, offset: Int, order_by: [ElectricFenceOrderBy!], where: ElectricFenceBoolExp): [ElectricFence!]!
	"""
	聚合查询
	"""
	electric_fence_aggregate(distinct_on: [ElectricFenceSelectColumn!], limit: Int, offset: Int, order_by: [ElectricFenceOrderBy!], where: ElectricFenceBoolExp): ElectricFenceAggregate!
	"""
	主键查询
	"""
	electric_fence_by_pk(id: Bigint!): ElectricFence!
	"""
	联合主键查询
	"""
	electric_fence_by_union_pk(electric_fence_id: String!): ElectricFence!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_electric_fence(where: ElectricFenceBoolExp!): ElectricFenceMutationResponse
	"""
	根据主键删除记录
	"""
	delete_electric_fence_by_pk(id: Bigint!): ElectricFence
	"""
	插入
	"""
	insert_electric_fence(objects: [ElectricFenceInsertInput!]!): ElectricFenceMutationResponse
	"""
	插入一条记录
	"""
	insert_electric_fence_one(objects: ElectricFenceInsertInput!): ElectricFence
	"""
	更新
	"""
	update_electric_fence(_inc: ElectricFenceIncInput, _set: ElectricFenceSetInput, where: ElectricFenceBoolExp!): ElectricFenceMutationResponse
	"""
	根据主键更新
	"""
	update_electric_fence_by_pk(_inc: ElectricFenceIncInput, _set: ElectricFenceSetInput, id: Bigint!): ElectricFence
	"""
	根据联合主键更新
	"""
	update_electric_fence_by_union_pk(_inc: ElectricFenceIncInput, _set: ElectricFenceSetInput, electric_fence_id: String!): ElectricFence
	"""
	根据联合主键删除记录
	"""
	delete_electric_fence_by_union_pk(electric_fence_id: String!): ElectricFence
}
`, BuiltIn: false},
	{Name: "graph/graphqls/electric_fence_enterance_record.graphqls", Input: `"""
电子围栏进出记录表
"""
type ElectricFenceEnteranceRecord {
	"""
	ID
	"""
	id: Bigint!
	"""
	电子围栏进出记录表ID
	"""
	record_id: String!
	"""
	车辆ID
	"""
	vehicle_id: String!
	"""
	电子围栏ID
	"""
	electric_fence_id: String!
	"""
	进入时间
	"""
	in_time: Timestamptz
	"""
	离开时间
	"""
	out_time: Timestamptz
	"""
	是否离开
	"""
	is_out: Boolean
	"""
	位置点
	"""
	position: Point
	"""
	是否在线
	"""
	is_online: Boolean
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordAggregate {
	aggregate: ElectricFenceEnteranceRecordAggregateFields
}
"""
aggregate fields of "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordAggregateFields {
	avg: ElectricFenceEnteranceRecordAvgFields
	count: Int
	max: ElectricFenceEnteranceRecordMaxFields
	min: ElectricFenceEnteranceRecordMinFields
	stddev: ElectricFenceEnteranceRecordStddevFields
	stddev_pop: ElectricFenceEnteranceRecordStddevPopFields
	stddev_samp: ElectricFenceEnteranceRecordStddevSampFields
	sum: ElectricFenceEnteranceRecordSumFields
	var_pop: ElectricFenceEnteranceRecordVarPopFields
	var_samp: ElectricFenceEnteranceRecordVarSampFields
	variance: ElectricFenceEnteranceRecordVarianceFields
}
"""
aggregate avg on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordMaxFields {
	id: Bigint
	record_id: String
	vehicle_id: String
	electric_fence_id: String
	in_time: Timestamptz
	out_time: Timestamptz
	is_out: Boolean
	position: Point
	is_online: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordMinFields {
	id: Bigint
	record_id: String
	vehicle_id: String
	electric_fence_id: String
	in_time: Timestamptz
	out_time: Timestamptz
	is_out: Boolean
	position: Point
	is_online: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "electric_fence_enterance_record"
"""
type ElectricFenceEnteranceRecordMutationResponse {
	affected_rows: Int!
	returning: [ElectricFenceEnteranceRecord!]!
}
"""
ordering options when selecting data from "electric_fence_enterance_record"
"""
input ElectricFenceEnteranceRecordOrderBy {
	id: OrderBy
	record_id: OrderBy
	vehicle_id: OrderBy
	electric_fence_id: OrderBy
	in_time: OrderBy
	out_time: OrderBy
	is_out: OrderBy
	position: OrderBy
	is_online: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'electric_fence_enterance_record'.
"""
input ElectricFenceEnteranceRecordBoolExp {
	_and: [ElectricFenceEnteranceRecordBoolExp]
	_not: ElectricFenceEnteranceRecordBoolExp
	_or: [ElectricFenceEnteranceRecordBoolExp]
	id: BigintComparisonExp
	record_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	electric_fence_id: StringComparisonExp
	in_time: TimestamptzComparisonExp
	out_time: TimestamptzComparisonExp
	is_out: BooleanComparisonExp
	position: PointComparisonExp
	is_online: BooleanComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "electric_fence_enterance_record"
"""
input ElectricFenceEnteranceRecordInsertInput {
	vehicle_id: String!
	electric_fence_id: String!
	in_time: Timestamptz
	out_time: Timestamptz
	is_out: Boolean
	position: Point
	is_online: Boolean
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "electric_fence_enterance_record"
"""
input ElectricFenceEnteranceRecordIncInput {
	id: Bigint
}
"""
input type for updating data in table "electric_fence_enterance_record"
"""
input ElectricFenceEnteranceRecordSetInput {
	id: Bigint
	record_id: String
	vehicle_id: String
	electric_fence_id: String
	in_time: Timestamptz
	out_time: Timestamptz
	is_out: Boolean
	position: Point
	is_online: Boolean
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum ElectricFenceEnteranceRecordSelectColumn {
	"""
	ID
	"""
	id
	"""
	电子围栏进出记录表ID
	"""
	record_id
	"""
	车辆ID
	"""
	vehicle_id
	"""
	电子围栏ID
	"""
	electric_fence_id
	"""
	进入时间
	"""
	in_time
	"""
	离开时间
	"""
	out_time
	"""
	是否离开
	"""
	is_out
	"""
	位置点
	"""
	position
	"""
	是否在线
	"""
	is_online
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	electric_fence_enterance_record(distinct_on: [ElectricFenceEnteranceRecordSelectColumn!], limit: Int, offset: Int, order_by: [ElectricFenceEnteranceRecordOrderBy!], where: ElectricFenceEnteranceRecordBoolExp): [ElectricFenceEnteranceRecord!]!
	"""
	聚合查询
	"""
	electric_fence_enterance_record_aggregate(distinct_on: [ElectricFenceEnteranceRecordSelectColumn!], limit: Int, offset: Int, order_by: [ElectricFenceEnteranceRecordOrderBy!], where: ElectricFenceEnteranceRecordBoolExp): ElectricFenceEnteranceRecordAggregate!
	"""
	主键查询
	"""
	electric_fence_enterance_record_by_pk(id: Bigint!): ElectricFenceEnteranceRecord!
	"""
	联合主键查询
	"""
	electric_fence_enterance_record_by_union_pk(record_id: String!): ElectricFenceEnteranceRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_electric_fence_enterance_record(where: ElectricFenceEnteranceRecordBoolExp!): ElectricFenceEnteranceRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_electric_fence_enterance_record_by_pk(id: Bigint!): ElectricFenceEnteranceRecord
	"""
	插入
	"""
	insert_electric_fence_enterance_record(objects: [ElectricFenceEnteranceRecordInsertInput!]!): ElectricFenceEnteranceRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_electric_fence_enterance_record_one(objects: ElectricFenceEnteranceRecordInsertInput!): ElectricFenceEnteranceRecord
	"""
	更新
	"""
	update_electric_fence_enterance_record(_inc: ElectricFenceEnteranceRecordIncInput, _set: ElectricFenceEnteranceRecordSetInput, where: ElectricFenceEnteranceRecordBoolExp!): ElectricFenceEnteranceRecordMutationResponse
	"""
	根据主键更新
	"""
	update_electric_fence_enterance_record_by_pk(_inc: ElectricFenceEnteranceRecordIncInput, _set: ElectricFenceEnteranceRecordSetInput, id: Bigint!): ElectricFenceEnteranceRecord
	"""
	根据联合主键更新
	"""
	update_electric_fence_enterance_record_by_union_pk(_inc: ElectricFenceEnteranceRecordIncInput, _set: ElectricFenceEnteranceRecordSetInput, record_id: String!): ElectricFenceEnteranceRecord
	"""
	根据联合主键删除记录
	"""
	delete_electric_fence_enterance_record_by_union_pk(record_id: String!): ElectricFenceEnteranceRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/limit_speed_line.graphqls", Input: `"""
限速路线
"""
type LimitSpeedLine {
	"""
	ID
	"""
	id: Bigint!
	"""
	限速路线ID
	"""
	limit_speed_line_id: String!
	"""
	路线名称
	"""
	line_name: String
	"""
	路线类型(1路线 2区域)
	"""
	line_type: Int
	"""
	区域ID
	"""
	district_id: String
	"""
	管控等级
	"""
	control_level: Int
	"""
	申请原因
	"""
	apply_reason: String
	"""
	审核状态
	"""
	check_status: Int
	"""
	审核时间
	"""
	check_time: Timestamptz
	"""
	审核人ID
	"""
	check_user_id: String
	"""
	退回原因
	"""
	reject_reason: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	线路数据
	"""
	gis_data: String
}
"""
aggregated selection of "limit_speed_line"
"""
type LimitSpeedLineAggregate {
	aggregate: LimitSpeedLineAggregateFields
}
"""
aggregate fields of "limit_speed_line"
"""
type LimitSpeedLineAggregateFields {
	avg: LimitSpeedLineAvgFields
	count: Int
	max: LimitSpeedLineMaxFields
	min: LimitSpeedLineMinFields
	stddev: LimitSpeedLineStddevFields
	stddev_pop: LimitSpeedLineStddevPopFields
	stddev_samp: LimitSpeedLineStddevSampFields
	sum: LimitSpeedLineSumFields
	var_pop: LimitSpeedLineVarPopFields
	var_samp: LimitSpeedLineVarSampFields
	variance: LimitSpeedLineVarianceFields
}
"""
aggregate avg on columns of table "limit_speed_line"
"""
type LimitSpeedLineAvgFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate max on columns of table "limit_speed_line"
"""
type LimitSpeedLineMaxFields {
	id: Bigint
	limit_speed_line_id: String
	line_name: String
	line_type: Int
	district_id: String
	control_level: Int
	apply_reason: String
	check_status: Int
	check_time: Timestamptz
	check_user_id: String
	reject_reason: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
aggregate min on columns of table "limit_speed_line"
"""
type LimitSpeedLineMinFields {
	id: Bigint
	limit_speed_line_id: String
	line_name: String
	line_type: Int
	district_id: String
	control_level: Int
	apply_reason: String
	check_status: Int
	check_time: Timestamptz
	check_user_id: String
	reject_reason: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
aggregate stddev on columns of table "limit_speed_line"
"""
type LimitSpeedLineStddevFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate stddev_pop on columns of table "limit_speed_line"
"""
type LimitSpeedLineStddevPopFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate stddev_samp on columns of table "limit_speed_line"
"""
type LimitSpeedLineStddevSampFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate sum on columns of table "limit_speed_line"
"""
type LimitSpeedLineSumFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate var_pop on columns of table "limit_speed_line"
"""
type LimitSpeedLineVarPopFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate var_samp on columns of table "limit_speed_line"
"""
type LimitSpeedLineVarSampFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
aggregate variance on columns of table "limit_speed_line"
"""
type LimitSpeedLineVarianceFields {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
response of any mutation on the table "limit_speed_line"
"""
type LimitSpeedLineMutationResponse {
	affected_rows: Int!
	returning: [LimitSpeedLine!]!
}
"""
ordering options when selecting data from "limit_speed_line"
"""
input LimitSpeedLineOrderBy {
	id: OrderBy
	limit_speed_line_id: OrderBy
	line_name: OrderBy
	line_type: OrderBy
	district_id: OrderBy
	control_level: OrderBy
	apply_reason: OrderBy
	check_status: OrderBy
	check_time: OrderBy
	check_user_id: OrderBy
	reject_reason: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	gis_data: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'limit_speed_line'.
"""
input LimitSpeedLineBoolExp {
	_and: [LimitSpeedLineBoolExp]
	_not: LimitSpeedLineBoolExp
	_or: [LimitSpeedLineBoolExp]
	id: BigintComparisonExp
	limit_speed_line_id: StringComparisonExp
	line_name: StringComparisonExp
	line_type: IntComparisonExp
	district_id: StringComparisonExp
	control_level: IntComparisonExp
	apply_reason: StringComparisonExp
	check_status: IntComparisonExp
	check_time: TimestamptzComparisonExp
	check_user_id: StringComparisonExp
	reject_reason: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	gis_data: StringComparisonExp
}
"""
input type for inserting data into table "limit_speed_line"
"""
input LimitSpeedLineInsertInput {
	line_name: String
	line_type: Int
	district_id: String
	control_level: Int
	apply_reason: String
	check_status: Int
	check_time: Timestamptz
	check_user_id: String
	reject_reason: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	gis_data: String
}
"""
input type for incrementing integer column in table "limit_speed_line"
"""
input LimitSpeedLineIncInput {
	id: Bigint
	line_type: Int
	control_level: Int
	check_status: Int
}
"""
input type for updating data in table "limit_speed_line"
"""
input LimitSpeedLineSetInput {
	id: Bigint
	limit_speed_line_id: String
	line_name: String
	line_type: Int
	district_id: String
	control_level: Int
	apply_reason: String
	check_status: Int
	check_time: Timestamptz
	check_user_id: String
	reject_reason: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	gis_data: String
}
"""
可选select
"""
enum LimitSpeedLineSelectColumn {
	"""
	ID
	"""
	id
	"""
	限速路线ID
	"""
	limit_speed_line_id
	"""
	路线名称
	"""
	line_name
	"""
	路线类型(1路线 2区域)
	"""
	line_type
	"""
	区域ID
	"""
	district_id
	"""
	管控等级
	"""
	control_level
	"""
	申请原因
	"""
	apply_reason
	"""
	审核状态
	"""
	check_status
	"""
	审核时间
	"""
	check_time
	"""
	审核人ID
	"""
	check_user_id
	"""
	退回原因
	"""
	reject_reason
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	线路数据
	"""
	gis_data
}
extend type Query {
	"""
	列表查询
	"""
	limit_speed_line(distinct_on: [LimitSpeedLineSelectColumn!], limit: Int, offset: Int, order_by: [LimitSpeedLineOrderBy!], where: LimitSpeedLineBoolExp): [LimitSpeedLine!]!
	"""
	聚合查询
	"""
	limit_speed_line_aggregate(distinct_on: [LimitSpeedLineSelectColumn!], limit: Int, offset: Int, order_by: [LimitSpeedLineOrderBy!], where: LimitSpeedLineBoolExp): LimitSpeedLineAggregate!
	"""
	主键查询
	"""
	limit_speed_line_by_pk(id: Bigint!): LimitSpeedLine!
	"""
	联合主键查询
	"""
	limit_speed_line_by_union_pk(limit_speed_line_id: String!): LimitSpeedLine!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_limit_speed_line(where: LimitSpeedLineBoolExp!): LimitSpeedLineMutationResponse
	"""
	根据主键删除记录
	"""
	delete_limit_speed_line_by_pk(id: Bigint!): LimitSpeedLine
	"""
	插入
	"""
	insert_limit_speed_line(objects: [LimitSpeedLineInsertInput!]!): LimitSpeedLineMutationResponse
	"""
	插入一条记录
	"""
	insert_limit_speed_line_one(objects: LimitSpeedLineInsertInput!): LimitSpeedLine
	"""
	更新
	"""
	update_limit_speed_line(_inc: LimitSpeedLineIncInput, _set: LimitSpeedLineSetInput, where: LimitSpeedLineBoolExp!): LimitSpeedLineMutationResponse
	"""
	根据主键更新
	"""
	update_limit_speed_line_by_pk(_inc: LimitSpeedLineIncInput, _set: LimitSpeedLineSetInput, id: Bigint!): LimitSpeedLine
	"""
	根据联合主键更新
	"""
	update_limit_speed_line_by_union_pk(_inc: LimitSpeedLineIncInput, _set: LimitSpeedLineSetInput, limit_speed_line_id: String!): LimitSpeedLine
	"""
	根据联合主键删除记录
	"""
	delete_limit_speed_line_by_union_pk(limit_speed_line_id: String!): LimitSpeedLine
}
`, BuiltIn: false},
	{Name: "graph/graphqls/limit_speed_line_time.graphqls", Input: `type LimitSpeedLineTime {
	"""
	ID
	"""
	id: Bigint!
	"""
	限速路线时间段表
	"""
	limit_speed_line_time_id: String!
	"""
	限速路线ID
	"""
	limit_speed_line_id: String!
	"""
	开始时间
	"""
	start_time: Timestamptz!
	"""
	结束时间
	"""
	end_time: Timestamptz!
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	限速值
	"""
	speed: Numeric!
}
"""
aggregated selection of "limit_speed_line_time"
"""
type LimitSpeedLineTimeAggregate {
	aggregate: LimitSpeedLineTimeAggregateFields
}
"""
aggregate fields of "limit_speed_line_time"
"""
type LimitSpeedLineTimeAggregateFields {
	avg: LimitSpeedLineTimeAvgFields
	count: Int
	max: LimitSpeedLineTimeMaxFields
	min: LimitSpeedLineTimeMinFields
	stddev: LimitSpeedLineTimeStddevFields
	stddev_pop: LimitSpeedLineTimeStddevPopFields
	stddev_samp: LimitSpeedLineTimeStddevSampFields
	sum: LimitSpeedLineTimeSumFields
	var_pop: LimitSpeedLineTimeVarPopFields
	var_samp: LimitSpeedLineTimeVarSampFields
	variance: LimitSpeedLineTimeVarianceFields
}
"""
aggregate avg on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeAvgFields {
	id: Bigint
	speed: Numeric
}
"""
aggregate max on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeMaxFields {
	id: Bigint
	limit_speed_line_time_id: String
	limit_speed_line_id: String
	start_time: Timestamptz
	end_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	speed: Numeric
}
"""
aggregate min on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeMinFields {
	id: Bigint
	limit_speed_line_time_id: String
	limit_speed_line_id: String
	start_time: Timestamptz
	end_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	speed: Numeric
}
"""
aggregate stddev on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeStddevFields {
	id: Bigint
	speed: Numeric
}
"""
aggregate stddev_pop on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeStddevPopFields {
	id: Bigint
	speed: Numeric
}
"""
aggregate stddev_samp on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeStddevSampFields {
	id: Bigint
	speed: Numeric
}
"""
aggregate sum on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeSumFields {
	id: Bigint
	speed: Numeric
}
"""
aggregate var_pop on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeVarPopFields {
	id: Bigint
	speed: Numeric
}
"""
aggregate var_samp on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeVarSampFields {
	id: Bigint
	speed: Numeric
}
"""
aggregate variance on columns of table "limit_speed_line_time"
"""
type LimitSpeedLineTimeVarianceFields {
	id: Bigint
	speed: Numeric
}
"""
response of any mutation on the table "limit_speed_line_time"
"""
type LimitSpeedLineTimeMutationResponse {
	affected_rows: Int!
	returning: [LimitSpeedLineTime!]!
}
"""
ordering options when selecting data from "limit_speed_line_time"
"""
input LimitSpeedLineTimeOrderBy {
	id: OrderBy
	limit_speed_line_time_id: OrderBy
	limit_speed_line_id: OrderBy
	start_time: OrderBy
	end_time: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	speed: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'limit_speed_line_time'.
"""
input LimitSpeedLineTimeBoolExp {
	_and: [LimitSpeedLineTimeBoolExp]
	_not: LimitSpeedLineTimeBoolExp
	_or: [LimitSpeedLineTimeBoolExp]
	id: BigintComparisonExp
	limit_speed_line_time_id: StringComparisonExp
	limit_speed_line_id: StringComparisonExp
	start_time: TimestamptzComparisonExp
	end_time: TimestamptzComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	speed: NumericComparisonExp
}
"""
input type for inserting data into table "limit_speed_line_time"
"""
input LimitSpeedLineTimeInsertInput {
	limit_speed_line_id: String!
	start_time: Timestamptz!
	end_time: Timestamptz!
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	speed: Numeric!
}
"""
input type for incrementing integer column in table "limit_speed_line_time"
"""
input LimitSpeedLineTimeIncInput {
	id: Bigint
	speed: Numeric
}
"""
input type for updating data in table "limit_speed_line_time"
"""
input LimitSpeedLineTimeSetInput {
	id: Bigint
	limit_speed_line_time_id: String
	limit_speed_line_id: String
	start_time: Timestamptz
	end_time: Timestamptz
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	speed: Numeric
}
"""
可选select
"""
enum LimitSpeedLineTimeSelectColumn {
	"""
	ID
	"""
	id
	"""
	限速路线时间段表
	"""
	limit_speed_line_time_id
	"""
	限速路线ID
	"""
	limit_speed_line_id
	"""
	开始时间
	"""
	start_time
	"""
	结束时间
	"""
	end_time
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	限速值
	"""
	speed
}
extend type Query {
	"""
	列表查询
	"""
	limit_speed_line_time(distinct_on: [LimitSpeedLineTimeSelectColumn!], limit: Int, offset: Int, order_by: [LimitSpeedLineTimeOrderBy!], where: LimitSpeedLineTimeBoolExp): [LimitSpeedLineTime!]!
	"""
	聚合查询
	"""
	limit_speed_line_time_aggregate(distinct_on: [LimitSpeedLineTimeSelectColumn!], limit: Int, offset: Int, order_by: [LimitSpeedLineTimeOrderBy!], where: LimitSpeedLineTimeBoolExp): LimitSpeedLineTimeAggregate!
	"""
	主键查询
	"""
	limit_speed_line_time_by_pk(id: Bigint!): LimitSpeedLineTime!
	"""
	联合主键查询
	"""
	limit_speed_line_time_by_union_pk(limit_speed_line_time_id: String!): LimitSpeedLineTime!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_limit_speed_line_time(where: LimitSpeedLineTimeBoolExp!): LimitSpeedLineTimeMutationResponse
	"""
	根据主键删除记录
	"""
	delete_limit_speed_line_time_by_pk(id: Bigint!): LimitSpeedLineTime
	"""
	插入
	"""
	insert_limit_speed_line_time(objects: [LimitSpeedLineTimeInsertInput!]!): LimitSpeedLineTimeMutationResponse
	"""
	插入一条记录
	"""
	insert_limit_speed_line_time_one(objects: LimitSpeedLineTimeInsertInput!): LimitSpeedLineTime
	"""
	更新
	"""
	update_limit_speed_line_time(_inc: LimitSpeedLineTimeIncInput, _set: LimitSpeedLineTimeSetInput, where: LimitSpeedLineTimeBoolExp!): LimitSpeedLineTimeMutationResponse
	"""
	根据主键更新
	"""
	update_limit_speed_line_time_by_pk(_inc: LimitSpeedLineTimeIncInput, _set: LimitSpeedLineTimeSetInput, id: Bigint!): LimitSpeedLineTime
	"""
	根据联合主键更新
	"""
	update_limit_speed_line_time_by_union_pk(_inc: LimitSpeedLineTimeIncInput, _set: LimitSpeedLineTimeSetInput, limit_speed_line_time_id: String!): LimitSpeedLineTime
	"""
	根据联合主键删除记录
	"""
	delete_limit_speed_line_time_by_union_pk(limit_speed_line_time_id: String!): LimitSpeedLineTime
}
`, BuiltIn: false},
	{Name: "graph/graphqls/limit_speed_plan.graphqls", Input: `"""
道路限速方案
"""
type LimitSpeedPlan {
	"""
	ID
	"""
	id: Bigint!
	"""
	限速方案ID
	"""
	limit_speed_plan_id: String!
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	方案名称
	"""
	plan_name: String!
	"""
	备注
	"""
	remark: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "limit_speed_plan"
"""
type LimitSpeedPlanAggregate {
	aggregate: LimitSpeedPlanAggregateFields
}
"""
aggregate fields of "limit_speed_plan"
"""
type LimitSpeedPlanAggregateFields {
	avg: LimitSpeedPlanAvgFields
	count: Int
	max: LimitSpeedPlanMaxFields
	min: LimitSpeedPlanMinFields
	stddev: LimitSpeedPlanStddevFields
	stddev_pop: LimitSpeedPlanStddevPopFields
	stddev_samp: LimitSpeedPlanStddevSampFields
	sum: LimitSpeedPlanSumFields
	var_pop: LimitSpeedPlanVarPopFields
	var_samp: LimitSpeedPlanVarSampFields
	variance: LimitSpeedPlanVarianceFields
}
"""
aggregate avg on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanMaxFields {
	id: Bigint
	limit_speed_plan_id: String
	enterprise_id: String
	plan_name: String
	remark: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanMinFields {
	id: Bigint
	limit_speed_plan_id: String
	enterprise_id: String
	plan_name: String
	remark: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "limit_speed_plan"
"""
type LimitSpeedPlanVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "limit_speed_plan"
"""
type LimitSpeedPlanMutationResponse {
	affected_rows: Int!
	returning: [LimitSpeedPlan!]!
}
"""
ordering options when selecting data from "limit_speed_plan"
"""
input LimitSpeedPlanOrderBy {
	id: OrderBy
	limit_speed_plan_id: OrderBy
	enterprise_id: OrderBy
	plan_name: OrderBy
	remark: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'limit_speed_plan'.
"""
input LimitSpeedPlanBoolExp {
	_and: [LimitSpeedPlanBoolExp]
	_not: LimitSpeedPlanBoolExp
	_or: [LimitSpeedPlanBoolExp]
	id: BigintComparisonExp
	limit_speed_plan_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	plan_name: StringComparisonExp
	remark: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "limit_speed_plan"
"""
input LimitSpeedPlanInsertInput {
	enterprise_id: String!
	plan_name: String!
	remark: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "limit_speed_plan"
"""
input LimitSpeedPlanIncInput {
	id: Bigint
}
"""
input type for updating data in table "limit_speed_plan"
"""
input LimitSpeedPlanSetInput {
	id: Bigint
	limit_speed_plan_id: String
	enterprise_id: String
	plan_name: String
	remark: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum LimitSpeedPlanSelectColumn {
	"""
	ID
	"""
	id
	"""
	限速方案ID
	"""
	limit_speed_plan_id
	"""
	企业ID
	"""
	enterprise_id
	"""
	方案名称
	"""
	plan_name
	"""
	备注
	"""
	remark
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	limit_speed_plan(distinct_on: [LimitSpeedPlanSelectColumn!], limit: Int, offset: Int, order_by: [LimitSpeedPlanOrderBy!], where: LimitSpeedPlanBoolExp): [LimitSpeedPlan!]!
	"""
	聚合查询
	"""
	limit_speed_plan_aggregate(distinct_on: [LimitSpeedPlanSelectColumn!], limit: Int, offset: Int, order_by: [LimitSpeedPlanOrderBy!], where: LimitSpeedPlanBoolExp): LimitSpeedPlanAggregate!
	"""
	主键查询
	"""
	limit_speed_plan_by_pk(id: Bigint!): LimitSpeedPlan!
	"""
	联合主键查询
	"""
	limit_speed_plan_by_union_pk(limit_speed_plan_id: String!): LimitSpeedPlan!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_limit_speed_plan(where: LimitSpeedPlanBoolExp!): LimitSpeedPlanMutationResponse
	"""
	根据主键删除记录
	"""
	delete_limit_speed_plan_by_pk(id: Bigint!): LimitSpeedPlan
	"""
	插入
	"""
	insert_limit_speed_plan(objects: [LimitSpeedPlanInsertInput!]!): LimitSpeedPlanMutationResponse
	"""
	插入一条记录
	"""
	insert_limit_speed_plan_one(objects: LimitSpeedPlanInsertInput!): LimitSpeedPlan
	"""
	更新
	"""
	update_limit_speed_plan(_inc: LimitSpeedPlanIncInput, _set: LimitSpeedPlanSetInput, where: LimitSpeedPlanBoolExp!): LimitSpeedPlanMutationResponse
	"""
	根据主键更新
	"""
	update_limit_speed_plan_by_pk(_inc: LimitSpeedPlanIncInput, _set: LimitSpeedPlanSetInput, id: Bigint!): LimitSpeedPlan
	"""
	根据联合主键更新
	"""
	update_limit_speed_plan_by_union_pk(_inc: LimitSpeedPlanIncInput, _set: LimitSpeedPlanSetInput, limit_speed_plan_id: String!): LimitSpeedPlan
	"""
	根据联合主键删除记录
	"""
	delete_limit_speed_plan_by_union_pk(limit_speed_plan_id: String!): LimitSpeedPlan
}
`, BuiltIn: false},
	{Name: "graph/graphqls/limit_speed_plan_detail.graphqls", Input: `"""
道路限速方案详细信息
"""
type LimitSpeedPlanDetail {
	"""
	ID
	"""
	id: Bigint!
	"""
	道路限速方案详细信息ID
	"""
	detail_id: String!
	"""
	道路限速方案ID
	"""
	plan_id: String!
	"""
	是否晚上限速
	"""
	is_night_limit: Boolean!
	"""
	晚上限速阀值
	"""
	night_limit_speed: Numeric
	"""
	晚上开始时间
	"""
	night_time_begin: Timestamptz
	"""
	晚上截止时间
	"""
	night_time_end: Timestamptz
	"""
	道路等级
	"""
	road_level: Int
	"""
	限速值
	"""
	limit_speed: Numeric
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailAggregate {
	aggregate: LimitSpeedPlanDetailAggregateFields
}
"""
aggregate fields of "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailAggregateFields {
	avg: LimitSpeedPlanDetailAvgFields
	count: Int
	max: LimitSpeedPlanDetailMaxFields
	min: LimitSpeedPlanDetailMinFields
	stddev: LimitSpeedPlanDetailStddevFields
	stddev_pop: LimitSpeedPlanDetailStddevPopFields
	stddev_samp: LimitSpeedPlanDetailStddevSampFields
	sum: LimitSpeedPlanDetailSumFields
	var_pop: LimitSpeedPlanDetailVarPopFields
	var_samp: LimitSpeedPlanDetailVarSampFields
	variance: LimitSpeedPlanDetailVarianceFields
}
"""
aggregate avg on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailAvgFields {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
aggregate max on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailMaxFields {
	id: Bigint
	detail_id: String
	plan_id: String
	is_night_limit: Boolean
	night_limit_speed: Numeric
	night_time_begin: Timestamptz
	night_time_end: Timestamptz
	road_level: Int
	limit_speed: Numeric
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailMinFields {
	id: Bigint
	detail_id: String
	plan_id: String
	is_night_limit: Boolean
	night_limit_speed: Numeric
	night_time_begin: Timestamptz
	night_time_end: Timestamptz
	road_level: Int
	limit_speed: Numeric
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailStddevFields {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
aggregate stddev_pop on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailStddevPopFields {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
aggregate stddev_samp on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailStddevSampFields {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
aggregate sum on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailSumFields {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
aggregate var_pop on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailVarPopFields {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
aggregate var_samp on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailVarSampFields {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
aggregate variance on columns of table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailVarianceFields {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
response of any mutation on the table "limit_speed_plan_detail"
"""
type LimitSpeedPlanDetailMutationResponse {
	affected_rows: Int!
	returning: [LimitSpeedPlanDetail!]!
}
"""
ordering options when selecting data from "limit_speed_plan_detail"
"""
input LimitSpeedPlanDetailOrderBy {
	id: OrderBy
	detail_id: OrderBy
	plan_id: OrderBy
	is_night_limit: OrderBy
	night_limit_speed: OrderBy
	night_time_begin: OrderBy
	night_time_end: OrderBy
	road_level: OrderBy
	limit_speed: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'limit_speed_plan_detail'.
"""
input LimitSpeedPlanDetailBoolExp {
	_and: [LimitSpeedPlanDetailBoolExp]
	_not: LimitSpeedPlanDetailBoolExp
	_or: [LimitSpeedPlanDetailBoolExp]
	id: BigintComparisonExp
	detail_id: StringComparisonExp
	plan_id: StringComparisonExp
	is_night_limit: BooleanComparisonExp
	night_limit_speed: NumericComparisonExp
	night_time_begin: TimestamptzComparisonExp
	night_time_end: TimestamptzComparisonExp
	road_level: IntComparisonExp
	limit_speed: NumericComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "limit_speed_plan_detail"
"""
input LimitSpeedPlanDetailInsertInput {
	plan_id: String!
	is_night_limit: Boolean!
	night_limit_speed: Numeric
	night_time_begin: Timestamptz
	night_time_end: Timestamptz
	road_level: Int
	limit_speed: Numeric
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "limit_speed_plan_detail"
"""
input LimitSpeedPlanDetailIncInput {
	id: Bigint
	night_limit_speed: Numeric
	road_level: Int
	limit_speed: Numeric
}
"""
input type for updating data in table "limit_speed_plan_detail"
"""
input LimitSpeedPlanDetailSetInput {
	id: Bigint
	detail_id: String
	plan_id: String
	is_night_limit: Boolean
	night_limit_speed: Numeric
	night_time_begin: Timestamptz
	night_time_end: Timestamptz
	road_level: Int
	limit_speed: Numeric
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum LimitSpeedPlanDetailSelectColumn {
	"""
	ID
	"""
	id
	"""
	道路限速方案详细信息ID
	"""
	detail_id
	"""
	道路限速方案ID
	"""
	plan_id
	"""
	是否晚上限速
	"""
	is_night_limit
	"""
	晚上限速阀值
	"""
	night_limit_speed
	"""
	晚上开始时间
	"""
	night_time_begin
	"""
	晚上截止时间
	"""
	night_time_end
	"""
	道路等级
	"""
	road_level
	"""
	限速值
	"""
	limit_speed
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	limit_speed_plan_detail(distinct_on: [LimitSpeedPlanDetailSelectColumn!], limit: Int, offset: Int, order_by: [LimitSpeedPlanDetailOrderBy!], where: LimitSpeedPlanDetailBoolExp): [LimitSpeedPlanDetail!]!
	"""
	聚合查询
	"""
	limit_speed_plan_detail_aggregate(distinct_on: [LimitSpeedPlanDetailSelectColumn!], limit: Int, offset: Int, order_by: [LimitSpeedPlanDetailOrderBy!], where: LimitSpeedPlanDetailBoolExp): LimitSpeedPlanDetailAggregate!
	"""
	主键查询
	"""
	limit_speed_plan_detail_by_pk(id: Bigint!): LimitSpeedPlanDetail!
	"""
	联合主键查询
	"""
	limit_speed_plan_detail_by_union_pk(detail_id: String!): LimitSpeedPlanDetail!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_limit_speed_plan_detail(where: LimitSpeedPlanDetailBoolExp!): LimitSpeedPlanDetailMutationResponse
	"""
	根据主键删除记录
	"""
	delete_limit_speed_plan_detail_by_pk(id: Bigint!): LimitSpeedPlanDetail
	"""
	插入
	"""
	insert_limit_speed_plan_detail(objects: [LimitSpeedPlanDetailInsertInput!]!): LimitSpeedPlanDetailMutationResponse
	"""
	插入一条记录
	"""
	insert_limit_speed_plan_detail_one(objects: LimitSpeedPlanDetailInsertInput!): LimitSpeedPlanDetail
	"""
	更新
	"""
	update_limit_speed_plan_detail(_inc: LimitSpeedPlanDetailIncInput, _set: LimitSpeedPlanDetailSetInput, where: LimitSpeedPlanDetailBoolExp!): LimitSpeedPlanDetailMutationResponse
	"""
	根据主键更新
	"""
	update_limit_speed_plan_detail_by_pk(_inc: LimitSpeedPlanDetailIncInput, _set: LimitSpeedPlanDetailSetInput, id: Bigint!): LimitSpeedPlanDetail
	"""
	根据联合主键更新
	"""
	update_limit_speed_plan_detail_by_union_pk(_inc: LimitSpeedPlanDetailIncInput, _set: LimitSpeedPlanDetailSetInput, detail_id: String!): LimitSpeedPlanDetail
	"""
	根据联合主键删除记录
	"""
	delete_limit_speed_plan_detail_by_union_pk(detail_id: String!): LimitSpeedPlanDetail
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_night_travel_record.graphqls", Input: `"""
车辆夜晚行驶记录
"""
type VehicleNightTravelRecord {
	"""
	ID
	"""
	id: Bigint!
	"""
	车辆夜晚运行记录ID
	"""
	record_id: String!
	"""
	车辆ID
	"""
	vehicle_id: String!
	"""
	所属企业ID
	"""
	enterprise_id: String!
	"""
	运输路线ID
	"""
	route: String
	"""
	运营商ID
	"""
	sprg_id: String
	"""
	车辆类型
	"""
	vehicle_type: Int
	"""
	营运类型
	"""
	service_type: Int
	"""
	接驳开始时间
	"""
	record_start_time: Timestamptz
	"""
	接驳结束时间
	"""
	record_end_time: Timestamptz
	"""
	状态(1生效2未审核3审核不通过)
	"""
	status: Int
	"""
	审核不通过原因
	"""
	cause: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	备注
	"""
	remark: String
}
"""
aggregated selection of "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordAggregate {
	aggregate: VehicleNightTravelRecordAggregateFields
}
"""
aggregate fields of "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordAggregateFields {
	avg: VehicleNightTravelRecordAvgFields
	count: Int
	max: VehicleNightTravelRecordMaxFields
	min: VehicleNightTravelRecordMinFields
	stddev: VehicleNightTravelRecordStddevFields
	stddev_pop: VehicleNightTravelRecordStddevPopFields
	stddev_samp: VehicleNightTravelRecordStddevSampFields
	sum: VehicleNightTravelRecordSumFields
	var_pop: VehicleNightTravelRecordVarPopFields
	var_samp: VehicleNightTravelRecordVarSampFields
	variance: VehicleNightTravelRecordVarianceFields
}
"""
aggregate avg on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordAvgFields {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
aggregate max on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordMaxFields {
	id: Bigint
	record_id: String
	vehicle_id: String
	enterprise_id: String
	route: String
	sprg_id: String
	vehicle_type: Int
	service_type: Int
	record_start_time: Timestamptz
	record_end_time: Timestamptz
	status: Int
	cause: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remark: String
}
"""
aggregate min on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordMinFields {
	id: Bigint
	record_id: String
	vehicle_id: String
	enterprise_id: String
	route: String
	sprg_id: String
	vehicle_type: Int
	service_type: Int
	record_start_time: Timestamptz
	record_end_time: Timestamptz
	status: Int
	cause: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remark: String
}
"""
aggregate stddev on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordStddevFields {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
aggregate stddev_pop on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordStddevPopFields {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
aggregate stddev_samp on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordStddevSampFields {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
aggregate sum on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordSumFields {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
aggregate var_pop on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordVarPopFields {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
aggregate var_samp on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordVarSampFields {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
aggregate variance on columns of table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordVarianceFields {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
response of any mutation on the table "vehicle_night_travel_record"
"""
type VehicleNightTravelRecordMutationResponse {
	affected_rows: Int!
	returning: [VehicleNightTravelRecord!]!
}
"""
ordering options when selecting data from "vehicle_night_travel_record"
"""
input VehicleNightTravelRecordOrderBy {
	id: OrderBy
	record_id: OrderBy
	vehicle_id: OrderBy
	enterprise_id: OrderBy
	route: OrderBy
	sprg_id: OrderBy
	vehicle_type: OrderBy
	service_type: OrderBy
	record_start_time: OrderBy
	record_end_time: OrderBy
	status: OrderBy
	cause: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
	remark: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_night_travel_record'.
"""
input VehicleNightTravelRecordBoolExp {
	_and: [VehicleNightTravelRecordBoolExp]
	_not: VehicleNightTravelRecordBoolExp
	_or: [VehicleNightTravelRecordBoolExp]
	id: BigintComparisonExp
	record_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	route: StringComparisonExp
	sprg_id: StringComparisonExp
	vehicle_type: IntComparisonExp
	service_type: IntComparisonExp
	record_start_time: TimestamptzComparisonExp
	record_end_time: TimestamptzComparisonExp
	status: IntComparisonExp
	cause: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
	remark: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_night_travel_record"
"""
input VehicleNightTravelRecordInsertInput {
	vehicle_id: String!
	enterprise_id: String!
	route: String
	sprg_id: String
	vehicle_type: Int
	service_type: Int
	record_start_time: Timestamptz
	record_end_time: Timestamptz
	status: Int
	cause: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
	remark: String
}
"""
input type for incrementing integer column in table "vehicle_night_travel_record"
"""
input VehicleNightTravelRecordIncInput {
	id: Bigint
	vehicle_type: Int
	service_type: Int
	status: Int
}
"""
input type for updating data in table "vehicle_night_travel_record"
"""
input VehicleNightTravelRecordSetInput {
	id: Bigint
	record_id: String
	vehicle_id: String
	enterprise_id: String
	route: String
	sprg_id: String
	vehicle_type: Int
	service_type: Int
	record_start_time: Timestamptz
	record_end_time: Timestamptz
	status: Int
	cause: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
	remark: String
}
"""
可选select
"""
enum VehicleNightTravelRecordSelectColumn {
	"""
	ID
	"""
	id
	"""
	车辆夜晚运行记录ID
	"""
	record_id
	"""
	车辆ID
	"""
	vehicle_id
	"""
	所属企业ID
	"""
	enterprise_id
	"""
	运输路线ID
	"""
	route
	"""
	运营商ID
	"""
	sprg_id
	"""
	车辆类型
	"""
	vehicle_type
	"""
	营运类型
	"""
	service_type
	"""
	接驳开始时间
	"""
	record_start_time
	"""
	接驳结束时间
	"""
	record_end_time
	"""
	状态(1生效2未审核3审核不通过)
	"""
	status
	"""
	审核不通过原因
	"""
	cause
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
	"""
	备注
	"""
	remark
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_night_travel_record(distinct_on: [VehicleNightTravelRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleNightTravelRecordOrderBy!], where: VehicleNightTravelRecordBoolExp): [VehicleNightTravelRecord!]!
	"""
	聚合查询
	"""
	vehicle_night_travel_record_aggregate(distinct_on: [VehicleNightTravelRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleNightTravelRecordOrderBy!], where: VehicleNightTravelRecordBoolExp): VehicleNightTravelRecordAggregate!
	"""
	主键查询
	"""
	vehicle_night_travel_record_by_pk(id: Bigint!): VehicleNightTravelRecord!
	"""
	联合主键查询
	"""
	vehicle_night_travel_record_by_union_pk(record_id: String!): VehicleNightTravelRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_night_travel_record(where: VehicleNightTravelRecordBoolExp!): VehicleNightTravelRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_night_travel_record_by_pk(id: Bigint!): VehicleNightTravelRecord
	"""
	插入
	"""
	insert_vehicle_night_travel_record(objects: [VehicleNightTravelRecordInsertInput!]!): VehicleNightTravelRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_night_travel_record_one(objects: VehicleNightTravelRecordInsertInput!): VehicleNightTravelRecord
	"""
	更新
	"""
	update_vehicle_night_travel_record(_inc: VehicleNightTravelRecordIncInput, _set: VehicleNightTravelRecordSetInput, where: VehicleNightTravelRecordBoolExp!): VehicleNightTravelRecordMutationResponse
	"""
	根据主键更新
	"""
	update_vehicle_night_travel_record_by_pk(_inc: VehicleNightTravelRecordIncInput, _set: VehicleNightTravelRecordSetInput, id: Bigint!): VehicleNightTravelRecord
	"""
	根据联合主键更新
	"""
	update_vehicle_night_travel_record_by_union_pk(_inc: VehicleNightTravelRecordIncInput, _set: VehicleNightTravelRecordSetInput, record_id: String!): VehicleNightTravelRecord
	"""
	根据联合主键删除记录
	"""
	delete_vehicle_night_travel_record_by_union_pk(record_id: String!): VehicleNightTravelRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_stop_travel_record.graphqls", Input: `"""
车辆停运报备记录
"""
type VehicleStopTravelRecord {
	"""
	ID
	"""
	id: Bigint!
	"""
	车辆停运报备记录ID
	"""
	record_id: String!
	"""
	报备单据号
	"""
	bill_id: String!
	"""
	报备起始时间
	"""
	record_start_time: Timestamptz
	"""
	报备结束时间
	"""
	record_end_time: Timestamptz
	"""
	报备人ID
	"""
	record_user_id: String
	"""
	是否生效
	"""
	is_effect: Boolean
	"""
	生效起始时间
	"""
	effect_start_time: Timestamptz
	"""
	生效结束时间
	"""
	effect_end_time: Timestamptz
	"""
	车辆ID
	"""
	vehicle_id: String
	"""
	停运原因
	"""
	cause: String
	"""
	创建时间
	"""
	create_at: Timestamptz!
	"""
	创建人
	"""
	create_by: String
	"""
	更新时间
	"""
	update_at: Timestamptz
	"""
	更新人
	"""
	update_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	是否删除
	"""
	is_delete: Boolean!
}
"""
aggregated selection of "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordAggregate {
	aggregate: VehicleStopTravelRecordAggregateFields
}
"""
aggregate fields of "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordAggregateFields {
	avg: VehicleStopTravelRecordAvgFields
	count: Int
	max: VehicleStopTravelRecordMaxFields
	min: VehicleStopTravelRecordMinFields
	stddev: VehicleStopTravelRecordStddevFields
	stddev_pop: VehicleStopTravelRecordStddevPopFields
	stddev_samp: VehicleStopTravelRecordStddevSampFields
	sum: VehicleStopTravelRecordSumFields
	var_pop: VehicleStopTravelRecordVarPopFields
	var_samp: VehicleStopTravelRecordVarSampFields
	variance: VehicleStopTravelRecordVarianceFields
}
"""
aggregate avg on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordMaxFields {
	id: Bigint
	record_id: String
	bill_id: String
	record_start_time: Timestamptz
	record_end_time: Timestamptz
	record_user_id: String
	is_effect: Boolean
	effect_start_time: Timestamptz
	effect_end_time: Timestamptz
	vehicle_id: String
	cause: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate min on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordMinFields {
	id: Bigint
	record_id: String
	bill_id: String
	record_start_time: Timestamptz
	record_end_time: Timestamptz
	record_user_id: String
	is_effect: Boolean
	effect_start_time: Timestamptz
	effect_end_time: Timestamptz
	vehicle_id: String
	cause: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
aggregate stddev on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "vehicle_stop_travel_record"
"""
type VehicleStopTravelRecordMutationResponse {
	affected_rows: Int!
	returning: [VehicleStopTravelRecord!]!
}
"""
ordering options when selecting data from "vehicle_stop_travel_record"
"""
input VehicleStopTravelRecordOrderBy {
	id: OrderBy
	record_id: OrderBy
	bill_id: OrderBy
	record_start_time: OrderBy
	record_end_time: OrderBy
	record_user_id: OrderBy
	is_effect: OrderBy
	effect_start_time: OrderBy
	effect_end_time: OrderBy
	vehicle_id: OrderBy
	cause: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	is_delete: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_stop_travel_record'.
"""
input VehicleStopTravelRecordBoolExp {
	_and: [VehicleStopTravelRecordBoolExp]
	_not: VehicleStopTravelRecordBoolExp
	_or: [VehicleStopTravelRecordBoolExp]
	id: BigintComparisonExp
	record_id: StringComparisonExp
	bill_id: StringComparisonExp
	record_start_time: TimestamptzComparisonExp
	record_end_time: TimestamptzComparisonExp
	record_user_id: StringComparisonExp
	is_effect: BooleanComparisonExp
	effect_start_time: TimestamptzComparisonExp
	effect_end_time: TimestamptzComparisonExp
	vehicle_id: StringComparisonExp
	cause: StringComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	is_delete: BooleanComparisonExp
}
"""
input type for inserting data into table "vehicle_stop_travel_record"
"""
input VehicleStopTravelRecordInsertInput {
	bill_id: String!
	record_start_time: Timestamptz
	record_end_time: Timestamptz
	record_user_id: String
	is_effect: Boolean
	effect_start_time: Timestamptz
	effect_end_time: Timestamptz
	vehicle_id: String
	cause: String
	create_at: Timestamptz!
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean!
}
"""
input type for incrementing integer column in table "vehicle_stop_travel_record"
"""
input VehicleStopTravelRecordIncInput {
	id: Bigint
}
"""
input type for updating data in table "vehicle_stop_travel_record"
"""
input VehicleStopTravelRecordSetInput {
	id: Bigint
	record_id: String
	bill_id: String
	record_start_time: Timestamptz
	record_end_time: Timestamptz
	record_user_id: String
	is_effect: Boolean
	effect_start_time: Timestamptz
	effect_end_time: Timestamptz
	vehicle_id: String
	cause: String
	create_at: Timestamptz
	create_by: String
	update_at: Timestamptz
	update_by: String
	delete_at: Timestamptz
	delete_by: String
	is_delete: Boolean
}
"""
可选select
"""
enum VehicleStopTravelRecordSelectColumn {
	"""
	ID
	"""
	id
	"""
	车辆停运报备记录ID
	"""
	record_id
	"""
	报备单据号
	"""
	bill_id
	"""
	报备起始时间
	"""
	record_start_time
	"""
	报备结束时间
	"""
	record_end_time
	"""
	报备人ID
	"""
	record_user_id
	"""
	是否生效
	"""
	is_effect
	"""
	生效起始时间
	"""
	effect_start_time
	"""
	生效结束时间
	"""
	effect_end_time
	"""
	车辆ID
	"""
	vehicle_id
	"""
	停运原因
	"""
	cause
	"""
	创建时间
	"""
	create_at
	"""
	创建人
	"""
	create_by
	"""
	更新时间
	"""
	update_at
	"""
	更新人
	"""
	update_by
	"""
	删除时间
	"""
	delete_at
	"""
	删除人
	"""
	delete_by
	"""
	是否删除
	"""
	is_delete
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_stop_travel_record(distinct_on: [VehicleStopTravelRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleStopTravelRecordOrderBy!], where: VehicleStopTravelRecordBoolExp): [VehicleStopTravelRecord!]!
	"""
	聚合查询
	"""
	vehicle_stop_travel_record_aggregate(distinct_on: [VehicleStopTravelRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleStopTravelRecordOrderBy!], where: VehicleStopTravelRecordBoolExp): VehicleStopTravelRecordAggregate!
	"""
	主键查询
	"""
	vehicle_stop_travel_record_by_pk(id: Bigint!): VehicleStopTravelRecord!
	"""
	联合主键查询
	"""
	vehicle_stop_travel_record_by_union_pk(record_id: String!): VehicleStopTravelRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_stop_travel_record(where: VehicleStopTravelRecordBoolExp!): VehicleStopTravelRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_stop_travel_record_by_pk(id: Bigint!): VehicleStopTravelRecord
	"""
	插入
	"""
	insert_vehicle_stop_travel_record(objects: [VehicleStopTravelRecordInsertInput!]!): VehicleStopTravelRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_stop_travel_record_one(objects: VehicleStopTravelRecordInsertInput!): VehicleStopTravelRecord
	"""
	更新
	"""
	update_vehicle_stop_travel_record(_inc: VehicleStopTravelRecordIncInput, _set: VehicleStopTravelRecordSetInput, where: VehicleStopTravelRecordBoolExp!): VehicleStopTravelRecordMutationResponse
	"""
	根据主键更新
	"""
	update_vehicle_stop_travel_record_by_pk(_inc: VehicleStopTravelRecordIncInput, _set: VehicleStopTravelRecordSetInput, id: Bigint!): VehicleStopTravelRecord
	"""
	根据联合主键更新
	"""
	update_vehicle_stop_travel_record_by_union_pk(_inc: VehicleStopTravelRecordIncInput, _set: VehicleStopTravelRecordSetInput, record_id: String!): VehicleStopTravelRecord
	"""
	根据联合主键删除记录
	"""
	delete_vehicle_stop_travel_record_by_union_pk(record_id: String!): VehicleStopTravelRecord
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_control_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ControlLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNControlLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_control_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_control_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["control_line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["control_line_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_control_line_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ControlLineTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNControlLineTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_control_line_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_control_line_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["control_line_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_time_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["control_line_time_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_check_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileCheckHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEcdFileCheckHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_check_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_check_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_district_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileDistrictBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEcdFileDistrictBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_district_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_district_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["file_district_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_district_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_district_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_line_point_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileLinePointBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEcdFileLinePointBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_line_point_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_line_point_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["line_point_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["line_point_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_main_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileMainBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEcdFileMainBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_main_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_main_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["file_main_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_main_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_main_sub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileMainSubBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEcdFileMainSubBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_main_sub_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_main_sub_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["file_main_sub_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_sub_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_main_sub_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_vehicle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEcdFileVehicleBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_vehicle_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_vehicle_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["file_vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_vehicle_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_vehicle_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_vehicle_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileVehicleTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEcdFileVehicleTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_vehicle_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_file_vehicle_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vehicle_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_time_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_time_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEcdLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_ecd_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["line_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_electric_fence_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ElectricFenceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNElectricFenceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_electric_fence_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_electric_fence_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["electric_fence_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["electric_fence_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_electric_fence_enterance_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ElectricFenceEnteranceRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNElectricFenceEnteranceRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_electric_fence_enterance_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_electric_fence_enterance_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LimitSpeedLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNLimitSpeedLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["limit_speed_line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_line_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_line_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LimitSpeedLineTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNLimitSpeedLineTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_line_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_line_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["limit_speed_line_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_time_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_line_time_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_plan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LimitSpeedPlanBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNLimitSpeedPlanBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_plan_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_plan_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["limit_speed_plan_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_plan_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_plan_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_plan_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LimitSpeedPlanDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNLimitSpeedPlanDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_plan_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_limit_speed_plan_detail_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detail_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["detail_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_night_travel_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleNightTravelRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleNightTravelRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_night_travel_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_night_travel_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_stop_travel_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleStopTravelRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleStopTravelRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_stop_travel_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_stop_travel_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_control_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ControlLineInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNControlLineInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_control_line_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ControlLineInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNControlLineInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_control_line_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ControlLineTimeInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNControlLineTimeInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_control_line_time_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ControlLineTimeInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNControlLineTimeInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_check_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EcdFileCheckHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileCheckHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_check_his_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileCheckHisInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileCheckHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_district_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EcdFileDistrictInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileDistrictInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_district_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileDistrictInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileDistrictInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_line_point_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EcdFileLinePointInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileLinePointInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_line_point_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileLinePointInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileLinePointInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_main_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EcdFileMainInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileMainInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_main_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileMainInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileMainInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_main_sub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EcdFileMainSubInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileMainSubInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_main_sub_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileMainSubInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileMainSubInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_vehicle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EcdFileVehicleInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileVehicleInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_vehicle_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileVehicleInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileVehicleInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_vehicle_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EcdFileVehicleTimeInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileVehicleTimeInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_file_vehicle_time_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdFileVehicleTimeInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdFileVehicleTimeInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EcdLineInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdLineInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_ecd_line_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EcdLineInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEcdLineInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_electric_fence_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ElectricFenceInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNElectricFenceInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_electric_fence_enterance_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.ElectricFenceEnteranceRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNElectricFenceEnteranceRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_electric_fence_enterance_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ElectricFenceEnteranceRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNElectricFenceEnteranceRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_electric_fence_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ElectricFenceInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNElectricFenceInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_limit_speed_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.LimitSpeedLineInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNLimitSpeedLineInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_limit_speed_line_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LimitSpeedLineInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNLimitSpeedLineInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_limit_speed_line_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.LimitSpeedLineTimeInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNLimitSpeedLineTimeInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_limit_speed_line_time_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LimitSpeedLineTimeInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNLimitSpeedLineTimeInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_limit_speed_plan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.LimitSpeedPlanInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNLimitSpeedPlanInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_limit_speed_plan_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.LimitSpeedPlanDetailInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNLimitSpeedPlanDetailInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_limit_speed_plan_detail_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LimitSpeedPlanDetailInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNLimitSpeedPlanDetailInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_limit_speed_plan_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LimitSpeedPlanInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNLimitSpeedPlanInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_night_travel_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleNightTravelRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleNightTravelRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_night_travel_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleNightTravelRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleNightTravelRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_stop_travel_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleStopTravelRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleStopTravelRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_stop_travel_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleStopTravelRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleStopTravelRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_control_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ControlLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOControlLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ControlLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOControlLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.ControlLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNControlLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_control_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ControlLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOControlLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ControlLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOControlLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_control_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ControlLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOControlLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ControlLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOControlLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["control_line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["control_line_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_control_line_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ControlLineTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOControlLineTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ControlLineTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOControlLineTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.ControlLineTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNControlLineTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_control_line_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ControlLineTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOControlLineTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ControlLineTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOControlLineTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_control_line_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ControlLineTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOControlLineTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ControlLineTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOControlLineTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["control_line_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_time_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["control_line_time_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_check_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileCheckHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileCheckHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileCheckHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileCheckHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EcdFileCheckHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEcdFileCheckHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_check_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileCheckHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileCheckHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileCheckHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileCheckHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_check_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileCheckHisIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileCheckHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileCheckHisSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileCheckHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_district_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileDistrictIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileDistrictIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileDistrictSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileDistrictSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EcdFileDistrictBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEcdFileDistrictBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_district_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileDistrictIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileDistrictIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileDistrictSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileDistrictSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_district_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileDistrictIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileDistrictIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileDistrictSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileDistrictSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["file_district_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_district_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_district_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_line_point_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileLinePointIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileLinePointIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileLinePointSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileLinePointSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EcdFileLinePointBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEcdFileLinePointBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_line_point_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileLinePointIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileLinePointIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileLinePointSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileLinePointSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_line_point_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileLinePointIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileLinePointIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileLinePointSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileLinePointSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["line_point_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["line_point_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_main_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileMainIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileMainIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileMainSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileMainSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EcdFileMainBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEcdFileMainBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_main_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileMainIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileMainIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileMainSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileMainSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_main_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileMainIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileMainIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileMainSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileMainSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["file_main_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_main_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_main_sub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileMainSubIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileMainSubIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileMainSubSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileMainSubSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EcdFileMainSubBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEcdFileMainSubBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_main_sub_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileMainSubIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileMainSubIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileMainSubSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileMainSubSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_main_sub_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileMainSubIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileMainSubIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileMainSubSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileMainSubSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["file_main_sub_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_sub_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_main_sub_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_vehicle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileVehicleIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileVehicleIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileVehicleSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileVehicleSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EcdFileVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEcdFileVehicleBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_vehicle_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileVehicleIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileVehicleIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileVehicleSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileVehicleSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_vehicle_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileVehicleIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileVehicleIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileVehicleSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileVehicleSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["file_vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_vehicle_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_vehicle_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_vehicle_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileVehicleTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileVehicleTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileVehicleTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileVehicleTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EcdFileVehicleTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEcdFileVehicleTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_vehicle_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileVehicleTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileVehicleTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileVehicleTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileVehicleTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_file_vehicle_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdFileVehicleTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdFileVehicleTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdFileVehicleTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdFileVehicleTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["vehicle_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_time_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_time_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EcdLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEcdLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_ecd_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EcdLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEcdLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EcdLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEcdLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["line_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_electric_fence_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ElectricFenceIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOElectricFenceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ElectricFenceSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOElectricFenceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.ElectricFenceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNElectricFenceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_electric_fence_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ElectricFenceIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOElectricFenceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ElectricFenceSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOElectricFenceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_electric_fence_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ElectricFenceIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOElectricFenceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ElectricFenceSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOElectricFenceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["electric_fence_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["electric_fence_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_electric_fence_enterance_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ElectricFenceEnteranceRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOElectricFenceEnteranceRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ElectricFenceEnteranceRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOElectricFenceEnteranceRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.ElectricFenceEnteranceRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNElectricFenceEnteranceRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_electric_fence_enterance_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ElectricFenceEnteranceRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOElectricFenceEnteranceRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ElectricFenceEnteranceRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOElectricFenceEnteranceRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_electric_fence_enterance_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ElectricFenceEnteranceRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOElectricFenceEnteranceRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.ElectricFenceEnteranceRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOElectricFenceEnteranceRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.LimitSpeedLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNLimitSpeedLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedLineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedLineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["limit_speed_line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_line_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_line_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedLineTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedLineTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedLineTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedLineTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.LimitSpeedLineTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNLimitSpeedLineTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_line_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedLineTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedLineTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedLineTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedLineTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_line_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedLineTimeIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedLineTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedLineTimeSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedLineTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["limit_speed_line_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_time_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_line_time_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_plan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedPlanIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedPlanIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedPlanSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedPlanSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.LimitSpeedPlanBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNLimitSpeedPlanBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_plan_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedPlanIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedPlanIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedPlanSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedPlanSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_plan_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedPlanIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedPlanIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedPlanSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedPlanSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["limit_speed_plan_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_plan_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_plan_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_plan_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedPlanDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedPlanDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedPlanDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedPlanDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.LimitSpeedPlanDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNLimitSpeedPlanDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_plan_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedPlanDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedPlanDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedPlanDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedPlanDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_limit_speed_plan_detail_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LimitSpeedPlanDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOLimitSpeedPlanDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.LimitSpeedPlanDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOLimitSpeedPlanDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detail_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["detail_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_night_travel_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleNightTravelRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleNightTravelRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleNightTravelRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleNightTravelRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleNightTravelRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleNightTravelRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_night_travel_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleNightTravelRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleNightTravelRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleNightTravelRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleNightTravelRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_night_travel_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleNightTravelRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleNightTravelRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleNightTravelRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleNightTravelRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_stop_travel_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleStopTravelRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleStopTravelRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleStopTravelRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleStopTravelRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleStopTravelRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleStopTravelRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_stop_travel_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleStopTravelRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleStopTravelRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleStopTravelRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleStopTravelRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_stop_travel_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleStopTravelRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleStopTravelRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleStopTravelRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleStopTravelRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_control_line_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ControlLineSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOControlLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ControlLineOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOControlLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ControlLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOControlLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_control_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ControlLineSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOControlLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ControlLineOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOControlLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ControlLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOControlLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_control_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_control_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["control_line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["control_line_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_control_line_time_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ControlLineTimeSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOControlLineTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ControlLineTimeOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOControlLineTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ControlLineTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOControlLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_control_line_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ControlLineTimeSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOControlLineTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ControlLineTimeOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOControlLineTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ControlLineTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOControlLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_control_line_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_control_line_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["control_line_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_time_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["control_line_time_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_check_his_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileCheckHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileCheckHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileCheckHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileCheckHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileCheckHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileCheckHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_check_his_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileCheckHisSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileCheckHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileCheckHisOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileCheckHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileCheckHisBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileCheckHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_check_his_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_check_his_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["his_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["his_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_district_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileDistrictSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileDistrictSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileDistrictOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileDistrictOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileDistrictBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileDistrictBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_district_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileDistrictSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileDistrictSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileDistrictOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileDistrictOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileDistrictBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileDistrictBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_district_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_district_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["file_district_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_district_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_district_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_line_point_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileLinePointSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileLinePointSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileLinePointOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileLinePointOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileLinePointBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileLinePointBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_line_point_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileLinePointSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileLinePointSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileLinePointOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileLinePointOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileLinePointBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileLinePointBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_line_point_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_line_point_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["line_point_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["line_point_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_main_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileMainSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileMainSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileMainOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileMainOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileMainBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileMainBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_main_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileMainSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileMainSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileMainOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileMainOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileMainBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileMainBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_main_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_main_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["file_main_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_main_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_main_sub_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileMainSubSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileMainSubSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileMainSubOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileMainSubOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileMainSubBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileMainSubBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_main_sub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileMainSubSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileMainSubSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileMainSubOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileMainSubOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileMainSubBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileMainSubBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_main_sub_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_main_sub_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["file_main_sub_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_sub_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_main_sub_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_vehicle_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileVehicleSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileVehicleSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileVehicleOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileVehicleOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileVehicleBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_vehicle_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileVehicleSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileVehicleSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileVehicleOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileVehicleOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileVehicleBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileVehicleBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_vehicle_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_vehicle_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["file_vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_vehicle_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file_vehicle_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_vehicle_time_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileVehicleTimeSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileVehicleTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileVehicleTimeOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileVehicleTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileVehicleTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileVehicleTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_vehicle_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdFileVehicleTimeSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdFileVehicleTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdFileVehicleTimeOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdFileVehicleTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdFileVehicleTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdFileVehicleTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_vehicle_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_file_vehicle_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["vehicle_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_time_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_time_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_line_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdLineSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdLineOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EcdLineSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEcdLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EcdLineOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEcdLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EcdLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEcdLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_ecd_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ecd_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["line_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_electric_fence_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ElectricFenceSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOElectricFenceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ElectricFenceOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOElectricFenceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ElectricFenceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOElectricFenceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_electric_fence_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ElectricFenceSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOElectricFenceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ElectricFenceOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOElectricFenceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ElectricFenceBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOElectricFenceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_electric_fence_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_electric_fence_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["electric_fence_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["electric_fence_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_electric_fence_enterance_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ElectricFenceEnteranceRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOElectricFenceEnteranceRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ElectricFenceEnteranceRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOElectricFenceEnteranceRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ElectricFenceEnteranceRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOElectricFenceEnteranceRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_electric_fence_enterance_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.ElectricFenceEnteranceRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOElectricFenceEnteranceRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.ElectricFenceEnteranceRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOElectricFenceEnteranceRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.ElectricFenceEnteranceRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOElectricFenceEnteranceRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_electric_fence_enterance_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_electric_fence_enterance_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_line_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.LimitSpeedLineSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOLimitSpeedLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.LimitSpeedLineOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLimitSpeedLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.LimitSpeedLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLimitSpeedLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_line_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.LimitSpeedLineSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOLimitSpeedLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.LimitSpeedLineOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLimitSpeedLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.LimitSpeedLineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLimitSpeedLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_line_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_line_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["limit_speed_line_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_line_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_line_time_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.LimitSpeedLineTimeSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOLimitSpeedLineTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.LimitSpeedLineTimeOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLimitSpeedLineTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.LimitSpeedLineTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLimitSpeedLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_line_time_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.LimitSpeedLineTimeSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOLimitSpeedLineTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.LimitSpeedLineTimeOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLimitSpeedLineTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.LimitSpeedLineTimeBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLimitSpeedLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_line_time_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_line_time_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["limit_speed_line_time_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_time_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_line_time_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_plan_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.LimitSpeedPlanSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOLimitSpeedPlanSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.LimitSpeedPlanOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLimitSpeedPlanOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.LimitSpeedPlanBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLimitSpeedPlanBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_plan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.LimitSpeedPlanSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOLimitSpeedPlanSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.LimitSpeedPlanOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLimitSpeedPlanOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.LimitSpeedPlanBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLimitSpeedPlanBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_plan_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_plan_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["limit_speed_plan_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_plan_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit_speed_plan_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_plan_detail_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.LimitSpeedPlanDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOLimitSpeedPlanDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.LimitSpeedPlanDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLimitSpeedPlanDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.LimitSpeedPlanDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLimitSpeedPlanDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_plan_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.LimitSpeedPlanDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOLimitSpeedPlanDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.LimitSpeedPlanDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOLimitSpeedPlanDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.LimitSpeedPlanDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOLimitSpeedPlanDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_plan_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_limit_speed_plan_detail_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detail_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["detail_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_night_travel_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleNightTravelRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleNightTravelRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleNightTravelRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleNightTravelRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleNightTravelRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleNightTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_night_travel_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleNightTravelRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleNightTravelRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleNightTravelRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleNightTravelRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleNightTravelRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleNightTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_night_travel_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_night_travel_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_stop_travel_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleStopTravelRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleStopTravelRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleStopTravelRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleStopTravelRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleStopTravelRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleStopTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_stop_travel_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleStopTravelRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleStopTravelRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleStopTravelRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleStopTravelRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleStopTravelRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleStopTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_stop_travel_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_stop_travel_record_by_union_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["record_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["record_id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ControlLine_id(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_control_line_id(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_line_name(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_line_type(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_control_level(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_check_time(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_reject_reason(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLine_gis_data(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineAggregateFields)
	fc.Result = res
	return ec.marshalOControlLineAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineAvgFields)
	fc.Result = res
	return ec.marshalOControlLineAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineMaxFields)
	fc.Result = res
	return ec.marshalOControlLineMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineMinFields)
	fc.Result = res
	return ec.marshalOControlLineMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineStddevFields)
	fc.Result = res
	return ec.marshalOControlLineStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineStddevPopFields)
	fc.Result = res
	return ec.marshalOControlLineStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineStddevSampFields)
	fc.Result = res
	return ec.marshalOControlLineStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineSumFields)
	fc.Result = res
	return ec.marshalOControlLineSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineVarPopFields)
	fc.Result = res
	return ec.marshalOControlLineVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineVarSampFields)
	fc.Result = res
	return ec.marshalOControlLineVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineVarianceFields)
	fc.Result = res
	return ec.marshalOControlLineVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAvgFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAvgFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineAvgFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_control_line_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_line_name(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_check_time(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_reject_reason(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMaxFields_gis_data(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_control_line_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_line_name(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_check_time(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_reject_reason(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMinFields_gis_data(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ControlLine)
	fc.Result = res
	return ec.marshalNControlLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevPopFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevPopFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevSampFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevSampFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineStddevSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineSumFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineSumFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineSumFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_id(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_control_line_time_id(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_control_line_id(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTime_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.ControlLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeAggregateFields)
	fc.Result = res
	return ec.marshalOControlLineTimeAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeAvgFields)
	fc.Result = res
	return ec.marshalOControlLineTimeAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeMaxFields)
	fc.Result = res
	return ec.marshalOControlLineTimeMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeMinFields)
	fc.Result = res
	return ec.marshalOControlLineTimeMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeStddevFields)
	fc.Result = res
	return ec.marshalOControlLineTimeStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeStddevPopFields)
	fc.Result = res
	return ec.marshalOControlLineTimeStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeStddevSampFields)
	fc.Result = res
	return ec.marshalOControlLineTimeStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeSumFields)
	fc.Result = res
	return ec.marshalOControlLineTimeSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeVarPopFields)
	fc.Result = res
	return ec.marshalOControlLineTimeVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeVarSampFields)
	fc.Result = res
	return ec.marshalOControlLineTimeVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeVarianceFields)
	fc.Result = res
	return ec.marshalOControlLineTimeVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_control_line_time_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_control_line_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_control_line_time_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_control_line_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalNControlLineTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineTimeVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineTimeVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineTimeVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarPopFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarPopFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarSampFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarSampFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarianceFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarianceFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ControlLineVarianceFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.ControlLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ControlLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_his_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_oper_type(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_rec_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_oper_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_suggest(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suggest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_remark(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHis_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileCheckHis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisAggregateFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisAvgFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisMaxFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisMinFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisStddevFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisStddevPopFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisStddevSampFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisSumFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisVarPopFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisVarSampFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisVarianceFields)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAvgFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisAvgFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_his_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_rec_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_oper_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_suggest(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suggest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_remark(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_his_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HisID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_rec_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_oper_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_suggest(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suggest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_remark(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalNEcdFileCheckHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevPopFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevSampFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisStddevSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisSumFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisSumFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarPopFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarSampFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarianceFields_oper_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileCheckHisVarianceFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileCheckHisVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileCheckHisVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_file_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrict_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileDistrict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictAggregateFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictAvgFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictMaxFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictMinFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictStddevFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictStddevPopFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictStddevSampFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictSumFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictVarPopFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictVarSampFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictVarianceFields)
	fc.Result = res
	return ec.marshalOEcdFileDistrictVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_file_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_file_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalNEcdFileDistrict2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrictᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileDistrictVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileDistrictVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileDistrictVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_line_point_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_gps_point(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_map_point(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_line_point_name(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_line_point_remark(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_point_type(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePoint_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileLinePoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointAggregateFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointAvgFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointMaxFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointMinFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointStddevFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointStddevPopFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointStddevSampFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointSumFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointVarPopFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointVarSampFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointVarianceFields)
	fc.Result = res
	return ec.marshalOEcdFileLinePointVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointAvgFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_line_point_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_gps_point(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_map_point(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_line_point_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_line_point_remark(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_line_point_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_gps_point(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_map_point(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_line_point_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_line_point_remark(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinePointRemark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalNEcdFileLinePoint2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePointᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointStddevFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointStddevPopFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointStddevSampFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointSumFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointVarPopFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointVarSampFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileLinePointVarianceFields_point_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileLinePointVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileLinePointVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_file_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_is_cross_district(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCrossDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_first_cross_pid(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstCrossPid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_plan_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_plan_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_check_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_phone_num(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_point_state(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_end_state(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_title(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_add_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_start_point_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartPointCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_end_point_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPointCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_route_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RouteCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_speed_time_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedTimeCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_return_suggest(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReturnSuggest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_construct_title(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_construct_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_is_match_construction(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMatchConstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_client_report_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientReportTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_construct_prove_file(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_do_construct_prove_file(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoConstructProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_sub_package_prove_file(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubPackageProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_traffic_prove_file(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_route_board_promise_file(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RouteBoardPromiseFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_traffice_object_promise_file(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficeObjectPromiseFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_construct_garbage_allow_file(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructGarbageAllowFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_construct_site_enterance_photo(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructSiteEnterancePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_construct_wash_car_place_photo(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructWashCarPlacePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMain_remark(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainAggregateFields)
	fc.Result = res
	return ec.marshalOEcdFileMainAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainAvgFields)
	fc.Result = res
	return ec.marshalOEcdFileMainAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainMaxFields)
	fc.Result = res
	return ec.marshalOEcdFileMainMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainMinFields)
	fc.Result = res
	return ec.marshalOEcdFileMainMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainStddevFields)
	fc.Result = res
	return ec.marshalOEcdFileMainStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainStddevPopFields)
	fc.Result = res
	return ec.marshalOEcdFileMainStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainStddevSampFields)
	fc.Result = res
	return ec.marshalOEcdFileMainStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSumFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainVarPopFields)
	fc.Result = res
	return ec.marshalOEcdFileMainVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainVarSampFields)
	fc.Result = res
	return ec.marshalOEcdFileMainVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainVarianceFields)
	fc.Result = res
	return ec.marshalOEcdFileMainVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAvgFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAvgFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainAvgFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_file_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_is_cross_district(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCrossDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_first_cross_pid(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstCrossPid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_plan_start_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_plan_end_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_check_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_phone_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_title(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_add_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_start_point_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartPointCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_end_point_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPointCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_route_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RouteCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_speed_time_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedTimeCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_return_suggest(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReturnSuggest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_construct_title(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_construct_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_is_match_construction(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMatchConstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_client_report_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientReportTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_construct_prove_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_do_construct_prove_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoConstructProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_sub_package_prove_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubPackageProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_traffic_prove_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_route_board_promise_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RouteBoardPromiseFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_traffice_object_promise_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficeObjectPromiseFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_construct_garbage_allow_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructGarbageAllowFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_construct_site_enterance_photo(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructSiteEnterancePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_construct_wash_car_place_photo(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructWashCarPlacePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMaxFields_remark(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_file_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_is_cross_district(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCrossDistrict, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_first_cross_pid(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstCrossPid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_plan_start_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_plan_end_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_check_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_phone_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_title(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_add_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddDistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_start_point_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartPointCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_end_point_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndPointCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_route_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RouteCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_speed_time_checker_sign(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedTimeCheckerSign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_return_suggest(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReturnSuggest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_construct_title(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_construct_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_is_match_construction(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMatchConstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_client_report_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientReportTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_construct_prove_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_do_construct_prove_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoConstructProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_sub_package_prove_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubPackageProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_traffic_prove_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficProveFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_route_board_promise_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RouteBoardPromiseFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_traffice_object_promise_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficeObjectPromiseFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_construct_garbage_allow_file(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructGarbageAllowFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_construct_site_enterance_photo(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructSiteEnterancePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_construct_wash_car_place_photo(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructWashCarPlacePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMinFields_remark(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalNEcdFileMain2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevPopFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevPopFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevSampFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainStddevSampFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_file_main_sub_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainSubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_address(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_construct_unit(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_construct_director_name(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_construct_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_contract_unit(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_contract_director_name(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_contract_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_traffic_unit(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_traffic_director_name(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_traffic_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_wl_type(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_plan_deal_area(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanDealArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_plan_trans_volume(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanTransVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_plan_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_plan_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_plan_trans_lines(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanTransLines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_construct_prove_num(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_contract_prove_num(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_traffic_prove_num(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_sub_package_unit(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubPackageUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_package_prove_num(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_package_director_name(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_package_phone(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_facts(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSub_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileMainSub) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSub",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubAggregateFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubAvgFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubMaxFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubMinFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubStddevFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubStddevPopFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubStddevSampFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubSumFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubVarPopFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubVarSampFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubVarianceFields)
	fc.Result = res
	return ec.marshalOEcdFileMainSubVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubAvgFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_file_main_sub_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainSubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_address(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_construct_unit(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_construct_director_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_construct_phone(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_contract_unit(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_contract_director_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_contract_phone(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_traffic_unit(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_traffic_director_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_traffic_phone(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_plan_deal_area(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanDealArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_plan_trans_volume(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanTransVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_plan_start_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_plan_end_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_plan_trans_lines(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanTransLines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_construct_prove_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_contract_prove_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_traffic_prove_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_sub_package_unit(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubPackageUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_package_prove_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_package_director_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_package_phone(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_facts(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_file_main_sub_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainSubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_address(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_construct_unit(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_construct_director_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_construct_phone(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_contract_unit(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_contract_director_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_contract_phone(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_traffic_unit(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_traffic_director_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_traffic_phone(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_plan_deal_area(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanDealArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_plan_trans_volume(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanTransVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_plan_start_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_plan_end_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_plan_trans_lines(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanTransLines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_construct_prove_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConstructProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_contract_prove_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_traffic_prove_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_sub_package_unit(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubPackageUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_package_prove_num(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageProveNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_package_director_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageDirectorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_package_phone(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackagePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_facts(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalNEcdFileMainSub2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSubᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubStddevFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubStddevPopFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubStddevSampFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubSumFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubVarPopFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubVarSampFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSubVarianceFields_wl_type(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSubVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSubVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WlType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSumFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSumFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainSumFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarPopFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarPopFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarSampFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarSampFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarianceFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarianceFields_point_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileMainVarianceFields_end_state(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileMainVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileMainVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_file_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicle_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleAggregateFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleAvgFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleMaxFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleMinFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleStddevFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleStddevPopFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleStddevSampFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleSumFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleVarPopFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleVarSampFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleVarianceFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleAvgFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_file_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_file_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalNEcdFileVehicle2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleStddevFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleStddevPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleStddevSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleSumFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_vehicle_time_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_vechile_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VechileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_start_date(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_end_date(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_is_check(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_check_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_line_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTime_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EcdFileVehicleTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeAggregateFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeAvgFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeMaxFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeMinFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeStddevFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeStddevPopFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeStddevSampFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeSumFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeVarPopFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeVarSampFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeVarianceFields)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeAvgFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_vehicle_time_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_vechile_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VechileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_start_date(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_end_date(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_is_check(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_check_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_line_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_vehicle_time_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_file_main_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileMainID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_vechile_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VechileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_start_date(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_end_date(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_is_check(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_check_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_line_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalNEcdFileVehicleTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeStddevFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeStddevPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeStddevSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeSumFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeVarPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeVarSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleTimeVarianceFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleTimeVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleTimeVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleVarPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleVarSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdFileVehicleVarianceFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EcdFileVehicleVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdFileVehicleVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_line_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_line_name(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_line_desc(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_audit_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_audit_time(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_is_resolve_desc(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResolveDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLine_gis_data(ctx context.Context, field graphql.CollectedField, obj *model1.EcdLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineAggregateFields)
	fc.Result = res
	return ec.marshalOEcdLineAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineAvgFields)
	fc.Result = res
	return ec.marshalOEcdLineAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineMaxFields)
	fc.Result = res
	return ec.marshalOEcdLineMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineMinFields)
	fc.Result = res
	return ec.marshalOEcdLineMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineStddevFields)
	fc.Result = res
	return ec.marshalOEcdLineStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineStddevPopFields)
	fc.Result = res
	return ec.marshalOEcdLineStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineStddevSampFields)
	fc.Result = res
	return ec.marshalOEcdLineStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineSumFields)
	fc.Result = res
	return ec.marshalOEcdLineSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineVarPopFields)
	fc.Result = res
	return ec.marshalOEcdLineVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineVarSampFields)
	fc.Result = res
	return ec.marshalOEcdLineVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineVarianceFields)
	fc.Result = res
	return ec.marshalOEcdLineVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_line_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_line_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_line_desc(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_audit_user_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_audit_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_is_resolve_desc(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResolveDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMaxFields_gis_data(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_line_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_line_name(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_line_desc(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_audit_user_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_audit_time(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_is_resolve_desc(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResolveDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMinFields_gis_data(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdLine)
	fc.Result = res
	return ec.marshalNEcdLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EcdLineVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EcdLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EcdLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_id(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_electric_fence_id(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElectricFenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_area_type(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_fence_type(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_fence_name(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_address(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFence_gis_data(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceAggregateFields)
	fc.Result = res
	return ec.marshalOElectricFenceAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceAvgFields)
	fc.Result = res
	return ec.marshalOElectricFenceAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceMaxFields)
	fc.Result = res
	return ec.marshalOElectricFenceMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceMinFields)
	fc.Result = res
	return ec.marshalOElectricFenceMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceStddevFields)
	fc.Result = res
	return ec.marshalOElectricFenceStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceStddevPopFields)
	fc.Result = res
	return ec.marshalOElectricFenceStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceStddevSampFields)
	fc.Result = res
	return ec.marshalOElectricFenceStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceSumFields)
	fc.Result = res
	return ec.marshalOElectricFenceSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceVarPopFields)
	fc.Result = res
	return ec.marshalOElectricFenceVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceVarSampFields)
	fc.Result = res
	return ec.marshalOElectricFenceVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceVarianceFields)
	fc.Result = res
	return ec.marshalOElectricFenceVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAvgFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceAvgFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_electric_fence_id(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElectricFenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_in_time(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_out_time(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_is_out(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_position(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_is_online(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecord_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.ElectricFenceEnteranceRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordAggregateFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordAvgFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordMaxFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordMinFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordStddevFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordSumFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordVarPopFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordVarSampFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordVarianceFields)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_record_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_electric_fence_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElectricFenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_in_time(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_out_time(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_is_out(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_position(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_record_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_electric_fence_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElectricFenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_in_time(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_out_time(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_is_out(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_position(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalNElectricFenceEnteranceRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceEnteranceRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceEnteranceRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceEnteranceRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_electric_fence_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElectricFenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_fence_name(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_address(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMaxFields_gis_data(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_electric_fence_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElectricFenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_fence_name(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_address(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMinFields_gis_data(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ElectricFence)
	fc.Result = res
	return ec.marshalNElectricFence2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevPopFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevPopFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevSampFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceStddevSampFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceSumFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceSumFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarPopFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarPopFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarSampFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarSampFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarianceFields_area_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ElectricFenceVarianceFields_fence_type(ctx context.Context, field graphql.CollectedField, obj *model.ElectricFenceVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElectricFenceVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FenceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_limit_speed_line_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_line_name(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_line_type(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_control_level(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_check_time(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_reject_reason(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLine_gis_data(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLine) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLine",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineAggregateFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineAvgFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineMaxFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineMinFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineStddevFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineStddevPopFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineStddevSampFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineSumFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineVarPopFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineVarSampFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineVarianceFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAvgFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAvgFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineAvgFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_limit_speed_line_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_line_name(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_check_time(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_reject_reason(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMaxFields_gis_data(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_limit_speed_line_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_line_name(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_apply_reason(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_check_time(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_reject_reason(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMinFields_gis_data(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GisData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalNLimitSpeedLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevPopFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevPopFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevSampFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevSampFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineStddevSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineSumFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineSumFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineSumFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_limit_speed_line_time_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_limit_speed_line_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTime_speed(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedLineTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNNumeric2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeAggregateFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeAvgFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeMaxFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeMinFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeStddevFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeStddevPopFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeStddevSampFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeSumFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeVarPopFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeVarSampFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeVarianceFields)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeAvgFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_limit_speed_line_time_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_limit_speed_line_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_limit_speed_line_time_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineTimeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_limit_speed_line_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedLineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_start_time(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_end_time(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMinFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalNLimitSpeedLineTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeStddevFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeStddevPopFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeStddevSampFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeSumFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeVarPopFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeVarSampFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineTimeVarianceFields_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineTimeVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineTimeVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarPopFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarPopFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarSampFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarSampFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarianceFields_line_type(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarianceFields_control_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedLineVarianceFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedLineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedLineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_limit_speed_plan_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_plan_name(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_remark(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlan_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlan) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlan",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanAggregateFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanAvgFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanMaxFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanMinFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanStddevFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanStddevPopFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanStddevSampFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanSumFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanVarPopFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanVarSampFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanVarianceFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_detail_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_plan_id(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_is_night_limit(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNightLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_night_time_begin(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightTimeBegin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_night_time_end(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightTimeEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_road_level(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetail_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.LimitSpeedPlanDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailAggregateFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailAvgFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailMaxFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailMinFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailStddevFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailStddevPopFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailStddevSampFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailSumFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailVarPopFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailVarSampFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailVarianceFields)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAvgFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAvgFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailAvgFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_plan_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_is_night_limit(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNightLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_night_time_begin(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightTimeBegin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_night_time_end(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightTimeEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_plan_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_is_night_limit(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNightLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_night_time_begin(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightTimeBegin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_night_time_end(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightTimeEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalNLimitSpeedPlanDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevPopFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevPopFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevPopFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevSampFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevSampFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailStddevSampFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailSumFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailSumFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailSumFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarPopFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarPopFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarPopFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarSampFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarSampFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarSampFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarianceFields_night_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NightLimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarianceFields_road_level(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanDetailVarianceFields_limit_speed(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_limit_speed_plan_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_plan_name(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_remark(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_limit_speed_plan_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitSpeedPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_plan_name(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_remark(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalNLimitSpeedPlan2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _LimitSpeedPlanVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.LimitSpeedPlanVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LimitSpeedPlanVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_control_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_control_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteControlLine(rctx, args["where"].(model.ControlLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineMutationResponse)
	fc.Result = res
	return ec.marshalOControlLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_control_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_control_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteControlLineByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLine)
	fc.Result = res
	return ec.marshalOControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_control_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_control_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertControlLine(rctx, args["objects"].([]*model.ControlLineInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineMutationResponse)
	fc.Result = res
	return ec.marshalOControlLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_control_line_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_control_line_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertControlLineOne(rctx, args["objects"].(model.ControlLineInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLine)
	fc.Result = res
	return ec.marshalOControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_control_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_control_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateControlLine(rctx, args["_inc"].(*model.ControlLineIncInput), args["_set"].(*model.ControlLineSetInput), args["where"].(model.ControlLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineMutationResponse)
	fc.Result = res
	return ec.marshalOControlLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_control_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_control_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateControlLineByPk(rctx, args["_inc"].(*model.ControlLineIncInput), args["_set"].(*model.ControlLineSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLine)
	fc.Result = res
	return ec.marshalOControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_control_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_control_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateControlLineByUnionPk(rctx, args["_inc"].(*model.ControlLineIncInput), args["_set"].(*model.ControlLineSetInput), args["control_line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLine)
	fc.Result = res
	return ec.marshalOControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_control_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_control_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteControlLineByUnionPk(rctx, args["control_line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLine)
	fc.Result = res
	return ec.marshalOControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_control_line_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_control_line_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteControlLineTime(rctx, args["where"].(model.ControlLineTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeMutationResponse)
	fc.Result = res
	return ec.marshalOControlLineTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_control_line_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_control_line_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteControlLineTimeByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalOControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_control_line_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_control_line_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertControlLineTime(rctx, args["objects"].([]*model.ControlLineTimeInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeMutationResponse)
	fc.Result = res
	return ec.marshalOControlLineTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_control_line_time_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_control_line_time_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertControlLineTimeOne(rctx, args["objects"].(model.ControlLineTimeInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalOControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_control_line_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_control_line_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateControlLineTime(rctx, args["_inc"].(*model.ControlLineTimeIncInput), args["_set"].(*model.ControlLineTimeSetInput), args["where"].(model.ControlLineTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeMutationResponse)
	fc.Result = res
	return ec.marshalOControlLineTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_control_line_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_control_line_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateControlLineTimeByPk(rctx, args["_inc"].(*model.ControlLineTimeIncInput), args["_set"].(*model.ControlLineTimeSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalOControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_control_line_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_control_line_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateControlLineTimeByUnionPk(rctx, args["_inc"].(*model.ControlLineTimeIncInput), args["_set"].(*model.ControlLineTimeSetInput), args["control_line_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalOControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_control_line_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_control_line_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteControlLineTimeByUnionPk(rctx, args["control_line_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalOControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_check_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_check_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileCheckHis(rctx, args["where"].(model.EcdFileCheckHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_check_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_check_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileCheckHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalOEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_check_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_check_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileCheckHis(rctx, args["objects"].([]*model.EcdFileCheckHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_check_his_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_check_his_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileCheckHisOne(rctx, args["objects"].(model.EcdFileCheckHisInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalOEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_check_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_check_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileCheckHis(rctx, args["_inc"].(*model.EcdFileCheckHisIncInput), args["_set"].(*model.EcdFileCheckHisSetInput), args["where"].(model.EcdFileCheckHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileCheckHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_check_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_check_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileCheckHisByPk(rctx, args["_inc"].(*model.EcdFileCheckHisIncInput), args["_set"].(*model.EcdFileCheckHisSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalOEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_check_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_check_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileCheckHisByUnionPk(rctx, args["_inc"].(*model.EcdFileCheckHisIncInput), args["_set"].(*model.EcdFileCheckHisSetInput), args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalOEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_check_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_check_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileCheckHisByUnionPk(rctx, args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalOEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_district(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_district_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileDistrict(rctx, args["where"].(model.EcdFileDistrictBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileDistrictMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_district_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_district_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileDistrictByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalOEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_district(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_district_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileDistrict(rctx, args["objects"].([]*model.EcdFileDistrictInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileDistrictMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_district_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_district_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileDistrictOne(rctx, args["objects"].(model.EcdFileDistrictInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalOEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_district(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_district_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileDistrict(rctx, args["_inc"].(*model.EcdFileDistrictIncInput), args["_set"].(*model.EcdFileDistrictSetInput), args["where"].(model.EcdFileDistrictBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileDistrictMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_district_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_district_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileDistrictByPk(rctx, args["_inc"].(*model.EcdFileDistrictIncInput), args["_set"].(*model.EcdFileDistrictSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalOEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_district_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_district_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileDistrictByUnionPk(rctx, args["_inc"].(*model.EcdFileDistrictIncInput), args["_set"].(*model.EcdFileDistrictSetInput), args["file_district_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalOEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_district_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_district_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileDistrictByUnionPk(rctx, args["file_district_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalOEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_line_point(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_line_point_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileLinePoint(rctx, args["where"].(model.EcdFileLinePointBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileLinePointMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_line_point_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_line_point_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileLinePointByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalOEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_line_point(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_line_point_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileLinePoint(rctx, args["objects"].([]*model.EcdFileLinePointInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileLinePointMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_line_point_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_line_point_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileLinePointOne(rctx, args["objects"].(model.EcdFileLinePointInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalOEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_line_point(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_line_point_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileLinePoint(rctx, args["_inc"].(*model.EcdFileLinePointIncInput), args["_set"].(*model.EcdFileLinePointSetInput), args["where"].(model.EcdFileLinePointBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileLinePointMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_line_point_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_line_point_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileLinePointByPk(rctx, args["_inc"].(*model.EcdFileLinePointIncInput), args["_set"].(*model.EcdFileLinePointSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalOEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_line_point_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_line_point_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileLinePointByUnionPk(rctx, args["_inc"].(*model.EcdFileLinePointIncInput), args["_set"].(*model.EcdFileLinePointSetInput), args["line_point_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalOEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_line_point_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_line_point_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileLinePointByUnionPk(rctx, args["line_point_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalOEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_main(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_main_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileMain(rctx, args["where"].(model.EcdFileMainBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileMainMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_main_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_main_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileMainByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalOEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_main(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_main_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileMain(rctx, args["objects"].([]*model.EcdFileMainInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileMainMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_main_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_main_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileMainOne(rctx, args["objects"].(model.EcdFileMainInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalOEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_main(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_main_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileMain(rctx, args["_inc"].(*model.EcdFileMainIncInput), args["_set"].(*model.EcdFileMainSetInput), args["where"].(model.EcdFileMainBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileMainMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_main_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_main_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileMainByPk(rctx, args["_inc"].(*model.EcdFileMainIncInput), args["_set"].(*model.EcdFileMainSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalOEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_main_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_main_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileMainByUnionPk(rctx, args["_inc"].(*model.EcdFileMainIncInput), args["_set"].(*model.EcdFileMainSetInput), args["file_main_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalOEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_main_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_main_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileMainByUnionPk(rctx, args["file_main_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalOEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_main_sub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_main_sub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileMainSub(rctx, args["where"].(model.EcdFileMainSubBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileMainSubMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_main_sub_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_main_sub_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileMainSubByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalOEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_main_sub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_main_sub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileMainSub(rctx, args["objects"].([]*model.EcdFileMainSubInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileMainSubMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_main_sub_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_main_sub_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileMainSubOne(rctx, args["objects"].(model.EcdFileMainSubInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalOEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_main_sub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_main_sub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileMainSub(rctx, args["_inc"].(*model.EcdFileMainSubIncInput), args["_set"].(*model.EcdFileMainSubSetInput), args["where"].(model.EcdFileMainSubBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileMainSubMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_main_sub_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_main_sub_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileMainSubByPk(rctx, args["_inc"].(*model.EcdFileMainSubIncInput), args["_set"].(*model.EcdFileMainSubSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalOEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_main_sub_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_main_sub_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileMainSubByUnionPk(rctx, args["_inc"].(*model.EcdFileMainSubIncInput), args["_set"].(*model.EcdFileMainSubSetInput), args["file_main_sub_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalOEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_main_sub_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_main_sub_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileMainSubByUnionPk(rctx, args["file_main_sub_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalOEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_vehicle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_vehicle_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileVehicle(rctx, args["where"].(model.EcdFileVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileVehicleMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_vehicle_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_vehicle_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileVehicleByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalOEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_vehicle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_vehicle_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileVehicle(rctx, args["objects"].([]*model.EcdFileVehicleInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileVehicleMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_vehicle_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_vehicle_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileVehicleOne(rctx, args["objects"].(model.EcdFileVehicleInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalOEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_vehicle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_vehicle_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileVehicle(rctx, args["_inc"].(*model.EcdFileVehicleIncInput), args["_set"].(*model.EcdFileVehicleSetInput), args["where"].(model.EcdFileVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileVehicleMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_vehicle_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_vehicle_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileVehicleByPk(rctx, args["_inc"].(*model.EcdFileVehicleIncInput), args["_set"].(*model.EcdFileVehicleSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalOEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_vehicle_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_vehicle_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileVehicleByUnionPk(rctx, args["_inc"].(*model.EcdFileVehicleIncInput), args["_set"].(*model.EcdFileVehicleSetInput), args["file_vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalOEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_vehicle_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_vehicle_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileVehicleByUnionPk(rctx, args["file_vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalOEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_vehicle_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_vehicle_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileVehicleTime(rctx, args["where"].(model.EcdFileVehicleTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_vehicle_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_vehicle_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileVehicleTimeByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_vehicle_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_vehicle_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileVehicleTime(rctx, args["objects"].([]*model.EcdFileVehicleTimeInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_file_vehicle_time_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_file_vehicle_time_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdFileVehicleTimeOne(rctx, args["objects"].(model.EcdFileVehicleTimeInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_vehicle_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_vehicle_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileVehicleTime(rctx, args["_inc"].(*model.EcdFileVehicleTimeIncInput), args["_set"].(*model.EcdFileVehicleTimeSetInput), args["where"].(model.EcdFileVehicleTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeMutationResponse)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_vehicle_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_vehicle_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileVehicleTimeByPk(rctx, args["_inc"].(*model.EcdFileVehicleTimeIncInput), args["_set"].(*model.EcdFileVehicleTimeSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_file_vehicle_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_file_vehicle_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdFileVehicleTimeByUnionPk(rctx, args["_inc"].(*model.EcdFileVehicleTimeIncInput), args["_set"].(*model.EcdFileVehicleTimeSetInput), args["vehicle_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_file_vehicle_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_file_vehicle_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdFileVehicleTimeByUnionPk(rctx, args["vehicle_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalOEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdLine(rctx, args["where"].(model.EcdLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineMutationResponse)
	fc.Result = res
	return ec.marshalOEcdLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdLineByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdLine)
	fc.Result = res
	return ec.marshalOEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdLine(rctx, args["objects"].([]*model.EcdLineInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineMutationResponse)
	fc.Result = res
	return ec.marshalOEcdLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_ecd_line_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_ecd_line_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEcdLineOne(rctx, args["objects"].(model.EcdLineInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdLine)
	fc.Result = res
	return ec.marshalOEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdLine(rctx, args["_inc"].(*model.EcdLineIncInput), args["_set"].(*model.EcdLineSetInput), args["where"].(model.EcdLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineMutationResponse)
	fc.Result = res
	return ec.marshalOEcdLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdLineByPk(rctx, args["_inc"].(*model.EcdLineIncInput), args["_set"].(*model.EcdLineSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdLine)
	fc.Result = res
	return ec.marshalOEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_ecd_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_ecd_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEcdLineByUnionPk(rctx, args["_inc"].(*model.EcdLineIncInput), args["_set"].(*model.EcdLineSetInput), args["line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdLine)
	fc.Result = res
	return ec.marshalOEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_ecd_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_ecd_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEcdLineByUnionPk(rctx, args["line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.EcdLine)
	fc.Result = res
	return ec.marshalOEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_electric_fence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_electric_fence_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteElectricFence(rctx, args["where"].(model.ElectricFenceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceMutationResponse)
	fc.Result = res
	return ec.marshalOElectricFenceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_electric_fence_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_electric_fence_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteElectricFenceByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFence)
	fc.Result = res
	return ec.marshalOElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_electric_fence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_electric_fence_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertElectricFence(rctx, args["objects"].([]*model.ElectricFenceInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceMutationResponse)
	fc.Result = res
	return ec.marshalOElectricFenceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_electric_fence_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_electric_fence_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertElectricFenceOne(rctx, args["objects"].(model.ElectricFenceInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFence)
	fc.Result = res
	return ec.marshalOElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_electric_fence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_electric_fence_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateElectricFence(rctx, args["_inc"].(*model.ElectricFenceIncInput), args["_set"].(*model.ElectricFenceSetInput), args["where"].(model.ElectricFenceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceMutationResponse)
	fc.Result = res
	return ec.marshalOElectricFenceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_electric_fence_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_electric_fence_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateElectricFenceByPk(rctx, args["_inc"].(*model.ElectricFenceIncInput), args["_set"].(*model.ElectricFenceSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFence)
	fc.Result = res
	return ec.marshalOElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_electric_fence_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_electric_fence_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateElectricFenceByUnionPk(rctx, args["_inc"].(*model.ElectricFenceIncInput), args["_set"].(*model.ElectricFenceSetInput), args["electric_fence_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFence)
	fc.Result = res
	return ec.marshalOElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_electric_fence_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_electric_fence_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteElectricFenceByUnionPk(rctx, args["electric_fence_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFence)
	fc.Result = res
	return ec.marshalOElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_electric_fence_enterance_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_electric_fence_enterance_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteElectricFenceEnteranceRecord(rctx, args["where"].(model.ElectricFenceEnteranceRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordMutationResponse)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_electric_fence_enterance_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_electric_fence_enterance_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteElectricFenceEnteranceRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_electric_fence_enterance_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_electric_fence_enterance_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertElectricFenceEnteranceRecord(rctx, args["objects"].([]*model.ElectricFenceEnteranceRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordMutationResponse)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_electric_fence_enterance_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_electric_fence_enterance_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertElectricFenceEnteranceRecordOne(rctx, args["objects"].(model.ElectricFenceEnteranceRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_electric_fence_enterance_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_electric_fence_enterance_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateElectricFenceEnteranceRecord(rctx, args["_inc"].(*model.ElectricFenceEnteranceRecordIncInput), args["_set"].(*model.ElectricFenceEnteranceRecordSetInput), args["where"].(model.ElectricFenceEnteranceRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordMutationResponse)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_electric_fence_enterance_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_electric_fence_enterance_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateElectricFenceEnteranceRecordByPk(rctx, args["_inc"].(*model.ElectricFenceEnteranceRecordIncInput), args["_set"].(*model.ElectricFenceEnteranceRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_electric_fence_enterance_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_electric_fence_enterance_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateElectricFenceEnteranceRecordByUnionPk(rctx, args["_inc"].(*model.ElectricFenceEnteranceRecordIncInput), args["_set"].(*model.ElectricFenceEnteranceRecordSetInput), args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_electric_fence_enterance_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_electric_fence_enterance_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteElectricFenceEnteranceRecordByUnionPk(rctx, args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalOElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedLine(rctx, args["where"].(model.LimitSpeedLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedLineByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalOLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_limit_speed_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_limit_speed_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertLimitSpeedLine(rctx, args["objects"].([]*model.LimitSpeedLineInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_limit_speed_line_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_limit_speed_line_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertLimitSpeedLineOne(rctx, args["objects"].(model.LimitSpeedLineInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalOLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedLine(rctx, args["_inc"].(*model.LimitSpeedLineIncInput), args["_set"].(*model.LimitSpeedLineSetInput), args["where"].(model.LimitSpeedLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedLineByPk(rctx, args["_inc"].(*model.LimitSpeedLineIncInput), args["_set"].(*model.LimitSpeedLineSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalOLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedLineByUnionPk(rctx, args["_inc"].(*model.LimitSpeedLineIncInput), args["_set"].(*model.LimitSpeedLineSetInput), args["limit_speed_line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalOLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedLineByUnionPk(rctx, args["limit_speed_line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalOLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_line_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_line_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedLineTime(rctx, args["where"].(model.LimitSpeedLineTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_line_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_line_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedLineTimeByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_limit_speed_line_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_limit_speed_line_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertLimitSpeedLineTime(rctx, args["objects"].([]*model.LimitSpeedLineTimeInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_limit_speed_line_time_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_limit_speed_line_time_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertLimitSpeedLineTimeOne(rctx, args["objects"].(model.LimitSpeedLineTimeInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_line_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_line_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedLineTime(rctx, args["_inc"].(*model.LimitSpeedLineTimeIncInput), args["_set"].(*model.LimitSpeedLineTimeSetInput), args["where"].(model.LimitSpeedLineTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_line_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_line_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedLineTimeByPk(rctx, args["_inc"].(*model.LimitSpeedLineTimeIncInput), args["_set"].(*model.LimitSpeedLineTimeSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_line_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_line_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedLineTimeByUnionPk(rctx, args["_inc"].(*model.LimitSpeedLineTimeIncInput), args["_set"].(*model.LimitSpeedLineTimeSetInput), args["limit_speed_line_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_line_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_line_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedLineTimeByUnionPk(rctx, args["limit_speed_line_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalOLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_plan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_plan_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedPlan(rctx, args["where"].(model.LimitSpeedPlanBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_plan_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_plan_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedPlanByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalOLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_limit_speed_plan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_limit_speed_plan_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertLimitSpeedPlan(rctx, args["objects"].([]*model.LimitSpeedPlanInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_limit_speed_plan_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_limit_speed_plan_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertLimitSpeedPlanOne(rctx, args["objects"].(model.LimitSpeedPlanInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalOLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_plan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_plan_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedPlan(rctx, args["_inc"].(*model.LimitSpeedPlanIncInput), args["_set"].(*model.LimitSpeedPlanSetInput), args["where"].(model.LimitSpeedPlanBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_plan_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_plan_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedPlanByPk(rctx, args["_inc"].(*model.LimitSpeedPlanIncInput), args["_set"].(*model.LimitSpeedPlanSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalOLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_plan_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_plan_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedPlanByUnionPk(rctx, args["_inc"].(*model.LimitSpeedPlanIncInput), args["_set"].(*model.LimitSpeedPlanSetInput), args["limit_speed_plan_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalOLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_plan_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_plan_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedPlanByUnionPk(rctx, args["limit_speed_plan_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalOLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_plan_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_plan_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedPlanDetail(rctx, args["where"].(model.LimitSpeedPlanDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_plan_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_plan_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedPlanDetailByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_limit_speed_plan_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_limit_speed_plan_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertLimitSpeedPlanDetail(rctx, args["objects"].([]*model.LimitSpeedPlanDetailInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_limit_speed_plan_detail_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_limit_speed_plan_detail_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertLimitSpeedPlanDetailOne(rctx, args["objects"].(model.LimitSpeedPlanDetailInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_plan_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_plan_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedPlanDetail(rctx, args["_inc"].(*model.LimitSpeedPlanDetailIncInput), args["_set"].(*model.LimitSpeedPlanDetailSetInput), args["where"].(model.LimitSpeedPlanDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailMutationResponse)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_plan_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_plan_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedPlanDetailByPk(rctx, args["_inc"].(*model.LimitSpeedPlanDetailIncInput), args["_set"].(*model.LimitSpeedPlanDetailSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_limit_speed_plan_detail_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_limit_speed_plan_detail_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLimitSpeedPlanDetailByUnionPk(rctx, args["_inc"].(*model.LimitSpeedPlanDetailIncInput), args["_set"].(*model.LimitSpeedPlanDetailSetInput), args["detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_limit_speed_plan_detail_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_limit_speed_plan_detail_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLimitSpeedPlanDetailByUnionPk(rctx, args["detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalOLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_night_travel_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_night_travel_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleNightTravelRecord(rctx, args["where"].(model.VehicleNightTravelRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_night_travel_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_night_travel_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleNightTravelRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_night_travel_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_night_travel_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleNightTravelRecord(rctx, args["objects"].([]*model.VehicleNightTravelRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_night_travel_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_night_travel_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleNightTravelRecordOne(rctx, args["objects"].(model.VehicleNightTravelRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_night_travel_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_night_travel_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleNightTravelRecord(rctx, args["_inc"].(*model.VehicleNightTravelRecordIncInput), args["_set"].(*model.VehicleNightTravelRecordSetInput), args["where"].(model.VehicleNightTravelRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_night_travel_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_night_travel_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleNightTravelRecordByPk(rctx, args["_inc"].(*model.VehicleNightTravelRecordIncInput), args["_set"].(*model.VehicleNightTravelRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_night_travel_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_night_travel_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleNightTravelRecordByUnionPk(rctx, args["_inc"].(*model.VehicleNightTravelRecordIncInput), args["_set"].(*model.VehicleNightTravelRecordSetInput), args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_night_travel_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_night_travel_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleNightTravelRecordByUnionPk(rctx, args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_stop_travel_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_stop_travel_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleStopTravelRecord(rctx, args["where"].(model.VehicleStopTravelRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_stop_travel_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_stop_travel_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleStopTravelRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_stop_travel_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_stop_travel_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleStopTravelRecord(rctx, args["objects"].([]*model.VehicleStopTravelRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_stop_travel_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_stop_travel_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleStopTravelRecordOne(rctx, args["objects"].(model.VehicleStopTravelRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_stop_travel_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_stop_travel_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleStopTravelRecord(rctx, args["_inc"].(*model.VehicleStopTravelRecordIncInput), args["_set"].(*model.VehicleStopTravelRecordSetInput), args["where"].(model.VehicleStopTravelRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_stop_travel_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_stop_travel_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleStopTravelRecordByPk(rctx, args["_inc"].(*model.VehicleStopTravelRecordIncInput), args["_set"].(*model.VehicleStopTravelRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_stop_travel_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_stop_travel_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleStopTravelRecordByUnionPk(rctx, args["_inc"].(*model.VehicleStopTravelRecordIncInput), args["_set"].(*model.VehicleStopTravelRecordSetInput), args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_stop_travel_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_stop_travel_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleStopTravelRecordByUnionPk(rctx, args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_control_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_control_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ControlLine(rctx, args["distinct_on"].([]model.ControlLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ControlLineOrderBy), args["where"].(*model.ControlLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ControlLine)
	fc.Result = res
	return ec.marshalNControlLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_control_line_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_control_line_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ControlLineAggregate(rctx, args["distinct_on"].([]model.ControlLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ControlLineOrderBy), args["where"].(*model.ControlLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineAggregate)
	fc.Result = res
	return ec.marshalNControlLineAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_control_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_control_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ControlLineByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLine)
	fc.Result = res
	return ec.marshalNControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_control_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_control_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ControlLineByUnionPk(rctx, args["control_line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLine)
	fc.Result = res
	return ec.marshalNControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_control_line_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_control_line_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ControlLineTime(rctx, args["distinct_on"].([]model.ControlLineTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ControlLineTimeOrderBy), args["where"].(*model.ControlLineTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalNControlLineTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_control_line_time_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_control_line_time_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ControlLineTimeAggregate(rctx, args["distinct_on"].([]model.ControlLineTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ControlLineTimeOrderBy), args["where"].(*model.ControlLineTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ControlLineTimeAggregate)
	fc.Result = res
	return ec.marshalNControlLineTimeAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_control_line_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_control_line_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ControlLineTimeByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalNControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_control_line_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_control_line_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ControlLineTimeByUnionPk(rctx, args["control_line_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ControlLineTime)
	fc.Result = res
	return ec.marshalNControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_check_his(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_check_his_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileCheckHis(rctx, args["distinct_on"].([]model.EcdFileCheckHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileCheckHisOrderBy), args["where"].(*model.EcdFileCheckHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalNEcdFileCheckHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_check_his_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_check_his_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileCheckHisAggregate(rctx, args["distinct_on"].([]model.EcdFileCheckHisSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileCheckHisOrderBy), args["where"].(*model.EcdFileCheckHisBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileCheckHisAggregate)
	fc.Result = res
	return ec.marshalNEcdFileCheckHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_check_his_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_check_his_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileCheckHisByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalNEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_check_his_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_check_his_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileCheckHisByUnionPk(rctx, args["his_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileCheckHis)
	fc.Result = res
	return ec.marshalNEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_district(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_district_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileDistrict(rctx, args["distinct_on"].([]model.EcdFileDistrictSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileDistrictOrderBy), args["where"].(*model.EcdFileDistrictBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalNEcdFileDistrict2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrictᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_district_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_district_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileDistrictAggregate(rctx, args["distinct_on"].([]model.EcdFileDistrictSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileDistrictOrderBy), args["where"].(*model.EcdFileDistrictBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileDistrictAggregate)
	fc.Result = res
	return ec.marshalNEcdFileDistrictAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_district_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_district_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileDistrictByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalNEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_district_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_district_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileDistrictByUnionPk(rctx, args["file_district_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileDistrict)
	fc.Result = res
	return ec.marshalNEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_line_point(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_line_point_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileLinePoint(rctx, args["distinct_on"].([]model.EcdFileLinePointSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileLinePointOrderBy), args["where"].(*model.EcdFileLinePointBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalNEcdFileLinePoint2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePointᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_line_point_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_line_point_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileLinePointAggregate(rctx, args["distinct_on"].([]model.EcdFileLinePointSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileLinePointOrderBy), args["where"].(*model.EcdFileLinePointBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileLinePointAggregate)
	fc.Result = res
	return ec.marshalNEcdFileLinePointAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_line_point_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_line_point_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileLinePointByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalNEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_line_point_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_line_point_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileLinePointByUnionPk(rctx, args["line_point_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileLinePoint)
	fc.Result = res
	return ec.marshalNEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_main(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_main_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileMain(rctx, args["distinct_on"].([]model.EcdFileMainSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileMainOrderBy), args["where"].(*model.EcdFileMainBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalNEcdFileMain2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_main_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_main_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileMainAggregate(rctx, args["distinct_on"].([]model.EcdFileMainSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileMainOrderBy), args["where"].(*model.EcdFileMainBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainAggregate)
	fc.Result = res
	return ec.marshalNEcdFileMainAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_main_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_main_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileMainByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalNEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_main_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_main_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileMainByUnionPk(rctx, args["file_main_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMain)
	fc.Result = res
	return ec.marshalNEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_main_sub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_main_sub_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileMainSub(rctx, args["distinct_on"].([]model.EcdFileMainSubSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileMainSubOrderBy), args["where"].(*model.EcdFileMainSubBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalNEcdFileMainSub2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSubᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_main_sub_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_main_sub_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileMainSubAggregate(rctx, args["distinct_on"].([]model.EcdFileMainSubSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileMainSubOrderBy), args["where"].(*model.EcdFileMainSubBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileMainSubAggregate)
	fc.Result = res
	return ec.marshalNEcdFileMainSubAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_main_sub_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_main_sub_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileMainSubByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalNEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_main_sub_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_main_sub_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileMainSubByUnionPk(rctx, args["file_main_sub_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileMainSub)
	fc.Result = res
	return ec.marshalNEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_vehicle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_vehicle_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileVehicle(rctx, args["distinct_on"].([]model.EcdFileVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileVehicleOrderBy), args["where"].(*model.EcdFileVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalNEcdFileVehicle2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_vehicle_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_vehicle_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileVehicleAggregate(rctx, args["distinct_on"].([]model.EcdFileVehicleSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileVehicleOrderBy), args["where"].(*model.EcdFileVehicleBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleAggregate)
	fc.Result = res
	return ec.marshalNEcdFileVehicleAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_vehicle_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_vehicle_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileVehicleByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalNEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_vehicle_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_vehicle_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileVehicleByUnionPk(rctx, args["file_vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicle)
	fc.Result = res
	return ec.marshalNEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_vehicle_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_vehicle_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileVehicleTime(rctx, args["distinct_on"].([]model.EcdFileVehicleTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileVehicleTimeOrderBy), args["where"].(*model.EcdFileVehicleTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalNEcdFileVehicleTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_vehicle_time_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_vehicle_time_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileVehicleTimeAggregate(rctx, args["distinct_on"].([]model.EcdFileVehicleTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdFileVehicleTimeOrderBy), args["where"].(*model.EcdFileVehicleTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EcdFileVehicleTimeAggregate)
	fc.Result = res
	return ec.marshalNEcdFileVehicleTimeAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_vehicle_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_vehicle_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileVehicleTimeByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalNEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_file_vehicle_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_file_vehicle_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdFileVehicleTimeByUnionPk(rctx, args["vehicle_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdFileVehicleTime)
	fc.Result = res
	return ec.marshalNEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdLine(rctx, args["distinct_on"].([]model.EcdLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdLineOrderBy), args["where"].(*model.EcdLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.EcdLine)
	fc.Result = res
	return ec.marshalNEcdLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_line_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_line_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdLineAggregate(rctx, args["distinct_on"].([]model.EcdLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EcdLineOrderBy), args["where"].(*model.EcdLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EcdLineAggregate)
	fc.Result = res
	return ec.marshalNEcdLineAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdLineByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdLine)
	fc.Result = res
	return ec.marshalNEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ecd_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ecd_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EcdLineByUnionPk(rctx, args["line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.EcdLine)
	fc.Result = res
	return ec.marshalNEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_electric_fence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_electric_fence_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElectricFence(rctx, args["distinct_on"].([]model.ElectricFenceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ElectricFenceOrderBy), args["where"].(*model.ElectricFenceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ElectricFence)
	fc.Result = res
	return ec.marshalNElectricFence2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_electric_fence_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_electric_fence_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElectricFenceAggregate(rctx, args["distinct_on"].([]model.ElectricFenceSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ElectricFenceOrderBy), args["where"].(*model.ElectricFenceBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceAggregate)
	fc.Result = res
	return ec.marshalNElectricFenceAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_electric_fence_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_electric_fence_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElectricFenceByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFence)
	fc.Result = res
	return ec.marshalNElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_electric_fence_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_electric_fence_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElectricFenceByUnionPk(rctx, args["electric_fence_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFence)
	fc.Result = res
	return ec.marshalNElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_electric_fence_enterance_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_electric_fence_enterance_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElectricFenceEnteranceRecord(rctx, args["distinct_on"].([]model.ElectricFenceEnteranceRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ElectricFenceEnteranceRecordOrderBy), args["where"].(*model.ElectricFenceEnteranceRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalNElectricFenceEnteranceRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_electric_fence_enterance_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_electric_fence_enterance_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElectricFenceEnteranceRecordAggregate(rctx, args["distinct_on"].([]model.ElectricFenceEnteranceRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.ElectricFenceEnteranceRecordOrderBy), args["where"].(*model.ElectricFenceEnteranceRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ElectricFenceEnteranceRecordAggregate)
	fc.Result = res
	return ec.marshalNElectricFenceEnteranceRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_electric_fence_enterance_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_electric_fence_enterance_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElectricFenceEnteranceRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalNElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_electric_fence_enterance_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_electric_fence_enterance_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElectricFenceEnteranceRecordByUnionPk(rctx, args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.ElectricFenceEnteranceRecord)
	fc.Result = res
	return ec.marshalNElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_line(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_line_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedLine(rctx, args["distinct_on"].([]model.LimitSpeedLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedLineOrderBy), args["where"].(*model.LimitSpeedLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalNLimitSpeedLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_line_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_line_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedLineAggregate(rctx, args["distinct_on"].([]model.LimitSpeedLineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedLineOrderBy), args["where"].(*model.LimitSpeedLineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineAggregate)
	fc.Result = res
	return ec.marshalNLimitSpeedLineAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_line_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_line_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedLineByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalNLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_line_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_line_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedLineByUnionPk(rctx, args["limit_speed_line_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLine)
	fc.Result = res
	return ec.marshalNLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_line_time(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_line_time_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedLineTime(rctx, args["distinct_on"].([]model.LimitSpeedLineTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedLineTimeOrderBy), args["where"].(*model.LimitSpeedLineTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalNLimitSpeedLineTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTimeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_line_time_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_line_time_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedLineTimeAggregate(rctx, args["distinct_on"].([]model.LimitSpeedLineTimeSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedLineTimeOrderBy), args["where"].(*model.LimitSpeedLineTimeBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedLineTimeAggregate)
	fc.Result = res
	return ec.marshalNLimitSpeedLineTimeAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_line_time_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_line_time_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedLineTimeByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalNLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_line_time_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_line_time_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedLineTimeByUnionPk(rctx, args["limit_speed_line_time_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedLineTime)
	fc.Result = res
	return ec.marshalNLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_plan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_plan_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedPlan(rctx, args["distinct_on"].([]model.LimitSpeedPlanSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedPlanOrderBy), args["where"].(*model.LimitSpeedPlanBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalNLimitSpeedPlan2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_plan_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_plan_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedPlanAggregate(rctx, args["distinct_on"].([]model.LimitSpeedPlanSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedPlanOrderBy), args["where"].(*model.LimitSpeedPlanBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanAggregate)
	fc.Result = res
	return ec.marshalNLimitSpeedPlanAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_plan_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_plan_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedPlanByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalNLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_plan_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_plan_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedPlanByUnionPk(rctx, args["limit_speed_plan_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlan)
	fc.Result = res
	return ec.marshalNLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_plan_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_plan_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedPlanDetail(rctx, args["distinct_on"].([]model.LimitSpeedPlanDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedPlanDetailOrderBy), args["where"].(*model.LimitSpeedPlanDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalNLimitSpeedPlanDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_plan_detail_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_plan_detail_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedPlanDetailAggregate(rctx, args["distinct_on"].([]model.LimitSpeedPlanDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.LimitSpeedPlanDetailOrderBy), args["where"].(*model.LimitSpeedPlanDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LimitSpeedPlanDetailAggregate)
	fc.Result = res
	return ec.marshalNLimitSpeedPlanDetailAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_plan_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_plan_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedPlanDetailByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalNLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_limit_speed_plan_detail_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_limit_speed_plan_detail_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LimitSpeedPlanDetailByUnionPk(rctx, args["detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.LimitSpeedPlanDetail)
	fc.Result = res
	return ec.marshalNLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_night_travel_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_night_travel_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleNightTravelRecord(rctx, args["distinct_on"].([]model.VehicleNightTravelRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleNightTravelRecordOrderBy), args["where"].(*model.VehicleNightTravelRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalNVehicleNightTravelRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_night_travel_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_night_travel_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleNightTravelRecordAggregate(rctx, args["distinct_on"].([]model.VehicleNightTravelRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleNightTravelRecordOrderBy), args["where"].(*model.VehicleNightTravelRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordAggregate)
	fc.Result = res
	return ec.marshalNVehicleNightTravelRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_night_travel_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_night_travel_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleNightTravelRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalNVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_night_travel_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_night_travel_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleNightTravelRecordByUnionPk(rctx, args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalNVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_stop_travel_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_stop_travel_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleStopTravelRecord(rctx, args["distinct_on"].([]model.VehicleStopTravelRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleStopTravelRecordOrderBy), args["where"].(*model.VehicleStopTravelRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalNVehicleStopTravelRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_stop_travel_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_stop_travel_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleStopTravelRecordAggregate(rctx, args["distinct_on"].([]model.VehicleStopTravelRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleStopTravelRecordOrderBy), args["where"].(*model.VehicleStopTravelRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordAggregate)
	fc.Result = res
	return ec.marshalNVehicleStopTravelRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_stop_travel_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_stop_travel_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleStopTravelRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalNVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_stop_travel_record_by_union_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_stop_travel_record_by_union_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleStopTravelRecordByUnionPk(rctx, args["record_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalNVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_route(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_sprg_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SprgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_service_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_record_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_record_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_status(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_cause(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecord_remark(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleNightTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordAvgFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordMaxFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordMinFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordStddevFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordSumFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleNightTravelRecordVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleNightTravelRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAvgFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAvgFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordAvgFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_sprg_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SprgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_record_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_record_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields_remark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_sprg_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SprgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_record_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_record_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMinFields_remark(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleNightTravelRecord)
	fc.Result = res
	return ec.marshalNVehicleNightTravelRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevPopFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevPopFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevPopFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevSampFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevSampFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordStddevSampFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordSumFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordSumFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordSumFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarPopFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarPopFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarPopFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarSampFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarSampFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarSampFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarianceFields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarianceFields_service_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleNightTravelRecordVarianceFields_status(ctx context.Context, field graphql.CollectedField, obj *model.VehicleNightTravelRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleNightTravelRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_bill_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_record_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_record_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_record_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_is_effect(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEffect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_effect_start_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_effect_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_cause(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecord_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleStopTravelRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordAvgFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordMaxFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordMinFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordStddevFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordSumFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleStopTravelRecordVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleStopTravelRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_bill_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_record_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_record_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_record_user_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_is_effect(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEffect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_effect_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_effect_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_bill_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_record_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_record_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_record_user_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_is_effect(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEffect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_effect_start_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_effect_end_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_cause(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cause, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMinFields_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleStopTravelRecord)
	fc.Result = res
	return ec.marshalNVehicleStopTravelRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleStopTravelRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleStopTravelRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleStopTravelRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineBoolExp(ctx context.Context, obj interface{}) (model.ControlLineBoolExp, error) {
	var it model.ControlLineBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOControlLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOControlLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOControlLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
			it.ControlLineID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reject_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reject_reason"))
			it.RejectReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineIncInput(ctx context.Context, obj interface{}) (model.ControlLineIncInput, error) {
	var it model.ControlLineIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineInsertInput(ctx context.Context, obj interface{}) (model.ControlLineInsertInput, error) {
	var it model.ControlLineInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reject_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reject_reason"))
			it.RejectReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineOrderBy(ctx context.Context, obj interface{}) (model.ControlLineOrderBy, error) {
	var it model.ControlLineOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
			it.ControlLineID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reject_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reject_reason"))
			it.RejectReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineSetInput(ctx context.Context, obj interface{}) (model.ControlLineSetInput, error) {
	var it model.ControlLineSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
			it.ControlLineID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reject_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reject_reason"))
			it.RejectReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineTimeBoolExp(ctx context.Context, obj interface{}) (model.ControlLineTimeBoolExp, error) {
	var it model.ControlLineTimeBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOControlLineTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOControlLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOControlLineTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_time_id"))
			it.ControlLineTimeID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
			it.ControlLineID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineTimeIncInput(ctx context.Context, obj interface{}) (model.ControlLineTimeIncInput, error) {
	var it model.ControlLineTimeIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineTimeInsertInput(ctx context.Context, obj interface{}) (model.ControlLineTimeInsertInput, error) {
	var it model.ControlLineTimeInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "control_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
			it.ControlLineID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineTimeOrderBy(ctx context.Context, obj interface{}) (model.ControlLineTimeOrderBy, error) {
	var it model.ControlLineTimeOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_time_id"))
			it.ControlLineTimeID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
			it.ControlLineID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputControlLineTimeSetInput(ctx context.Context, obj interface{}) (model.ControlLineTimeSetInput, error) {
	var it model.ControlLineTimeSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_time_id"))
			it.ControlLineTimeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_line_id"))
			it.ControlLineID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileCheckHisBoolExp(ctx context.Context, obj interface{}) (model.EcdFileCheckHisBoolExp, error) {
	var it model.EcdFileCheckHisBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEcdFileCheckHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEcdFileCheckHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEcdFileCheckHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_type"))
			it.OperType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "rec_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rec_time"))
			it.RecTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_time"))
			it.OperTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "suggest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suggest"))
			it.Suggest, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileCheckHisIncInput(ctx context.Context, obj interface{}) (model.EcdFileCheckHisIncInput, error) {
	var it model.EcdFileCheckHisIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_type"))
			it.OperType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileCheckHisInsertInput(ctx context.Context, obj interface{}) (model.EcdFileCheckHisInsertInput, error) {
	var it model.EcdFileCheckHisInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_type"))
			it.OperType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "rec_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rec_time"))
			it.RecTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_time"))
			it.OperTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "suggest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suggest"))
			it.Suggest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileCheckHisOrderBy(ctx context.Context, obj interface{}) (model.EcdFileCheckHisOrderBy, error) {
	var it model.EcdFileCheckHisOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_type"))
			it.OperType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "rec_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rec_time"))
			it.RecTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_time"))
			it.OperTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "suggest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suggest"))
			it.Suggest, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileCheckHisSetInput(ctx context.Context, obj interface{}) (model.EcdFileCheckHisSetInput, error) {
	var it model.EcdFileCheckHisSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "his_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("his_id"))
			it.HisID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_type"))
			it.OperType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "rec_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rec_time"))
			it.RecTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "oper_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oper_time"))
			it.OperTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "suggest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suggest"))
			it.Suggest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileDistrictBoolExp(ctx context.Context, obj interface{}) (model.EcdFileDistrictBoolExp, error) {
	var it model.EcdFileDistrictBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEcdFileDistrictBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEcdFileDistrictBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEcdFileDistrictBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_district_id"))
			it.FileDistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileDistrictIncInput(ctx context.Context, obj interface{}) (model.EcdFileDistrictIncInput, error) {
	var it model.EcdFileDistrictIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileDistrictInsertInput(ctx context.Context, obj interface{}) (model.EcdFileDistrictInsertInput, error) {
	var it model.EcdFileDistrictInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileDistrictOrderBy(ctx context.Context, obj interface{}) (model.EcdFileDistrictOrderBy, error) {
	var it model.EcdFileDistrictOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_district_id"))
			it.FileDistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileDistrictSetInput(ctx context.Context, obj interface{}) (model.EcdFileDistrictSetInput, error) {
	var it model.EcdFileDistrictSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_district_id"))
			it.FileDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileLinePointBoolExp(ctx context.Context, obj interface{}) (model.EcdFileLinePointBoolExp, error) {
	var it model.EcdFileLinePointBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEcdFileLinePointBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEcdFileLinePointBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEcdFileLinePointBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_id"))
			it.LinePointID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_point"))
			it.GpsPoint, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "map_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map_point"))
			it.MapPoint, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_name"))
			it.LinePointName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_remark"))
			it.LinePointRemark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_type"))
			it.PointType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileLinePointIncInput(ctx context.Context, obj interface{}) (model.EcdFileLinePointIncInput, error) {
	var it model.EcdFileLinePointIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_type"))
			it.PointType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileLinePointInsertInput(ctx context.Context, obj interface{}) (model.EcdFileLinePointInsertInput, error) {
	var it model.EcdFileLinePointInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_point"))
			it.GpsPoint, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "map_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map_point"))
			it.MapPoint, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_name"))
			it.LinePointName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_remark"))
			it.LinePointRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_type"))
			it.PointType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileLinePointOrderBy(ctx context.Context, obj interface{}) (model.EcdFileLinePointOrderBy, error) {
	var it model.EcdFileLinePointOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_id"))
			it.LinePointID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_point"))
			it.GpsPoint, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "map_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map_point"))
			it.MapPoint, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_name"))
			it.LinePointName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_remark"))
			it.LinePointRemark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_type"))
			it.PointType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileLinePointSetInput(ctx context.Context, obj interface{}) (model.EcdFileLinePointSetInput, error) {
	var it model.EcdFileLinePointSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_id"))
			it.LinePointID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_point"))
			it.GpsPoint, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "map_point":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map_point"))
			it.MapPoint, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_name"))
			it.LinePointName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_point_remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_point_remark"))
			it.LinePointRemark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_type"))
			it.PointType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainBoolExp(ctx context.Context, obj interface{}) (model.EcdFileMainBoolExp, error) {
	var it model.EcdFileMainBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEcdFileMainBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEcdFileMainBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEcdFileMainBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_id"))
			it.FileID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cross_district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cross_district"))
			it.IsCrossDistrict, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_cross_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_cross_pid"))
			it.FirstCrossPid, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_time"))
			it.PlanStartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_num"))
			it.PhoneNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_state"))
			it.PointState, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_state"))
			it.EndState, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_district_id"))
			it.AddDistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_point_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_point_checker_sign"))
			it.StartPointCheckerSign, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_point_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_point_checker_sign"))
			it.EndPointCheckerSign, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "route_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route_checker_sign"))
			it.RouteCheckerSign, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_time_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_time_checker_sign"))
			it.SpeedTimeCheckerSign, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "return_suggest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("return_suggest"))
			it.ReturnSuggest, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_title"))
			it.ConstructTitle, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_id"))
			it.ConstructID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_match_construction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_match_construction"))
			it.IsMatchConstruction, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "client_report_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("client_report_time"))
			it.ClientReportTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_prove_file"))
			it.ConstructProveFile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "do_construct_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("do_construct_prove_file"))
			it.DoConstructProveFile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_package_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_package_prove_file"))
			it.SubPackageProveFile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_prove_file"))
			it.TrafficProveFile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "route_board_promise_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route_board_promise_file"))
			it.RouteBoardPromiseFile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffice_object_promise_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffice_object_promise_file"))
			it.TrafficeObjectPromiseFile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_garbage_allow_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_garbage_allow_file"))
			it.ConstructGarbageAllowFile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_site_enterance_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_site_enterance_photo"))
			it.ConstructSiteEnterancePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_wash_car_place_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_wash_car_place_photo"))
			it.ConstructWashCarPlacePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainIncInput(ctx context.Context, obj interface{}) (model.EcdFileMainIncInput, error) {
	var it model.EcdFileMainIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_state"))
			it.PointState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_state"))
			it.EndState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainInsertInput(ctx context.Context, obj interface{}) (model.EcdFileMainInsertInput, error) {
	var it model.EcdFileMainInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "file_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_id"))
			it.FileID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cross_district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cross_district"))
			it.IsCrossDistrict, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_cross_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_cross_pid"))
			it.FirstCrossPid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_time"))
			it.PlanStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_num"))
			it.PhoneNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_state"))
			it.PointState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_state"))
			it.EndState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_district_id"))
			it.AddDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_point_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_point_checker_sign"))
			it.StartPointCheckerSign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_point_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_point_checker_sign"))
			it.EndPointCheckerSign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route_checker_sign"))
			it.RouteCheckerSign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_time_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_time_checker_sign"))
			it.SpeedTimeCheckerSign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "return_suggest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("return_suggest"))
			it.ReturnSuggest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_title"))
			it.ConstructTitle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_id"))
			it.ConstructID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_match_construction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_match_construction"))
			it.IsMatchConstruction, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "client_report_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("client_report_time"))
			it.ClientReportTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_prove_file"))
			it.ConstructProveFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "do_construct_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("do_construct_prove_file"))
			it.DoConstructProveFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_package_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_package_prove_file"))
			it.SubPackageProveFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_prove_file"))
			it.TrafficProveFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route_board_promise_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route_board_promise_file"))
			it.RouteBoardPromiseFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffice_object_promise_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffice_object_promise_file"))
			it.TrafficeObjectPromiseFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_garbage_allow_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_garbage_allow_file"))
			it.ConstructGarbageAllowFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_site_enterance_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_site_enterance_photo"))
			it.ConstructSiteEnterancePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_wash_car_place_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_wash_car_place_photo"))
			it.ConstructWashCarPlacePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainOrderBy(ctx context.Context, obj interface{}) (model.EcdFileMainOrderBy, error) {
	var it model.EcdFileMainOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_id"))
			it.FileID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cross_district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cross_district"))
			it.IsCrossDistrict, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_cross_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_cross_pid"))
			it.FirstCrossPid, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_time"))
			it.PlanStartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_num"))
			it.PhoneNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_state"))
			it.PointState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_state"))
			it.EndState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_district_id"))
			it.AddDistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_point_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_point_checker_sign"))
			it.StartPointCheckerSign, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_point_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_point_checker_sign"))
			it.EndPointCheckerSign, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "route_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route_checker_sign"))
			it.RouteCheckerSign, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_time_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_time_checker_sign"))
			it.SpeedTimeCheckerSign, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "return_suggest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("return_suggest"))
			it.ReturnSuggest, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_title"))
			it.ConstructTitle, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_id"))
			it.ConstructID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_match_construction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_match_construction"))
			it.IsMatchConstruction, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "client_report_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("client_report_time"))
			it.ClientReportTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_prove_file"))
			it.ConstructProveFile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "do_construct_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("do_construct_prove_file"))
			it.DoConstructProveFile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_package_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_package_prove_file"))
			it.SubPackageProveFile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_prove_file"))
			it.TrafficProveFile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "route_board_promise_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route_board_promise_file"))
			it.RouteBoardPromiseFile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffice_object_promise_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffice_object_promise_file"))
			it.TrafficeObjectPromiseFile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_garbage_allow_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_garbage_allow_file"))
			it.ConstructGarbageAllowFile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_site_enterance_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_site_enterance_photo"))
			it.ConstructSiteEnterancePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_wash_car_place_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_wash_car_place_photo"))
			it.ConstructWashCarPlacePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainSetInput(ctx context.Context, obj interface{}) (model.EcdFileMainSetInput, error) {
	var it model.EcdFileMainSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_id"))
			it.FileID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_cross_district":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_cross_district"))
			it.IsCrossDistrict, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "first_cross_pid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first_cross_pid"))
			it.FirstCrossPid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_time"))
			it.PlanStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone_num"))
			it.PhoneNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "point_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("point_state"))
			it.PointState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_state"))
			it.EndState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "add_district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("add_district_id"))
			it.AddDistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_point_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_point_checker_sign"))
			it.StartPointCheckerSign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_point_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_point_checker_sign"))
			it.EndPointCheckerSign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route_checker_sign"))
			it.RouteCheckerSign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_time_checker_sign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_time_checker_sign"))
			it.SpeedTimeCheckerSign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "return_suggest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("return_suggest"))
			it.ReturnSuggest, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_title"))
			it.ConstructTitle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_id"))
			it.ConstructID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_match_construction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_match_construction"))
			it.IsMatchConstruction, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "client_report_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("client_report_time"))
			it.ClientReportTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_prove_file"))
			it.ConstructProveFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "do_construct_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("do_construct_prove_file"))
			it.DoConstructProveFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_package_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_package_prove_file"))
			it.SubPackageProveFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_prove_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_prove_file"))
			it.TrafficProveFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route_board_promise_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route_board_promise_file"))
			it.RouteBoardPromiseFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffice_object_promise_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffice_object_promise_file"))
			it.TrafficeObjectPromiseFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_garbage_allow_file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_garbage_allow_file"))
			it.ConstructGarbageAllowFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_site_enterance_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_site_enterance_photo"))
			it.ConstructSiteEnterancePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_wash_car_place_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_wash_car_place_photo"))
			it.ConstructWashCarPlacePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainSubBoolExp(ctx context.Context, obj interface{}) (model.EcdFileMainSubBoolExp, error) {
	var it model.EcdFileMainSubBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEcdFileMainSubBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEcdFileMainSubBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEcdFileMainSubBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_sub_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_sub_id"))
			it.FileMainSubID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_unit"))
			it.ConstructUnit, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_director_name"))
			it.ConstructDirectorName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_phone"))
			it.ConstructPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_unit"))
			it.ContractUnit, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_director_name"))
			it.ContractDirectorName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_phone"))
			it.ContractPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_unit"))
			it.TrafficUnit, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_director_name"))
			it.TrafficDirectorName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_phone"))
			it.TrafficPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "wl_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wl_type"))
			it.WlType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_deal_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_deal_area"))
			it.PlanDealArea, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_trans_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_trans_volume"))
			it.PlanTransVolume, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_time"))
			it.PlanStartTime, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_trans_lines":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_trans_lines"))
			it.PlanTransLines, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_prove_num"))
			it.ConstructProveNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_prove_num"))
			it.ContractProveNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_prove_num"))
			it.TrafficProveNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_package_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_package_unit"))
			it.SubPackageUnit, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_prove_num"))
			it.PackageProveNum, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_director_name"))
			it.PackageDirectorName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_phone"))
			it.PackagePhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "facts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facts"))
			it.Facts, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainSubIncInput(ctx context.Context, obj interface{}) (model.EcdFileMainSubIncInput, error) {
	var it model.EcdFileMainSubIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "wl_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wl_type"))
			it.WlType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainSubInsertInput(ctx context.Context, obj interface{}) (model.EcdFileMainSubInsertInput, error) {
	var it model.EcdFileMainSubInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_unit"))
			it.ConstructUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_director_name"))
			it.ConstructDirectorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_phone"))
			it.ConstructPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_unit"))
			it.ContractUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_director_name"))
			it.ContractDirectorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_phone"))
			it.ContractPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_unit"))
			it.TrafficUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_director_name"))
			it.TrafficDirectorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_phone"))
			it.TrafficPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "wl_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wl_type"))
			it.WlType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_deal_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_deal_area"))
			it.PlanDealArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_trans_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_trans_volume"))
			it.PlanTransVolume, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_time"))
			it.PlanStartTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_trans_lines":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_trans_lines"))
			it.PlanTransLines, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_prove_num"))
			it.ConstructProveNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_prove_num"))
			it.ContractProveNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_prove_num"))
			it.TrafficProveNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_package_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_package_unit"))
			it.SubPackageUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_prove_num"))
			it.PackageProveNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_director_name"))
			it.PackageDirectorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_phone"))
			it.PackagePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "facts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facts"))
			it.Facts, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainSubOrderBy(ctx context.Context, obj interface{}) (model.EcdFileMainSubOrderBy, error) {
	var it model.EcdFileMainSubOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_sub_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_sub_id"))
			it.FileMainSubID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_unit"))
			it.ConstructUnit, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_director_name"))
			it.ConstructDirectorName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_phone"))
			it.ConstructPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_unit"))
			it.ContractUnit, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_director_name"))
			it.ContractDirectorName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_phone"))
			it.ContractPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_unit"))
			it.TrafficUnit, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_director_name"))
			it.TrafficDirectorName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_phone"))
			it.TrafficPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "wl_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wl_type"))
			it.WlType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_deal_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_deal_area"))
			it.PlanDealArea, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_trans_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_trans_volume"))
			it.PlanTransVolume, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_time"))
			it.PlanStartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_trans_lines":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_trans_lines"))
			it.PlanTransLines, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_prove_num"))
			it.ConstructProveNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_prove_num"))
			it.ContractProveNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_prove_num"))
			it.TrafficProveNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_package_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_package_unit"))
			it.SubPackageUnit, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_prove_num"))
			it.PackageProveNum, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_director_name"))
			it.PackageDirectorName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_phone"))
			it.PackagePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "facts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facts"))
			it.Facts, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileMainSubSetInput(ctx context.Context, obj interface{}) (model.EcdFileMainSubSetInput, error) {
	var it model.EcdFileMainSubSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_sub_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_sub_id"))
			it.FileMainSubID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_unit"))
			it.ConstructUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_director_name"))
			it.ConstructDirectorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_phone"))
			it.ConstructPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_unit"))
			it.ContractUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_director_name"))
			it.ContractDirectorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_phone"))
			it.ContractPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_unit"))
			it.TrafficUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_director_name"))
			it.TrafficDirectorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_phone"))
			it.TrafficPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "wl_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wl_type"))
			it.WlType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_deal_area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_deal_area"))
			it.PlanDealArea, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_trans_volume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_trans_volume"))
			it.PlanTransVolume, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_start_time"))
			it.PlanStartTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_end_time"))
			it.PlanEndTime, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_trans_lines":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_trans_lines"))
			it.PlanTransLines, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construct_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("construct_prove_num"))
			it.ConstructProveNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contract_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract_prove_num"))
			it.ContractProveNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "traffic_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("traffic_prove_num"))
			it.TrafficProveNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sub_package_unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sub_package_unit"))
			it.SubPackageUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_prove_num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_prove_num"))
			it.PackageProveNum, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_director_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_director_name"))
			it.PackageDirectorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "package_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("package_phone"))
			it.PackagePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "facts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facts"))
			it.Facts, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleBoolExp(ctx context.Context, obj interface{}) (model.EcdFileVehicleBoolExp, error) {
	var it model.EcdFileVehicleBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEcdFileVehicleBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEcdFileVehicleBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEcdFileVehicleBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_vehicle_id"))
			it.FileVehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleIncInput(ctx context.Context, obj interface{}) (model.EcdFileVehicleIncInput, error) {
	var it model.EcdFileVehicleIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleInsertInput(ctx context.Context, obj interface{}) (model.EcdFileVehicleInsertInput, error) {
	var it model.EcdFileVehicleInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleOrderBy(ctx context.Context, obj interface{}) (model.EcdFileVehicleOrderBy, error) {
	var it model.EcdFileVehicleOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_vehicle_id"))
			it.FileVehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleSetInput(ctx context.Context, obj interface{}) (model.EcdFileVehicleSetInput, error) {
	var it model.EcdFileVehicleSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_vehicle_id"))
			it.FileVehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleTimeBoolExp(ctx context.Context, obj interface{}) (model.EcdFileVehicleTimeBoolExp, error) {
	var it model.EcdFileVehicleTimeBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEcdFileVehicleTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEcdFileVehicleTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEcdFileVehicleTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_time_id"))
			it.VehicleTimeID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vechile_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vechile_id"))
			it.VechileID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check"))
			it.IsCheck, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
			it.LineID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleTimeIncInput(ctx context.Context, obj interface{}) (model.EcdFileVehicleTimeIncInput, error) {
	var it model.EcdFileVehicleTimeIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleTimeInsertInput(ctx context.Context, obj interface{}) (model.EcdFileVehicleTimeInsertInput, error) {
	var it model.EcdFileVehicleTimeInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vechile_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vechile_id"))
			it.VechileID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check"))
			it.IsCheck, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
			it.LineID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleTimeOrderBy(ctx context.Context, obj interface{}) (model.EcdFileVehicleTimeOrderBy, error) {
	var it model.EcdFileVehicleTimeOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_time_id"))
			it.VehicleTimeID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vechile_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vechile_id"))
			it.VechileID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check"))
			it.IsCheck, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
			it.LineID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdFileVehicleTimeSetInput(ctx context.Context, obj interface{}) (model.EcdFileVehicleTimeSetInput, error) {
	var it model.EcdFileVehicleTimeSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_time_id"))
			it.VehicleTimeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file_main_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file_main_id"))
			it.FileMainID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vechile_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vechile_id"))
			it.VechileID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_date"))
			it.StartDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_date"))
			it.EndDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_check":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_check"))
			it.IsCheck, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
			it.LineID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdLineBoolExp(ctx context.Context, obj interface{}) (model.EcdLineBoolExp, error) {
	var it model.EcdLineBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEcdLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEcdLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEcdLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
			it.LineID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_desc"))
			it.LineDesc, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_user_id"))
			it.AuditUserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_time"))
			it.AuditTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve_desc"))
			it.IsResolveDesc, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdLineIncInput(ctx context.Context, obj interface{}) (model.EcdLineIncInput, error) {
	var it model.EcdLineIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdLineInsertInput(ctx context.Context, obj interface{}) (model.EcdLineInsertInput, error) {
	var it model.EcdLineInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_desc"))
			it.LineDesc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_user_id"))
			it.AuditUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_time"))
			it.AuditTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve_desc"))
			it.IsResolveDesc, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdLineOrderBy(ctx context.Context, obj interface{}) (model.EcdLineOrderBy, error) {
	var it model.EcdLineOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
			it.LineID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_desc"))
			it.LineDesc, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_user_id"))
			it.AuditUserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_time"))
			it.AuditTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve_desc"))
			it.IsResolveDesc, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEcdLineSetInput(ctx context.Context, obj interface{}) (model.EcdLineSetInput, error) {
	var it model.EcdLineSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_id"))
			it.LineID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_desc"))
			it.LineDesc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_user_id"))
			it.AuditUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_time"))
			it.AuditTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_resolve_desc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_resolve_desc"))
			it.IsResolveDesc, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceBoolExp(ctx context.Context, obj interface{}) (model.ElectricFenceBoolExp, error) {
	var it model.ElectricFenceBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOElectricFenceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOElectricFenceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOElectricFenceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "electric_fence_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
			it.ElectricFenceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_type"))
			it.AreaType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_type"))
			it.FenceType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_name"))
			it.FenceName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceEnteranceRecordBoolExp(ctx context.Context, obj interface{}) (model.ElectricFenceEnteranceRecordBoolExp, error) {
	var it model.ElectricFenceEnteranceRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOElectricFenceEnteranceRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOElectricFenceEnteranceRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOElectricFenceEnteranceRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "electric_fence_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
			it.ElectricFenceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "in_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in_time"))
			it.InTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "out_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("out_time"))
			it.OutTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_out":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_out"))
			it.IsOut, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceEnteranceRecordIncInput(ctx context.Context, obj interface{}) (model.ElectricFenceEnteranceRecordIncInput, error) {
	var it model.ElectricFenceEnteranceRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceEnteranceRecordInsertInput(ctx context.Context, obj interface{}) (model.ElectricFenceEnteranceRecordInsertInput, error) {
	var it model.ElectricFenceEnteranceRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "electric_fence_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
			it.ElectricFenceID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "in_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in_time"))
			it.InTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "out_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("out_time"))
			it.OutTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_out":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_out"))
			it.IsOut, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceEnteranceRecordOrderBy(ctx context.Context, obj interface{}) (model.ElectricFenceEnteranceRecordOrderBy, error) {
	var it model.ElectricFenceEnteranceRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "electric_fence_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
			it.ElectricFenceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "in_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in_time"))
			it.InTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "out_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("out_time"))
			it.OutTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_out":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_out"))
			it.IsOut, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceEnteranceRecordSetInput(ctx context.Context, obj interface{}) (model.ElectricFenceEnteranceRecordSetInput, error) {
	var it model.ElectricFenceEnteranceRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "electric_fence_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
			it.ElectricFenceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in_time"))
			it.InTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "out_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("out_time"))
			it.OutTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_out":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_out"))
			it.IsOut, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceIncInput(ctx context.Context, obj interface{}) (model.ElectricFenceIncInput, error) {
	var it model.ElectricFenceIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_type"))
			it.AreaType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_type"))
			it.FenceType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceInsertInput(ctx context.Context, obj interface{}) (model.ElectricFenceInsertInput, error) {
	var it model.ElectricFenceInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "area_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_type"))
			it.AreaType, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_type"))
			it.FenceType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_name"))
			it.FenceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceOrderBy(ctx context.Context, obj interface{}) (model.ElectricFenceOrderBy, error) {
	var it model.ElectricFenceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "electric_fence_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
			it.ElectricFenceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_type"))
			it.AreaType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_type"))
			it.FenceType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_name"))
			it.FenceName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElectricFenceSetInput(ctx context.Context, obj interface{}) (model.ElectricFenceSetInput, error) {
	var it model.ElectricFenceSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "electric_fence_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("electric_fence_id"))
			it.ElectricFenceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_type"))
			it.AreaType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_type"))
			it.FenceType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fence_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fence_name"))
			it.FenceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model2.FloatComparisonExp, error) {
	var it model2.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineBoolExp(ctx context.Context, obj interface{}) (model.LimitSpeedLineBoolExp, error) {
	var it model.LimitSpeedLineBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOLimitSpeedLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOLimitSpeedLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOLimitSpeedLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
			it.LimitSpeedLineID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "reject_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reject_reason"))
			it.RejectReason, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineIncInput(ctx context.Context, obj interface{}) (model.LimitSpeedLineIncInput, error) {
	var it model.LimitSpeedLineIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineInsertInput(ctx context.Context, obj interface{}) (model.LimitSpeedLineInsertInput, error) {
	var it model.LimitSpeedLineInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reject_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reject_reason"))
			it.RejectReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineOrderBy(ctx context.Context, obj interface{}) (model.LimitSpeedLineOrderBy, error) {
	var it model.LimitSpeedLineOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
			it.LimitSpeedLineID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "reject_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reject_reason"))
			it.RejectReason, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineSetInput(ctx context.Context, obj interface{}) (model.LimitSpeedLineSetInput, error) {
	var it model.LimitSpeedLineSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
			it.LimitSpeedLineID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_name"))
			it.LineName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "line_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("line_type"))
			it.LineType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "control_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("control_level"))
			it.ControlLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "apply_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apply_reason"))
			it.ApplyReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_time"))
			it.CheckTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reject_reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reject_reason"))
			it.RejectReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "gis_data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gis_data"))
			it.GisData, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineTimeBoolExp(ctx context.Context, obj interface{}) (model.LimitSpeedLineTimeBoolExp, error) {
	var it model.LimitSpeedLineTimeBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOLimitSpeedLineTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOLimitSpeedLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOLimitSpeedLineTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_time_id"))
			it.LimitSpeedLineTimeID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
			it.LimitSpeedLineID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineTimeIncInput(ctx context.Context, obj interface{}) (model.LimitSpeedLineTimeIncInput, error) {
	var it model.LimitSpeedLineTimeIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineTimeInsertInput(ctx context.Context, obj interface{}) (model.LimitSpeedLineTimeInsertInput, error) {
	var it model.LimitSpeedLineTimeInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit_speed_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
			it.LimitSpeedLineID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalNNumeric2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineTimeOrderBy(ctx context.Context, obj interface{}) (model.LimitSpeedLineTimeOrderBy, error) {
	var it model.LimitSpeedLineTimeOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_time_id"))
			it.LimitSpeedLineTimeID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
			it.LimitSpeedLineID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedLineTimeSetInput(ctx context.Context, obj interface{}) (model.LimitSpeedLineTimeSetInput, error) {
	var it model.LimitSpeedLineTimeSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_time_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_time_id"))
			it.LimitSpeedLineTimeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_line_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_line_id"))
			it.LimitSpeedLineID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start_time"))
			it.StartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end_time"))
			it.EndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed"))
			it.Speed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanBoolExp(ctx context.Context, obj interface{}) (model.LimitSpeedPlanBoolExp, error) {
	var it model.LimitSpeedPlanBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOLimitSpeedPlanBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOLimitSpeedPlanBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOLimitSpeedPlanBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_plan_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_plan_id"))
			it.LimitSpeedPlanID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_name"))
			it.PlanName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanDetailBoolExp(ctx context.Context, obj interface{}) (model.LimitSpeedPlanDetailBoolExp, error) {
	var it model.LimitSpeedPlanDetailBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOLimitSpeedPlanDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOLimitSpeedPlanDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOLimitSpeedPlanDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detail_id"))
			it.DetailID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_id"))
			it.PlanID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_night_limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_night_limit"))
			it.IsNightLimit, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_limit_speed"))
			it.NightLimitSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_time_begin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_time_begin"))
			it.NightTimeBegin, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_time_end":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_time_end"))
			it.NightTimeEnd, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_level"))
			it.RoadLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed"))
			it.LimitSpeed, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanDetailIncInput(ctx context.Context, obj interface{}) (model.LimitSpeedPlanDetailIncInput, error) {
	var it model.LimitSpeedPlanDetailIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_limit_speed"))
			it.NightLimitSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_level"))
			it.RoadLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed"))
			it.LimitSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanDetailInsertInput(ctx context.Context, obj interface{}) (model.LimitSpeedPlanDetailInsertInput, error) {
	var it model.LimitSpeedPlanDetailInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "plan_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_id"))
			it.PlanID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_night_limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_night_limit"))
			it.IsNightLimit, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_limit_speed"))
			it.NightLimitSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_time_begin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_time_begin"))
			it.NightTimeBegin, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_time_end":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_time_end"))
			it.NightTimeEnd, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_level"))
			it.RoadLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed"))
			it.LimitSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanDetailOrderBy(ctx context.Context, obj interface{}) (model.LimitSpeedPlanDetailOrderBy, error) {
	var it model.LimitSpeedPlanDetailOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detail_id"))
			it.DetailID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_id"))
			it.PlanID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_night_limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_night_limit"))
			it.IsNightLimit, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_limit_speed"))
			it.NightLimitSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_time_begin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_time_begin"))
			it.NightTimeBegin, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_time_end":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_time_end"))
			it.NightTimeEnd, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_level"))
			it.RoadLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed"))
			it.LimitSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanDetailSetInput(ctx context.Context, obj interface{}) (model.LimitSpeedPlanDetailSetInput, error) {
	var it model.LimitSpeedPlanDetailSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("detail_id"))
			it.DetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_id"))
			it.PlanID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_night_limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_night_limit"))
			it.IsNightLimit, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_limit_speed"))
			it.NightLimitSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_time_begin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_time_begin"))
			it.NightTimeBegin, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "night_time_end":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("night_time_end"))
			it.NightTimeEnd, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_level"))
			it.RoadLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed"))
			it.LimitSpeed, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanIncInput(ctx context.Context, obj interface{}) (model.LimitSpeedPlanIncInput, error) {
	var it model.LimitSpeedPlanIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanInsertInput(ctx context.Context, obj interface{}) (model.LimitSpeedPlanInsertInput, error) {
	var it model.LimitSpeedPlanInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_name"))
			it.PlanName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanOrderBy(ctx context.Context, obj interface{}) (model.LimitSpeedPlanOrderBy, error) {
	var it model.LimitSpeedPlanOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_plan_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_plan_id"))
			it.LimitSpeedPlanID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_name"))
			it.PlanName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLimitSpeedPlanSetInput(ctx context.Context, obj interface{}) (model.LimitSpeedPlanSetInput, error) {
	var it model.LimitSpeedPlanSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit_speed_plan_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit_speed_plan_id"))
			it.LimitSpeedPlanID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "plan_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plan_name"))
			it.PlanName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleNightTravelRecordBoolExp(ctx context.Context, obj interface{}) (model.VehicleNightTravelRecordBoolExp, error) {
	var it model.VehicleNightTravelRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleNightTravelRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleNightTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleNightTravelRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "sprg_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sprg_id"))
			it.SprgID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_type"))
			it.ServiceType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_start_time"))
			it.RecordStartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_end_time"))
			it.RecordEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleNightTravelRecordIncInput(ctx context.Context, obj interface{}) (model.VehicleNightTravelRecordIncInput, error) {
	var it model.VehicleNightTravelRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_type"))
			it.ServiceType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleNightTravelRecordInsertInput(ctx context.Context, obj interface{}) (model.VehicleNightTravelRecordInsertInput, error) {
	var it model.VehicleNightTravelRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sprg_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sprg_id"))
			it.SprgID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_type"))
			it.ServiceType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_start_time"))
			it.RecordStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_end_time"))
			it.RecordEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleNightTravelRecordOrderBy(ctx context.Context, obj interface{}) (model.VehicleNightTravelRecordOrderBy, error) {
	var it model.VehicleNightTravelRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sprg_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sprg_id"))
			it.SprgID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_type"))
			it.ServiceType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_start_time"))
			it.RecordStartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_end_time"))
			it.RecordEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleNightTravelRecordSetInput(ctx context.Context, obj interface{}) (model.VehicleNightTravelRecordSetInput, error) {
	var it model.VehicleNightTravelRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("route"))
			it.Route, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sprg_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sprg_id"))
			it.SprgID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "service_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("service_type"))
			it.ServiceType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_start_time"))
			it.RecordStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_end_time"))
			it.RecordEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleStopTravelRecordBoolExp(ctx context.Context, obj interface{}) (model.VehicleStopTravelRecordBoolExp, error) {
	var it model.VehicleStopTravelRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleStopTravelRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleStopTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleStopTravelRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "bill_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bill_id"))
			it.BillID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_start_time"))
			it.RecordStartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_end_time"))
			it.RecordEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_user_id"))
			it.RecordUserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_effect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_effect"))
			it.IsEffect, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "effect_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effect_start_time"))
			it.EffectStartTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "effect_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effect_end_time"))
			it.EffectEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleStopTravelRecordIncInput(ctx context.Context, obj interface{}) (model.VehicleStopTravelRecordIncInput, error) {
	var it model.VehicleStopTravelRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleStopTravelRecordInsertInput(ctx context.Context, obj interface{}) (model.VehicleStopTravelRecordInsertInput, error) {
	var it model.VehicleStopTravelRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bill_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bill_id"))
			it.BillID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_start_time"))
			it.RecordStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_end_time"))
			it.RecordEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_user_id"))
			it.RecordUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_effect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_effect"))
			it.IsEffect, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "effect_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effect_start_time"))
			it.EffectStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "effect_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effect_end_time"))
			it.EffectEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalNTimestamptz2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleStopTravelRecordOrderBy(ctx context.Context, obj interface{}) (model.VehicleStopTravelRecordOrderBy, error) {
	var it model.VehicleStopTravelRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "bill_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bill_id"))
			it.BillID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_start_time"))
			it.RecordStartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_end_time"))
			it.RecordEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_user_id"))
			it.RecordUserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_effect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_effect"))
			it.IsEffect, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "effect_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effect_start_time"))
			it.EffectStartTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "effect_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effect_end_time"))
			it.EffectEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleStopTravelRecordSetInput(ctx context.Context, obj interface{}) (model.VehicleStopTravelRecordSetInput, error) {
	var it model.VehicleStopTravelRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_id"))
			it.RecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bill_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bill_id"))
			it.BillID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_start_time"))
			it.RecordStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_end_time"))
			it.RecordEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_user_id"))
			it.RecordUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_effect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_effect"))
			it.IsEffect, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "effect_start_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effect_start_time"))
			it.EffectStartTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "effect_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effect_end_time"))
			it.EffectEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cause":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cause"))
			it.Cause, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var controlLineImplementors = []string{"ControlLine"}

func (ec *executionContext) _ControlLine(ctx context.Context, sel ast.SelectionSet, obj *model1.ControlLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLine")
		case "id":
			out.Values[i] = ec._ControlLine_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "control_line_id":
			out.Values[i] = ec._ControlLine_control_line_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "line_name":
			out.Values[i] = ec._ControlLine_line_name(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLine_line_type(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ControlLine_district_id(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLine_control_level(ctx, field, obj)
		case "apply_reason":
			out.Values[i] = ec._ControlLine_apply_reason(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLine_check_status(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._ControlLine_check_time(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._ControlLine_check_user_id(ctx, field, obj)
		case "reject_reason":
			out.Values[i] = ec._ControlLine_reject_reason(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ControlLine_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._ControlLine_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ControlLine_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ControlLine_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ControlLine_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ControlLine_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ControlLine_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gis_data":
			out.Values[i] = ec._ControlLine_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineAggregateImplementors = []string{"ControlLineAggregate"}

func (ec *executionContext) _ControlLineAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineAggregate")
		case "aggregate":
			out.Values[i] = ec._ControlLineAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineAggregateFieldsImplementors = []string{"ControlLineAggregateFields"}

func (ec *executionContext) _ControlLineAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineAggregateFields")
		case "avg":
			out.Values[i] = ec._ControlLineAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ControlLineAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ControlLineAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ControlLineAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ControlLineAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ControlLineAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ControlLineAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ControlLineAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ControlLineAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ControlLineAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ControlLineAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineAvgFieldsImplementors = []string{"ControlLineAvgFields"}

func (ec *executionContext) _ControlLineAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineAvgFields")
		case "id":
			out.Values[i] = ec._ControlLineAvgFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineAvgFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineAvgFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineAvgFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineMaxFieldsImplementors = []string{"ControlLineMaxFields"}

func (ec *executionContext) _ControlLineMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineMaxFields")
		case "id":
			out.Values[i] = ec._ControlLineMaxFields_id(ctx, field, obj)
		case "control_line_id":
			out.Values[i] = ec._ControlLineMaxFields_control_line_id(ctx, field, obj)
		case "line_name":
			out.Values[i] = ec._ControlLineMaxFields_line_name(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineMaxFields_line_type(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ControlLineMaxFields_district_id(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineMaxFields_control_level(ctx, field, obj)
		case "apply_reason":
			out.Values[i] = ec._ControlLineMaxFields_apply_reason(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineMaxFields_check_status(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._ControlLineMaxFields_check_time(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._ControlLineMaxFields_check_user_id(ctx, field, obj)
		case "reject_reason":
			out.Values[i] = ec._ControlLineMaxFields_reject_reason(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ControlLineMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ControlLineMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ControlLineMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ControlLineMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ControlLineMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ControlLineMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ControlLineMaxFields_is_delete(ctx, field, obj)
		case "gis_data":
			out.Values[i] = ec._ControlLineMaxFields_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineMinFieldsImplementors = []string{"ControlLineMinFields"}

func (ec *executionContext) _ControlLineMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineMinFields")
		case "id":
			out.Values[i] = ec._ControlLineMinFields_id(ctx, field, obj)
		case "control_line_id":
			out.Values[i] = ec._ControlLineMinFields_control_line_id(ctx, field, obj)
		case "line_name":
			out.Values[i] = ec._ControlLineMinFields_line_name(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineMinFields_line_type(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ControlLineMinFields_district_id(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineMinFields_control_level(ctx, field, obj)
		case "apply_reason":
			out.Values[i] = ec._ControlLineMinFields_apply_reason(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineMinFields_check_status(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._ControlLineMinFields_check_time(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._ControlLineMinFields_check_user_id(ctx, field, obj)
		case "reject_reason":
			out.Values[i] = ec._ControlLineMinFields_reject_reason(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ControlLineMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ControlLineMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ControlLineMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ControlLineMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ControlLineMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ControlLineMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ControlLineMinFields_is_delete(ctx, field, obj)
		case "gis_data":
			out.Values[i] = ec._ControlLineMinFields_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineMutationResponseImplementors = []string{"ControlLineMutationResponse"}

func (ec *executionContext) _ControlLineMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._ControlLineMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ControlLineMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineStddevFieldsImplementors = []string{"ControlLineStddevFields"}

func (ec *executionContext) _ControlLineStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineStddevFields")
		case "id":
			out.Values[i] = ec._ControlLineStddevFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineStddevFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineStddevFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineStddevFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineStddevPopFieldsImplementors = []string{"ControlLineStddevPopFields"}

func (ec *executionContext) _ControlLineStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineStddevPopFields")
		case "id":
			out.Values[i] = ec._ControlLineStddevPopFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineStddevPopFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineStddevPopFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineStddevPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineStddevSampFieldsImplementors = []string{"ControlLineStddevSampFields"}

func (ec *executionContext) _ControlLineStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineStddevSampFields")
		case "id":
			out.Values[i] = ec._ControlLineStddevSampFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineStddevSampFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineStddevSampFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineStddevSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineSumFieldsImplementors = []string{"ControlLineSumFields"}

func (ec *executionContext) _ControlLineSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineSumFields")
		case "id":
			out.Values[i] = ec._ControlLineSumFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineSumFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineSumFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineSumFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeImplementors = []string{"ControlLineTime"}

func (ec *executionContext) _ControlLineTime(ctx context.Context, sel ast.SelectionSet, obj *model1.ControlLineTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTime")
		case "id":
			out.Values[i] = ec._ControlLineTime_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "control_line_time_id":
			out.Values[i] = ec._ControlLineTime_control_line_time_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "control_line_id":
			out.Values[i] = ec._ControlLineTime_control_line_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "start_time":
			out.Values[i] = ec._ControlLineTime_start_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_time":
			out.Values[i] = ec._ControlLineTime_end_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._ControlLineTime_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._ControlLineTime_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ControlLineTime_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ControlLineTime_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ControlLineTime_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ControlLineTime_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ControlLineTime_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeAggregateImplementors = []string{"ControlLineTimeAggregate"}

func (ec *executionContext) _ControlLineTimeAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeAggregate")
		case "aggregate":
			out.Values[i] = ec._ControlLineTimeAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeAggregateFieldsImplementors = []string{"ControlLineTimeAggregateFields"}

func (ec *executionContext) _ControlLineTimeAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeAggregateFields")
		case "avg":
			out.Values[i] = ec._ControlLineTimeAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ControlLineTimeAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ControlLineTimeAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ControlLineTimeAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ControlLineTimeAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ControlLineTimeAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ControlLineTimeAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ControlLineTimeAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ControlLineTimeAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ControlLineTimeAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ControlLineTimeAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeAvgFieldsImplementors = []string{"ControlLineTimeAvgFields"}

func (ec *executionContext) _ControlLineTimeAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeAvgFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeMaxFieldsImplementors = []string{"ControlLineTimeMaxFields"}

func (ec *executionContext) _ControlLineTimeMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeMaxFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeMaxFields_id(ctx, field, obj)
		case "control_line_time_id":
			out.Values[i] = ec._ControlLineTimeMaxFields_control_line_time_id(ctx, field, obj)
		case "control_line_id":
			out.Values[i] = ec._ControlLineTimeMaxFields_control_line_id(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._ControlLineTimeMaxFields_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._ControlLineTimeMaxFields_end_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ControlLineTimeMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ControlLineTimeMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ControlLineTimeMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ControlLineTimeMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ControlLineTimeMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ControlLineTimeMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ControlLineTimeMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeMinFieldsImplementors = []string{"ControlLineTimeMinFields"}

func (ec *executionContext) _ControlLineTimeMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeMinFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeMinFields_id(ctx, field, obj)
		case "control_line_time_id":
			out.Values[i] = ec._ControlLineTimeMinFields_control_line_time_id(ctx, field, obj)
		case "control_line_id":
			out.Values[i] = ec._ControlLineTimeMinFields_control_line_id(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._ControlLineTimeMinFields_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._ControlLineTimeMinFields_end_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ControlLineTimeMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ControlLineTimeMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ControlLineTimeMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ControlLineTimeMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ControlLineTimeMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ControlLineTimeMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ControlLineTimeMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeMutationResponseImplementors = []string{"ControlLineTimeMutationResponse"}

func (ec *executionContext) _ControlLineTimeMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._ControlLineTimeMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ControlLineTimeMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeStddevFieldsImplementors = []string{"ControlLineTimeStddevFields"}

func (ec *executionContext) _ControlLineTimeStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeStddevFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeStddevPopFieldsImplementors = []string{"ControlLineTimeStddevPopFields"}

func (ec *executionContext) _ControlLineTimeStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeStddevPopFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeStddevSampFieldsImplementors = []string{"ControlLineTimeStddevSampFields"}

func (ec *executionContext) _ControlLineTimeStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeStddevSampFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeSumFieldsImplementors = []string{"ControlLineTimeSumFields"}

func (ec *executionContext) _ControlLineTimeSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeSumFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeVarPopFieldsImplementors = []string{"ControlLineTimeVarPopFields"}

func (ec *executionContext) _ControlLineTimeVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeVarPopFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeVarSampFieldsImplementors = []string{"ControlLineTimeVarSampFields"}

func (ec *executionContext) _ControlLineTimeVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeVarSampFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineTimeVarianceFieldsImplementors = []string{"ControlLineTimeVarianceFields"}

func (ec *executionContext) _ControlLineTimeVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineTimeVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineTimeVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineTimeVarianceFields")
		case "id":
			out.Values[i] = ec._ControlLineTimeVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineVarPopFieldsImplementors = []string{"ControlLineVarPopFields"}

func (ec *executionContext) _ControlLineVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineVarPopFields")
		case "id":
			out.Values[i] = ec._ControlLineVarPopFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineVarPopFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineVarPopFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineVarPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineVarSampFieldsImplementors = []string{"ControlLineVarSampFields"}

func (ec *executionContext) _ControlLineVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineVarSampFields")
		case "id":
			out.Values[i] = ec._ControlLineVarSampFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineVarSampFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineVarSampFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineVarSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var controlLineVarianceFieldsImplementors = []string{"ControlLineVarianceFields"}

func (ec *executionContext) _ControlLineVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.ControlLineVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, controlLineVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ControlLineVarianceFields")
		case "id":
			out.Values[i] = ec._ControlLineVarianceFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._ControlLineVarianceFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._ControlLineVarianceFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._ControlLineVarianceFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisImplementors = []string{"EcdFileCheckHis"}

func (ec *executionContext) _EcdFileCheckHis(ctx context.Context, sel ast.SelectionSet, obj *model1.EcdFileCheckHis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHis")
		case "id":
			out.Values[i] = ec._EcdFileCheckHis_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "his_id":
			out.Values[i] = ec._EcdFileCheckHis_his_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_main_id":
			out.Values[i] = ec._EcdFileCheckHis_file_main_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":
			out.Values[i] = ec._EcdFileCheckHis_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHis_oper_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHis_check_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rec_time":
			out.Values[i] = ec._EcdFileCheckHis_rec_time(ctx, field, obj)
		case "oper_time":
			out.Values[i] = ec._EcdFileCheckHis_oper_time(ctx, field, obj)
		case "suggest":
			out.Values[i] = ec._EcdFileCheckHis_suggest(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._EcdFileCheckHis_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileCheckHis_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EcdFileCheckHis_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileCheckHis_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileCheckHis_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileCheckHis_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileCheckHis_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileCheckHis_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisAggregateImplementors = []string{"EcdFileCheckHisAggregate"}

func (ec *executionContext) _EcdFileCheckHisAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisAggregate")
		case "aggregate":
			out.Values[i] = ec._EcdFileCheckHisAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisAggregateFieldsImplementors = []string{"EcdFileCheckHisAggregateFields"}

func (ec *executionContext) _EcdFileCheckHisAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisAggregateFields")
		case "avg":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EcdFileCheckHisAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisAvgFieldsImplementors = []string{"EcdFileCheckHisAvgFields"}

func (ec *executionContext) _EcdFileCheckHisAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisAvgFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisAvgFields_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisAvgFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisAvgFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisMaxFieldsImplementors = []string{"EcdFileCheckHisMaxFields"}

func (ec *executionContext) _EcdFileCheckHisMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisMaxFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_id(ctx, field, obj)
		case "his_id":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_his_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_file_main_id(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_user_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_check_status(ctx, field, obj)
		case "rec_time":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_rec_time(ctx, field, obj)
		case "oper_time":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_oper_time(ctx, field, obj)
		case "suggest":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_suggest(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileCheckHisMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisMinFieldsImplementors = []string{"EcdFileCheckHisMinFields"}

func (ec *executionContext) _EcdFileCheckHisMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisMinFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisMinFields_id(ctx, field, obj)
		case "his_id":
			out.Values[i] = ec._EcdFileCheckHisMinFields_his_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileCheckHisMinFields_file_main_id(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._EcdFileCheckHisMinFields_user_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisMinFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisMinFields_check_status(ctx, field, obj)
		case "rec_time":
			out.Values[i] = ec._EcdFileCheckHisMinFields_rec_time(ctx, field, obj)
		case "oper_time":
			out.Values[i] = ec._EcdFileCheckHisMinFields_oper_time(ctx, field, obj)
		case "suggest":
			out.Values[i] = ec._EcdFileCheckHisMinFields_suggest(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._EcdFileCheckHisMinFields_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileCheckHisMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileCheckHisMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileCheckHisMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileCheckHisMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileCheckHisMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileCheckHisMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileCheckHisMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisMutationResponseImplementors = []string{"EcdFileCheckHisMutationResponse"}

func (ec *executionContext) _EcdFileCheckHisMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EcdFileCheckHisMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EcdFileCheckHisMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisStddevFieldsImplementors = []string{"EcdFileCheckHisStddevFields"}

func (ec *executionContext) _EcdFileCheckHisStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisStddevFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisStddevFields_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisStddevFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisStddevFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisStddevPopFieldsImplementors = []string{"EcdFileCheckHisStddevPopFields"}

func (ec *executionContext) _EcdFileCheckHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisStddevPopFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisStddevPopFields_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisStddevPopFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisStddevPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisStddevSampFieldsImplementors = []string{"EcdFileCheckHisStddevSampFields"}

func (ec *executionContext) _EcdFileCheckHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisStddevSampFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisStddevSampFields_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisStddevSampFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisStddevSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisSumFieldsImplementors = []string{"EcdFileCheckHisSumFields"}

func (ec *executionContext) _EcdFileCheckHisSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisSumFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisSumFields_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisSumFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisSumFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisVarPopFieldsImplementors = []string{"EcdFileCheckHisVarPopFields"}

func (ec *executionContext) _EcdFileCheckHisVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisVarPopFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisVarPopFields_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisVarPopFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisVarPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisVarSampFieldsImplementors = []string{"EcdFileCheckHisVarSampFields"}

func (ec *executionContext) _EcdFileCheckHisVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisVarSampFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisVarSampFields_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisVarSampFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisVarSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileCheckHisVarianceFieldsImplementors = []string{"EcdFileCheckHisVarianceFields"}

func (ec *executionContext) _EcdFileCheckHisVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileCheckHisVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileCheckHisVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileCheckHisVarianceFields")
		case "id":
			out.Values[i] = ec._EcdFileCheckHisVarianceFields_id(ctx, field, obj)
		case "oper_type":
			out.Values[i] = ec._EcdFileCheckHisVarianceFields_oper_type(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileCheckHisVarianceFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictImplementors = []string{"EcdFileDistrict"}

func (ec *executionContext) _EcdFileDistrict(ctx context.Context, sel ast.SelectionSet, obj *model1.EcdFileDistrict) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrict")
		case "id":
			out.Values[i] = ec._EcdFileDistrict_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_district_id":
			out.Values[i] = ec._EcdFileDistrict_file_district_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_main_id":
			out.Values[i] = ec._EcdFileDistrict_file_main_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "district_id":
			out.Values[i] = ec._EcdFileDistrict_district_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._EcdFileDistrict_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EcdFileDistrict_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileDistrict_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileDistrict_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileDistrict_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileDistrict_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileDistrict_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictAggregateImplementors = []string{"EcdFileDistrictAggregate"}

func (ec *executionContext) _EcdFileDistrictAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictAggregate")
		case "aggregate":
			out.Values[i] = ec._EcdFileDistrictAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictAggregateFieldsImplementors = []string{"EcdFileDistrictAggregateFields"}

func (ec *executionContext) _EcdFileDistrictAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictAggregateFields")
		case "avg":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EcdFileDistrictAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictAvgFieldsImplementors = []string{"EcdFileDistrictAvgFields"}

func (ec *executionContext) _EcdFileDistrictAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictAvgFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictMaxFieldsImplementors = []string{"EcdFileDistrictMaxFields"}

func (ec *executionContext) _EcdFileDistrictMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictMaxFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictMaxFields_id(ctx, field, obj)
		case "file_district_id":
			out.Values[i] = ec._EcdFileDistrictMaxFields_file_district_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileDistrictMaxFields_file_main_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EcdFileDistrictMaxFields_district_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileDistrictMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileDistrictMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileDistrictMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileDistrictMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileDistrictMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileDistrictMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileDistrictMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictMinFieldsImplementors = []string{"EcdFileDistrictMinFields"}

func (ec *executionContext) _EcdFileDistrictMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictMinFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictMinFields_id(ctx, field, obj)
		case "file_district_id":
			out.Values[i] = ec._EcdFileDistrictMinFields_file_district_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileDistrictMinFields_file_main_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EcdFileDistrictMinFields_district_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileDistrictMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileDistrictMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileDistrictMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileDistrictMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileDistrictMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileDistrictMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileDistrictMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictMutationResponseImplementors = []string{"EcdFileDistrictMutationResponse"}

func (ec *executionContext) _EcdFileDistrictMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EcdFileDistrictMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EcdFileDistrictMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictStddevFieldsImplementors = []string{"EcdFileDistrictStddevFields"}

func (ec *executionContext) _EcdFileDistrictStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictStddevFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictStddevPopFieldsImplementors = []string{"EcdFileDistrictStddevPopFields"}

func (ec *executionContext) _EcdFileDistrictStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictStddevPopFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictStddevSampFieldsImplementors = []string{"EcdFileDistrictStddevSampFields"}

func (ec *executionContext) _EcdFileDistrictStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictStddevSampFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictSumFieldsImplementors = []string{"EcdFileDistrictSumFields"}

func (ec *executionContext) _EcdFileDistrictSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictSumFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictVarPopFieldsImplementors = []string{"EcdFileDistrictVarPopFields"}

func (ec *executionContext) _EcdFileDistrictVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictVarPopFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictVarSampFieldsImplementors = []string{"EcdFileDistrictVarSampFields"}

func (ec *executionContext) _EcdFileDistrictVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictVarSampFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileDistrictVarianceFieldsImplementors = []string{"EcdFileDistrictVarianceFields"}

func (ec *executionContext) _EcdFileDistrictVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileDistrictVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileDistrictVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileDistrictVarianceFields")
		case "id":
			out.Values[i] = ec._EcdFileDistrictVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointImplementors = []string{"EcdFileLinePoint"}

func (ec *executionContext) _EcdFileLinePoint(ctx context.Context, sel ast.SelectionSet, obj *model1.EcdFileLinePoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePoint")
		case "id":
			out.Values[i] = ec._EcdFileLinePoint_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "line_point_id":
			out.Values[i] = ec._EcdFileLinePoint_line_point_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_main_id":
			out.Values[i] = ec._EcdFileLinePoint_file_main_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gps_point":
			out.Values[i] = ec._EcdFileLinePoint_gps_point(ctx, field, obj)
		case "map_point":
			out.Values[i] = ec._EcdFileLinePoint_map_point(ctx, field, obj)
		case "line_point_name":
			out.Values[i] = ec._EcdFileLinePoint_line_point_name(ctx, field, obj)
		case "line_point_remark":
			out.Values[i] = ec._EcdFileLinePoint_line_point_remark(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePoint_point_type(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileLinePoint_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EcdFileLinePoint_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileLinePoint_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileLinePoint_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileLinePoint_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileLinePoint_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileLinePoint_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointAggregateImplementors = []string{"EcdFileLinePointAggregate"}

func (ec *executionContext) _EcdFileLinePointAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointAggregate")
		case "aggregate":
			out.Values[i] = ec._EcdFileLinePointAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointAggregateFieldsImplementors = []string{"EcdFileLinePointAggregateFields"}

func (ec *executionContext) _EcdFileLinePointAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointAggregateFields")
		case "avg":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EcdFileLinePointAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointAvgFieldsImplementors = []string{"EcdFileLinePointAvgFields"}

func (ec *executionContext) _EcdFileLinePointAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointAvgFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointAvgFields_id(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointAvgFields_point_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointMaxFieldsImplementors = []string{"EcdFileLinePointMaxFields"}

func (ec *executionContext) _EcdFileLinePointMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointMaxFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointMaxFields_id(ctx, field, obj)
		case "line_point_id":
			out.Values[i] = ec._EcdFileLinePointMaxFields_line_point_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileLinePointMaxFields_file_main_id(ctx, field, obj)
		case "gps_point":
			out.Values[i] = ec._EcdFileLinePointMaxFields_gps_point(ctx, field, obj)
		case "map_point":
			out.Values[i] = ec._EcdFileLinePointMaxFields_map_point(ctx, field, obj)
		case "line_point_name":
			out.Values[i] = ec._EcdFileLinePointMaxFields_line_point_name(ctx, field, obj)
		case "line_point_remark":
			out.Values[i] = ec._EcdFileLinePointMaxFields_line_point_remark(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointMaxFields_point_type(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileLinePointMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileLinePointMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileLinePointMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileLinePointMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileLinePointMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileLinePointMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileLinePointMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointMinFieldsImplementors = []string{"EcdFileLinePointMinFields"}

func (ec *executionContext) _EcdFileLinePointMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointMinFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointMinFields_id(ctx, field, obj)
		case "line_point_id":
			out.Values[i] = ec._EcdFileLinePointMinFields_line_point_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileLinePointMinFields_file_main_id(ctx, field, obj)
		case "gps_point":
			out.Values[i] = ec._EcdFileLinePointMinFields_gps_point(ctx, field, obj)
		case "map_point":
			out.Values[i] = ec._EcdFileLinePointMinFields_map_point(ctx, field, obj)
		case "line_point_name":
			out.Values[i] = ec._EcdFileLinePointMinFields_line_point_name(ctx, field, obj)
		case "line_point_remark":
			out.Values[i] = ec._EcdFileLinePointMinFields_line_point_remark(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointMinFields_point_type(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileLinePointMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileLinePointMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileLinePointMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileLinePointMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileLinePointMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileLinePointMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileLinePointMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointMutationResponseImplementors = []string{"EcdFileLinePointMutationResponse"}

func (ec *executionContext) _EcdFileLinePointMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EcdFileLinePointMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EcdFileLinePointMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointStddevFieldsImplementors = []string{"EcdFileLinePointStddevFields"}

func (ec *executionContext) _EcdFileLinePointStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointStddevFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointStddevFields_id(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointStddevFields_point_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointStddevPopFieldsImplementors = []string{"EcdFileLinePointStddevPopFields"}

func (ec *executionContext) _EcdFileLinePointStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointStddevPopFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointStddevPopFields_id(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointStddevPopFields_point_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointStddevSampFieldsImplementors = []string{"EcdFileLinePointStddevSampFields"}

func (ec *executionContext) _EcdFileLinePointStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointStddevSampFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointStddevSampFields_id(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointStddevSampFields_point_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointSumFieldsImplementors = []string{"EcdFileLinePointSumFields"}

func (ec *executionContext) _EcdFileLinePointSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointSumFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointSumFields_id(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointSumFields_point_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointVarPopFieldsImplementors = []string{"EcdFileLinePointVarPopFields"}

func (ec *executionContext) _EcdFileLinePointVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointVarPopFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointVarPopFields_id(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointVarPopFields_point_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointVarSampFieldsImplementors = []string{"EcdFileLinePointVarSampFields"}

func (ec *executionContext) _EcdFileLinePointVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointVarSampFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointVarSampFields_id(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointVarSampFields_point_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileLinePointVarianceFieldsImplementors = []string{"EcdFileLinePointVarianceFields"}

func (ec *executionContext) _EcdFileLinePointVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileLinePointVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileLinePointVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileLinePointVarianceFields")
		case "id":
			out.Values[i] = ec._EcdFileLinePointVarianceFields_id(ctx, field, obj)
		case "point_type":
			out.Values[i] = ec._EcdFileLinePointVarianceFields_point_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainImplementors = []string{"EcdFileMain"}

func (ec *executionContext) _EcdFileMain(ctx context.Context, sel ast.SelectionSet, obj *model1.EcdFileMain) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMain")
		case "id":
			out.Values[i] = ec._EcdFileMain_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_main_id":
			out.Values[i] = ec._EcdFileMain_file_main_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_id":
			out.Values[i] = ec._EcdFileMain_file_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EcdFileMain_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "district_id":
			out.Values[i] = ec._EcdFileMain_district_id(ctx, field, obj)
		case "is_cross_district":
			out.Values[i] = ec._EcdFileMain_is_cross_district(ctx, field, obj)
		case "first_cross_pid":
			out.Values[i] = ec._EcdFileMain_first_cross_pid(ctx, field, obj)
		case "plan_start_time":
			out.Values[i] = ec._EcdFileMain_plan_start_time(ctx, field, obj)
		case "plan_end_time":
			out.Values[i] = ec._EcdFileMain_plan_end_time(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._EcdFileMain_check_time(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMain_check_status(ctx, field, obj)
		case "phone_num":
			out.Values[i] = ec._EcdFileMain_phone_num(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMain_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMain_end_state(ctx, field, obj)
		case "title":
			out.Values[i] = ec._EcdFileMain_title(ctx, field, obj)
		case "add_district_id":
			out.Values[i] = ec._EcdFileMain_add_district_id(ctx, field, obj)
		case "start_point_checker_sign":
			out.Values[i] = ec._EcdFileMain_start_point_checker_sign(ctx, field, obj)
		case "end_point_checker_sign":
			out.Values[i] = ec._EcdFileMain_end_point_checker_sign(ctx, field, obj)
		case "route_checker_sign":
			out.Values[i] = ec._EcdFileMain_route_checker_sign(ctx, field, obj)
		case "speed_time_checker_sign":
			out.Values[i] = ec._EcdFileMain_speed_time_checker_sign(ctx, field, obj)
		case "return_suggest":
			out.Values[i] = ec._EcdFileMain_return_suggest(ctx, field, obj)
		case "construct_title":
			out.Values[i] = ec._EcdFileMain_construct_title(ctx, field, obj)
		case "construct_id":
			out.Values[i] = ec._EcdFileMain_construct_id(ctx, field, obj)
		case "is_match_construction":
			out.Values[i] = ec._EcdFileMain_is_match_construction(ctx, field, obj)
		case "client_report_time":
			out.Values[i] = ec._EcdFileMain_client_report_time(ctx, field, obj)
		case "construct_prove_file":
			out.Values[i] = ec._EcdFileMain_construct_prove_file(ctx, field, obj)
		case "do_construct_prove_file":
			out.Values[i] = ec._EcdFileMain_do_construct_prove_file(ctx, field, obj)
		case "sub_package_prove_file":
			out.Values[i] = ec._EcdFileMain_sub_package_prove_file(ctx, field, obj)
		case "traffic_prove_file":
			out.Values[i] = ec._EcdFileMain_traffic_prove_file(ctx, field, obj)
		case "route_board_promise_file":
			out.Values[i] = ec._EcdFileMain_route_board_promise_file(ctx, field, obj)
		case "traffice_object_promise_file":
			out.Values[i] = ec._EcdFileMain_traffice_object_promise_file(ctx, field, obj)
		case "construct_garbage_allow_file":
			out.Values[i] = ec._EcdFileMain_construct_garbage_allow_file(ctx, field, obj)
		case "construct_site_enterance_photo":
			out.Values[i] = ec._EcdFileMain_construct_site_enterance_photo(ctx, field, obj)
		case "construct_wash_car_place_photo":
			out.Values[i] = ec._EcdFileMain_construct_wash_car_place_photo(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileMain_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EcdFileMain_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileMain_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileMain_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileMain_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileMain_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileMain_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._EcdFileMain_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainAggregateImplementors = []string{"EcdFileMainAggregate"}

func (ec *executionContext) _EcdFileMainAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainAggregate")
		case "aggregate":
			out.Values[i] = ec._EcdFileMainAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainAggregateFieldsImplementors = []string{"EcdFileMainAggregateFields"}

func (ec *executionContext) _EcdFileMainAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainAggregateFields")
		case "avg":
			out.Values[i] = ec._EcdFileMainAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EcdFileMainAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EcdFileMainAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EcdFileMainAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EcdFileMainAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EcdFileMainAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EcdFileMainAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EcdFileMainAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EcdFileMainAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EcdFileMainAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EcdFileMainAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainAvgFieldsImplementors = []string{"EcdFileMainAvgFields"}

func (ec *executionContext) _EcdFileMainAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainAvgFields")
		case "id":
			out.Values[i] = ec._EcdFileMainAvgFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainAvgFields_check_status(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainAvgFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainAvgFields_end_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainMaxFieldsImplementors = []string{"EcdFileMainMaxFields"}

func (ec *executionContext) _EcdFileMainMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainMaxFields")
		case "id":
			out.Values[i] = ec._EcdFileMainMaxFields_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileMainMaxFields_file_main_id(ctx, field, obj)
		case "file_id":
			out.Values[i] = ec._EcdFileMainMaxFields_file_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EcdFileMainMaxFields_enterprise_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EcdFileMainMaxFields_district_id(ctx, field, obj)
		case "is_cross_district":
			out.Values[i] = ec._EcdFileMainMaxFields_is_cross_district(ctx, field, obj)
		case "first_cross_pid":
			out.Values[i] = ec._EcdFileMainMaxFields_first_cross_pid(ctx, field, obj)
		case "plan_start_time":
			out.Values[i] = ec._EcdFileMainMaxFields_plan_start_time(ctx, field, obj)
		case "plan_end_time":
			out.Values[i] = ec._EcdFileMainMaxFields_plan_end_time(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._EcdFileMainMaxFields_check_time(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainMaxFields_check_status(ctx, field, obj)
		case "phone_num":
			out.Values[i] = ec._EcdFileMainMaxFields_phone_num(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainMaxFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainMaxFields_end_state(ctx, field, obj)
		case "title":
			out.Values[i] = ec._EcdFileMainMaxFields_title(ctx, field, obj)
		case "add_district_id":
			out.Values[i] = ec._EcdFileMainMaxFields_add_district_id(ctx, field, obj)
		case "start_point_checker_sign":
			out.Values[i] = ec._EcdFileMainMaxFields_start_point_checker_sign(ctx, field, obj)
		case "end_point_checker_sign":
			out.Values[i] = ec._EcdFileMainMaxFields_end_point_checker_sign(ctx, field, obj)
		case "route_checker_sign":
			out.Values[i] = ec._EcdFileMainMaxFields_route_checker_sign(ctx, field, obj)
		case "speed_time_checker_sign":
			out.Values[i] = ec._EcdFileMainMaxFields_speed_time_checker_sign(ctx, field, obj)
		case "return_suggest":
			out.Values[i] = ec._EcdFileMainMaxFields_return_suggest(ctx, field, obj)
		case "construct_title":
			out.Values[i] = ec._EcdFileMainMaxFields_construct_title(ctx, field, obj)
		case "construct_id":
			out.Values[i] = ec._EcdFileMainMaxFields_construct_id(ctx, field, obj)
		case "is_match_construction":
			out.Values[i] = ec._EcdFileMainMaxFields_is_match_construction(ctx, field, obj)
		case "client_report_time":
			out.Values[i] = ec._EcdFileMainMaxFields_client_report_time(ctx, field, obj)
		case "construct_prove_file":
			out.Values[i] = ec._EcdFileMainMaxFields_construct_prove_file(ctx, field, obj)
		case "do_construct_prove_file":
			out.Values[i] = ec._EcdFileMainMaxFields_do_construct_prove_file(ctx, field, obj)
		case "sub_package_prove_file":
			out.Values[i] = ec._EcdFileMainMaxFields_sub_package_prove_file(ctx, field, obj)
		case "traffic_prove_file":
			out.Values[i] = ec._EcdFileMainMaxFields_traffic_prove_file(ctx, field, obj)
		case "route_board_promise_file":
			out.Values[i] = ec._EcdFileMainMaxFields_route_board_promise_file(ctx, field, obj)
		case "traffice_object_promise_file":
			out.Values[i] = ec._EcdFileMainMaxFields_traffice_object_promise_file(ctx, field, obj)
		case "construct_garbage_allow_file":
			out.Values[i] = ec._EcdFileMainMaxFields_construct_garbage_allow_file(ctx, field, obj)
		case "construct_site_enterance_photo":
			out.Values[i] = ec._EcdFileMainMaxFields_construct_site_enterance_photo(ctx, field, obj)
		case "construct_wash_car_place_photo":
			out.Values[i] = ec._EcdFileMainMaxFields_construct_wash_car_place_photo(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileMainMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileMainMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileMainMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileMainMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileMainMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileMainMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileMainMaxFields_is_delete(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._EcdFileMainMaxFields_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainMinFieldsImplementors = []string{"EcdFileMainMinFields"}

func (ec *executionContext) _EcdFileMainMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainMinFields")
		case "id":
			out.Values[i] = ec._EcdFileMainMinFields_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileMainMinFields_file_main_id(ctx, field, obj)
		case "file_id":
			out.Values[i] = ec._EcdFileMainMinFields_file_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EcdFileMainMinFields_enterprise_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EcdFileMainMinFields_district_id(ctx, field, obj)
		case "is_cross_district":
			out.Values[i] = ec._EcdFileMainMinFields_is_cross_district(ctx, field, obj)
		case "first_cross_pid":
			out.Values[i] = ec._EcdFileMainMinFields_first_cross_pid(ctx, field, obj)
		case "plan_start_time":
			out.Values[i] = ec._EcdFileMainMinFields_plan_start_time(ctx, field, obj)
		case "plan_end_time":
			out.Values[i] = ec._EcdFileMainMinFields_plan_end_time(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._EcdFileMainMinFields_check_time(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainMinFields_check_status(ctx, field, obj)
		case "phone_num":
			out.Values[i] = ec._EcdFileMainMinFields_phone_num(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainMinFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainMinFields_end_state(ctx, field, obj)
		case "title":
			out.Values[i] = ec._EcdFileMainMinFields_title(ctx, field, obj)
		case "add_district_id":
			out.Values[i] = ec._EcdFileMainMinFields_add_district_id(ctx, field, obj)
		case "start_point_checker_sign":
			out.Values[i] = ec._EcdFileMainMinFields_start_point_checker_sign(ctx, field, obj)
		case "end_point_checker_sign":
			out.Values[i] = ec._EcdFileMainMinFields_end_point_checker_sign(ctx, field, obj)
		case "route_checker_sign":
			out.Values[i] = ec._EcdFileMainMinFields_route_checker_sign(ctx, field, obj)
		case "speed_time_checker_sign":
			out.Values[i] = ec._EcdFileMainMinFields_speed_time_checker_sign(ctx, field, obj)
		case "return_suggest":
			out.Values[i] = ec._EcdFileMainMinFields_return_suggest(ctx, field, obj)
		case "construct_title":
			out.Values[i] = ec._EcdFileMainMinFields_construct_title(ctx, field, obj)
		case "construct_id":
			out.Values[i] = ec._EcdFileMainMinFields_construct_id(ctx, field, obj)
		case "is_match_construction":
			out.Values[i] = ec._EcdFileMainMinFields_is_match_construction(ctx, field, obj)
		case "client_report_time":
			out.Values[i] = ec._EcdFileMainMinFields_client_report_time(ctx, field, obj)
		case "construct_prove_file":
			out.Values[i] = ec._EcdFileMainMinFields_construct_prove_file(ctx, field, obj)
		case "do_construct_prove_file":
			out.Values[i] = ec._EcdFileMainMinFields_do_construct_prove_file(ctx, field, obj)
		case "sub_package_prove_file":
			out.Values[i] = ec._EcdFileMainMinFields_sub_package_prove_file(ctx, field, obj)
		case "traffic_prove_file":
			out.Values[i] = ec._EcdFileMainMinFields_traffic_prove_file(ctx, field, obj)
		case "route_board_promise_file":
			out.Values[i] = ec._EcdFileMainMinFields_route_board_promise_file(ctx, field, obj)
		case "traffice_object_promise_file":
			out.Values[i] = ec._EcdFileMainMinFields_traffice_object_promise_file(ctx, field, obj)
		case "construct_garbage_allow_file":
			out.Values[i] = ec._EcdFileMainMinFields_construct_garbage_allow_file(ctx, field, obj)
		case "construct_site_enterance_photo":
			out.Values[i] = ec._EcdFileMainMinFields_construct_site_enterance_photo(ctx, field, obj)
		case "construct_wash_car_place_photo":
			out.Values[i] = ec._EcdFileMainMinFields_construct_wash_car_place_photo(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileMainMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileMainMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileMainMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileMainMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileMainMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileMainMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileMainMinFields_is_delete(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._EcdFileMainMinFields_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainMutationResponseImplementors = []string{"EcdFileMainMutationResponse"}

func (ec *executionContext) _EcdFileMainMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EcdFileMainMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EcdFileMainMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainStddevFieldsImplementors = []string{"EcdFileMainStddevFields"}

func (ec *executionContext) _EcdFileMainStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainStddevFields")
		case "id":
			out.Values[i] = ec._EcdFileMainStddevFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainStddevFields_check_status(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainStddevFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainStddevFields_end_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainStddevPopFieldsImplementors = []string{"EcdFileMainStddevPopFields"}

func (ec *executionContext) _EcdFileMainStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainStddevPopFields")
		case "id":
			out.Values[i] = ec._EcdFileMainStddevPopFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainStddevPopFields_check_status(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainStddevPopFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainStddevPopFields_end_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainStddevSampFieldsImplementors = []string{"EcdFileMainStddevSampFields"}

func (ec *executionContext) _EcdFileMainStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainStddevSampFields")
		case "id":
			out.Values[i] = ec._EcdFileMainStddevSampFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainStddevSampFields_check_status(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainStddevSampFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainStddevSampFields_end_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubImplementors = []string{"EcdFileMainSub"}

func (ec *executionContext) _EcdFileMainSub(ctx context.Context, sel ast.SelectionSet, obj *model1.EcdFileMainSub) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSub")
		case "id":
			out.Values[i] = ec._EcdFileMainSub_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_main_sub_id":
			out.Values[i] = ec._EcdFileMainSub_file_main_sub_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_main_id":
			out.Values[i] = ec._EcdFileMainSub_file_main_id(ctx, field, obj)
		case "address":
			out.Values[i] = ec._EcdFileMainSub_address(ctx, field, obj)
		case "construct_unit":
			out.Values[i] = ec._EcdFileMainSub_construct_unit(ctx, field, obj)
		case "construct_director_name":
			out.Values[i] = ec._EcdFileMainSub_construct_director_name(ctx, field, obj)
		case "construct_phone":
			out.Values[i] = ec._EcdFileMainSub_construct_phone(ctx, field, obj)
		case "contract_unit":
			out.Values[i] = ec._EcdFileMainSub_contract_unit(ctx, field, obj)
		case "contract_director_name":
			out.Values[i] = ec._EcdFileMainSub_contract_director_name(ctx, field, obj)
		case "contract_phone":
			out.Values[i] = ec._EcdFileMainSub_contract_phone(ctx, field, obj)
		case "traffic_unit":
			out.Values[i] = ec._EcdFileMainSub_traffic_unit(ctx, field, obj)
		case "traffic_director_name":
			out.Values[i] = ec._EcdFileMainSub_traffic_director_name(ctx, field, obj)
		case "traffic_phone":
			out.Values[i] = ec._EcdFileMainSub_traffic_phone(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSub_wl_type(ctx, field, obj)
		case "plan_deal_area":
			out.Values[i] = ec._EcdFileMainSub_plan_deal_area(ctx, field, obj)
		case "plan_trans_volume":
			out.Values[i] = ec._EcdFileMainSub_plan_trans_volume(ctx, field, obj)
		case "plan_start_time":
			out.Values[i] = ec._EcdFileMainSub_plan_start_time(ctx, field, obj)
		case "plan_end_time":
			out.Values[i] = ec._EcdFileMainSub_plan_end_time(ctx, field, obj)
		case "plan_trans_lines":
			out.Values[i] = ec._EcdFileMainSub_plan_trans_lines(ctx, field, obj)
		case "construct_prove_num":
			out.Values[i] = ec._EcdFileMainSub_construct_prove_num(ctx, field, obj)
		case "contract_prove_num":
			out.Values[i] = ec._EcdFileMainSub_contract_prove_num(ctx, field, obj)
		case "traffic_prove_num":
			out.Values[i] = ec._EcdFileMainSub_traffic_prove_num(ctx, field, obj)
		case "sub_package_unit":
			out.Values[i] = ec._EcdFileMainSub_sub_package_unit(ctx, field, obj)
		case "package_prove_num":
			out.Values[i] = ec._EcdFileMainSub_package_prove_num(ctx, field, obj)
		case "package_director_name":
			out.Values[i] = ec._EcdFileMainSub_package_director_name(ctx, field, obj)
		case "package_phone":
			out.Values[i] = ec._EcdFileMainSub_package_phone(ctx, field, obj)
		case "facts":
			out.Values[i] = ec._EcdFileMainSub_facts(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileMainSub_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EcdFileMainSub_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileMainSub_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileMainSub_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileMainSub_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileMainSub_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileMainSub_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubAggregateImplementors = []string{"EcdFileMainSubAggregate"}

func (ec *executionContext) _EcdFileMainSubAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubAggregate")
		case "aggregate":
			out.Values[i] = ec._EcdFileMainSubAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubAggregateFieldsImplementors = []string{"EcdFileMainSubAggregateFields"}

func (ec *executionContext) _EcdFileMainSubAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubAggregateFields")
		case "avg":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EcdFileMainSubAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubAvgFieldsImplementors = []string{"EcdFileMainSubAvgFields"}

func (ec *executionContext) _EcdFileMainSubAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubAvgFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubAvgFields_id(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubAvgFields_wl_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubMaxFieldsImplementors = []string{"EcdFileMainSubMaxFields"}

func (ec *executionContext) _EcdFileMainSubMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubMaxFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubMaxFields_id(ctx, field, obj)
		case "file_main_sub_id":
			out.Values[i] = ec._EcdFileMainSubMaxFields_file_main_sub_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileMainSubMaxFields_file_main_id(ctx, field, obj)
		case "address":
			out.Values[i] = ec._EcdFileMainSubMaxFields_address(ctx, field, obj)
		case "construct_unit":
			out.Values[i] = ec._EcdFileMainSubMaxFields_construct_unit(ctx, field, obj)
		case "construct_director_name":
			out.Values[i] = ec._EcdFileMainSubMaxFields_construct_director_name(ctx, field, obj)
		case "construct_phone":
			out.Values[i] = ec._EcdFileMainSubMaxFields_construct_phone(ctx, field, obj)
		case "contract_unit":
			out.Values[i] = ec._EcdFileMainSubMaxFields_contract_unit(ctx, field, obj)
		case "contract_director_name":
			out.Values[i] = ec._EcdFileMainSubMaxFields_contract_director_name(ctx, field, obj)
		case "contract_phone":
			out.Values[i] = ec._EcdFileMainSubMaxFields_contract_phone(ctx, field, obj)
		case "traffic_unit":
			out.Values[i] = ec._EcdFileMainSubMaxFields_traffic_unit(ctx, field, obj)
		case "traffic_director_name":
			out.Values[i] = ec._EcdFileMainSubMaxFields_traffic_director_name(ctx, field, obj)
		case "traffic_phone":
			out.Values[i] = ec._EcdFileMainSubMaxFields_traffic_phone(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubMaxFields_wl_type(ctx, field, obj)
		case "plan_deal_area":
			out.Values[i] = ec._EcdFileMainSubMaxFields_plan_deal_area(ctx, field, obj)
		case "plan_trans_volume":
			out.Values[i] = ec._EcdFileMainSubMaxFields_plan_trans_volume(ctx, field, obj)
		case "plan_start_time":
			out.Values[i] = ec._EcdFileMainSubMaxFields_plan_start_time(ctx, field, obj)
		case "plan_end_time":
			out.Values[i] = ec._EcdFileMainSubMaxFields_plan_end_time(ctx, field, obj)
		case "plan_trans_lines":
			out.Values[i] = ec._EcdFileMainSubMaxFields_plan_trans_lines(ctx, field, obj)
		case "construct_prove_num":
			out.Values[i] = ec._EcdFileMainSubMaxFields_construct_prove_num(ctx, field, obj)
		case "contract_prove_num":
			out.Values[i] = ec._EcdFileMainSubMaxFields_contract_prove_num(ctx, field, obj)
		case "traffic_prove_num":
			out.Values[i] = ec._EcdFileMainSubMaxFields_traffic_prove_num(ctx, field, obj)
		case "sub_package_unit":
			out.Values[i] = ec._EcdFileMainSubMaxFields_sub_package_unit(ctx, field, obj)
		case "package_prove_num":
			out.Values[i] = ec._EcdFileMainSubMaxFields_package_prove_num(ctx, field, obj)
		case "package_director_name":
			out.Values[i] = ec._EcdFileMainSubMaxFields_package_director_name(ctx, field, obj)
		case "package_phone":
			out.Values[i] = ec._EcdFileMainSubMaxFields_package_phone(ctx, field, obj)
		case "facts":
			out.Values[i] = ec._EcdFileMainSubMaxFields_facts(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileMainSubMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileMainSubMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileMainSubMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileMainSubMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileMainSubMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileMainSubMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileMainSubMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubMinFieldsImplementors = []string{"EcdFileMainSubMinFields"}

func (ec *executionContext) _EcdFileMainSubMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubMinFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubMinFields_id(ctx, field, obj)
		case "file_main_sub_id":
			out.Values[i] = ec._EcdFileMainSubMinFields_file_main_sub_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileMainSubMinFields_file_main_id(ctx, field, obj)
		case "address":
			out.Values[i] = ec._EcdFileMainSubMinFields_address(ctx, field, obj)
		case "construct_unit":
			out.Values[i] = ec._EcdFileMainSubMinFields_construct_unit(ctx, field, obj)
		case "construct_director_name":
			out.Values[i] = ec._EcdFileMainSubMinFields_construct_director_name(ctx, field, obj)
		case "construct_phone":
			out.Values[i] = ec._EcdFileMainSubMinFields_construct_phone(ctx, field, obj)
		case "contract_unit":
			out.Values[i] = ec._EcdFileMainSubMinFields_contract_unit(ctx, field, obj)
		case "contract_director_name":
			out.Values[i] = ec._EcdFileMainSubMinFields_contract_director_name(ctx, field, obj)
		case "contract_phone":
			out.Values[i] = ec._EcdFileMainSubMinFields_contract_phone(ctx, field, obj)
		case "traffic_unit":
			out.Values[i] = ec._EcdFileMainSubMinFields_traffic_unit(ctx, field, obj)
		case "traffic_director_name":
			out.Values[i] = ec._EcdFileMainSubMinFields_traffic_director_name(ctx, field, obj)
		case "traffic_phone":
			out.Values[i] = ec._EcdFileMainSubMinFields_traffic_phone(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubMinFields_wl_type(ctx, field, obj)
		case "plan_deal_area":
			out.Values[i] = ec._EcdFileMainSubMinFields_plan_deal_area(ctx, field, obj)
		case "plan_trans_volume":
			out.Values[i] = ec._EcdFileMainSubMinFields_plan_trans_volume(ctx, field, obj)
		case "plan_start_time":
			out.Values[i] = ec._EcdFileMainSubMinFields_plan_start_time(ctx, field, obj)
		case "plan_end_time":
			out.Values[i] = ec._EcdFileMainSubMinFields_plan_end_time(ctx, field, obj)
		case "plan_trans_lines":
			out.Values[i] = ec._EcdFileMainSubMinFields_plan_trans_lines(ctx, field, obj)
		case "construct_prove_num":
			out.Values[i] = ec._EcdFileMainSubMinFields_construct_prove_num(ctx, field, obj)
		case "contract_prove_num":
			out.Values[i] = ec._EcdFileMainSubMinFields_contract_prove_num(ctx, field, obj)
		case "traffic_prove_num":
			out.Values[i] = ec._EcdFileMainSubMinFields_traffic_prove_num(ctx, field, obj)
		case "sub_package_unit":
			out.Values[i] = ec._EcdFileMainSubMinFields_sub_package_unit(ctx, field, obj)
		case "package_prove_num":
			out.Values[i] = ec._EcdFileMainSubMinFields_package_prove_num(ctx, field, obj)
		case "package_director_name":
			out.Values[i] = ec._EcdFileMainSubMinFields_package_director_name(ctx, field, obj)
		case "package_phone":
			out.Values[i] = ec._EcdFileMainSubMinFields_package_phone(ctx, field, obj)
		case "facts":
			out.Values[i] = ec._EcdFileMainSubMinFields_facts(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileMainSubMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileMainSubMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileMainSubMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileMainSubMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileMainSubMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileMainSubMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileMainSubMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubMutationResponseImplementors = []string{"EcdFileMainSubMutationResponse"}

func (ec *executionContext) _EcdFileMainSubMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EcdFileMainSubMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EcdFileMainSubMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubStddevFieldsImplementors = []string{"EcdFileMainSubStddevFields"}

func (ec *executionContext) _EcdFileMainSubStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubStddevFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubStddevFields_id(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubStddevFields_wl_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubStddevPopFieldsImplementors = []string{"EcdFileMainSubStddevPopFields"}

func (ec *executionContext) _EcdFileMainSubStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubStddevPopFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubStddevPopFields_id(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubStddevPopFields_wl_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubStddevSampFieldsImplementors = []string{"EcdFileMainSubStddevSampFields"}

func (ec *executionContext) _EcdFileMainSubStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubStddevSampFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubStddevSampFields_id(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubStddevSampFields_wl_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubSumFieldsImplementors = []string{"EcdFileMainSubSumFields"}

func (ec *executionContext) _EcdFileMainSubSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubSumFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubSumFields_id(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubSumFields_wl_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubVarPopFieldsImplementors = []string{"EcdFileMainSubVarPopFields"}

func (ec *executionContext) _EcdFileMainSubVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubVarPopFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubVarPopFields_id(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubVarPopFields_wl_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubVarSampFieldsImplementors = []string{"EcdFileMainSubVarSampFields"}

func (ec *executionContext) _EcdFileMainSubVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubVarSampFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubVarSampFields_id(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubVarSampFields_wl_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSubVarianceFieldsImplementors = []string{"EcdFileMainSubVarianceFields"}

func (ec *executionContext) _EcdFileMainSubVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSubVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSubVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSubVarianceFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSubVarianceFields_id(ctx, field, obj)
		case "wl_type":
			out.Values[i] = ec._EcdFileMainSubVarianceFields_wl_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainSumFieldsImplementors = []string{"EcdFileMainSumFields"}

func (ec *executionContext) _EcdFileMainSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainSumFields")
		case "id":
			out.Values[i] = ec._EcdFileMainSumFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainSumFields_check_status(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainSumFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainSumFields_end_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainVarPopFieldsImplementors = []string{"EcdFileMainVarPopFields"}

func (ec *executionContext) _EcdFileMainVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainVarPopFields")
		case "id":
			out.Values[i] = ec._EcdFileMainVarPopFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainVarPopFields_check_status(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainVarPopFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainVarPopFields_end_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainVarSampFieldsImplementors = []string{"EcdFileMainVarSampFields"}

func (ec *executionContext) _EcdFileMainVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainVarSampFields")
		case "id":
			out.Values[i] = ec._EcdFileMainVarSampFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainVarSampFields_check_status(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainVarSampFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainVarSampFields_end_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileMainVarianceFieldsImplementors = []string{"EcdFileMainVarianceFields"}

func (ec *executionContext) _EcdFileMainVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileMainVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileMainVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileMainVarianceFields")
		case "id":
			out.Values[i] = ec._EcdFileMainVarianceFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileMainVarianceFields_check_status(ctx, field, obj)
		case "point_state":
			out.Values[i] = ec._EcdFileMainVarianceFields_point_state(ctx, field, obj)
		case "end_state":
			out.Values[i] = ec._EcdFileMainVarianceFields_end_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleImplementors = []string{"EcdFileVehicle"}

func (ec *executionContext) _EcdFileVehicle(ctx context.Context, sel ast.SelectionSet, obj *model1.EcdFileVehicle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicle")
		case "id":
			out.Values[i] = ec._EcdFileVehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_vehicle_id":
			out.Values[i] = ec._EcdFileVehicle_file_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_main_id":
			out.Values[i] = ec._EcdFileVehicle_file_main_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._EcdFileVehicle_vehicle_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicle_check_status(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileVehicle_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EcdFileVehicle_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileVehicle_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileVehicle_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileVehicle_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileVehicle_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileVehicle_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleAggregateImplementors = []string{"EcdFileVehicleAggregate"}

func (ec *executionContext) _EcdFileVehicleAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleAggregate")
		case "aggregate":
			out.Values[i] = ec._EcdFileVehicleAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleAggregateFieldsImplementors = []string{"EcdFileVehicleAggregateFields"}

func (ec *executionContext) _EcdFileVehicleAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleAggregateFields")
		case "avg":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EcdFileVehicleAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleAvgFieldsImplementors = []string{"EcdFileVehicleAvgFields"}

func (ec *executionContext) _EcdFileVehicleAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleAvgFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleAvgFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleAvgFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleMaxFieldsImplementors = []string{"EcdFileVehicleMaxFields"}

func (ec *executionContext) _EcdFileVehicleMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleMaxFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleMaxFields_id(ctx, field, obj)
		case "file_vehicle_id":
			out.Values[i] = ec._EcdFileVehicleMaxFields_file_vehicle_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileVehicleMaxFields_file_main_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._EcdFileVehicleMaxFields_vehicle_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleMaxFields_check_status(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileVehicleMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileVehicleMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileVehicleMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileVehicleMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileVehicleMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileVehicleMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileVehicleMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleMinFieldsImplementors = []string{"EcdFileVehicleMinFields"}

func (ec *executionContext) _EcdFileVehicleMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleMinFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleMinFields_id(ctx, field, obj)
		case "file_vehicle_id":
			out.Values[i] = ec._EcdFileVehicleMinFields_file_vehicle_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileVehicleMinFields_file_main_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._EcdFileVehicleMinFields_vehicle_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleMinFields_check_status(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileVehicleMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileVehicleMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileVehicleMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileVehicleMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileVehicleMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileVehicleMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileVehicleMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleMutationResponseImplementors = []string{"EcdFileVehicleMutationResponse"}

func (ec *executionContext) _EcdFileVehicleMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EcdFileVehicleMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EcdFileVehicleMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleStddevFieldsImplementors = []string{"EcdFileVehicleStddevFields"}

func (ec *executionContext) _EcdFileVehicleStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleStddevFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleStddevFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleStddevFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleStddevPopFieldsImplementors = []string{"EcdFileVehicleStddevPopFields"}

func (ec *executionContext) _EcdFileVehicleStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleStddevPopFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleStddevPopFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleStddevPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleStddevSampFieldsImplementors = []string{"EcdFileVehicleStddevSampFields"}

func (ec *executionContext) _EcdFileVehicleStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleStddevSampFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleStddevSampFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleStddevSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleSumFieldsImplementors = []string{"EcdFileVehicleSumFields"}

func (ec *executionContext) _EcdFileVehicleSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleSumFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleSumFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleSumFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeImplementors = []string{"EcdFileVehicleTime"}

func (ec *executionContext) _EcdFileVehicleTime(ctx context.Context, sel ast.SelectionSet, obj *model1.EcdFileVehicleTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTime")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTime_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_time_id":
			out.Values[i] = ec._EcdFileVehicleTime_vehicle_time_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file_main_id":
			out.Values[i] = ec._EcdFileVehicleTime_file_main_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vechile_id":
			out.Values[i] = ec._EcdFileVehicleTime_vechile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "start_date":
			out.Values[i] = ec._EcdFileVehicleTime_start_date(ctx, field, obj)
		case "end_date":
			out.Values[i] = ec._EcdFileVehicleTime_end_date(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._EcdFileVehicleTime_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._EcdFileVehicleTime_end_time(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTime_check_status(ctx, field, obj)
		case "is_check":
			out.Values[i] = ec._EcdFileVehicleTime_is_check(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "check_time":
			out.Values[i] = ec._EcdFileVehicleTime_check_time(ctx, field, obj)
		case "line_id":
			out.Values[i] = ec._EcdFileVehicleTime_line_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileVehicleTime_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EcdFileVehicleTime_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileVehicleTime_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileVehicleTime_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileVehicleTime_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileVehicleTime_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileVehicleTime_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeAggregateImplementors = []string{"EcdFileVehicleTimeAggregate"}

func (ec *executionContext) _EcdFileVehicleTimeAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeAggregate")
		case "aggregate":
			out.Values[i] = ec._EcdFileVehicleTimeAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeAggregateFieldsImplementors = []string{"EcdFileVehicleTimeAggregateFields"}

func (ec *executionContext) _EcdFileVehicleTimeAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeAggregateFields")
		case "avg":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EcdFileVehicleTimeAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeAvgFieldsImplementors = []string{"EcdFileVehicleTimeAvgFields"}

func (ec *executionContext) _EcdFileVehicleTimeAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeAvgFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeAvgFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeAvgFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeMaxFieldsImplementors = []string{"EcdFileVehicleTimeMaxFields"}

func (ec *executionContext) _EcdFileVehicleTimeMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeMaxFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_id(ctx, field, obj)
		case "vehicle_time_id":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_vehicle_time_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_file_main_id(ctx, field, obj)
		case "vechile_id":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_vechile_id(ctx, field, obj)
		case "start_date":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_start_date(ctx, field, obj)
		case "end_date":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_end_date(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_end_time(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_check_status(ctx, field, obj)
		case "is_check":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_is_check(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_check_time(ctx, field, obj)
		case "line_id":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_line_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileVehicleTimeMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeMinFieldsImplementors = []string{"EcdFileVehicleTimeMinFields"}

func (ec *executionContext) _EcdFileVehicleTimeMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeMinFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_id(ctx, field, obj)
		case "vehicle_time_id":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_vehicle_time_id(ctx, field, obj)
		case "file_main_id":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_file_main_id(ctx, field, obj)
		case "vechile_id":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_vechile_id(ctx, field, obj)
		case "start_date":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_start_date(ctx, field, obj)
		case "end_date":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_end_date(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_end_time(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_check_status(ctx, field, obj)
		case "is_check":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_is_check(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_check_time(ctx, field, obj)
		case "line_id":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_line_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdFileVehicleTimeMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeMutationResponseImplementors = []string{"EcdFileVehicleTimeMutationResponse"}

func (ec *executionContext) _EcdFileVehicleTimeMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EcdFileVehicleTimeMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EcdFileVehicleTimeMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeStddevFieldsImplementors = []string{"EcdFileVehicleTimeStddevFields"}

func (ec *executionContext) _EcdFileVehicleTimeStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeStddevFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeStddevFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeStddevFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeStddevPopFieldsImplementors = []string{"EcdFileVehicleTimeStddevPopFields"}

func (ec *executionContext) _EcdFileVehicleTimeStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeStddevPopFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeStddevPopFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeStddevPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeStddevSampFieldsImplementors = []string{"EcdFileVehicleTimeStddevSampFields"}

func (ec *executionContext) _EcdFileVehicleTimeStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeStddevSampFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeStddevSampFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeStddevSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeSumFieldsImplementors = []string{"EcdFileVehicleTimeSumFields"}

func (ec *executionContext) _EcdFileVehicleTimeSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeSumFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeSumFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeSumFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeVarPopFieldsImplementors = []string{"EcdFileVehicleTimeVarPopFields"}

func (ec *executionContext) _EcdFileVehicleTimeVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeVarPopFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeVarPopFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeVarPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeVarSampFieldsImplementors = []string{"EcdFileVehicleTimeVarSampFields"}

func (ec *executionContext) _EcdFileVehicleTimeVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeVarSampFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeVarSampFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeVarSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleTimeVarianceFieldsImplementors = []string{"EcdFileVehicleTimeVarianceFields"}

func (ec *executionContext) _EcdFileVehicleTimeVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleTimeVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleTimeVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleTimeVarianceFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleTimeVarianceFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleTimeVarianceFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleVarPopFieldsImplementors = []string{"EcdFileVehicleVarPopFields"}

func (ec *executionContext) _EcdFileVehicleVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleVarPopFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleVarPopFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleVarPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleVarSampFieldsImplementors = []string{"EcdFileVehicleVarSampFields"}

func (ec *executionContext) _EcdFileVehicleVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleVarSampFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleVarSampFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleVarSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdFileVehicleVarianceFieldsImplementors = []string{"EcdFileVehicleVarianceFields"}

func (ec *executionContext) _EcdFileVehicleVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdFileVehicleVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdFileVehicleVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdFileVehicleVarianceFields")
		case "id":
			out.Values[i] = ec._EcdFileVehicleVarianceFields_id(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EcdFileVehicleVarianceFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineImplementors = []string{"EcdLine"}

func (ec *executionContext) _EcdLine(ctx context.Context, sel ast.SelectionSet, obj *model1.EcdLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLine")
		case "id":
			out.Values[i] = ec._EcdLine_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "line_id":
			out.Values[i] = ec._EcdLine_line_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "line_name":
			out.Values[i] = ec._EcdLine_line_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._EcdLine_enterprise_id(ctx, field, obj)
		case "line_desc":
			out.Values[i] = ec._EcdLine_line_desc(ctx, field, obj)
		case "audit_user_id":
			out.Values[i] = ec._EcdLine_audit_user_id(ctx, field, obj)
		case "audit_time":
			out.Values[i] = ec._EcdLine_audit_time(ctx, field, obj)
		case "is_resolve_desc":
			out.Values[i] = ec._EcdLine_is_resolve_desc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._EcdLine_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._EcdLine_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdLine_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdLine_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdLine_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdLine_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdLine_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gis_data":
			out.Values[i] = ec._EcdLine_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineAggregateImplementors = []string{"EcdLineAggregate"}

func (ec *executionContext) _EcdLineAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineAggregate")
		case "aggregate":
			out.Values[i] = ec._EcdLineAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineAggregateFieldsImplementors = []string{"EcdLineAggregateFields"}

func (ec *executionContext) _EcdLineAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineAggregateFields")
		case "avg":
			out.Values[i] = ec._EcdLineAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EcdLineAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EcdLineAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EcdLineAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EcdLineAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EcdLineAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EcdLineAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EcdLineAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EcdLineAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EcdLineAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EcdLineAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineAvgFieldsImplementors = []string{"EcdLineAvgFields"}

func (ec *executionContext) _EcdLineAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineAvgFields")
		case "id":
			out.Values[i] = ec._EcdLineAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineMaxFieldsImplementors = []string{"EcdLineMaxFields"}

func (ec *executionContext) _EcdLineMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineMaxFields")
		case "id":
			out.Values[i] = ec._EcdLineMaxFields_id(ctx, field, obj)
		case "line_id":
			out.Values[i] = ec._EcdLineMaxFields_line_id(ctx, field, obj)
		case "line_name":
			out.Values[i] = ec._EcdLineMaxFields_line_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EcdLineMaxFields_enterprise_id(ctx, field, obj)
		case "line_desc":
			out.Values[i] = ec._EcdLineMaxFields_line_desc(ctx, field, obj)
		case "audit_user_id":
			out.Values[i] = ec._EcdLineMaxFields_audit_user_id(ctx, field, obj)
		case "audit_time":
			out.Values[i] = ec._EcdLineMaxFields_audit_time(ctx, field, obj)
		case "is_resolve_desc":
			out.Values[i] = ec._EcdLineMaxFields_is_resolve_desc(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdLineMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdLineMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdLineMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdLineMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdLineMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdLineMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdLineMaxFields_is_delete(ctx, field, obj)
		case "gis_data":
			out.Values[i] = ec._EcdLineMaxFields_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineMinFieldsImplementors = []string{"EcdLineMinFields"}

func (ec *executionContext) _EcdLineMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineMinFields")
		case "id":
			out.Values[i] = ec._EcdLineMinFields_id(ctx, field, obj)
		case "line_id":
			out.Values[i] = ec._EcdLineMinFields_line_id(ctx, field, obj)
		case "line_name":
			out.Values[i] = ec._EcdLineMinFields_line_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EcdLineMinFields_enterprise_id(ctx, field, obj)
		case "line_desc":
			out.Values[i] = ec._EcdLineMinFields_line_desc(ctx, field, obj)
		case "audit_user_id":
			out.Values[i] = ec._EcdLineMinFields_audit_user_id(ctx, field, obj)
		case "audit_time":
			out.Values[i] = ec._EcdLineMinFields_audit_time(ctx, field, obj)
		case "is_resolve_desc":
			out.Values[i] = ec._EcdLineMinFields_is_resolve_desc(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EcdLineMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EcdLineMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EcdLineMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EcdLineMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EcdLineMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EcdLineMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._EcdLineMinFields_is_delete(ctx, field, obj)
		case "gis_data":
			out.Values[i] = ec._EcdLineMinFields_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineMutationResponseImplementors = []string{"EcdLineMutationResponse"}

func (ec *executionContext) _EcdLineMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EcdLineMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EcdLineMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineStddevFieldsImplementors = []string{"EcdLineStddevFields"}

func (ec *executionContext) _EcdLineStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineStddevFields")
		case "id":
			out.Values[i] = ec._EcdLineStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineStddevPopFieldsImplementors = []string{"EcdLineStddevPopFields"}

func (ec *executionContext) _EcdLineStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineStddevPopFields")
		case "id":
			out.Values[i] = ec._EcdLineStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineStddevSampFieldsImplementors = []string{"EcdLineStddevSampFields"}

func (ec *executionContext) _EcdLineStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineStddevSampFields")
		case "id":
			out.Values[i] = ec._EcdLineStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineSumFieldsImplementors = []string{"EcdLineSumFields"}

func (ec *executionContext) _EcdLineSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineSumFields")
		case "id":
			out.Values[i] = ec._EcdLineSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineVarPopFieldsImplementors = []string{"EcdLineVarPopFields"}

func (ec *executionContext) _EcdLineVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineVarPopFields")
		case "id":
			out.Values[i] = ec._EcdLineVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineVarSampFieldsImplementors = []string{"EcdLineVarSampFields"}

func (ec *executionContext) _EcdLineVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineVarSampFields")
		case "id":
			out.Values[i] = ec._EcdLineVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ecdLineVarianceFieldsImplementors = []string{"EcdLineVarianceFields"}

func (ec *executionContext) _EcdLineVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EcdLineVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ecdLineVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EcdLineVarianceFields")
		case "id":
			out.Values[i] = ec._EcdLineVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceImplementors = []string{"ElectricFence"}

func (ec *executionContext) _ElectricFence(ctx context.Context, sel ast.SelectionSet, obj *model1.ElectricFence) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFence")
		case "id":
			out.Values[i] = ec._ElectricFence_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "electric_fence_id":
			out.Values[i] = ec._ElectricFence_electric_fence_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "area_type":
			out.Values[i] = ec._ElectricFence_area_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fence_type":
			out.Values[i] = ec._ElectricFence_fence_type(ctx, field, obj)
		case "fence_name":
			out.Values[i] = ec._ElectricFence_fence_name(ctx, field, obj)
		case "address":
			out.Values[i] = ec._ElectricFence_address(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ElectricFence_district_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ElectricFence_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._ElectricFence_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ElectricFence_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ElectricFence_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ElectricFence_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ElectricFence_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ElectricFence_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gis_data":
			out.Values[i] = ec._ElectricFence_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceAggregateImplementors = []string{"ElectricFenceAggregate"}

func (ec *executionContext) _ElectricFenceAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceAggregate")
		case "aggregate":
			out.Values[i] = ec._ElectricFenceAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceAggregateFieldsImplementors = []string{"ElectricFenceAggregateFields"}

func (ec *executionContext) _ElectricFenceAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceAggregateFields")
		case "avg":
			out.Values[i] = ec._ElectricFenceAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ElectricFenceAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ElectricFenceAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ElectricFenceAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ElectricFenceAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ElectricFenceAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ElectricFenceAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ElectricFenceAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ElectricFenceAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ElectricFenceAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ElectricFenceAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceAvgFieldsImplementors = []string{"ElectricFenceAvgFields"}

func (ec *executionContext) _ElectricFenceAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceAvgFields")
		case "id":
			out.Values[i] = ec._ElectricFenceAvgFields_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceAvgFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceAvgFields_fence_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordImplementors = []string{"ElectricFenceEnteranceRecord"}

func (ec *executionContext) _ElectricFenceEnteranceRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.ElectricFenceEnteranceRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecord")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "record_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "electric_fence_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_electric_fence_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "in_time":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_in_time(ctx, field, obj)
		case "out_time":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_out_time(ctx, field, obj)
		case "is_out":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_is_out(ctx, field, obj)
		case "position":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_position(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_is_online(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ElectricFenceEnteranceRecord_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordAggregateImplementors = []string{"ElectricFenceEnteranceRecordAggregate"}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordAggregateFieldsImplementors = []string{"ElectricFenceEnteranceRecordAggregateFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordAvgFieldsImplementors = []string{"ElectricFenceEnteranceRecordAvgFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordAvgFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordMaxFieldsImplementors = []string{"ElectricFenceEnteranceRecordMaxFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordMaxFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_id(ctx, field, obj)
		case "record_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_vehicle_id(ctx, field, obj)
		case "electric_fence_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_electric_fence_id(ctx, field, obj)
		case "in_time":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_in_time(ctx, field, obj)
		case "out_time":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_out_time(ctx, field, obj)
		case "is_out":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_is_out(ctx, field, obj)
		case "position":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_position(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_is_online(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordMinFieldsImplementors = []string{"ElectricFenceEnteranceRecordMinFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordMinFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_id(ctx, field, obj)
		case "record_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_vehicle_id(ctx, field, obj)
		case "electric_fence_id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_electric_fence_id(ctx, field, obj)
		case "in_time":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_in_time(ctx, field, obj)
		case "out_time":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_out_time(ctx, field, obj)
		case "is_out":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_is_out(ctx, field, obj)
		case "position":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_position(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_is_online(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordMutationResponseImplementors = []string{"ElectricFenceEnteranceRecordMutationResponse"}

func (ec *executionContext) _ElectricFenceEnteranceRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ElectricFenceEnteranceRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordStddevFieldsImplementors = []string{"ElectricFenceEnteranceRecordStddevFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordStddevFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordStddevPopFieldsImplementors = []string{"ElectricFenceEnteranceRecordStddevPopFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordStddevSampFieldsImplementors = []string{"ElectricFenceEnteranceRecordStddevSampFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordSumFieldsImplementors = []string{"ElectricFenceEnteranceRecordSumFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordSumFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordVarPopFieldsImplementors = []string{"ElectricFenceEnteranceRecordVarPopFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordVarPopFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordVarSampFieldsImplementors = []string{"ElectricFenceEnteranceRecordVarSampFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordVarSampFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceEnteranceRecordVarianceFieldsImplementors = []string{"ElectricFenceEnteranceRecordVarianceFields"}

func (ec *executionContext) _ElectricFenceEnteranceRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceEnteranceRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceEnteranceRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceEnteranceRecordVarianceFields")
		case "id":
			out.Values[i] = ec._ElectricFenceEnteranceRecordVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceMaxFieldsImplementors = []string{"ElectricFenceMaxFields"}

func (ec *executionContext) _ElectricFenceMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceMaxFields")
		case "id":
			out.Values[i] = ec._ElectricFenceMaxFields_id(ctx, field, obj)
		case "electric_fence_id":
			out.Values[i] = ec._ElectricFenceMaxFields_electric_fence_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceMaxFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceMaxFields_fence_type(ctx, field, obj)
		case "fence_name":
			out.Values[i] = ec._ElectricFenceMaxFields_fence_name(ctx, field, obj)
		case "address":
			out.Values[i] = ec._ElectricFenceMaxFields_address(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ElectricFenceMaxFields_district_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ElectricFenceMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ElectricFenceMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ElectricFenceMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ElectricFenceMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ElectricFenceMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ElectricFenceMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ElectricFenceMaxFields_is_delete(ctx, field, obj)
		case "gis_data":
			out.Values[i] = ec._ElectricFenceMaxFields_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceMinFieldsImplementors = []string{"ElectricFenceMinFields"}

func (ec *executionContext) _ElectricFenceMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceMinFields")
		case "id":
			out.Values[i] = ec._ElectricFenceMinFields_id(ctx, field, obj)
		case "electric_fence_id":
			out.Values[i] = ec._ElectricFenceMinFields_electric_fence_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceMinFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceMinFields_fence_type(ctx, field, obj)
		case "fence_name":
			out.Values[i] = ec._ElectricFenceMinFields_fence_name(ctx, field, obj)
		case "address":
			out.Values[i] = ec._ElectricFenceMinFields_address(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._ElectricFenceMinFields_district_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._ElectricFenceMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._ElectricFenceMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._ElectricFenceMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._ElectricFenceMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._ElectricFenceMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._ElectricFenceMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._ElectricFenceMinFields_is_delete(ctx, field, obj)
		case "gis_data":
			out.Values[i] = ec._ElectricFenceMinFields_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceMutationResponseImplementors = []string{"ElectricFenceMutationResponse"}

func (ec *executionContext) _ElectricFenceMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._ElectricFenceMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._ElectricFenceMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceStddevFieldsImplementors = []string{"ElectricFenceStddevFields"}

func (ec *executionContext) _ElectricFenceStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceStddevFields")
		case "id":
			out.Values[i] = ec._ElectricFenceStddevFields_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceStddevFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceStddevFields_fence_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceStddevPopFieldsImplementors = []string{"ElectricFenceStddevPopFields"}

func (ec *executionContext) _ElectricFenceStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceStddevPopFields")
		case "id":
			out.Values[i] = ec._ElectricFenceStddevPopFields_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceStddevPopFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceStddevPopFields_fence_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceStddevSampFieldsImplementors = []string{"ElectricFenceStddevSampFields"}

func (ec *executionContext) _ElectricFenceStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceStddevSampFields")
		case "id":
			out.Values[i] = ec._ElectricFenceStddevSampFields_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceStddevSampFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceStddevSampFields_fence_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceSumFieldsImplementors = []string{"ElectricFenceSumFields"}

func (ec *executionContext) _ElectricFenceSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceSumFields")
		case "id":
			out.Values[i] = ec._ElectricFenceSumFields_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceSumFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceSumFields_fence_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceVarPopFieldsImplementors = []string{"ElectricFenceVarPopFields"}

func (ec *executionContext) _ElectricFenceVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceVarPopFields")
		case "id":
			out.Values[i] = ec._ElectricFenceVarPopFields_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceVarPopFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceVarPopFields_fence_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceVarSampFieldsImplementors = []string{"ElectricFenceVarSampFields"}

func (ec *executionContext) _ElectricFenceVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceVarSampFields")
		case "id":
			out.Values[i] = ec._ElectricFenceVarSampFields_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceVarSampFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceVarSampFields_fence_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var electricFenceVarianceFieldsImplementors = []string{"ElectricFenceVarianceFields"}

func (ec *executionContext) _ElectricFenceVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.ElectricFenceVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, electricFenceVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElectricFenceVarianceFields")
		case "id":
			out.Values[i] = ec._ElectricFenceVarianceFields_id(ctx, field, obj)
		case "area_type":
			out.Values[i] = ec._ElectricFenceVarianceFields_area_type(ctx, field, obj)
		case "fence_type":
			out.Values[i] = ec._ElectricFenceVarianceFields_fence_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineImplementors = []string{"LimitSpeedLine"}

func (ec *executionContext) _LimitSpeedLine(ctx context.Context, sel ast.SelectionSet, obj *model1.LimitSpeedLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLine")
		case "id":
			out.Values[i] = ec._LimitSpeedLine_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "limit_speed_line_id":
			out.Values[i] = ec._LimitSpeedLine_limit_speed_line_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "line_name":
			out.Values[i] = ec._LimitSpeedLine_line_name(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLine_line_type(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._LimitSpeedLine_district_id(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLine_control_level(ctx, field, obj)
		case "apply_reason":
			out.Values[i] = ec._LimitSpeedLine_apply_reason(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLine_check_status(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._LimitSpeedLine_check_time(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._LimitSpeedLine_check_user_id(ctx, field, obj)
		case "reject_reason":
			out.Values[i] = ec._LimitSpeedLine_reject_reason(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedLine_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._LimitSpeedLine_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedLine_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedLine_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedLine_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedLine_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedLine_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gis_data":
			out.Values[i] = ec._LimitSpeedLine_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineAggregateImplementors = []string{"LimitSpeedLineAggregate"}

func (ec *executionContext) _LimitSpeedLineAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineAggregate")
		case "aggregate":
			out.Values[i] = ec._LimitSpeedLineAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineAggregateFieldsImplementors = []string{"LimitSpeedLineAggregateFields"}

func (ec *executionContext) _LimitSpeedLineAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineAggregateFields")
		case "avg":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._LimitSpeedLineAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineAvgFieldsImplementors = []string{"LimitSpeedLineAvgFields"}

func (ec *executionContext) _LimitSpeedLineAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineAvgFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineAvgFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineAvgFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineAvgFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineAvgFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineMaxFieldsImplementors = []string{"LimitSpeedLineMaxFields"}

func (ec *executionContext) _LimitSpeedLineMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineMaxFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineMaxFields_id(ctx, field, obj)
		case "limit_speed_line_id":
			out.Values[i] = ec._LimitSpeedLineMaxFields_limit_speed_line_id(ctx, field, obj)
		case "line_name":
			out.Values[i] = ec._LimitSpeedLineMaxFields_line_name(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineMaxFields_line_type(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._LimitSpeedLineMaxFields_district_id(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineMaxFields_control_level(ctx, field, obj)
		case "apply_reason":
			out.Values[i] = ec._LimitSpeedLineMaxFields_apply_reason(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineMaxFields_check_status(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._LimitSpeedLineMaxFields_check_time(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._LimitSpeedLineMaxFields_check_user_id(ctx, field, obj)
		case "reject_reason":
			out.Values[i] = ec._LimitSpeedLineMaxFields_reject_reason(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedLineMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._LimitSpeedLineMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedLineMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedLineMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedLineMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedLineMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedLineMaxFields_is_delete(ctx, field, obj)
		case "gis_data":
			out.Values[i] = ec._LimitSpeedLineMaxFields_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineMinFieldsImplementors = []string{"LimitSpeedLineMinFields"}

func (ec *executionContext) _LimitSpeedLineMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineMinFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineMinFields_id(ctx, field, obj)
		case "limit_speed_line_id":
			out.Values[i] = ec._LimitSpeedLineMinFields_limit_speed_line_id(ctx, field, obj)
		case "line_name":
			out.Values[i] = ec._LimitSpeedLineMinFields_line_name(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineMinFields_line_type(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._LimitSpeedLineMinFields_district_id(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineMinFields_control_level(ctx, field, obj)
		case "apply_reason":
			out.Values[i] = ec._LimitSpeedLineMinFields_apply_reason(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineMinFields_check_status(ctx, field, obj)
		case "check_time":
			out.Values[i] = ec._LimitSpeedLineMinFields_check_time(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._LimitSpeedLineMinFields_check_user_id(ctx, field, obj)
		case "reject_reason":
			out.Values[i] = ec._LimitSpeedLineMinFields_reject_reason(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedLineMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._LimitSpeedLineMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedLineMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedLineMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedLineMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedLineMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedLineMinFields_is_delete(ctx, field, obj)
		case "gis_data":
			out.Values[i] = ec._LimitSpeedLineMinFields_gis_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineMutationResponseImplementors = []string{"LimitSpeedLineMutationResponse"}

func (ec *executionContext) _LimitSpeedLineMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._LimitSpeedLineMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._LimitSpeedLineMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineStddevFieldsImplementors = []string{"LimitSpeedLineStddevFields"}

func (ec *executionContext) _LimitSpeedLineStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineStddevFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineStddevFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineStddevFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineStddevFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineStddevFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineStddevPopFieldsImplementors = []string{"LimitSpeedLineStddevPopFields"}

func (ec *executionContext) _LimitSpeedLineStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineStddevPopFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineStddevPopFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineStddevPopFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineStddevPopFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineStddevPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineStddevSampFieldsImplementors = []string{"LimitSpeedLineStddevSampFields"}

func (ec *executionContext) _LimitSpeedLineStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineStddevSampFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineStddevSampFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineStddevSampFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineStddevSampFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineStddevSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineSumFieldsImplementors = []string{"LimitSpeedLineSumFields"}

func (ec *executionContext) _LimitSpeedLineSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineSumFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineSumFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineSumFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineSumFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineSumFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeImplementors = []string{"LimitSpeedLineTime"}

func (ec *executionContext) _LimitSpeedLineTime(ctx context.Context, sel ast.SelectionSet, obj *model1.LimitSpeedLineTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTime")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTime_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "limit_speed_line_time_id":
			out.Values[i] = ec._LimitSpeedLineTime_limit_speed_line_time_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "limit_speed_line_id":
			out.Values[i] = ec._LimitSpeedLineTime_limit_speed_line_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "start_time":
			out.Values[i] = ec._LimitSpeedLineTime_start_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end_time":
			out.Values[i] = ec._LimitSpeedLineTime_end_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_at":
			out.Values[i] = ec._LimitSpeedLineTime_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._LimitSpeedLineTime_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedLineTime_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedLineTime_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedLineTime_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedLineTime_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedLineTime_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTime_speed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeAggregateImplementors = []string{"LimitSpeedLineTimeAggregate"}

func (ec *executionContext) _LimitSpeedLineTimeAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeAggregate")
		case "aggregate":
			out.Values[i] = ec._LimitSpeedLineTimeAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeAggregateFieldsImplementors = []string{"LimitSpeedLineTimeAggregateFields"}

func (ec *executionContext) _LimitSpeedLineTimeAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeAggregateFields")
		case "avg":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._LimitSpeedLineTimeAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeAvgFieldsImplementors = []string{"LimitSpeedLineTimeAvgFields"}

func (ec *executionContext) _LimitSpeedLineTimeAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeAvgFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeAvgFields_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeAvgFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeMaxFieldsImplementors = []string{"LimitSpeedLineTimeMaxFields"}

func (ec *executionContext) _LimitSpeedLineTimeMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeMaxFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_id(ctx, field, obj)
		case "limit_speed_line_time_id":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_limit_speed_line_time_id(ctx, field, obj)
		case "limit_speed_line_id":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_limit_speed_line_id(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_end_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_is_delete(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeMaxFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeMinFieldsImplementors = []string{"LimitSpeedLineTimeMinFields"}

func (ec *executionContext) _LimitSpeedLineTimeMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeMinFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_id(ctx, field, obj)
		case "limit_speed_line_time_id":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_limit_speed_line_time_id(ctx, field, obj)
		case "limit_speed_line_id":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_limit_speed_line_id(ctx, field, obj)
		case "start_time":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_start_time(ctx, field, obj)
		case "end_time":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_end_time(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_is_delete(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeMinFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeMutationResponseImplementors = []string{"LimitSpeedLineTimeMutationResponse"}

func (ec *executionContext) _LimitSpeedLineTimeMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._LimitSpeedLineTimeMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._LimitSpeedLineTimeMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeStddevFieldsImplementors = []string{"LimitSpeedLineTimeStddevFields"}

func (ec *executionContext) _LimitSpeedLineTimeStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeStddevFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeStddevFields_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeStddevFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeStddevPopFieldsImplementors = []string{"LimitSpeedLineTimeStddevPopFields"}

func (ec *executionContext) _LimitSpeedLineTimeStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeStddevPopFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeStddevPopFields_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeStddevPopFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeStddevSampFieldsImplementors = []string{"LimitSpeedLineTimeStddevSampFields"}

func (ec *executionContext) _LimitSpeedLineTimeStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeStddevSampFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeStddevSampFields_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeStddevSampFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeSumFieldsImplementors = []string{"LimitSpeedLineTimeSumFields"}

func (ec *executionContext) _LimitSpeedLineTimeSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeSumFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeSumFields_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeSumFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeVarPopFieldsImplementors = []string{"LimitSpeedLineTimeVarPopFields"}

func (ec *executionContext) _LimitSpeedLineTimeVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeVarPopFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeVarPopFields_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeVarPopFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeVarSampFieldsImplementors = []string{"LimitSpeedLineTimeVarSampFields"}

func (ec *executionContext) _LimitSpeedLineTimeVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeVarSampFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeVarSampFields_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeVarSampFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineTimeVarianceFieldsImplementors = []string{"LimitSpeedLineTimeVarianceFields"}

func (ec *executionContext) _LimitSpeedLineTimeVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineTimeVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineTimeVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineTimeVarianceFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineTimeVarianceFields_id(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._LimitSpeedLineTimeVarianceFields_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineVarPopFieldsImplementors = []string{"LimitSpeedLineVarPopFields"}

func (ec *executionContext) _LimitSpeedLineVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineVarPopFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineVarPopFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineVarPopFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineVarPopFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineVarPopFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineVarSampFieldsImplementors = []string{"LimitSpeedLineVarSampFields"}

func (ec *executionContext) _LimitSpeedLineVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineVarSampFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineVarSampFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineVarSampFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineVarSampFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineVarSampFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedLineVarianceFieldsImplementors = []string{"LimitSpeedLineVarianceFields"}

func (ec *executionContext) _LimitSpeedLineVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedLineVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedLineVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedLineVarianceFields")
		case "id":
			out.Values[i] = ec._LimitSpeedLineVarianceFields_id(ctx, field, obj)
		case "line_type":
			out.Values[i] = ec._LimitSpeedLineVarianceFields_line_type(ctx, field, obj)
		case "control_level":
			out.Values[i] = ec._LimitSpeedLineVarianceFields_control_level(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._LimitSpeedLineVarianceFields_check_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanImplementors = []string{"LimitSpeedPlan"}

func (ec *executionContext) _LimitSpeedPlan(ctx context.Context, sel ast.SelectionSet, obj *model1.LimitSpeedPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlan")
		case "id":
			out.Values[i] = ec._LimitSpeedPlan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "limit_speed_plan_id":
			out.Values[i] = ec._LimitSpeedPlan_limit_speed_plan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._LimitSpeedPlan_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "plan_name":
			out.Values[i] = ec._LimitSpeedPlan_plan_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._LimitSpeedPlan_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedPlan_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._LimitSpeedPlan_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedPlan_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedPlan_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedPlan_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedPlan_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedPlan_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanAggregateImplementors = []string{"LimitSpeedPlanAggregate"}

func (ec *executionContext) _LimitSpeedPlanAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanAggregate")
		case "aggregate":
			out.Values[i] = ec._LimitSpeedPlanAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanAggregateFieldsImplementors = []string{"LimitSpeedPlanAggregateFields"}

func (ec *executionContext) _LimitSpeedPlanAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanAggregateFields")
		case "avg":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._LimitSpeedPlanAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanAvgFieldsImplementors = []string{"LimitSpeedPlanAvgFields"}

func (ec *executionContext) _LimitSpeedPlanAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanAvgFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailImplementors = []string{"LimitSpeedPlanDetail"}

func (ec *executionContext) _LimitSpeedPlanDetail(ctx context.Context, sel ast.SelectionSet, obj *model1.LimitSpeedPlanDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetail")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "detail_id":
			out.Values[i] = ec._LimitSpeedPlanDetail_detail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "plan_id":
			out.Values[i] = ec._LimitSpeedPlanDetail_plan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_night_limit":
			out.Values[i] = ec._LimitSpeedPlanDetail_is_night_limit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetail_night_limit_speed(ctx, field, obj)
		case "night_time_begin":
			out.Values[i] = ec._LimitSpeedPlanDetail_night_time_begin(ctx, field, obj)
		case "night_time_end":
			out.Values[i] = ec._LimitSpeedPlanDetail_night_time_end(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetail_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetail_limit_speed(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedPlanDetail_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._LimitSpeedPlanDetail_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedPlanDetail_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedPlanDetail_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedPlanDetail_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedPlanDetail_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedPlanDetail_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailAggregateImplementors = []string{"LimitSpeedPlanDetailAggregate"}

func (ec *executionContext) _LimitSpeedPlanDetailAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailAggregate")
		case "aggregate":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailAggregateFieldsImplementors = []string{"LimitSpeedPlanDetailAggregateFields"}

func (ec *executionContext) _LimitSpeedPlanDetailAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailAggregateFields")
		case "avg":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._LimitSpeedPlanDetailAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailAvgFieldsImplementors = []string{"LimitSpeedPlanDetailAvgFields"}

func (ec *executionContext) _LimitSpeedPlanDetailAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailAvgFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailAvgFields_id(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailAvgFields_night_limit_speed(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailAvgFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailAvgFields_limit_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailMaxFieldsImplementors = []string{"LimitSpeedPlanDetailMaxFields"}

func (ec *executionContext) _LimitSpeedPlanDetailMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailMaxFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_id(ctx, field, obj)
		case "detail_id":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_detail_id(ctx, field, obj)
		case "plan_id":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_plan_id(ctx, field, obj)
		case "is_night_limit":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_is_night_limit(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_night_limit_speed(ctx, field, obj)
		case "night_time_begin":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_night_time_begin(ctx, field, obj)
		case "night_time_end":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_night_time_end(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_limit_speed(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedPlanDetailMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailMinFieldsImplementors = []string{"LimitSpeedPlanDetailMinFields"}

func (ec *executionContext) _LimitSpeedPlanDetailMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailMinFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_id(ctx, field, obj)
		case "detail_id":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_detail_id(ctx, field, obj)
		case "plan_id":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_plan_id(ctx, field, obj)
		case "is_night_limit":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_is_night_limit(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_night_limit_speed(ctx, field, obj)
		case "night_time_begin":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_night_time_begin(ctx, field, obj)
		case "night_time_end":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_night_time_end(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_limit_speed(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedPlanDetailMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailMutationResponseImplementors = []string{"LimitSpeedPlanDetailMutationResponse"}

func (ec *executionContext) _LimitSpeedPlanDetailMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._LimitSpeedPlanDetailMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._LimitSpeedPlanDetailMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailStddevFieldsImplementors = []string{"LimitSpeedPlanDetailStddevFields"}

func (ec *executionContext) _LimitSpeedPlanDetailStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailStddevFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevFields_id(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevFields_night_limit_speed(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevFields_limit_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailStddevPopFieldsImplementors = []string{"LimitSpeedPlanDetailStddevPopFields"}

func (ec *executionContext) _LimitSpeedPlanDetailStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailStddevPopFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevPopFields_id(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevPopFields_night_limit_speed(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevPopFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevPopFields_limit_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailStddevSampFieldsImplementors = []string{"LimitSpeedPlanDetailStddevSampFields"}

func (ec *executionContext) _LimitSpeedPlanDetailStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailStddevSampFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevSampFields_id(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevSampFields_night_limit_speed(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevSampFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailStddevSampFields_limit_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailSumFieldsImplementors = []string{"LimitSpeedPlanDetailSumFields"}

func (ec *executionContext) _LimitSpeedPlanDetailSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailSumFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailSumFields_id(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailSumFields_night_limit_speed(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailSumFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailSumFields_limit_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailVarPopFieldsImplementors = []string{"LimitSpeedPlanDetailVarPopFields"}

func (ec *executionContext) _LimitSpeedPlanDetailVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailVarPopFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailVarPopFields_id(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailVarPopFields_night_limit_speed(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailVarPopFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailVarPopFields_limit_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailVarSampFieldsImplementors = []string{"LimitSpeedPlanDetailVarSampFields"}

func (ec *executionContext) _LimitSpeedPlanDetailVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailVarSampFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailVarSampFields_id(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailVarSampFields_night_limit_speed(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailVarSampFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailVarSampFields_limit_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanDetailVarianceFieldsImplementors = []string{"LimitSpeedPlanDetailVarianceFields"}

func (ec *executionContext) _LimitSpeedPlanDetailVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanDetailVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanDetailVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanDetailVarianceFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanDetailVarianceFields_id(ctx, field, obj)
		case "night_limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailVarianceFields_night_limit_speed(ctx, field, obj)
		case "road_level":
			out.Values[i] = ec._LimitSpeedPlanDetailVarianceFields_road_level(ctx, field, obj)
		case "limit_speed":
			out.Values[i] = ec._LimitSpeedPlanDetailVarianceFields_limit_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanMaxFieldsImplementors = []string{"LimitSpeedPlanMaxFields"}

func (ec *executionContext) _LimitSpeedPlanMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanMaxFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_id(ctx, field, obj)
		case "limit_speed_plan_id":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_limit_speed_plan_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_enterprise_id(ctx, field, obj)
		case "plan_name":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_plan_name(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedPlanMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanMinFieldsImplementors = []string{"LimitSpeedPlanMinFields"}

func (ec *executionContext) _LimitSpeedPlanMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanMinFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanMinFields_id(ctx, field, obj)
		case "limit_speed_plan_id":
			out.Values[i] = ec._LimitSpeedPlanMinFields_limit_speed_plan_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._LimitSpeedPlanMinFields_enterprise_id(ctx, field, obj)
		case "plan_name":
			out.Values[i] = ec._LimitSpeedPlanMinFields_plan_name(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._LimitSpeedPlanMinFields_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._LimitSpeedPlanMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._LimitSpeedPlanMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._LimitSpeedPlanMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._LimitSpeedPlanMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._LimitSpeedPlanMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._LimitSpeedPlanMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._LimitSpeedPlanMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanMutationResponseImplementors = []string{"LimitSpeedPlanMutationResponse"}

func (ec *executionContext) _LimitSpeedPlanMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._LimitSpeedPlanMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._LimitSpeedPlanMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanStddevFieldsImplementors = []string{"LimitSpeedPlanStddevFields"}

func (ec *executionContext) _LimitSpeedPlanStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanStddevFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanStddevPopFieldsImplementors = []string{"LimitSpeedPlanStddevPopFields"}

func (ec *executionContext) _LimitSpeedPlanStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanStddevPopFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanStddevSampFieldsImplementors = []string{"LimitSpeedPlanStddevSampFields"}

func (ec *executionContext) _LimitSpeedPlanStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanStddevSampFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanSumFieldsImplementors = []string{"LimitSpeedPlanSumFields"}

func (ec *executionContext) _LimitSpeedPlanSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanSumFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanVarPopFieldsImplementors = []string{"LimitSpeedPlanVarPopFields"}

func (ec *executionContext) _LimitSpeedPlanVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanVarPopFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanVarSampFieldsImplementors = []string{"LimitSpeedPlanVarSampFields"}

func (ec *executionContext) _LimitSpeedPlanVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanVarSampFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var limitSpeedPlanVarianceFieldsImplementors = []string{"LimitSpeedPlanVarianceFields"}

func (ec *executionContext) _LimitSpeedPlanVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.LimitSpeedPlanVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, limitSpeedPlanVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LimitSpeedPlanVarianceFields")
		case "id":
			out.Values[i] = ec._LimitSpeedPlanVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_control_line":
			out.Values[i] = ec._Mutation_delete_control_line(ctx, field)
		case "delete_control_line_by_pk":
			out.Values[i] = ec._Mutation_delete_control_line_by_pk(ctx, field)
		case "insert_control_line":
			out.Values[i] = ec._Mutation_insert_control_line(ctx, field)
		case "insert_control_line_one":
			out.Values[i] = ec._Mutation_insert_control_line_one(ctx, field)
		case "update_control_line":
			out.Values[i] = ec._Mutation_update_control_line(ctx, field)
		case "update_control_line_by_pk":
			out.Values[i] = ec._Mutation_update_control_line_by_pk(ctx, field)
		case "update_control_line_by_union_pk":
			out.Values[i] = ec._Mutation_update_control_line_by_union_pk(ctx, field)
		case "delete_control_line_by_union_pk":
			out.Values[i] = ec._Mutation_delete_control_line_by_union_pk(ctx, field)
		case "delete_control_line_time":
			out.Values[i] = ec._Mutation_delete_control_line_time(ctx, field)
		case "delete_control_line_time_by_pk":
			out.Values[i] = ec._Mutation_delete_control_line_time_by_pk(ctx, field)
		case "insert_control_line_time":
			out.Values[i] = ec._Mutation_insert_control_line_time(ctx, field)
		case "insert_control_line_time_one":
			out.Values[i] = ec._Mutation_insert_control_line_time_one(ctx, field)
		case "update_control_line_time":
			out.Values[i] = ec._Mutation_update_control_line_time(ctx, field)
		case "update_control_line_time_by_pk":
			out.Values[i] = ec._Mutation_update_control_line_time_by_pk(ctx, field)
		case "update_control_line_time_by_union_pk":
			out.Values[i] = ec._Mutation_update_control_line_time_by_union_pk(ctx, field)
		case "delete_control_line_time_by_union_pk":
			out.Values[i] = ec._Mutation_delete_control_line_time_by_union_pk(ctx, field)
		case "delete_ecd_file_check_his":
			out.Values[i] = ec._Mutation_delete_ecd_file_check_his(ctx, field)
		case "delete_ecd_file_check_his_by_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_check_his_by_pk(ctx, field)
		case "insert_ecd_file_check_his":
			out.Values[i] = ec._Mutation_insert_ecd_file_check_his(ctx, field)
		case "insert_ecd_file_check_his_one":
			out.Values[i] = ec._Mutation_insert_ecd_file_check_his_one(ctx, field)
		case "update_ecd_file_check_his":
			out.Values[i] = ec._Mutation_update_ecd_file_check_his(ctx, field)
		case "update_ecd_file_check_his_by_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_check_his_by_pk(ctx, field)
		case "update_ecd_file_check_his_by_union_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_check_his_by_union_pk(ctx, field)
		case "delete_ecd_file_check_his_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_check_his_by_union_pk(ctx, field)
		case "delete_ecd_file_district":
			out.Values[i] = ec._Mutation_delete_ecd_file_district(ctx, field)
		case "delete_ecd_file_district_by_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_district_by_pk(ctx, field)
		case "insert_ecd_file_district":
			out.Values[i] = ec._Mutation_insert_ecd_file_district(ctx, field)
		case "insert_ecd_file_district_one":
			out.Values[i] = ec._Mutation_insert_ecd_file_district_one(ctx, field)
		case "update_ecd_file_district":
			out.Values[i] = ec._Mutation_update_ecd_file_district(ctx, field)
		case "update_ecd_file_district_by_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_district_by_pk(ctx, field)
		case "update_ecd_file_district_by_union_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_district_by_union_pk(ctx, field)
		case "delete_ecd_file_district_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_district_by_union_pk(ctx, field)
		case "delete_ecd_file_line_point":
			out.Values[i] = ec._Mutation_delete_ecd_file_line_point(ctx, field)
		case "delete_ecd_file_line_point_by_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_line_point_by_pk(ctx, field)
		case "insert_ecd_file_line_point":
			out.Values[i] = ec._Mutation_insert_ecd_file_line_point(ctx, field)
		case "insert_ecd_file_line_point_one":
			out.Values[i] = ec._Mutation_insert_ecd_file_line_point_one(ctx, field)
		case "update_ecd_file_line_point":
			out.Values[i] = ec._Mutation_update_ecd_file_line_point(ctx, field)
		case "update_ecd_file_line_point_by_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_line_point_by_pk(ctx, field)
		case "update_ecd_file_line_point_by_union_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_line_point_by_union_pk(ctx, field)
		case "delete_ecd_file_line_point_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_line_point_by_union_pk(ctx, field)
		case "delete_ecd_file_main":
			out.Values[i] = ec._Mutation_delete_ecd_file_main(ctx, field)
		case "delete_ecd_file_main_by_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_main_by_pk(ctx, field)
		case "insert_ecd_file_main":
			out.Values[i] = ec._Mutation_insert_ecd_file_main(ctx, field)
		case "insert_ecd_file_main_one":
			out.Values[i] = ec._Mutation_insert_ecd_file_main_one(ctx, field)
		case "update_ecd_file_main":
			out.Values[i] = ec._Mutation_update_ecd_file_main(ctx, field)
		case "update_ecd_file_main_by_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_main_by_pk(ctx, field)
		case "update_ecd_file_main_by_union_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_main_by_union_pk(ctx, field)
		case "delete_ecd_file_main_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_main_by_union_pk(ctx, field)
		case "delete_ecd_file_main_sub":
			out.Values[i] = ec._Mutation_delete_ecd_file_main_sub(ctx, field)
		case "delete_ecd_file_main_sub_by_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_main_sub_by_pk(ctx, field)
		case "insert_ecd_file_main_sub":
			out.Values[i] = ec._Mutation_insert_ecd_file_main_sub(ctx, field)
		case "insert_ecd_file_main_sub_one":
			out.Values[i] = ec._Mutation_insert_ecd_file_main_sub_one(ctx, field)
		case "update_ecd_file_main_sub":
			out.Values[i] = ec._Mutation_update_ecd_file_main_sub(ctx, field)
		case "update_ecd_file_main_sub_by_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_main_sub_by_pk(ctx, field)
		case "update_ecd_file_main_sub_by_union_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_main_sub_by_union_pk(ctx, field)
		case "delete_ecd_file_main_sub_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_main_sub_by_union_pk(ctx, field)
		case "delete_ecd_file_vehicle":
			out.Values[i] = ec._Mutation_delete_ecd_file_vehicle(ctx, field)
		case "delete_ecd_file_vehicle_by_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_vehicle_by_pk(ctx, field)
		case "insert_ecd_file_vehicle":
			out.Values[i] = ec._Mutation_insert_ecd_file_vehicle(ctx, field)
		case "insert_ecd_file_vehicle_one":
			out.Values[i] = ec._Mutation_insert_ecd_file_vehicle_one(ctx, field)
		case "update_ecd_file_vehicle":
			out.Values[i] = ec._Mutation_update_ecd_file_vehicle(ctx, field)
		case "update_ecd_file_vehicle_by_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_vehicle_by_pk(ctx, field)
		case "update_ecd_file_vehicle_by_union_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_vehicle_by_union_pk(ctx, field)
		case "delete_ecd_file_vehicle_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_vehicle_by_union_pk(ctx, field)
		case "delete_ecd_file_vehicle_time":
			out.Values[i] = ec._Mutation_delete_ecd_file_vehicle_time(ctx, field)
		case "delete_ecd_file_vehicle_time_by_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_vehicle_time_by_pk(ctx, field)
		case "insert_ecd_file_vehicle_time":
			out.Values[i] = ec._Mutation_insert_ecd_file_vehicle_time(ctx, field)
		case "insert_ecd_file_vehicle_time_one":
			out.Values[i] = ec._Mutation_insert_ecd_file_vehicle_time_one(ctx, field)
		case "update_ecd_file_vehicle_time":
			out.Values[i] = ec._Mutation_update_ecd_file_vehicle_time(ctx, field)
		case "update_ecd_file_vehicle_time_by_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_vehicle_time_by_pk(ctx, field)
		case "update_ecd_file_vehicle_time_by_union_pk":
			out.Values[i] = ec._Mutation_update_ecd_file_vehicle_time_by_union_pk(ctx, field)
		case "delete_ecd_file_vehicle_time_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ecd_file_vehicle_time_by_union_pk(ctx, field)
		case "delete_ecd_line":
			out.Values[i] = ec._Mutation_delete_ecd_line(ctx, field)
		case "delete_ecd_line_by_pk":
			out.Values[i] = ec._Mutation_delete_ecd_line_by_pk(ctx, field)
		case "insert_ecd_line":
			out.Values[i] = ec._Mutation_insert_ecd_line(ctx, field)
		case "insert_ecd_line_one":
			out.Values[i] = ec._Mutation_insert_ecd_line_one(ctx, field)
		case "update_ecd_line":
			out.Values[i] = ec._Mutation_update_ecd_line(ctx, field)
		case "update_ecd_line_by_pk":
			out.Values[i] = ec._Mutation_update_ecd_line_by_pk(ctx, field)
		case "update_ecd_line_by_union_pk":
			out.Values[i] = ec._Mutation_update_ecd_line_by_union_pk(ctx, field)
		case "delete_ecd_line_by_union_pk":
			out.Values[i] = ec._Mutation_delete_ecd_line_by_union_pk(ctx, field)
		case "delete_electric_fence":
			out.Values[i] = ec._Mutation_delete_electric_fence(ctx, field)
		case "delete_electric_fence_by_pk":
			out.Values[i] = ec._Mutation_delete_electric_fence_by_pk(ctx, field)
		case "insert_electric_fence":
			out.Values[i] = ec._Mutation_insert_electric_fence(ctx, field)
		case "insert_electric_fence_one":
			out.Values[i] = ec._Mutation_insert_electric_fence_one(ctx, field)
		case "update_electric_fence":
			out.Values[i] = ec._Mutation_update_electric_fence(ctx, field)
		case "update_electric_fence_by_pk":
			out.Values[i] = ec._Mutation_update_electric_fence_by_pk(ctx, field)
		case "update_electric_fence_by_union_pk":
			out.Values[i] = ec._Mutation_update_electric_fence_by_union_pk(ctx, field)
		case "delete_electric_fence_by_union_pk":
			out.Values[i] = ec._Mutation_delete_electric_fence_by_union_pk(ctx, field)
		case "delete_electric_fence_enterance_record":
			out.Values[i] = ec._Mutation_delete_electric_fence_enterance_record(ctx, field)
		case "delete_electric_fence_enterance_record_by_pk":
			out.Values[i] = ec._Mutation_delete_electric_fence_enterance_record_by_pk(ctx, field)
		case "insert_electric_fence_enterance_record":
			out.Values[i] = ec._Mutation_insert_electric_fence_enterance_record(ctx, field)
		case "insert_electric_fence_enterance_record_one":
			out.Values[i] = ec._Mutation_insert_electric_fence_enterance_record_one(ctx, field)
		case "update_electric_fence_enterance_record":
			out.Values[i] = ec._Mutation_update_electric_fence_enterance_record(ctx, field)
		case "update_electric_fence_enterance_record_by_pk":
			out.Values[i] = ec._Mutation_update_electric_fence_enterance_record_by_pk(ctx, field)
		case "update_electric_fence_enterance_record_by_union_pk":
			out.Values[i] = ec._Mutation_update_electric_fence_enterance_record_by_union_pk(ctx, field)
		case "delete_electric_fence_enterance_record_by_union_pk":
			out.Values[i] = ec._Mutation_delete_electric_fence_enterance_record_by_union_pk(ctx, field)
		case "delete_limit_speed_line":
			out.Values[i] = ec._Mutation_delete_limit_speed_line(ctx, field)
		case "delete_limit_speed_line_by_pk":
			out.Values[i] = ec._Mutation_delete_limit_speed_line_by_pk(ctx, field)
		case "insert_limit_speed_line":
			out.Values[i] = ec._Mutation_insert_limit_speed_line(ctx, field)
		case "insert_limit_speed_line_one":
			out.Values[i] = ec._Mutation_insert_limit_speed_line_one(ctx, field)
		case "update_limit_speed_line":
			out.Values[i] = ec._Mutation_update_limit_speed_line(ctx, field)
		case "update_limit_speed_line_by_pk":
			out.Values[i] = ec._Mutation_update_limit_speed_line_by_pk(ctx, field)
		case "update_limit_speed_line_by_union_pk":
			out.Values[i] = ec._Mutation_update_limit_speed_line_by_union_pk(ctx, field)
		case "delete_limit_speed_line_by_union_pk":
			out.Values[i] = ec._Mutation_delete_limit_speed_line_by_union_pk(ctx, field)
		case "delete_limit_speed_line_time":
			out.Values[i] = ec._Mutation_delete_limit_speed_line_time(ctx, field)
		case "delete_limit_speed_line_time_by_pk":
			out.Values[i] = ec._Mutation_delete_limit_speed_line_time_by_pk(ctx, field)
		case "insert_limit_speed_line_time":
			out.Values[i] = ec._Mutation_insert_limit_speed_line_time(ctx, field)
		case "insert_limit_speed_line_time_one":
			out.Values[i] = ec._Mutation_insert_limit_speed_line_time_one(ctx, field)
		case "update_limit_speed_line_time":
			out.Values[i] = ec._Mutation_update_limit_speed_line_time(ctx, field)
		case "update_limit_speed_line_time_by_pk":
			out.Values[i] = ec._Mutation_update_limit_speed_line_time_by_pk(ctx, field)
		case "update_limit_speed_line_time_by_union_pk":
			out.Values[i] = ec._Mutation_update_limit_speed_line_time_by_union_pk(ctx, field)
		case "delete_limit_speed_line_time_by_union_pk":
			out.Values[i] = ec._Mutation_delete_limit_speed_line_time_by_union_pk(ctx, field)
		case "delete_limit_speed_plan":
			out.Values[i] = ec._Mutation_delete_limit_speed_plan(ctx, field)
		case "delete_limit_speed_plan_by_pk":
			out.Values[i] = ec._Mutation_delete_limit_speed_plan_by_pk(ctx, field)
		case "insert_limit_speed_plan":
			out.Values[i] = ec._Mutation_insert_limit_speed_plan(ctx, field)
		case "insert_limit_speed_plan_one":
			out.Values[i] = ec._Mutation_insert_limit_speed_plan_one(ctx, field)
		case "update_limit_speed_plan":
			out.Values[i] = ec._Mutation_update_limit_speed_plan(ctx, field)
		case "update_limit_speed_plan_by_pk":
			out.Values[i] = ec._Mutation_update_limit_speed_plan_by_pk(ctx, field)
		case "update_limit_speed_plan_by_union_pk":
			out.Values[i] = ec._Mutation_update_limit_speed_plan_by_union_pk(ctx, field)
		case "delete_limit_speed_plan_by_union_pk":
			out.Values[i] = ec._Mutation_delete_limit_speed_plan_by_union_pk(ctx, field)
		case "delete_limit_speed_plan_detail":
			out.Values[i] = ec._Mutation_delete_limit_speed_plan_detail(ctx, field)
		case "delete_limit_speed_plan_detail_by_pk":
			out.Values[i] = ec._Mutation_delete_limit_speed_plan_detail_by_pk(ctx, field)
		case "insert_limit_speed_plan_detail":
			out.Values[i] = ec._Mutation_insert_limit_speed_plan_detail(ctx, field)
		case "insert_limit_speed_plan_detail_one":
			out.Values[i] = ec._Mutation_insert_limit_speed_plan_detail_one(ctx, field)
		case "update_limit_speed_plan_detail":
			out.Values[i] = ec._Mutation_update_limit_speed_plan_detail(ctx, field)
		case "update_limit_speed_plan_detail_by_pk":
			out.Values[i] = ec._Mutation_update_limit_speed_plan_detail_by_pk(ctx, field)
		case "update_limit_speed_plan_detail_by_union_pk":
			out.Values[i] = ec._Mutation_update_limit_speed_plan_detail_by_union_pk(ctx, field)
		case "delete_limit_speed_plan_detail_by_union_pk":
			out.Values[i] = ec._Mutation_delete_limit_speed_plan_detail_by_union_pk(ctx, field)
		case "delete_vehicle_night_travel_record":
			out.Values[i] = ec._Mutation_delete_vehicle_night_travel_record(ctx, field)
		case "delete_vehicle_night_travel_record_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_night_travel_record_by_pk(ctx, field)
		case "insert_vehicle_night_travel_record":
			out.Values[i] = ec._Mutation_insert_vehicle_night_travel_record(ctx, field)
		case "insert_vehicle_night_travel_record_one":
			out.Values[i] = ec._Mutation_insert_vehicle_night_travel_record_one(ctx, field)
		case "update_vehicle_night_travel_record":
			out.Values[i] = ec._Mutation_update_vehicle_night_travel_record(ctx, field)
		case "update_vehicle_night_travel_record_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_night_travel_record_by_pk(ctx, field)
		case "update_vehicle_night_travel_record_by_union_pk":
			out.Values[i] = ec._Mutation_update_vehicle_night_travel_record_by_union_pk(ctx, field)
		case "delete_vehicle_night_travel_record_by_union_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_night_travel_record_by_union_pk(ctx, field)
		case "delete_vehicle_stop_travel_record":
			out.Values[i] = ec._Mutation_delete_vehicle_stop_travel_record(ctx, field)
		case "delete_vehicle_stop_travel_record_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_stop_travel_record_by_pk(ctx, field)
		case "insert_vehicle_stop_travel_record":
			out.Values[i] = ec._Mutation_insert_vehicle_stop_travel_record(ctx, field)
		case "insert_vehicle_stop_travel_record_one":
			out.Values[i] = ec._Mutation_insert_vehicle_stop_travel_record_one(ctx, field)
		case "update_vehicle_stop_travel_record":
			out.Values[i] = ec._Mutation_update_vehicle_stop_travel_record(ctx, field)
		case "update_vehicle_stop_travel_record_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_stop_travel_record_by_pk(ctx, field)
		case "update_vehicle_stop_travel_record_by_union_pk":
			out.Values[i] = ec._Mutation_update_vehicle_stop_travel_record_by_union_pk(ctx, field)
		case "delete_vehicle_stop_travel_record_by_union_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_stop_travel_record_by_union_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "control_line":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_control_line(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "control_line_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_control_line_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "control_line_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_control_line_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "control_line_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_control_line_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "control_line_time":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_control_line_time(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "control_line_time_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_control_line_time_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "control_line_time_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_control_line_time_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "control_line_time_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_control_line_time_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_check_his":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_check_his(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_check_his_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_check_his_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_check_his_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_check_his_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_check_his_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_check_his_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_district":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_district(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_district_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_district_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_district_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_district_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_district_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_district_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_line_point":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_line_point(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_line_point_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_line_point_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_line_point_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_line_point_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_line_point_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_line_point_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_main":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_main(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_main_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_main_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_main_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_main_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_main_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_main_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_main_sub":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_main_sub(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_main_sub_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_main_sub_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_main_sub_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_main_sub_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_main_sub_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_main_sub_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_vehicle":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_vehicle(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_vehicle_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_vehicle_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_vehicle_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_vehicle_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_vehicle_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_vehicle_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_vehicle_time":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_vehicle_time(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_vehicle_time_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_vehicle_time_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_vehicle_time_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_vehicle_time_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_file_vehicle_time_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_file_vehicle_time_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_line":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_line(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_line_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_line_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_line_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_line_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ecd_line_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ecd_line_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "electric_fence":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_electric_fence(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "electric_fence_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_electric_fence_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "electric_fence_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_electric_fence_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "electric_fence_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_electric_fence_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "electric_fence_enterance_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_electric_fence_enterance_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "electric_fence_enterance_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_electric_fence_enterance_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "electric_fence_enterance_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_electric_fence_enterance_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "electric_fence_enterance_record_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_electric_fence_enterance_record_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_line":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_line(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_line_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_line_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_line_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_line_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_line_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_line_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_line_time":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_line_time(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_line_time_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_line_time_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_line_time_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_line_time_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_line_time_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_line_time_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_plan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_plan(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_plan_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_plan_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_plan_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_plan_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_plan_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_plan_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_plan_detail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_plan_detail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_plan_detail_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_plan_detail_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_plan_detail_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_plan_detail_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "limit_speed_plan_detail_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_limit_speed_plan_detail_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_night_travel_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_night_travel_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_night_travel_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_night_travel_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_night_travel_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_night_travel_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_night_travel_record_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_night_travel_record_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_stop_travel_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_stop_travel_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_stop_travel_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_stop_travel_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_stop_travel_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_stop_travel_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_stop_travel_record_by_union_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_stop_travel_record_by_union_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordImplementors = []string{"VehicleNightTravelRecord"}

func (ec *executionContext) _VehicleNightTravelRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleNightTravelRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecord")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "record_id":
			out.Values[i] = ec._VehicleNightTravelRecord_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleNightTravelRecord_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._VehicleNightTravelRecord_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "route":
			out.Values[i] = ec._VehicleNightTravelRecord_route(ctx, field, obj)
		case "sprg_id":
			out.Values[i] = ec._VehicleNightTravelRecord_sprg_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecord_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecord_service_type(ctx, field, obj)
		case "record_start_time":
			out.Values[i] = ec._VehicleNightTravelRecord_record_start_time(ctx, field, obj)
		case "record_end_time":
			out.Values[i] = ec._VehicleNightTravelRecord_record_end_time(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecord_status(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleNightTravelRecord_cause(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._VehicleNightTravelRecord_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._VehicleNightTravelRecord_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._VehicleNightTravelRecord_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._VehicleNightTravelRecord_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._VehicleNightTravelRecord_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._VehicleNightTravelRecord_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._VehicleNightTravelRecord_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remark":
			out.Values[i] = ec._VehicleNightTravelRecord_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordAggregateImplementors = []string{"VehicleNightTravelRecordAggregate"}

func (ec *executionContext) _VehicleNightTravelRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleNightTravelRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordAggregateFieldsImplementors = []string{"VehicleNightTravelRecordAggregateFields"}

func (ec *executionContext) _VehicleNightTravelRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleNightTravelRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordAvgFieldsImplementors = []string{"VehicleNightTravelRecordAvgFields"}

func (ec *executionContext) _VehicleNightTravelRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordAvgFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordAvgFields_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordAvgFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordAvgFields_service_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordAvgFields_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordMaxFieldsImplementors = []string{"VehicleNightTravelRecordMaxFields"}

func (ec *executionContext) _VehicleNightTravelRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordMaxFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_id(ctx, field, obj)
		case "record_id":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_vehicle_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_enterprise_id(ctx, field, obj)
		case "route":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_route(ctx, field, obj)
		case "sprg_id":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_sprg_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_service_type(ctx, field, obj)
		case "record_start_time":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_record_start_time(ctx, field, obj)
		case "record_end_time":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_record_end_time(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_status(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_cause(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_is_delete(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._VehicleNightTravelRecordMaxFields_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordMinFieldsImplementors = []string{"VehicleNightTravelRecordMinFields"}

func (ec *executionContext) _VehicleNightTravelRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordMinFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_id(ctx, field, obj)
		case "record_id":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_vehicle_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_enterprise_id(ctx, field, obj)
		case "route":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_route(ctx, field, obj)
		case "sprg_id":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_sprg_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_service_type(ctx, field, obj)
		case "record_start_time":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_record_start_time(ctx, field, obj)
		case "record_end_time":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_record_end_time(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_status(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_cause(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_is_delete(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._VehicleNightTravelRecordMinFields_remark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordMutationResponseImplementors = []string{"VehicleNightTravelRecordMutationResponse"}

func (ec *executionContext) _VehicleNightTravelRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleNightTravelRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleNightTravelRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordStddevFieldsImplementors = []string{"VehicleNightTravelRecordStddevFields"}

func (ec *executionContext) _VehicleNightTravelRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordStddevFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordStddevFields_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordStddevFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordStddevFields_service_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordStddevFields_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordStddevPopFieldsImplementors = []string{"VehicleNightTravelRecordStddevPopFields"}

func (ec *executionContext) _VehicleNightTravelRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordStddevPopFields_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordStddevPopFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordStddevPopFields_service_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordStddevPopFields_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordStddevSampFieldsImplementors = []string{"VehicleNightTravelRecordStddevSampFields"}

func (ec *executionContext) _VehicleNightTravelRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordStddevSampFields_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordStddevSampFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordStddevSampFields_service_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordStddevSampFields_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordSumFieldsImplementors = []string{"VehicleNightTravelRecordSumFields"}

func (ec *executionContext) _VehicleNightTravelRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordSumFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordSumFields_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordSumFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordSumFields_service_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordSumFields_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordVarPopFieldsImplementors = []string{"VehicleNightTravelRecordVarPopFields"}

func (ec *executionContext) _VehicleNightTravelRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordVarPopFields_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordVarPopFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordVarPopFields_service_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordVarPopFields_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordVarSampFieldsImplementors = []string{"VehicleNightTravelRecordVarSampFields"}

func (ec *executionContext) _VehicleNightTravelRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordVarSampFields_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordVarSampFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordVarSampFields_service_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordVarSampFields_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleNightTravelRecordVarianceFieldsImplementors = []string{"VehicleNightTravelRecordVarianceFields"}

func (ec *executionContext) _VehicleNightTravelRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleNightTravelRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleNightTravelRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleNightTravelRecordVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleNightTravelRecordVarianceFields_id(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._VehicleNightTravelRecordVarianceFields_vehicle_type(ctx, field, obj)
		case "service_type":
			out.Values[i] = ec._VehicleNightTravelRecordVarianceFields_service_type(ctx, field, obj)
		case "status":
			out.Values[i] = ec._VehicleNightTravelRecordVarianceFields_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordImplementors = []string{"VehicleStopTravelRecord"}

func (ec *executionContext) _VehicleStopTravelRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleStopTravelRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecord")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "record_id":
			out.Values[i] = ec._VehicleStopTravelRecord_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bill_id":
			out.Values[i] = ec._VehicleStopTravelRecord_bill_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "record_start_time":
			out.Values[i] = ec._VehicleStopTravelRecord_record_start_time(ctx, field, obj)
		case "record_end_time":
			out.Values[i] = ec._VehicleStopTravelRecord_record_end_time(ctx, field, obj)
		case "record_user_id":
			out.Values[i] = ec._VehicleStopTravelRecord_record_user_id(ctx, field, obj)
		case "is_effect":
			out.Values[i] = ec._VehicleStopTravelRecord_is_effect(ctx, field, obj)
		case "effect_start_time":
			out.Values[i] = ec._VehicleStopTravelRecord_effect_start_time(ctx, field, obj)
		case "effect_end_time":
			out.Values[i] = ec._VehicleStopTravelRecord_effect_end_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleStopTravelRecord_vehicle_id(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleStopTravelRecord_cause(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._VehicleStopTravelRecord_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._VehicleStopTravelRecord_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._VehicleStopTravelRecord_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._VehicleStopTravelRecord_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._VehicleStopTravelRecord_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._VehicleStopTravelRecord_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._VehicleStopTravelRecord_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordAggregateImplementors = []string{"VehicleStopTravelRecordAggregate"}

func (ec *executionContext) _VehicleStopTravelRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleStopTravelRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordAggregateFieldsImplementors = []string{"VehicleStopTravelRecordAggregateFields"}

func (ec *executionContext) _VehicleStopTravelRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleStopTravelRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordAvgFieldsImplementors = []string{"VehicleStopTravelRecordAvgFields"}

func (ec *executionContext) _VehicleStopTravelRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordAvgFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordMaxFieldsImplementors = []string{"VehicleStopTravelRecordMaxFields"}

func (ec *executionContext) _VehicleStopTravelRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordMaxFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_id(ctx, field, obj)
		case "record_id":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_record_id(ctx, field, obj)
		case "bill_id":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_bill_id(ctx, field, obj)
		case "record_start_time":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_record_start_time(ctx, field, obj)
		case "record_end_time":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_record_end_time(ctx, field, obj)
		case "record_user_id":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_record_user_id(ctx, field, obj)
		case "is_effect":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_is_effect(ctx, field, obj)
		case "effect_start_time":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_effect_start_time(ctx, field, obj)
		case "effect_end_time":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_effect_end_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_vehicle_id(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_cause(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._VehicleStopTravelRecordMaxFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordMinFieldsImplementors = []string{"VehicleStopTravelRecordMinFields"}

func (ec *executionContext) _VehicleStopTravelRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordMinFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_id(ctx, field, obj)
		case "record_id":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_record_id(ctx, field, obj)
		case "bill_id":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_bill_id(ctx, field, obj)
		case "record_start_time":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_record_start_time(ctx, field, obj)
		case "record_end_time":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_record_end_time(ctx, field, obj)
		case "record_user_id":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_record_user_id(ctx, field, obj)
		case "is_effect":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_is_effect(ctx, field, obj)
		case "effect_start_time":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_effect_start_time(ctx, field, obj)
		case "effect_end_time":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_effect_end_time(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_vehicle_id(ctx, field, obj)
		case "cause":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_cause(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_delete_by(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._VehicleStopTravelRecordMinFields_is_delete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordMutationResponseImplementors = []string{"VehicleStopTravelRecordMutationResponse"}

func (ec *executionContext) _VehicleStopTravelRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleStopTravelRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleStopTravelRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordStddevFieldsImplementors = []string{"VehicleStopTravelRecordStddevFields"}

func (ec *executionContext) _VehicleStopTravelRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordStddevFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordStddevPopFieldsImplementors = []string{"VehicleStopTravelRecordStddevPopFields"}

func (ec *executionContext) _VehicleStopTravelRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordStddevSampFieldsImplementors = []string{"VehicleStopTravelRecordStddevSampFields"}

func (ec *executionContext) _VehicleStopTravelRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordSumFieldsImplementors = []string{"VehicleStopTravelRecordSumFields"}

func (ec *executionContext) _VehicleStopTravelRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordSumFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordVarPopFieldsImplementors = []string{"VehicleStopTravelRecordVarPopFields"}

func (ec *executionContext) _VehicleStopTravelRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordVarSampFieldsImplementors = []string{"VehicleStopTravelRecordVarSampFields"}

func (ec *executionContext) _VehicleStopTravelRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleStopTravelRecordVarianceFieldsImplementors = []string{"VehicleStopTravelRecordVarianceFields"}

func (ec *executionContext) _VehicleStopTravelRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleStopTravelRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleStopTravelRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleStopTravelRecordVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleStopTravelRecordVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNControlLine2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx context.Context, sel ast.SelectionSet, v model1.ControlLine) graphql.Marshaler {
	return ec._ControlLine(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.ControlLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx context.Context, sel ast.SelectionSet, v *model1.ControlLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ControlLine(ctx, sel, v)
}

func (ec *executionContext) marshalNControlLineAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineAggregate(ctx context.Context, sel ast.SelectionSet, v model.ControlLineAggregate) graphql.Marshaler {
	return ec._ControlLineAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlLineAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ControlLineAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNControlLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx context.Context, v interface{}) (model.ControlLineBoolExp, error) {
	res, err := ec.unmarshalInputControlLineBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNControlLineInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineInsertInput(ctx context.Context, v interface{}) (model.ControlLineInsertInput, error) {
	res, err := ec.unmarshalInputControlLineInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNControlLineInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ControlLineInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ControlLineInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNControlLineInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNControlLineInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineInsertInput(ctx context.Context, v interface{}) (*model.ControlLineInsertInput, error) {
	res, err := ec.unmarshalInputControlLineInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNControlLineOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineOrderBy(ctx context.Context, v interface{}) (*model.ControlLineOrderBy, error) {
	res, err := ec.unmarshalInputControlLineOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNControlLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSelectColumn(ctx context.Context, v interface{}) (model.ControlLineSelectColumn, error) {
	var res model.ControlLineSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNControlLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ControlLineSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNControlLineTime2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx context.Context, sel ast.SelectionSet, v model1.ControlLineTime) graphql.Marshaler {
	return ec._ControlLineTime(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlLineTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.ControlLineTime) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx context.Context, sel ast.SelectionSet, v *model1.ControlLineTime) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ControlLineTime(ctx, sel, v)
}

func (ec *executionContext) marshalNControlLineTimeAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeAggregate(ctx context.Context, sel ast.SelectionSet, v model.ControlLineTimeAggregate) graphql.Marshaler {
	return ec._ControlLineTimeAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNControlLineTimeAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ControlLineTimeAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNControlLineTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx context.Context, v interface{}) (model.ControlLineTimeBoolExp, error) {
	res, err := ec.unmarshalInputControlLineTimeBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNControlLineTimeInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeInsertInput(ctx context.Context, v interface{}) (model.ControlLineTimeInsertInput, error) {
	res, err := ec.unmarshalInputControlLineTimeInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNControlLineTimeInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ControlLineTimeInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ControlLineTimeInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNControlLineTimeInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNControlLineTimeInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeInsertInput(ctx context.Context, v interface{}) (*model.ControlLineTimeInsertInput, error) {
	res, err := ec.unmarshalInputControlLineTimeInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNControlLineTimeOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeOrderBy(ctx context.Context, v interface{}) (*model.ControlLineTimeOrderBy, error) {
	res, err := ec.unmarshalInputControlLineTimeOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNControlLineTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSelectColumn(ctx context.Context, v interface{}) (model.ControlLineTimeSelectColumn, error) {
	var res model.ControlLineTimeSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNControlLineTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ControlLineTimeSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEcdFileCheckHis2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx context.Context, sel ast.SelectionSet, v model1.EcdFileCheckHis) graphql.Marshaler {
	return ec._EcdFileCheckHis(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileCheckHis2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHisᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EcdFileCheckHis) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileCheckHis) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileCheckHis(ctx, sel, v)
}

func (ec *executionContext) marshalNEcdFileCheckHisAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisAggregate(ctx context.Context, sel ast.SelectionSet, v model.EcdFileCheckHisAggregate) graphql.Marshaler {
	return ec._EcdFileCheckHisAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileCheckHisAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileCheckHisAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEcdFileCheckHisBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx context.Context, v interface{}) (model.EcdFileCheckHisBoolExp, error) {
	res, err := ec.unmarshalInputEcdFileCheckHisBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileCheckHisInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisInsertInput(ctx context.Context, v interface{}) (model.EcdFileCheckHisInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileCheckHisInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileCheckHisInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileCheckHisInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileCheckHisInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileCheckHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEcdFileCheckHisInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisInsertInput(ctx context.Context, v interface{}) (*model.EcdFileCheckHisInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileCheckHisInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileCheckHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisOrderBy(ctx context.Context, v interface{}) (*model.EcdFileCheckHisOrderBy, error) {
	res, err := ec.unmarshalInputEcdFileCheckHisOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileCheckHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSelectColumn(ctx context.Context, v interface{}) (model.EcdFileCheckHisSelectColumn, error) {
	var res model.EcdFileCheckHisSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEcdFileCheckHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EcdFileCheckHisSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEcdFileDistrict2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx context.Context, sel ast.SelectionSet, v model1.EcdFileDistrict) graphql.Marshaler {
	return ec._EcdFileDistrict(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileDistrict2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrictᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EcdFileDistrict) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileDistrict) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileDistrict(ctx, sel, v)
}

func (ec *executionContext) marshalNEcdFileDistrictAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictAggregate(ctx context.Context, sel ast.SelectionSet, v model.EcdFileDistrictAggregate) graphql.Marshaler {
	return ec._EcdFileDistrictAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileDistrictAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileDistrictAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEcdFileDistrictBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx context.Context, v interface{}) (model.EcdFileDistrictBoolExp, error) {
	res, err := ec.unmarshalInputEcdFileDistrictBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileDistrictInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictInsertInput(ctx context.Context, v interface{}) (model.EcdFileDistrictInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileDistrictInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileDistrictInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileDistrictInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileDistrictInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileDistrictInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEcdFileDistrictInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictInsertInput(ctx context.Context, v interface{}) (*model.EcdFileDistrictInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileDistrictInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileDistrictOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictOrderBy(ctx context.Context, v interface{}) (*model.EcdFileDistrictOrderBy, error) {
	res, err := ec.unmarshalInputEcdFileDistrictOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileDistrictSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSelectColumn(ctx context.Context, v interface{}) (model.EcdFileDistrictSelectColumn, error) {
	var res model.EcdFileDistrictSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEcdFileDistrictSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EcdFileDistrictSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEcdFileLinePoint2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx context.Context, sel ast.SelectionSet, v model1.EcdFileLinePoint) graphql.Marshaler {
	return ec._EcdFileLinePoint(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileLinePoint2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePointᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EcdFileLinePoint) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileLinePoint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileLinePoint(ctx, sel, v)
}

func (ec *executionContext) marshalNEcdFileLinePointAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointAggregate(ctx context.Context, sel ast.SelectionSet, v model.EcdFileLinePointAggregate) graphql.Marshaler {
	return ec._EcdFileLinePointAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileLinePointAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileLinePointAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEcdFileLinePointBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx context.Context, v interface{}) (model.EcdFileLinePointBoolExp, error) {
	res, err := ec.unmarshalInputEcdFileLinePointBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileLinePointInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointInsertInput(ctx context.Context, v interface{}) (model.EcdFileLinePointInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileLinePointInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileLinePointInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileLinePointInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileLinePointInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileLinePointInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEcdFileLinePointInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointInsertInput(ctx context.Context, v interface{}) (*model.EcdFileLinePointInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileLinePointInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileLinePointOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointOrderBy(ctx context.Context, v interface{}) (*model.EcdFileLinePointOrderBy, error) {
	res, err := ec.unmarshalInputEcdFileLinePointOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileLinePointSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSelectColumn(ctx context.Context, v interface{}) (model.EcdFileLinePointSelectColumn, error) {
	var res model.EcdFileLinePointSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEcdFileLinePointSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EcdFileLinePointSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEcdFileMain2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx context.Context, sel ast.SelectionSet, v model1.EcdFileMain) graphql.Marshaler {
	return ec._EcdFileMain(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileMain2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EcdFileMain) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileMain) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileMain(ctx, sel, v)
}

func (ec *executionContext) marshalNEcdFileMainAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainAggregate(ctx context.Context, sel ast.SelectionSet, v model.EcdFileMainAggregate) graphql.Marshaler {
	return ec._EcdFileMainAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileMainAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileMainAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEcdFileMainBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx context.Context, v interface{}) (model.EcdFileMainBoolExp, error) {
	res, err := ec.unmarshalInputEcdFileMainBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileMainInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainInsertInput(ctx context.Context, v interface{}) (model.EcdFileMainInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileMainInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileMainInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileMainInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileMainInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileMainInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEcdFileMainInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainInsertInput(ctx context.Context, v interface{}) (*model.EcdFileMainInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileMainInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileMainOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainOrderBy(ctx context.Context, v interface{}) (*model.EcdFileMainOrderBy, error) {
	res, err := ec.unmarshalInputEcdFileMainOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileMainSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSelectColumn(ctx context.Context, v interface{}) (model.EcdFileMainSelectColumn, error) {
	var res model.EcdFileMainSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEcdFileMainSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EcdFileMainSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEcdFileMainSub2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx context.Context, sel ast.SelectionSet, v model1.EcdFileMainSub) graphql.Marshaler {
	return ec._EcdFileMainSub(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileMainSub2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSubᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EcdFileMainSub) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileMainSub) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileMainSub(ctx, sel, v)
}

func (ec *executionContext) marshalNEcdFileMainSubAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubAggregate(ctx context.Context, sel ast.SelectionSet, v model.EcdFileMainSubAggregate) graphql.Marshaler {
	return ec._EcdFileMainSubAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileMainSubAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileMainSubAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEcdFileMainSubBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx context.Context, v interface{}) (model.EcdFileMainSubBoolExp, error) {
	res, err := ec.unmarshalInputEcdFileMainSubBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileMainSubInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubInsertInput(ctx context.Context, v interface{}) (model.EcdFileMainSubInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileMainSubInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileMainSubInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileMainSubInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileMainSubInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileMainSubInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEcdFileMainSubInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubInsertInput(ctx context.Context, v interface{}) (*model.EcdFileMainSubInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileMainSubInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileMainSubOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubOrderBy(ctx context.Context, v interface{}) (*model.EcdFileMainSubOrderBy, error) {
	res, err := ec.unmarshalInputEcdFileMainSubOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileMainSubSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSelectColumn(ctx context.Context, v interface{}) (model.EcdFileMainSubSelectColumn, error) {
	var res model.EcdFileMainSubSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEcdFileMainSubSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EcdFileMainSubSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEcdFileVehicle2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx context.Context, sel ast.SelectionSet, v model1.EcdFileVehicle) graphql.Marshaler {
	return ec._EcdFileVehicle(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileVehicle2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EcdFileVehicle) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileVehicle) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileVehicle(ctx, sel, v)
}

func (ec *executionContext) marshalNEcdFileVehicleAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleAggregate(ctx context.Context, sel ast.SelectionSet, v model.EcdFileVehicleAggregate) graphql.Marshaler {
	return ec._EcdFileVehicleAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileVehicleAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileVehicleAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEcdFileVehicleBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx context.Context, v interface{}) (model.EcdFileVehicleBoolExp, error) {
	res, err := ec.unmarshalInputEcdFileVehicleBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileVehicleInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleInsertInput(ctx context.Context, v interface{}) (model.EcdFileVehicleInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileVehicleInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileVehicleInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileVehicleInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileVehicleInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileVehicleInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEcdFileVehicleInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleInsertInput(ctx context.Context, v interface{}) (*model.EcdFileVehicleInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileVehicleInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileVehicleOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleOrderBy(ctx context.Context, v interface{}) (*model.EcdFileVehicleOrderBy, error) {
	res, err := ec.unmarshalInputEcdFileVehicleOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileVehicleSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSelectColumn(ctx context.Context, v interface{}) (model.EcdFileVehicleSelectColumn, error) {
	var res model.EcdFileVehicleSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEcdFileVehicleSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EcdFileVehicleSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEcdFileVehicleTime2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx context.Context, sel ast.SelectionSet, v model1.EcdFileVehicleTime) graphql.Marshaler {
	return ec._EcdFileVehicleTime(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileVehicleTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EcdFileVehicleTime) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileVehicleTime) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileVehicleTime(ctx, sel, v)
}

func (ec *executionContext) marshalNEcdFileVehicleTimeAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeAggregate(ctx context.Context, sel ast.SelectionSet, v model.EcdFileVehicleTimeAggregate) graphql.Marshaler {
	return ec._EcdFileVehicleTimeAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdFileVehicleTimeAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEcdFileVehicleTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx context.Context, v interface{}) (model.EcdFileVehicleTimeBoolExp, error) {
	res, err := ec.unmarshalInputEcdFileVehicleTimeBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileVehicleTimeInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeInsertInput(ctx context.Context, v interface{}) (model.EcdFileVehicleTimeInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileVehicleTimeInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileVehicleTimeInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileVehicleTimeInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileVehicleTimeInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileVehicleTimeInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEcdFileVehicleTimeInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeInsertInput(ctx context.Context, v interface{}) (*model.EcdFileVehicleTimeInsertInput, error) {
	res, err := ec.unmarshalInputEcdFileVehicleTimeInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileVehicleTimeOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeOrderBy(ctx context.Context, v interface{}) (*model.EcdFileVehicleTimeOrderBy, error) {
	res, err := ec.unmarshalInputEcdFileVehicleTimeOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdFileVehicleTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSelectColumn(ctx context.Context, v interface{}) (model.EcdFileVehicleTimeSelectColumn, error) {
	var res model.EcdFileVehicleTimeSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEcdFileVehicleTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EcdFileVehicleTimeSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEcdLine2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx context.Context, sel ast.SelectionSet, v model1.EcdLine) graphql.Marshaler {
	return ec._EcdLine(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.EcdLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx context.Context, sel ast.SelectionSet, v *model1.EcdLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdLine(ctx, sel, v)
}

func (ec *executionContext) marshalNEcdLineAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineAggregate(ctx context.Context, sel ast.SelectionSet, v model.EcdLineAggregate) graphql.Marshaler {
	return ec._EcdLineAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEcdLineAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EcdLineAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEcdLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx context.Context, v interface{}) (model.EcdLineBoolExp, error) {
	res, err := ec.unmarshalInputEcdLineBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdLineInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineInsertInput(ctx context.Context, v interface{}) (model.EcdLineInsertInput, error) {
	res, err := ec.unmarshalInputEcdLineInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdLineInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EcdLineInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdLineInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdLineInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEcdLineInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineInsertInput(ctx context.Context, v interface{}) (*model.EcdLineInsertInput, error) {
	res, err := ec.unmarshalInputEcdLineInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdLineOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineOrderBy(ctx context.Context, v interface{}) (*model.EcdLineOrderBy, error) {
	res, err := ec.unmarshalInputEcdLineOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEcdLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSelectColumn(ctx context.Context, v interface{}) (model.EcdLineSelectColumn, error) {
	var res model.EcdLineSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEcdLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EcdLineSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNElectricFence2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx context.Context, sel ast.SelectionSet, v model1.ElectricFence) graphql.Marshaler {
	return ec._ElectricFence(ctx, sel, &v)
}

func (ec *executionContext) marshalNElectricFence2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.ElectricFence) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx context.Context, sel ast.SelectionSet, v *model1.ElectricFence) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ElectricFence(ctx, sel, v)
}

func (ec *executionContext) marshalNElectricFenceAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceAggregate(ctx context.Context, sel ast.SelectionSet, v model.ElectricFenceAggregate) graphql.Marshaler {
	return ec._ElectricFenceAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNElectricFenceAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ElectricFenceAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNElectricFenceBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx context.Context, v interface{}) (model.ElectricFenceBoolExp, error) {
	res, err := ec.unmarshalInputElectricFenceBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNElectricFenceEnteranceRecord2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx context.Context, sel ast.SelectionSet, v model1.ElectricFenceEnteranceRecord) graphql.Marshaler {
	return ec._ElectricFenceEnteranceRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNElectricFenceEnteranceRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.ElectricFenceEnteranceRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx context.Context, sel ast.SelectionSet, v *model1.ElectricFenceEnteranceRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNElectricFenceEnteranceRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.ElectricFenceEnteranceRecordAggregate) graphql.Marshaler {
	return ec._ElectricFenceEnteranceRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNElectricFenceEnteranceRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNElectricFenceEnteranceRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx context.Context, v interface{}) (model.ElectricFenceEnteranceRecordBoolExp, error) {
	res, err := ec.unmarshalInputElectricFenceEnteranceRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNElectricFenceEnteranceRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordInsertInput(ctx context.Context, v interface{}) (model.ElectricFenceEnteranceRecordInsertInput, error) {
	res, err := ec.unmarshalInputElectricFenceEnteranceRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNElectricFenceEnteranceRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ElectricFenceEnteranceRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ElectricFenceEnteranceRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNElectricFenceEnteranceRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNElectricFenceEnteranceRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordInsertInput(ctx context.Context, v interface{}) (*model.ElectricFenceEnteranceRecordInsertInput, error) {
	res, err := ec.unmarshalInputElectricFenceEnteranceRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNElectricFenceEnteranceRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordOrderBy(ctx context.Context, v interface{}) (*model.ElectricFenceEnteranceRecordOrderBy, error) {
	res, err := ec.unmarshalInputElectricFenceEnteranceRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNElectricFenceEnteranceRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSelectColumn(ctx context.Context, v interface{}) (model.ElectricFenceEnteranceRecordSelectColumn, error) {
	var res model.ElectricFenceEnteranceRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNElectricFenceEnteranceRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ElectricFenceEnteranceRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNElectricFenceInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceInsertInput(ctx context.Context, v interface{}) (model.ElectricFenceInsertInput, error) {
	res, err := ec.unmarshalInputElectricFenceInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNElectricFenceInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.ElectricFenceInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ElectricFenceInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNElectricFenceInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNElectricFenceInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceInsertInput(ctx context.Context, v interface{}) (*model.ElectricFenceInsertInput, error) {
	res, err := ec.unmarshalInputElectricFenceInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNElectricFenceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceOrderBy(ctx context.Context, v interface{}) (*model.ElectricFenceOrderBy, error) {
	res, err := ec.unmarshalInputElectricFenceOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNElectricFenceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSelectColumn(ctx context.Context, v interface{}) (model.ElectricFenceSelectColumn, error) {
	var res model.ElectricFenceSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNElectricFenceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.ElectricFenceSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLimitSpeedLine2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx context.Context, sel ast.SelectionSet, v model1.LimitSpeedLine) graphql.Marshaler {
	return ec._LimitSpeedLine(ctx, sel, &v)
}

func (ec *executionContext) marshalNLimitSpeedLine2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.LimitSpeedLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx context.Context, sel ast.SelectionSet, v *model1.LimitSpeedLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LimitSpeedLine(ctx, sel, v)
}

func (ec *executionContext) marshalNLimitSpeedLineAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineAggregate(ctx context.Context, sel ast.SelectionSet, v model.LimitSpeedLineAggregate) graphql.Marshaler {
	return ec._LimitSpeedLineAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNLimitSpeedLineAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineAggregate(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LimitSpeedLineAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLimitSpeedLineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx context.Context, v interface{}) (model.LimitSpeedLineBoolExp, error) {
	res, err := ec.unmarshalInputLimitSpeedLineBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedLineInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineInsertInput(ctx context.Context, v interface{}) (model.LimitSpeedLineInsertInput, error) {
	res, err := ec.unmarshalInputLimitSpeedLineInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedLineInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.LimitSpeedLineInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedLineInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedLineInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNLimitSpeedLineInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineInsertInput(ctx context.Context, v interface{}) (*model.LimitSpeedLineInsertInput, error) {
	res, err := ec.unmarshalInputLimitSpeedLineInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedLineOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineOrderBy(ctx context.Context, v interface{}) (*model.LimitSpeedLineOrderBy, error) {
	res, err := ec.unmarshalInputLimitSpeedLineOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSelectColumn(ctx context.Context, v interface{}) (model.LimitSpeedLineSelectColumn, error) {
	var res model.LimitSpeedLineSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLimitSpeedLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.LimitSpeedLineSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNLimitSpeedLineTime2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx context.Context, sel ast.SelectionSet, v model1.LimitSpeedLineTime) graphql.Marshaler {
	return ec._LimitSpeedLineTime(ctx, sel, &v)
}

func (ec *executionContext) marshalNLimitSpeedLineTime2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.LimitSpeedLineTime) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx context.Context, sel ast.SelectionSet, v *model1.LimitSpeedLineTime) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LimitSpeedLineTime(ctx, sel, v)
}

func (ec *executionContext) marshalNLimitSpeedLineTimeAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeAggregate(ctx context.Context, sel ast.SelectionSet, v model.LimitSpeedLineTimeAggregate) graphql.Marshaler {
	return ec._LimitSpeedLineTimeAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNLimitSpeedLineTimeAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeAggregate(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLimitSpeedLineTimeBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx context.Context, v interface{}) (model.LimitSpeedLineTimeBoolExp, error) {
	res, err := ec.unmarshalInputLimitSpeedLineTimeBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedLineTimeInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeInsertInput(ctx context.Context, v interface{}) (model.LimitSpeedLineTimeInsertInput, error) {
	res, err := ec.unmarshalInputLimitSpeedLineTimeInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedLineTimeInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.LimitSpeedLineTimeInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedLineTimeInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedLineTimeInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNLimitSpeedLineTimeInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeInsertInput(ctx context.Context, v interface{}) (*model.LimitSpeedLineTimeInsertInput, error) {
	res, err := ec.unmarshalInputLimitSpeedLineTimeInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedLineTimeOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeOrderBy(ctx context.Context, v interface{}) (*model.LimitSpeedLineTimeOrderBy, error) {
	res, err := ec.unmarshalInputLimitSpeedLineTimeOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedLineTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSelectColumn(ctx context.Context, v interface{}) (model.LimitSpeedLineTimeSelectColumn, error) {
	var res model.LimitSpeedLineTimeSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLimitSpeedLineTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.LimitSpeedLineTimeSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNLimitSpeedPlan2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx context.Context, sel ast.SelectionSet, v model1.LimitSpeedPlan) graphql.Marshaler {
	return ec._LimitSpeedPlan(ctx, sel, &v)
}

func (ec *executionContext) marshalNLimitSpeedPlan2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.LimitSpeedPlan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx context.Context, sel ast.SelectionSet, v *model1.LimitSpeedPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LimitSpeedPlan(ctx, sel, v)
}

func (ec *executionContext) marshalNLimitSpeedPlanAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanAggregate(ctx context.Context, sel ast.SelectionSet, v model.LimitSpeedPlanAggregate) graphql.Marshaler {
	return ec._LimitSpeedPlanAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNLimitSpeedPlanAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanAggregate(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LimitSpeedPlanAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx context.Context, v interface{}) (model.LimitSpeedPlanBoolExp, error) {
	res, err := ec.unmarshalInputLimitSpeedPlanBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLimitSpeedPlanDetail2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx context.Context, sel ast.SelectionSet, v model1.LimitSpeedPlanDetail) graphql.Marshaler {
	return ec._LimitSpeedPlanDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNLimitSpeedPlanDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.LimitSpeedPlanDetail) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx context.Context, sel ast.SelectionSet, v *model1.LimitSpeedPlanDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetail(ctx, sel, v)
}

func (ec *executionContext) marshalNLimitSpeedPlanDetailAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailAggregate(ctx context.Context, sel ast.SelectionSet, v model.LimitSpeedPlanDetailAggregate) graphql.Marshaler {
	return ec._LimitSpeedPlanDetailAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNLimitSpeedPlanDetailAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailAggregate(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx context.Context, v interface{}) (model.LimitSpeedPlanDetailBoolExp, error) {
	res, err := ec.unmarshalInputLimitSpeedPlanDetailBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanDetailInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailInsertInput(ctx context.Context, v interface{}) (model.LimitSpeedPlanDetailInsertInput, error) {
	res, err := ec.unmarshalInputLimitSpeedPlanDetailInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanDetailInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.LimitSpeedPlanDetailInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedPlanDetailInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedPlanDetailInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNLimitSpeedPlanDetailInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailInsertInput(ctx context.Context, v interface{}) (*model.LimitSpeedPlanDetailInsertInput, error) {
	res, err := ec.unmarshalInputLimitSpeedPlanDetailInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanDetailOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailOrderBy(ctx context.Context, v interface{}) (*model.LimitSpeedPlanDetailOrderBy, error) {
	res, err := ec.unmarshalInputLimitSpeedPlanDetailOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSelectColumn(ctx context.Context, v interface{}) (model.LimitSpeedPlanDetailSelectColumn, error) {
	var res model.LimitSpeedPlanDetailSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLimitSpeedPlanDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.LimitSpeedPlanDetailSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLimitSpeedPlanInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanInsertInput(ctx context.Context, v interface{}) (model.LimitSpeedPlanInsertInput, error) {
	res, err := ec.unmarshalInputLimitSpeedPlanInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.LimitSpeedPlanInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedPlanInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedPlanInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNLimitSpeedPlanInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanInsertInput(ctx context.Context, v interface{}) (*model.LimitSpeedPlanInsertInput, error) {
	res, err := ec.unmarshalInputLimitSpeedPlanInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanOrderBy(ctx context.Context, v interface{}) (*model.LimitSpeedPlanOrderBy, error) {
	res, err := ec.unmarshalInputLimitSpeedPlanOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLimitSpeedPlanSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSelectColumn(ctx context.Context, v interface{}) (model.LimitSpeedPlanSelectColumn, error) {
	var res model.LimitSpeedPlanSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLimitSpeedPlanSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.LimitSpeedPlanSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleNightTravelRecord2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx context.Context, sel ast.SelectionSet, v model1.VehicleNightTravelRecord) graphql.Marshaler {
	return ec._VehicleNightTravelRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleNightTravelRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleNightTravelRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleNightTravelRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleNightTravelRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleNightTravelRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleNightTravelRecordAggregate) graphql.Marshaler {
	return ec._VehicleNightTravelRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleNightTravelRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleNightTravelRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx context.Context, v interface{}) (model.VehicleNightTravelRecordBoolExp, error) {
	res, err := ec.unmarshalInputVehicleNightTravelRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleNightTravelRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordInsertInput(ctx context.Context, v interface{}) (model.VehicleNightTravelRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleNightTravelRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleNightTravelRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleNightTravelRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleNightTravelRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleNightTravelRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleNightTravelRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordInsertInput(ctx context.Context, v interface{}) (*model.VehicleNightTravelRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleNightTravelRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleNightTravelRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordOrderBy(ctx context.Context, v interface{}) (*model.VehicleNightTravelRecordOrderBy, error) {
	res, err := ec.unmarshalInputVehicleNightTravelRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleNightTravelRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSelectColumn(ctx context.Context, v interface{}) (model.VehicleNightTravelRecordSelectColumn, error) {
	var res model.VehicleNightTravelRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleNightTravelRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleNightTravelRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVehicleStopTravelRecord2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx context.Context, sel ast.SelectionSet, v model1.VehicleStopTravelRecord) graphql.Marshaler {
	return ec._VehicleStopTravelRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleStopTravelRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleStopTravelRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleStopTravelRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleStopTravelRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleStopTravelRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleStopTravelRecordAggregate) graphql.Marshaler {
	return ec._VehicleStopTravelRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleStopTravelRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleStopTravelRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx context.Context, v interface{}) (model.VehicleStopTravelRecordBoolExp, error) {
	res, err := ec.unmarshalInputVehicleStopTravelRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleStopTravelRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordInsertInput(ctx context.Context, v interface{}) (model.VehicleStopTravelRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleStopTravelRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleStopTravelRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleStopTravelRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleStopTravelRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleStopTravelRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleStopTravelRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordInsertInput(ctx context.Context, v interface{}) (*model.VehicleStopTravelRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleStopTravelRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleStopTravelRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordOrderBy(ctx context.Context, v interface{}) (*model.VehicleStopTravelRecordOrderBy, error) {
	res, err := ec.unmarshalInputVehicleStopTravelRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleStopTravelRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSelectColumn(ctx context.Context, v interface{}) (model.VehicleStopTravelRecordSelectColumn, error) {
	var res model.VehicleStopTravelRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleStopTravelRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleStopTravelRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOControlLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLine(ctx context.Context, sel ast.SelectionSet, v *model1.ControlLine) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLine(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOControlLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx context.Context, v interface{}) ([]*model.ControlLineBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ControlLineBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOControlLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOControlLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineBoolExp(ctx context.Context, v interface{}) (*model.ControlLineBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputControlLineBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOControlLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineIncInput(ctx context.Context, v interface{}) (*model.ControlLineIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputControlLineIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOControlLineMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOControlLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ControlLineOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ControlLineOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNControlLineOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOControlLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ControlLineSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ControlLineSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNControlLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOControlLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ControlLineSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNControlLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOControlLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSetInput(ctx context.Context, v interface{}) (*model.ControlLineSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputControlLineSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOControlLineStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐControlLineTime(ctx context.Context, sel ast.SelectionSet, v *model1.ControlLineTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTime(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOControlLineTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx context.Context, v interface{}) ([]*model.ControlLineTimeBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ControlLineTimeBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOControlLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOControlLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeBoolExp(ctx context.Context, v interface{}) (*model.ControlLineTimeBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputControlLineTimeBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOControlLineTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeIncInput(ctx context.Context, v interface{}) (*model.ControlLineTimeIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputControlLineTimeIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOControlLineTimeMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOControlLineTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ControlLineTimeOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ControlLineTimeOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNControlLineTimeOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOControlLineTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ControlLineTimeSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ControlLineTimeSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNControlLineTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOControlLineTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ControlLineTimeSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNControlLineTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOControlLineTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSetInput(ctx context.Context, v interface{}) (*model.ControlLineTimeSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputControlLineTimeSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOControlLineTimeStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineTimeVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineTimeVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineTimeVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineTimeVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOControlLineVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐControlLineVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ControlLineVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ControlLineVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHis2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileCheckHis(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileCheckHis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHis(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileCheckHisBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx context.Context, v interface{}) ([]*model.EcdFileCheckHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileCheckHisBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcdFileCheckHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileCheckHisBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisBoolExp(ctx context.Context, v interface{}) (*model.EcdFileCheckHisBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileCheckHisBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEcdFileCheckHisIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisIncInput(ctx context.Context, v interface{}) (*model.EcdFileCheckHisIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileCheckHisIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileCheckHisMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileCheckHisOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileCheckHisOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileCheckHisOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileCheckHisOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileCheckHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EcdFileCheckHisSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EcdFileCheckHisSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileCheckHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEcdFileCheckHisSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EcdFileCheckHisSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileCheckHisSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEcdFileCheckHisSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSetInput(ctx context.Context, v interface{}) (*model.EcdFileCheckHisSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileCheckHisSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileCheckHisStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileCheckHisVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileCheckHisVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileCheckHisVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileCheckHisVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileDistrict(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileDistrict) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrict(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileDistrictBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx context.Context, v interface{}) ([]*model.EcdFileDistrictBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileDistrictBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcdFileDistrictBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileDistrictBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictBoolExp(ctx context.Context, v interface{}) (*model.EcdFileDistrictBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileDistrictBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEcdFileDistrictIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictIncInput(ctx context.Context, v interface{}) (*model.EcdFileDistrictIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileDistrictIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileDistrictMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileDistrictOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileDistrictOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileDistrictOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileDistrictOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileDistrictSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EcdFileDistrictSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EcdFileDistrictSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileDistrictSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEcdFileDistrictSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EcdFileDistrictSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileDistrictSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEcdFileDistrictSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSetInput(ctx context.Context, v interface{}) (*model.EcdFileDistrictSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileDistrictSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileDistrictStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileDistrictVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileDistrictVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileDistrictVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileDistrictVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePoint2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileLinePoint(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileLinePoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePoint(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileLinePointBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx context.Context, v interface{}) ([]*model.EcdFileLinePointBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileLinePointBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcdFileLinePointBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileLinePointBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointBoolExp(ctx context.Context, v interface{}) (*model.EcdFileLinePointBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileLinePointBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEcdFileLinePointIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointIncInput(ctx context.Context, v interface{}) (*model.EcdFileLinePointIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileLinePointIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileLinePointMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileLinePointOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileLinePointOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileLinePointOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileLinePointOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileLinePointSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EcdFileLinePointSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EcdFileLinePointSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileLinePointSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEcdFileLinePointSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EcdFileLinePointSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileLinePointSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEcdFileLinePointSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSetInput(ctx context.Context, v interface{}) (*model.EcdFileLinePointSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileLinePointSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileLinePointStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileLinePointVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileLinePointVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileLinePointVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileLinePointVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMain2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMain(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileMain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMain(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileMainBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx context.Context, v interface{}) ([]*model.EcdFileMainBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileMainBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcdFileMainBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileMainBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainBoolExp(ctx context.Context, v interface{}) (*model.EcdFileMainBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileMainBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEcdFileMainIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainIncInput(ctx context.Context, v interface{}) (*model.EcdFileMainIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileMainIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileMainMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileMainOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileMainOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileMainOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileMainOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileMainSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EcdFileMainSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EcdFileMainSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileMainSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEcdFileMainSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EcdFileMainSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileMainSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEcdFileMainSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSetInput(ctx context.Context, v interface{}) (*model.EcdFileMainSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileMainSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileMainStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSub2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileMainSub(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileMainSub) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSub(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileMainSubBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx context.Context, v interface{}) ([]*model.EcdFileMainSubBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileMainSubBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcdFileMainSubBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileMainSubBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubBoolExp(ctx context.Context, v interface{}) (*model.EcdFileMainSubBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileMainSubBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEcdFileMainSubIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubIncInput(ctx context.Context, v interface{}) (*model.EcdFileMainSubIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileMainSubIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileMainSubMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileMainSubOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileMainSubOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileMainSubOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileMainSubOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileMainSubSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EcdFileMainSubSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EcdFileMainSubSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileMainSubSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEcdFileMainSubSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EcdFileMainSubSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileMainSubSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEcdFileMainSubSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSetInput(ctx context.Context, v interface{}) (*model.EcdFileMainSubSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileMainSubSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileMainSubStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSubVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSubVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSubVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSubVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileMainVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileMainVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileMainVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileMainVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicle2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicle(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileVehicle) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicle(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileVehicleBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx context.Context, v interface{}) ([]*model.EcdFileVehicleBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileVehicleBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcdFileVehicleBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileVehicleBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleBoolExp(ctx context.Context, v interface{}) (*model.EcdFileVehicleBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileVehicleBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEcdFileVehicleIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleIncInput(ctx context.Context, v interface{}) (*model.EcdFileVehicleIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileVehicleIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileVehicleMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileVehicleOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileVehicleOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileVehicleOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileVehicleOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileVehicleSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EcdFileVehicleSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EcdFileVehicleSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileVehicleSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEcdFileVehicleSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EcdFileVehicleSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileVehicleSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEcdFileVehicleSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSetInput(ctx context.Context, v interface{}) (*model.EcdFileVehicleSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileVehicleSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileVehicleStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdFileVehicleTime(ctx context.Context, sel ast.SelectionSet, v *model1.EcdFileVehicleTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTime(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileVehicleTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx context.Context, v interface{}) ([]*model.EcdFileVehicleTimeBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileVehicleTimeBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcdFileVehicleTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileVehicleTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeBoolExp(ctx context.Context, v interface{}) (*model.EcdFileVehicleTimeBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileVehicleTimeBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEcdFileVehicleTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeIncInput(ctx context.Context, v interface{}) (*model.EcdFileVehicleTimeIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileVehicleTimeIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdFileVehicleTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EcdFileVehicleTimeOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdFileVehicleTimeOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileVehicleTimeOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdFileVehicleTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EcdFileVehicleTimeSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EcdFileVehicleTimeSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdFileVehicleTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEcdFileVehicleTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EcdFileVehicleTimeSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdFileVehicleTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEcdFileVehicleTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSetInput(ctx context.Context, v interface{}) (*model.EcdFileVehicleTimeSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdFileVehicleTimeSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleTimeVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleTimeVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleTimeVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleTimeVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdFileVehicleVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdFileVehicleVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdFileVehicleVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdFileVehicleVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐEcdLine(ctx context.Context, sel ast.SelectionSet, v *model1.EcdLine) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLine(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx context.Context, v interface{}) ([]*model.EcdLineBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdLineBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEcdLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineBoolExp(ctx context.Context, v interface{}) (*model.EcdLineBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdLineBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEcdLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineIncInput(ctx context.Context, v interface{}) (*model.EcdLineIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdLineIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdLineMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEcdLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EcdLineOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EcdLineOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdLineOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEcdLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EcdLineSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EcdLineSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEcdLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEcdLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EcdLineSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEcdLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEcdLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSetInput(ctx context.Context, v interface{}) (*model.EcdLineSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEcdLineSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEcdLineStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEcdLineVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐEcdLineVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EcdLineVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EcdLineVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFence2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFence(ctx context.Context, sel ast.SelectionSet, v *model1.ElectricFence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFence(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOElectricFenceBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx context.Context, v interface{}) ([]*model.ElectricFenceBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ElectricFenceBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOElectricFenceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOElectricFenceBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceBoolExp(ctx context.Context, v interface{}) (*model.ElectricFenceBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElectricFenceBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐElectricFenceEnteranceRecord(ctx context.Context, sel ast.SelectionSet, v *model1.ElectricFenceEnteranceRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOElectricFenceEnteranceRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx context.Context, v interface{}) ([]*model.ElectricFenceEnteranceRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ElectricFenceEnteranceRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOElectricFenceEnteranceRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOElectricFenceEnteranceRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordBoolExp(ctx context.Context, v interface{}) (*model.ElectricFenceEnteranceRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElectricFenceEnteranceRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOElectricFenceEnteranceRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordIncInput(ctx context.Context, v interface{}) (*model.ElectricFenceEnteranceRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElectricFenceEnteranceRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOElectricFenceEnteranceRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ElectricFenceEnteranceRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ElectricFenceEnteranceRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNElectricFenceEnteranceRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOElectricFenceEnteranceRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ElectricFenceEnteranceRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ElectricFenceEnteranceRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNElectricFenceEnteranceRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ElectricFenceEnteranceRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNElectricFenceEnteranceRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOElectricFenceEnteranceRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSetInput(ctx context.Context, v interface{}) (*model.ElectricFenceEnteranceRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElectricFenceEnteranceRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceEnteranceRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceEnteranceRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceEnteranceRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceEnteranceRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOElectricFenceIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceIncInput(ctx context.Context, v interface{}) (*model.ElectricFenceIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElectricFenceIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOElectricFenceMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceMinFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOElectricFenceOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceOrderByᚄ(ctx context.Context, v interface{}) ([]*model.ElectricFenceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.ElectricFenceOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNElectricFenceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOElectricFenceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.ElectricFenceSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.ElectricFenceSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNElectricFenceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOElectricFenceSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ElectricFenceSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNElectricFenceSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOElectricFenceSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSetInput(ctx context.Context, v interface{}) (*model.ElectricFenceSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElectricFenceSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOElectricFenceStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceSumFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOElectricFenceVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐElectricFenceVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.ElectricFenceVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElectricFenceVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOLimitSpeedLine2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLine(ctx context.Context, sel ast.SelectionSet, v *model1.LimitSpeedLine) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLine(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedLineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx context.Context, v interface{}) ([]*model.LimitSpeedLineBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedLineBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLimitSpeedLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLimitSpeedLineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineBoolExp(ctx context.Context, v interface{}) (*model.LimitSpeedLineBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedLineBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLimitSpeedLineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineIncInput(ctx context.Context, v interface{}) (*model.LimitSpeedLineIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedLineIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedLineMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineMinFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedLineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineOrderByᚄ(ctx context.Context, v interface{}) ([]*model.LimitSpeedLineOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedLineOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedLineOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLimitSpeedLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.LimitSpeedLineSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.LimitSpeedLineSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLimitSpeedLineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.LimitSpeedLineSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLimitSpeedLineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOLimitSpeedLineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSetInput(ctx context.Context, v interface{}) (*model.LimitSpeedLineSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedLineSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedLineStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineSumFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTime2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedLineTime(ctx context.Context, sel ast.SelectionSet, v *model1.LimitSpeedLineTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTime(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedLineTimeBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx context.Context, v interface{}) ([]*model.LimitSpeedLineTimeBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedLineTimeBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLimitSpeedLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLimitSpeedLineTimeBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeBoolExp(ctx context.Context, v interface{}) (*model.LimitSpeedLineTimeBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedLineTimeBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLimitSpeedLineTimeIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeIncInput(ctx context.Context, v interface{}) (*model.LimitSpeedLineTimeIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedLineTimeIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeMinFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedLineTimeOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeOrderByᚄ(ctx context.Context, v interface{}) ([]*model.LimitSpeedLineTimeOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedLineTimeOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedLineTimeOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLimitSpeedLineTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.LimitSpeedLineTimeSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.LimitSpeedLineTimeSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedLineTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLimitSpeedLineTimeSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.LimitSpeedLineTimeSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLimitSpeedLineTimeSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOLimitSpeedLineTimeSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSetInput(ctx context.Context, v interface{}) (*model.LimitSpeedLineTimeSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedLineTimeSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeSumFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineTimeVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineTimeVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineTimeVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineTimeVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedLineVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedLineVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedLineVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedLineVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlan2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlan(ctx context.Context, sel ast.SelectionSet, v *model1.LimitSpeedPlan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlan(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedPlanBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx context.Context, v interface{}) ([]*model.LimitSpeedPlanBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedPlanBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLimitSpeedPlanBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLimitSpeedPlanBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanBoolExp(ctx context.Context, v interface{}) (*model.LimitSpeedPlanBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedPlanBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐLimitSpeedPlanDetail(ctx context.Context, sel ast.SelectionSet, v *model1.LimitSpeedPlanDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetail(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedPlanDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx context.Context, v interface{}) ([]*model.LimitSpeedPlanDetailBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedPlanDetailBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLimitSpeedPlanDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLimitSpeedPlanDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailBoolExp(ctx context.Context, v interface{}) (*model.LimitSpeedPlanDetailBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedPlanDetailBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLimitSpeedPlanDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailIncInput(ctx context.Context, v interface{}) (*model.LimitSpeedPlanDetailIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedPlanDetailIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailMinFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedPlanDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailOrderByᚄ(ctx context.Context, v interface{}) ([]*model.LimitSpeedPlanDetailOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedPlanDetailOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedPlanDetailOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLimitSpeedPlanDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.LimitSpeedPlanDetailSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.LimitSpeedPlanDetailSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedPlanDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.LimitSpeedPlanDetailSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLimitSpeedPlanDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOLimitSpeedPlanDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSetInput(ctx context.Context, v interface{}) (*model.LimitSpeedPlanDetailSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedPlanDetailSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailSumFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanDetailVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanDetailVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanDetailVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanDetailVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedPlanIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanIncInput(ctx context.Context, v interface{}) (*model.LimitSpeedPlanIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedPlanIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedPlanMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanMinFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLimitSpeedPlanOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanOrderByᚄ(ctx context.Context, v interface{}) ([]*model.LimitSpeedPlanOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.LimitSpeedPlanOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedPlanOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLimitSpeedPlanSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.LimitSpeedPlanSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.LimitSpeedPlanSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLimitSpeedPlanSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLimitSpeedPlanSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.LimitSpeedPlanSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLimitSpeedPlanSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOLimitSpeedPlanSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSetInput(ctx context.Context, v interface{}) (*model.LimitSpeedPlanSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLimitSpeedPlanSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLimitSpeedPlanStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanSumFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOLimitSpeedPlanVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐLimitSpeedPlanVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.LimitSpeedPlanVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LimitSpeedPlanVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNumericComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model2.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPointComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleNightTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleNightTravelRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleNightTravelRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleNightTravelRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleNightTravelRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleNightTravelRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleNightTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleNightTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordBoolExp(ctx context.Context, v interface{}) (*model.VehicleNightTravelRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleNightTravelRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleNightTravelRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordIncInput(ctx context.Context, v interface{}) (*model.VehicleNightTravelRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleNightTravelRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleNightTravelRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleNightTravelRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleNightTravelRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleNightTravelRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleNightTravelRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleNightTravelRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleNightTravelRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleNightTravelRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleNightTravelRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleNightTravelRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleNightTravelRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleNightTravelRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSetInput(ctx context.Context, v interface{}) (*model.VehicleNightTravelRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleNightTravelRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleNightTravelRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleNightTravelRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleNightTravelRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleNightTravelRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋmodelᚐVehicleStopTravelRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleStopTravelRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleStopTravelRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleStopTravelRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleStopTravelRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleStopTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleStopTravelRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordBoolExp(ctx context.Context, v interface{}) (*model.VehicleStopTravelRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleStopTravelRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleStopTravelRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordIncInput(ctx context.Context, v interface{}) (*model.VehicleStopTravelRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleStopTravelRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleStopTravelRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleStopTravelRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleStopTravelRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleStopTravelRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleStopTravelRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleStopTravelRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleStopTravelRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleStopTravelRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleStopTravelRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleStopTravelRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleStopTravelRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleStopTravelRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSetInput(ctx context.Context, v interface{}) (*model.VehicleStopTravelRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleStopTravelRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleStopTravelRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdrivingᚋgraphᚋmodelᚐVehicleStopTravelRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStopTravelRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleStopTravelRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
