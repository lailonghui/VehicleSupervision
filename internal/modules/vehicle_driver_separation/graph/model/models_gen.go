// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/vehicle_driver_separation/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "case_approval_review_call"
type CaseApprovalReviewCallAggregate struct {
	Aggregate *CaseApprovalReviewCallAggregateFields `json:"aggregate"`
}

// aggregate fields of "case_approval_review_call"
type CaseApprovalReviewCallAggregateFields struct {
	Avg        *CaseApprovalReviewCallAvgFields        `json:"avg"`
	Count      *int                                    `json:"count"`
	Max        *CaseApprovalReviewCallMaxFields        `json:"max"`
	Min        *CaseApprovalReviewCallMinFields        `json:"min"`
	Stddev     *CaseApprovalReviewCallStddevFields     `json:"stddev"`
	StddevPop  *CaseApprovalReviewCallStddevPopFields  `json:"stddev_pop"`
	StddevSamp *CaseApprovalReviewCallStddevSampFields `json:"stddev_samp"`
	Sum        *CaseApprovalReviewCallSumFields        `json:"sum"`
	VarPop     *CaseApprovalReviewCallVarPopFields     `json:"var_pop"`
	VarSamp    *CaseApprovalReviewCallVarSampFields    `json:"var_samp"`
	Variance   *CaseApprovalReviewCallVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "case_approval_review_call"
type CaseApprovalReviewCallAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'case_approval_review_call'.
type CaseApprovalReviewCallBoolExp struct {
	And                           []*CaseApprovalReviewCallBoolExp `json:"_and"`
	Not                           *CaseApprovalReviewCallBoolExp   `json:"_not"`
	Or                            []*CaseApprovalReviewCallBoolExp `json:"_or"`
	ID                            *model.BigintComparisonExp       `json:"id"`
	CaseApprovalReviewCallID      *model.StringComparisonExp       `json:"case_approval_review_call_id"`
	CaseApprovalReviewOperationID *model.StringComparisonExp       `json:"case_approval_review_operation_id"`
	TelephoneNumber               *model.StringComparisonExp       `json:"telephone_number"`
	DialTime                      *model.TimestamptzComparisonExp  `json:"dial_time"`
	IsConnected                   *model.BooleanComparisonExp      `json:"is_connected"`
	InformContent                 *model.StringComparisonExp       `json:"inform_content"`
	Reviewer                      *model.StringComparisonExp       `json:"reviewer"`
	ReviewTime                    *model.TimestamptzComparisonExp  `json:"review_time"`
	CreatedAt                     *model.TimestamptzComparisonExp  `json:"created_at"`
	CreatedBy                     *model.StringComparisonExp       `json:"created_by"`
	UpdatedAt                     *model.TimestamptzComparisonExp  `json:"updated_at"`
	UpdatedBy                     *model.StringComparisonExp       `json:"updated_by"`
	DeletedAt                     *model.TimestamptzComparisonExp  `json:"deleted_at"`
	DeletedBy                     *model.StringComparisonExp       `json:"deleted_by"`
}

// input type for incrementing integer column in table "case_approval_review_call"
type CaseApprovalReviewCallIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "case_approval_review_call"
type CaseApprovalReviewCallInsertInput struct {
	CaseApprovalReviewOperationID *string    `json:"case_approval_review_operation_id"`
	TelephoneNumber               *string    `json:"telephone_number"`
	DialTime                      *time.Time `json:"dial_time"`
	IsConnected                   *bool      `json:"is_connected"`
	InformContent                 *string    `json:"inform_content"`
	Reviewer                      *string    `json:"reviewer"`
	ReviewTime                    *time.Time `json:"review_time"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
}

// aggregate max on columns of table "case_approval_review_call"
type CaseApprovalReviewCallMaxFields struct {
	ID                            *int64     `json:"id"`
	CaseApprovalReviewCallID      *string    `json:"case_approval_review_call_id"`
	CaseApprovalReviewOperationID *string    `json:"case_approval_review_operation_id"`
	TelephoneNumber               *string    `json:"telephone_number"`
	DialTime                      *time.Time `json:"dial_time"`
	IsConnected                   *bool      `json:"is_connected"`
	InformContent                 *string    `json:"inform_content"`
	Reviewer                      *string    `json:"reviewer"`
	ReviewTime                    *time.Time `json:"review_time"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
}

// aggregate min on columns of table "case_approval_review_call"
type CaseApprovalReviewCallMinFields struct {
	ID                            *int64     `json:"id"`
	CaseApprovalReviewCallID      *string    `json:"case_approval_review_call_id"`
	CaseApprovalReviewOperationID *string    `json:"case_approval_review_operation_id"`
	TelephoneNumber               *string    `json:"telephone_number"`
	DialTime                      *time.Time `json:"dial_time"`
	IsConnected                   *bool      `json:"is_connected"`
	InformContent                 *string    `json:"inform_content"`
	Reviewer                      *string    `json:"reviewer"`
	ReviewTime                    *time.Time `json:"review_time"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
}

// response of any mutation on the table "case_approval_review_call"
type CaseApprovalReviewCallMutationResponse struct {
	AffectedRows int                              `json:"affected_rows"`
	Returning    []*model1.CaseApprovalReviewCall `json:"returning"`
}

// ordering options when selecting data from "case_approval_review_call"
type CaseApprovalReviewCallOrderBy struct {
	ID                            *model.OrderBy `json:"id"`
	CaseApprovalReviewCallID      *model.OrderBy `json:"case_approval_review_call_id"`
	CaseApprovalReviewOperationID *model.OrderBy `json:"case_approval_review_operation_id"`
	TelephoneNumber               *model.OrderBy `json:"telephone_number"`
	DialTime                      *model.OrderBy `json:"dial_time"`
	IsConnected                   *model.OrderBy `json:"is_connected"`
	InformContent                 *model.OrderBy `json:"inform_content"`
	Reviewer                      *model.OrderBy `json:"reviewer"`
	ReviewTime                    *model.OrderBy `json:"review_time"`
	CreatedAt                     *model.OrderBy `json:"created_at"`
	CreatedBy                     *model.OrderBy `json:"created_by"`
	UpdatedAt                     *model.OrderBy `json:"updated_at"`
	UpdatedBy                     *model.OrderBy `json:"updated_by"`
	DeletedAt                     *model.OrderBy `json:"deleted_at"`
	DeletedBy                     *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "case_approval_review_call"
type CaseApprovalReviewCallSetInput struct {
	ID                            *int64     `json:"id"`
	CaseApprovalReviewCallID      *string    `json:"case_approval_review_call_id"`
	CaseApprovalReviewOperationID *string    `json:"case_approval_review_operation_id"`
	TelephoneNumber               *string    `json:"telephone_number"`
	DialTime                      *time.Time `json:"dial_time"`
	IsConnected                   *bool      `json:"is_connected"`
	InformContent                 *string    `json:"inform_content"`
	Reviewer                      *string    `json:"reviewer"`
	ReviewTime                    *time.Time `json:"review_time"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "case_approval_review_call"
type CaseApprovalReviewCallStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "case_approval_review_call"
type CaseApprovalReviewCallStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "case_approval_review_call"
type CaseApprovalReviewCallStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "case_approval_review_call"
type CaseApprovalReviewCallSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "case_approval_review_call"
type CaseApprovalReviewCallVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "case_approval_review_call"
type CaseApprovalReviewCallVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "case_approval_review_call"
type CaseApprovalReviewCallVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "case_approval_review_operation"
type CaseApprovalReviewOperationAggregate struct {
	Aggregate *CaseApprovalReviewOperationAggregateFields `json:"aggregate"`
}

// aggregate fields of "case_approval_review_operation"
type CaseApprovalReviewOperationAggregateFields struct {
	Avg        *CaseApprovalReviewOperationAvgFields        `json:"avg"`
	Count      *int                                         `json:"count"`
	Max        *CaseApprovalReviewOperationMaxFields        `json:"max"`
	Min        *CaseApprovalReviewOperationMinFields        `json:"min"`
	Stddev     *CaseApprovalReviewOperationStddevFields     `json:"stddev"`
	StddevPop  *CaseApprovalReviewOperationStddevPopFields  `json:"stddev_pop"`
	StddevSamp *CaseApprovalReviewOperationStddevSampFields `json:"stddev_samp"`
	Sum        *CaseApprovalReviewOperationSumFields        `json:"sum"`
	VarPop     *CaseApprovalReviewOperationVarPopFields     `json:"var_pop"`
	VarSamp    *CaseApprovalReviewOperationVarSampFields    `json:"var_samp"`
	Variance   *CaseApprovalReviewOperationVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'case_approval_review_operation'.
type CaseApprovalReviewOperationBoolExp struct {
	And                           []*CaseApprovalReviewOperationBoolExp `json:"_and"`
	Not                           *CaseApprovalReviewOperationBoolExp   `json:"_not"`
	Or                            []*CaseApprovalReviewOperationBoolExp `json:"_or"`
	ID                            *model.BigintComparisonExp            `json:"id"`
	CaseApprovalReviewOperationID *model.StringComparisonExp            `json:"case_approval_review_operation_id"`
	ReviewOpinion                 *model.StringComparisonExp            `json:"review_opinion"`
	ReviewResult                  *model.StringComparisonExp            `json:"review_result"`
	Reviewer                      *model.StringComparisonExp            `json:"reviewer"`
	ReviewTime                    *model.TimestamptzComparisonExp       `json:"review_time"`
	CreatedAt                     *model.TimestamptzComparisonExp       `json:"created_at"`
	CreatedBy                     *model.StringComparisonExp            `json:"created_by"`
	UpdatedAt                     *model.TimestamptzComparisonExp       `json:"updated_at"`
	UpdatedBy                     *model.StringComparisonExp            `json:"updated_by"`
	DeletedAt                     *model.TimestamptzComparisonExp       `json:"deleted_at"`
	DeletedBy                     *model.StringComparisonExp            `json:"deleted_by"`
}

// input type for incrementing integer column in table "case_approval_review_operation"
type CaseApprovalReviewOperationIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "case_approval_review_operation"
type CaseApprovalReviewOperationInsertInput struct {
	ReviewOpinion *string    `json:"review_opinion"`
	ReviewResult  *string    `json:"review_result"`
	Reviewer      *string    `json:"reviewer"`
	ReviewTime    *time.Time `json:"review_time"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UpdatedBy     *string    `json:"updated_by"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeletedBy     *string    `json:"deleted_by"`
}

// aggregate max on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationMaxFields struct {
	ID                            *int64     `json:"id"`
	CaseApprovalReviewOperationID *string    `json:"case_approval_review_operation_id"`
	ReviewOpinion                 *string    `json:"review_opinion"`
	ReviewResult                  *string    `json:"review_result"`
	Reviewer                      *string    `json:"reviewer"`
	ReviewTime                    *time.Time `json:"review_time"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
}

// aggregate min on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationMinFields struct {
	ID                            *int64     `json:"id"`
	CaseApprovalReviewOperationID *string    `json:"case_approval_review_operation_id"`
	ReviewOpinion                 *string    `json:"review_opinion"`
	ReviewResult                  *string    `json:"review_result"`
	Reviewer                      *string    `json:"reviewer"`
	ReviewTime                    *time.Time `json:"review_time"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
}

// response of any mutation on the table "case_approval_review_operation"
type CaseApprovalReviewOperationMutationResponse struct {
	AffectedRows int                                   `json:"affected_rows"`
	Returning    []*model1.CaseApprovalReviewOperation `json:"returning"`
}

// ordering options when selecting data from "case_approval_review_operation"
type CaseApprovalReviewOperationOrderBy struct {
	ID                            *model.OrderBy `json:"id"`
	CaseApprovalReviewOperationID *model.OrderBy `json:"case_approval_review_operation_id"`
	ReviewOpinion                 *model.OrderBy `json:"review_opinion"`
	ReviewResult                  *model.OrderBy `json:"review_result"`
	Reviewer                      *model.OrderBy `json:"reviewer"`
	ReviewTime                    *model.OrderBy `json:"review_time"`
	CreatedAt                     *model.OrderBy `json:"created_at"`
	CreatedBy                     *model.OrderBy `json:"created_by"`
	UpdatedAt                     *model.OrderBy `json:"updated_at"`
	UpdatedBy                     *model.OrderBy `json:"updated_by"`
	DeletedAt                     *model.OrderBy `json:"deleted_at"`
	DeletedBy                     *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "case_approval_review_operation"
type CaseApprovalReviewOperationSetInput struct {
	ID                            *int64     `json:"id"`
	CaseApprovalReviewOperationID *string    `json:"case_approval_review_operation_id"`
	ReviewOpinion                 *string    `json:"review_opinion"`
	ReviewResult                  *string    `json:"review_result"`
	Reviewer                      *string    `json:"reviewer"`
	ReviewTime                    *time.Time `json:"review_time"`
	CreatedAt                     *time.Time `json:"created_at"`
	CreatedBy                     *string    `json:"created_by"`
	UpdatedAt                     *time.Time `json:"updated_at"`
	UpdatedBy                     *string    `json:"updated_by"`
	DeletedAt                     *time.Time `json:"deleted_at"`
	DeletedBy                     *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "case_approval_review_operation"
type CaseApprovalReviewOperationVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregated selection of "dispute_violation_record"
type DisputeViolationRecordAggregate struct {
	Aggregate *DisputeViolationRecordAggregateFields `json:"aggregate"`
}

// aggregate fields of "dispute_violation_record"
type DisputeViolationRecordAggregateFields struct {
	Avg        *DisputeViolationRecordAvgFields        `json:"avg"`
	Count      *int                                    `json:"count"`
	Max        *DisputeViolationRecordMaxFields        `json:"max"`
	Min        *DisputeViolationRecordMinFields        `json:"min"`
	Stddev     *DisputeViolationRecordStddevFields     `json:"stddev"`
	StddevPop  *DisputeViolationRecordStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DisputeViolationRecordStddevSampFields `json:"stddev_samp"`
	Sum        *DisputeViolationRecordSumFields        `json:"sum"`
	VarPop     *DisputeViolationRecordVarPopFields     `json:"var_pop"`
	VarSamp    *DisputeViolationRecordVarSampFields    `json:"var_samp"`
	Variance   *DisputeViolationRecordVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "dispute_violation_record"
type DisputeViolationRecordAvgFields struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'dispute_violation_record'.
type DisputeViolationRecordBoolExp struct {
	And                         []*DisputeViolationRecordBoolExp `json:"_and"`
	Not                         *DisputeViolationRecordBoolExp   `json:"_not"`
	Or                          []*DisputeViolationRecordBoolExp `json:"_or"`
	ID                          *model.BigintComparisonExp       `json:"id"`
	DisputeViolationID          *model.StringComparisonExp       `json:"dispute_violation_id"`
	ViolationDetailID           *model.StringComparisonExp       `json:"violation_detail_id"`
	WrittenApplicationMaterials *model.StringComparisonExp       `json:"written_application_materials"`
	LaborContract               *model.StringComparisonExp       `json:"labor_contract"`
	DrivingLog                  *model.StringComparisonExp       `json:"driving_log"`
	Witness                     *model.StringComparisonExp       `json:"witness"`
	Statement                   *model.StringComparisonExp       `json:"statement"`
	PicEvidence                 *model.StringComparisonExp       `json:"pic_evidence"`
	DriverLicense               *model.StringComparisonExp       `json:"driver_license"`
	DrivingLicense              *model.StringComparisonExp       `json:"driving_license"`
	IDCard                      *model.StringComparisonExp       `json:"id_card"`
	BusinessLicense             *model.StringComparisonExp       `json:"business_license"`
	OrganizationCode            *model.StringComparisonExp       `json:"organization_code"`
	LegalPersonIDNumber         *model.StringComparisonExp       `json:"legal_person_id_number"`
	AgentIDNumber               *model.StringComparisonExp       `json:"agent_id_number"`
	VehicleManagerIDCard        *model.StringComparisonExp       `json:"vehicle_manager_id_card"`
	OtherEvidence               *model.StringComparisonExp       `json:"other_evidence"`
	ApproveState                *model.IntComparisonExp          `json:"approve_state"`
	UpdateTimeIn                *model.TimestamptzComparisonExp  `json:"update_time_in"`
	ContactAddress              *model.StringComparisonExp       `json:"contact_address"`
	CreatedAt                   *model.TimestamptzComparisonExp  `json:"created_at"`
	CreatedBy                   *model.StringComparisonExp       `json:"created_by"`
	UpdatedAt                   *model.TimestamptzComparisonExp  `json:"updated_at"`
	UpdatedBy                   *model.StringComparisonExp       `json:"updated_by"`
	DeletedAt                   *model.TimestamptzComparisonExp  `json:"deleted_at"`
	DeletedBy                   *model.StringComparisonExp       `json:"deleted_by"`
	IsDeleted                   *model.BooleanComparisonExp      `json:"is_deleted"`
}

// input type for incrementing integer column in table "dispute_violation_record"
type DisputeViolationRecordIncInput struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// input type for inserting data into table "dispute_violation_record"
type DisputeViolationRecordInsertInput struct {
	ViolationDetailID           *string    `json:"violation_detail_id"`
	WrittenApplicationMaterials *string    `json:"written_application_materials"`
	LaborContract               *string    `json:"labor_contract"`
	DrivingLog                  *string    `json:"driving_log"`
	Witness                     *string    `json:"witness"`
	Statement                   *string    `json:"statement"`
	PicEvidence                 *string    `json:"pic_evidence"`
	DriverLicense               *string    `json:"driver_license"`
	DrivingLicense              *string    `json:"driving_license"`
	IDCard                      *string    `json:"id_card"`
	BusinessLicense             *string    `json:"business_license"`
	OrganizationCode            *string    `json:"organization_code"`
	LegalPersonIDNumber         *string    `json:"legal_person_id_number"`
	AgentIDNumber               *string    `json:"agent_id_number"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	OtherEvidence               *string    `json:"other_evidence"`
	ApproveState                *int       `json:"approve_state"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	ContactAddress              *string    `json:"contact_address"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
}

// aggregated selection of "dispute_violation_record_log"
type DisputeViolationRecordLogAggregate struct {
	Aggregate *DisputeViolationRecordLogAggregateFields `json:"aggregate"`
}

// aggregate fields of "dispute_violation_record_log"
type DisputeViolationRecordLogAggregateFields struct {
	Avg        *DisputeViolationRecordLogAvgFields        `json:"avg"`
	Count      *int                                       `json:"count"`
	Max        *DisputeViolationRecordLogMaxFields        `json:"max"`
	Min        *DisputeViolationRecordLogMinFields        `json:"min"`
	Stddev     *DisputeViolationRecordLogStddevFields     `json:"stddev"`
	StddevPop  *DisputeViolationRecordLogStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DisputeViolationRecordLogStddevSampFields `json:"stddev_samp"`
	Sum        *DisputeViolationRecordLogSumFields        `json:"sum"`
	VarPop     *DisputeViolationRecordLogVarPopFields     `json:"var_pop"`
	VarSamp    *DisputeViolationRecordLogVarSampFields    `json:"var_samp"`
	Variance   *DisputeViolationRecordLogVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'dispute_violation_record_log'.
type DisputeViolationRecordLogBoolExp struct {
	And                   []*DisputeViolationRecordLogBoolExp `json:"_and"`
	Not                   *DisputeViolationRecordLogBoolExp   `json:"_not"`
	Or                    []*DisputeViolationRecordLogBoolExp `json:"_or"`
	ID                    *model.BigintComparisonExp          `json:"id"`
	DisputeViolationLogID *model.StringComparisonExp          `json:"dispute_violation_log_id"`
	DisputeViolationID    *model.StringComparisonExp          `json:"dispute_violation_id"`
	Reviewer              *model.StringComparisonExp          `json:"reviewer"`
	ReviewTime            *model.TimestamptzComparisonExp     `json:"review_time"`
	ReviewOpinion         *model.StringComparisonExp          `json:"review_opinion"`
	ReviewResult          *model.StringComparisonExp          `json:"review_result"`
	ReviewActionName      *model.StringComparisonExp          `json:"review_action_name"`
	Approver              *model.StringComparisonExp          `json:"approver"`
	UpdateTimeIn          *model.StringComparisonExp          `json:"update_time_in"`
}

// input type for incrementing integer column in table "dispute_violation_record_log"
type DisputeViolationRecordLogIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "dispute_violation_record_log"
type DisputeViolationRecordLogInsertInput struct {
	DisputeViolationID *string    `json:"dispute_violation_id"`
	Reviewer           *string    `json:"reviewer"`
	ReviewTime         *time.Time `json:"review_time"`
	ReviewOpinion      *string    `json:"review_opinion"`
	ReviewResult       *string    `json:"review_result"`
	ReviewActionName   *string    `json:"review_action_name"`
	Approver           *string    `json:"approver"`
	UpdateTimeIn       *string    `json:"update_time_in"`
}

// aggregate max on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogMaxFields struct {
	ID                    *int64     `json:"id"`
	DisputeViolationLogID *string    `json:"dispute_violation_log_id"`
	DisputeViolationID    *string    `json:"dispute_violation_id"`
	Reviewer              *string    `json:"reviewer"`
	ReviewTime            *time.Time `json:"review_time"`
	ReviewOpinion         *string    `json:"review_opinion"`
	ReviewResult          *string    `json:"review_result"`
	ReviewActionName      *string    `json:"review_action_name"`
	Approver              *string    `json:"approver"`
	UpdateTimeIn          *string    `json:"update_time_in"`
}

// aggregate min on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogMinFields struct {
	ID                    *int64     `json:"id"`
	DisputeViolationLogID *string    `json:"dispute_violation_log_id"`
	DisputeViolationID    *string    `json:"dispute_violation_id"`
	Reviewer              *string    `json:"reviewer"`
	ReviewTime            *time.Time `json:"review_time"`
	ReviewOpinion         *string    `json:"review_opinion"`
	ReviewResult          *string    `json:"review_result"`
	ReviewActionName      *string    `json:"review_action_name"`
	Approver              *string    `json:"approver"`
	UpdateTimeIn          *string    `json:"update_time_in"`
}

// response of any mutation on the table "dispute_violation_record_log"
type DisputeViolationRecordLogMutationResponse struct {
	AffectedRows int                                 `json:"affected_rows"`
	Returning    []*model1.DisputeViolationRecordLog `json:"returning"`
}

// ordering options when selecting data from "dispute_violation_record_log"
type DisputeViolationRecordLogOrderBy struct {
	ID                    *model.OrderBy `json:"id"`
	DisputeViolationLogID *model.OrderBy `json:"dispute_violation_log_id"`
	DisputeViolationID    *model.OrderBy `json:"dispute_violation_id"`
	Reviewer              *model.OrderBy `json:"reviewer"`
	ReviewTime            *model.OrderBy `json:"review_time"`
	ReviewOpinion         *model.OrderBy `json:"review_opinion"`
	ReviewResult          *model.OrderBy `json:"review_result"`
	ReviewActionName      *model.OrderBy `json:"review_action_name"`
	Approver              *model.OrderBy `json:"approver"`
	UpdateTimeIn          *model.OrderBy `json:"update_time_in"`
}

// input type for updating data in table "dispute_violation_record_log"
type DisputeViolationRecordLogSetInput struct {
	ID                    *int64     `json:"id"`
	DisputeViolationLogID *string    `json:"dispute_violation_log_id"`
	DisputeViolationID    *string    `json:"dispute_violation_id"`
	Reviewer              *string    `json:"reviewer"`
	ReviewTime            *time.Time `json:"review_time"`
	ReviewOpinion         *string    `json:"review_opinion"`
	ReviewResult          *string    `json:"review_result"`
	ReviewActionName      *string    `json:"review_action_name"`
	Approver              *string    `json:"approver"`
	UpdateTimeIn          *string    `json:"update_time_in"`
}

// aggregate stddev on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "dispute_violation_record_log"
type DisputeViolationRecordLogVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregate max on columns of table "dispute_violation_record"
type DisputeViolationRecordMaxFields struct {
	ID                          *int64     `json:"id"`
	DisputeViolationID          *string    `json:"dispute_violation_id"`
	ViolationDetailID           *string    `json:"violation_detail_id"`
	WrittenApplicationMaterials *string    `json:"written_application_materials"`
	LaborContract               *string    `json:"labor_contract"`
	DrivingLog                  *string    `json:"driving_log"`
	Witness                     *string    `json:"witness"`
	Statement                   *string    `json:"statement"`
	PicEvidence                 *string    `json:"pic_evidence"`
	DriverLicense               *string    `json:"driver_license"`
	DrivingLicense              *string    `json:"driving_license"`
	IDCard                      *string    `json:"id_card"`
	BusinessLicense             *string    `json:"business_license"`
	OrganizationCode            *string    `json:"organization_code"`
	LegalPersonIDNumber         *string    `json:"legal_person_id_number"`
	AgentIDNumber               *string    `json:"agent_id_number"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	OtherEvidence               *string    `json:"other_evidence"`
	ApproveState                *int       `json:"approve_state"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	ContactAddress              *string    `json:"contact_address"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "dispute_violation_record"
type DisputeViolationRecordMinFields struct {
	ID                          *int64     `json:"id"`
	DisputeViolationID          *string    `json:"dispute_violation_id"`
	ViolationDetailID           *string    `json:"violation_detail_id"`
	WrittenApplicationMaterials *string    `json:"written_application_materials"`
	LaborContract               *string    `json:"labor_contract"`
	DrivingLog                  *string    `json:"driving_log"`
	Witness                     *string    `json:"witness"`
	Statement                   *string    `json:"statement"`
	PicEvidence                 *string    `json:"pic_evidence"`
	DriverLicense               *string    `json:"driver_license"`
	DrivingLicense              *string    `json:"driving_license"`
	IDCard                      *string    `json:"id_card"`
	BusinessLicense             *string    `json:"business_license"`
	OrganizationCode            *string    `json:"organization_code"`
	LegalPersonIDNumber         *string    `json:"legal_person_id_number"`
	AgentIDNumber               *string    `json:"agent_id_number"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	OtherEvidence               *string    `json:"other_evidence"`
	ApproveState                *int       `json:"approve_state"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	ContactAddress              *string    `json:"contact_address"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
}

// response of any mutation on the table "dispute_violation_record"
type DisputeViolationRecordMutationResponse struct {
	AffectedRows int                              `json:"affected_rows"`
	Returning    []*model1.DisputeViolationRecord `json:"returning"`
}

// ordering options when selecting data from "dispute_violation_record"
type DisputeViolationRecordOrderBy struct {
	ID                          *model.OrderBy `json:"id"`
	DisputeViolationID          *model.OrderBy `json:"dispute_violation_id"`
	ViolationDetailID           *model.OrderBy `json:"violation_detail_id"`
	WrittenApplicationMaterials *model.OrderBy `json:"written_application_materials"`
	LaborContract               *model.OrderBy `json:"labor_contract"`
	DrivingLog                  *model.OrderBy `json:"driving_log"`
	Witness                     *model.OrderBy `json:"witness"`
	Statement                   *model.OrderBy `json:"statement"`
	PicEvidence                 *model.OrderBy `json:"pic_evidence"`
	DriverLicense               *model.OrderBy `json:"driver_license"`
	DrivingLicense              *model.OrderBy `json:"driving_license"`
	IDCard                      *model.OrderBy `json:"id_card"`
	BusinessLicense             *model.OrderBy `json:"business_license"`
	OrganizationCode            *model.OrderBy `json:"organization_code"`
	LegalPersonIDNumber         *model.OrderBy `json:"legal_person_id_number"`
	AgentIDNumber               *model.OrderBy `json:"agent_id_number"`
	VehicleManagerIDCard        *model.OrderBy `json:"vehicle_manager_id_card"`
	OtherEvidence               *model.OrderBy `json:"other_evidence"`
	ApproveState                *model.OrderBy `json:"approve_state"`
	UpdateTimeIn                *model.OrderBy `json:"update_time_in"`
	ContactAddress              *model.OrderBy `json:"contact_address"`
	CreatedAt                   *model.OrderBy `json:"created_at"`
	CreatedBy                   *model.OrderBy `json:"created_by"`
	UpdatedAt                   *model.OrderBy `json:"updated_at"`
	UpdatedBy                   *model.OrderBy `json:"updated_by"`
	DeletedAt                   *model.OrderBy `json:"deleted_at"`
	DeletedBy                   *model.OrderBy `json:"deleted_by"`
	IsDeleted                   *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "dispute_violation_record"
type DisputeViolationRecordSetInput struct {
	ID                          *int64     `json:"id"`
	DisputeViolationID          *string    `json:"dispute_violation_id"`
	ViolationDetailID           *string    `json:"violation_detail_id"`
	WrittenApplicationMaterials *string    `json:"written_application_materials"`
	LaborContract               *string    `json:"labor_contract"`
	DrivingLog                  *string    `json:"driving_log"`
	Witness                     *string    `json:"witness"`
	Statement                   *string    `json:"statement"`
	PicEvidence                 *string    `json:"pic_evidence"`
	DriverLicense               *string    `json:"driver_license"`
	DrivingLicense              *string    `json:"driving_license"`
	IDCard                      *string    `json:"id_card"`
	BusinessLicense             *string    `json:"business_license"`
	OrganizationCode            *string    `json:"organization_code"`
	LegalPersonIDNumber         *string    `json:"legal_person_id_number"`
	AgentIDNumber               *string    `json:"agent_id_number"`
	VehicleManagerIDCard        *string    `json:"vehicle_manager_id_card"`
	OtherEvidence               *string    `json:"other_evidence"`
	ApproveState                *int       `json:"approve_state"`
	UpdateTimeIn                *time.Time `json:"update_time_in"`
	ContactAddress              *string    `json:"contact_address"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
	IsDeleted                   *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "dispute_violation_record"
type DisputeViolationRecordStddevFields struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// aggregate stddev_pop on columns of table "dispute_violation_record"
type DisputeViolationRecordStddevPopFields struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// aggregate stddev_samp on columns of table "dispute_violation_record"
type DisputeViolationRecordStddevSampFields struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// aggregate sum on columns of table "dispute_violation_record"
type DisputeViolationRecordSumFields struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// aggregate var_pop on columns of table "dispute_violation_record"
type DisputeViolationRecordVarPopFields struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// aggregate var_samp on columns of table "dispute_violation_record"
type DisputeViolationRecordVarSampFields struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// aggregate variance on columns of table "dispute_violation_record"
type DisputeViolationRecordVarianceFields struct {
	ID           *int64 `json:"id"`
	ApproveState *int   `json:"approve_state"`
}

// aggregated selection of "driving_log_info"
type DrivingLogInfoAggregate struct {
	Aggregate *DrivingLogInfoAggregateFields `json:"aggregate"`
}

// aggregate fields of "driving_log_info"
type DrivingLogInfoAggregateFields struct {
	Avg        *DrivingLogInfoAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *DrivingLogInfoMaxFields        `json:"max"`
	Min        *DrivingLogInfoMinFields        `json:"min"`
	Stddev     *DrivingLogInfoStddevFields     `json:"stddev"`
	StddevPop  *DrivingLogInfoStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DrivingLogInfoStddevSampFields `json:"stddev_samp"`
	Sum        *DrivingLogInfoSumFields        `json:"sum"`
	VarPop     *DrivingLogInfoVarPopFields     `json:"var_pop"`
	VarSamp    *DrivingLogInfoVarSampFields    `json:"var_samp"`
	Variance   *DrivingLogInfoVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "driving_log_info"
type DrivingLogInfoAvgFields struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'driving_log_info'.
type DrivingLogInfoBoolExp struct {
	And              []*DrivingLogInfoBoolExp        `json:"_and"`
	Not              *DrivingLogInfoBoolExp          `json:"_not"`
	Or               []*DrivingLogInfoBoolExp        `json:"_or"`
	ID               *model.BigintComparisonExp      `json:"id"`
	DrivingLogInfoID *model.StringComparisonExp      `json:"driving_log_info_id"`
	VehicleID        *model.StringComparisonExp      `json:"vehicle_id"`
	DriverID         *model.StringComparisonExp      `json:"driver_id"`
	DrivingStartTime *model.TimestamptzComparisonExp `json:"driving_start_time"`
	DrivingEndTime   *model.TimestamptzComparisonExp `json:"driving_end_time"`
	Cause            *model.StringComparisonExp      `json:"cause"`
	Route            *model.StringComparisonExp      `json:"route"`
	Remarks          *model.StringComparisonExp      `json:"remarks"`
	StartTime        *model.StringComparisonExp      `json:"start_time"`
	EndTime          *model.StringComparisonExp      `json:"end_time"`
	ReviewStatus     *model.IntComparisonExp         `json:"review_status"`
	ReviewAgecyLevel *model.IntComparisonExp         `json:"review_agecy_level"`
	IsMarkup         *model.BooleanComparisonExp     `json:"is_markup"`
	CreatedAt        *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy        *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt        *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy        *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt        *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy        *model.StringComparisonExp      `json:"deleted_by"`
}

// input type for incrementing integer column in table "driving_log_info"
type DrivingLogInfoIncInput struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// input type for inserting data into table "driving_log_info"
type DrivingLogInfoInsertInput struct {
	VehicleID        *string    `json:"vehicle_id"`
	DriverID         *string    `json:"driver_id"`
	DrivingStartTime *time.Time `json:"driving_start_time"`
	DrivingEndTime   *time.Time `json:"driving_end_time"`
	Cause            *string    `json:"cause"`
	Route            *string    `json:"route"`
	Remarks          *string    `json:"remarks"`
	StartTime        *string    `json:"start_time"`
	EndTime          *string    `json:"end_time"`
	ReviewStatus     *int       `json:"review_status"`
	ReviewAgecyLevel *int       `json:"review_agecy_level"`
	IsMarkup         *bool      `json:"is_markup"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
}

// aggregate max on columns of table "driving_log_info"
type DrivingLogInfoMaxFields struct {
	ID               *int64     `json:"id"`
	DrivingLogInfoID *string    `json:"driving_log_info_id"`
	VehicleID        *string    `json:"vehicle_id"`
	DriverID         *string    `json:"driver_id"`
	DrivingStartTime *time.Time `json:"driving_start_time"`
	DrivingEndTime   *time.Time `json:"driving_end_time"`
	Cause            *string    `json:"cause"`
	Route            *string    `json:"route"`
	Remarks          *string    `json:"remarks"`
	StartTime        *string    `json:"start_time"`
	EndTime          *string    `json:"end_time"`
	ReviewStatus     *int       `json:"review_status"`
	ReviewAgecyLevel *int       `json:"review_agecy_level"`
	IsMarkup         *bool      `json:"is_markup"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
}

// aggregate min on columns of table "driving_log_info"
type DrivingLogInfoMinFields struct {
	ID               *int64     `json:"id"`
	DrivingLogInfoID *string    `json:"driving_log_info_id"`
	VehicleID        *string    `json:"vehicle_id"`
	DriverID         *string    `json:"driver_id"`
	DrivingStartTime *time.Time `json:"driving_start_time"`
	DrivingEndTime   *time.Time `json:"driving_end_time"`
	Cause            *string    `json:"cause"`
	Route            *string    `json:"route"`
	Remarks          *string    `json:"remarks"`
	StartTime        *string    `json:"start_time"`
	EndTime          *string    `json:"end_time"`
	ReviewStatus     *int       `json:"review_status"`
	ReviewAgecyLevel *int       `json:"review_agecy_level"`
	IsMarkup         *bool      `json:"is_markup"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
}

// response of any mutation on the table "driving_log_info"
type DrivingLogInfoMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.DrivingLogInfo `json:"returning"`
}

// ordering options when selecting data from "driving_log_info"
type DrivingLogInfoOrderBy struct {
	ID               *model.OrderBy `json:"id"`
	DrivingLogInfoID *model.OrderBy `json:"driving_log_info_id"`
	VehicleID        *model.OrderBy `json:"vehicle_id"`
	DriverID         *model.OrderBy `json:"driver_id"`
	DrivingStartTime *model.OrderBy `json:"driving_start_time"`
	DrivingEndTime   *model.OrderBy `json:"driving_end_time"`
	Cause            *model.OrderBy `json:"cause"`
	Route            *model.OrderBy `json:"route"`
	Remarks          *model.OrderBy `json:"remarks"`
	StartTime        *model.OrderBy `json:"start_time"`
	EndTime          *model.OrderBy `json:"end_time"`
	ReviewStatus     *model.OrderBy `json:"review_status"`
	ReviewAgecyLevel *model.OrderBy `json:"review_agecy_level"`
	IsMarkup         *model.OrderBy `json:"is_markup"`
	CreatedAt        *model.OrderBy `json:"created_at"`
	CreatedBy        *model.OrderBy `json:"created_by"`
	UpdatedAt        *model.OrderBy `json:"updated_at"`
	UpdatedBy        *model.OrderBy `json:"updated_by"`
	DeletedAt        *model.OrderBy `json:"deleted_at"`
	DeletedBy        *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "driving_log_info"
type DrivingLogInfoSetInput struct {
	ID               *int64     `json:"id"`
	DrivingLogInfoID *string    `json:"driving_log_info_id"`
	VehicleID        *string    `json:"vehicle_id"`
	DriverID         *string    `json:"driver_id"`
	DrivingStartTime *time.Time `json:"driving_start_time"`
	DrivingEndTime   *time.Time `json:"driving_end_time"`
	Cause            *string    `json:"cause"`
	Route            *string    `json:"route"`
	Remarks          *string    `json:"remarks"`
	StartTime        *string    `json:"start_time"`
	EndTime          *string    `json:"end_time"`
	ReviewStatus     *int       `json:"review_status"`
	ReviewAgecyLevel *int       `json:"review_agecy_level"`
	IsMarkup         *bool      `json:"is_markup"`
	CreatedAt        *time.Time `json:"created_at"`
	CreatedBy        *string    `json:"created_by"`
	UpdatedAt        *time.Time `json:"updated_at"`
	UpdatedBy        *string    `json:"updated_by"`
	DeletedAt        *time.Time `json:"deleted_at"`
	DeletedBy        *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "driving_log_info"
type DrivingLogInfoStddevFields struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// aggregate stddev_pop on columns of table "driving_log_info"
type DrivingLogInfoStddevPopFields struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// aggregate stddev_samp on columns of table "driving_log_info"
type DrivingLogInfoStddevSampFields struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// aggregate sum on columns of table "driving_log_info"
type DrivingLogInfoSumFields struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// aggregate var_pop on columns of table "driving_log_info"
type DrivingLogInfoVarPopFields struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// aggregate var_samp on columns of table "driving_log_info"
type DrivingLogInfoVarSampFields struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// aggregate variance on columns of table "driving_log_info"
type DrivingLogInfoVarianceFields struct {
	ID               *int64 `json:"id"`
	ReviewStatus     *int   `json:"review_status"`
	ReviewAgecyLevel *int   `json:"review_agecy_level"`
}

// aggregated selection of "vehicle_driver_binding"
type VehicleDriverBindingAggregate struct {
	Aggregate *VehicleDriverBindingAggregateFields `json:"aggregate"`
}

// aggregate fields of "vehicle_driver_binding"
type VehicleDriverBindingAggregateFields struct {
	Avg        *VehicleDriverBindingAvgFields        `json:"avg"`
	Count      *int                                  `json:"count"`
	Max        *VehicleDriverBindingMaxFields        `json:"max"`
	Min        *VehicleDriverBindingMinFields        `json:"min"`
	Stddev     *VehicleDriverBindingStddevFields     `json:"stddev"`
	StddevPop  *VehicleDriverBindingStddevPopFields  `json:"stddev_pop"`
	StddevSamp *VehicleDriverBindingStddevSampFields `json:"stddev_samp"`
	Sum        *VehicleDriverBindingSumFields        `json:"sum"`
	VarPop     *VehicleDriverBindingVarPopFields     `json:"var_pop"`
	VarSamp    *VehicleDriverBindingVarSampFields    `json:"var_samp"`
	Variance   *VehicleDriverBindingVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "vehicle_driver_binding"
type VehicleDriverBindingAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_driver_binding'.
type VehicleDriverBindingBoolExp struct {
	And                    []*VehicleDriverBindingBoolExp  `json:"_and"`
	Not                    *VehicleDriverBindingBoolExp    `json:"_not"`
	Or                     []*VehicleDriverBindingBoolExp  `json:"_or"`
	ID                     *model.BigintComparisonExp      `json:"id"`
	VehicleDriverBindingID *model.StringComparisonExp      `json:"vehicle_driver_binding_id"`
	DriverID               *model.StringComparisonExp      `json:"driver_id"`
	VehicleID              *model.StringComparisonExp      `json:"vehicle_id"`
	Remarks                *model.StringComparisonExp      `json:"remarks"`
	CreatedAt              *model.TimestamptzComparisonExp `json:"created_at"`
	CreatedBy              *model.StringComparisonExp      `json:"created_by"`
	UpdatedAt              *model.TimestamptzComparisonExp `json:"updated_at"`
	UpdatedBy              *model.StringComparisonExp      `json:"updated_by"`
	DeletedAt              *model.TimestamptzComparisonExp `json:"deleted_at"`
	DeletedBy              *model.StringComparisonExp      `json:"deleted_by"`
	IsDeleted              *model.BooleanComparisonExp     `json:"is_deleted"`
}

// input type for incrementing integer column in table "vehicle_driver_binding"
type VehicleDriverBindingIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "vehicle_driver_binding"
type VehicleDriverBindingInsertInput struct {
	DriverID  *string    `json:"driver_id"`
	VehicleID *string    `json:"vehicle_id"`
	Remarks   *string    `json:"remarks"`
	UpdatedAt *time.Time `json:"updated_at"`
	UpdatedBy *string    `json:"updated_by"`
	DeletedAt *time.Time `json:"deleted_at"`
	DeletedBy *string    `json:"deleted_by"`
	IsDeleted *bool      `json:"is_deleted"`
}

// aggregate max on columns of table "vehicle_driver_binding"
type VehicleDriverBindingMaxFields struct {
	ID                     *int64     `json:"id"`
	VehicleDriverBindingID *string    `json:"vehicle_driver_binding_id"`
	DriverID               *string    `json:"driver_id"`
	VehicleID              *string    `json:"vehicle_id"`
	Remarks                *string    `json:"remarks"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
	IsDeleted              *bool      `json:"is_deleted"`
}

// aggregate min on columns of table "vehicle_driver_binding"
type VehicleDriverBindingMinFields struct {
	ID                     *int64     `json:"id"`
	VehicleDriverBindingID *string    `json:"vehicle_driver_binding_id"`
	DriverID               *string    `json:"driver_id"`
	VehicleID              *string    `json:"vehicle_id"`
	Remarks                *string    `json:"remarks"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
	IsDeleted              *bool      `json:"is_deleted"`
}

// response of any mutation on the table "vehicle_driver_binding"
type VehicleDriverBindingMutationResponse struct {
	AffectedRows int                            `json:"affected_rows"`
	Returning    []*model1.VehicleDriverBinding `json:"returning"`
}

// ordering options when selecting data from "vehicle_driver_binding"
type VehicleDriverBindingOrderBy struct {
	ID                     *model.OrderBy `json:"id"`
	VehicleDriverBindingID *model.OrderBy `json:"vehicle_driver_binding_id"`
	DriverID               *model.OrderBy `json:"driver_id"`
	VehicleID              *model.OrderBy `json:"vehicle_id"`
	Remarks                *model.OrderBy `json:"remarks"`
	CreatedAt              *model.OrderBy `json:"created_at"`
	CreatedBy              *model.OrderBy `json:"created_by"`
	UpdatedAt              *model.OrderBy `json:"updated_at"`
	UpdatedBy              *model.OrderBy `json:"updated_by"`
	DeletedAt              *model.OrderBy `json:"deleted_at"`
	DeletedBy              *model.OrderBy `json:"deleted_by"`
	IsDeleted              *model.OrderBy `json:"is_deleted"`
}

// input type for updating data in table "vehicle_driver_binding"
type VehicleDriverBindingSetInput struct {
	ID                     *int64     `json:"id"`
	VehicleDriverBindingID *string    `json:"vehicle_driver_binding_id"`
	DriverID               *string    `json:"driver_id"`
	VehicleID              *string    `json:"vehicle_id"`
	Remarks                *string    `json:"remarks"`
	CreatedAt              *time.Time `json:"created_at"`
	CreatedBy              *string    `json:"created_by"`
	UpdatedAt              *time.Time `json:"updated_at"`
	UpdatedBy              *string    `json:"updated_by"`
	DeletedAt              *time.Time `json:"deleted_at"`
	DeletedBy              *string    `json:"deleted_by"`
	IsDeleted              *bool      `json:"is_deleted"`
}

// aggregate stddev on columns of table "vehicle_driver_binding"
type VehicleDriverBindingStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "vehicle_driver_binding"
type VehicleDriverBindingStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "vehicle_driver_binding"
type VehicleDriverBindingStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "vehicle_driver_binding"
type VehicleDriverBindingSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "vehicle_driver_binding"
type VehicleDriverBindingVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "vehicle_driver_binding"
type VehicleDriverBindingVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "vehicle_driver_binding"
type VehicleDriverBindingVarianceFields struct {
	ID *int64 `json:"id"`
}

// 可选select
type CaseApprovalReviewCallSelectColumn string

const (
	// 按指定方法生成                                               ( 主键                       )
	CaseApprovalReviewCallSelectColumnID CaseApprovalReviewCallSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用              ( 联合主键                   )
	CaseApprovalReviewCallSelectColumnCaseApprovalReviewCallID CaseApprovalReviewCallSelectColumn = "case_approval_review_call_id"
	// case_approval_review_operation 案件审批审核操作的case_approval_review_operation_id
	CaseApprovalReviewCallSelectColumnCaseApprovalReviewOperationID CaseApprovalReviewCallSelectColumn = "case_approval_review_operation_id"
	// 电话号码
	CaseApprovalReviewCallSelectColumnTelephoneNumber CaseApprovalReviewCallSelectColumn = "telephone_number"
	// 拨打时间
	CaseApprovalReviewCallSelectColumnDialTime CaseApprovalReviewCallSelectColumn = "dial_time"
	// 是否接通
	CaseApprovalReviewCallSelectColumnIsConnected CaseApprovalReviewCallSelectColumn = "is_connected"
	// 告知内容
	CaseApprovalReviewCallSelectColumnInformContent CaseApprovalReviewCallSelectColumn = "inform_content"
	// 审核人
	CaseApprovalReviewCallSelectColumnReviewer CaseApprovalReviewCallSelectColumn = "reviewer"
	// 审核时间
	CaseApprovalReviewCallSelectColumnReviewTime CaseApprovalReviewCallSelectColumn = "review_time"
	// 创建时间
	CaseApprovalReviewCallSelectColumnCreatedAt CaseApprovalReviewCallSelectColumn = "created_at"
	// 创建人                                                       ( system_user表的user_id )
	CaseApprovalReviewCallSelectColumnCreatedBy CaseApprovalReviewCallSelectColumn = "created_by"
	// 修改时间
	CaseApprovalReviewCallSelectColumnUpdatedAt CaseApprovalReviewCallSelectColumn = "updated_at"
	// 修改人                                                       ( system_user表的user_id )
	CaseApprovalReviewCallSelectColumnUpdatedBy CaseApprovalReviewCallSelectColumn = "updated_by"
	// 删除时间
	CaseApprovalReviewCallSelectColumnDeletedAt CaseApprovalReviewCallSelectColumn = "deleted_at"
	// 删除人                                                       ( system_user表的user_id )
	CaseApprovalReviewCallSelectColumnDeletedBy CaseApprovalReviewCallSelectColumn = "deleted_by"
)

var AllCaseApprovalReviewCallSelectColumn = []CaseApprovalReviewCallSelectColumn{
	CaseApprovalReviewCallSelectColumnID,
	CaseApprovalReviewCallSelectColumnCaseApprovalReviewCallID,
	CaseApprovalReviewCallSelectColumnCaseApprovalReviewOperationID,
	CaseApprovalReviewCallSelectColumnTelephoneNumber,
	CaseApprovalReviewCallSelectColumnDialTime,
	CaseApprovalReviewCallSelectColumnIsConnected,
	CaseApprovalReviewCallSelectColumnInformContent,
	CaseApprovalReviewCallSelectColumnReviewer,
	CaseApprovalReviewCallSelectColumnReviewTime,
	CaseApprovalReviewCallSelectColumnCreatedAt,
	CaseApprovalReviewCallSelectColumnCreatedBy,
	CaseApprovalReviewCallSelectColumnUpdatedAt,
	CaseApprovalReviewCallSelectColumnUpdatedBy,
	CaseApprovalReviewCallSelectColumnDeletedAt,
	CaseApprovalReviewCallSelectColumnDeletedBy,
}

func (e CaseApprovalReviewCallSelectColumn) IsValid() bool {
	switch e {
	case CaseApprovalReviewCallSelectColumnID, CaseApprovalReviewCallSelectColumnCaseApprovalReviewCallID, CaseApprovalReviewCallSelectColumnCaseApprovalReviewOperationID, CaseApprovalReviewCallSelectColumnTelephoneNumber, CaseApprovalReviewCallSelectColumnDialTime, CaseApprovalReviewCallSelectColumnIsConnected, CaseApprovalReviewCallSelectColumnInformContent, CaseApprovalReviewCallSelectColumnReviewer, CaseApprovalReviewCallSelectColumnReviewTime, CaseApprovalReviewCallSelectColumnCreatedAt, CaseApprovalReviewCallSelectColumnCreatedBy, CaseApprovalReviewCallSelectColumnUpdatedAt, CaseApprovalReviewCallSelectColumnUpdatedBy, CaseApprovalReviewCallSelectColumnDeletedAt, CaseApprovalReviewCallSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e CaseApprovalReviewCallSelectColumn) String() string {
	return string(e)
}

func (e *CaseApprovalReviewCallSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CaseApprovalReviewCallSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CaseApprovalReviewCallSelectColumn", str)
	}
	return nil
}

func (e CaseApprovalReviewCallSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type CaseApprovalReviewOperationSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                       )
	CaseApprovalReviewOperationSelectColumnID CaseApprovalReviewOperationSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	CaseApprovalReviewOperationSelectColumnCaseApprovalReviewOperationID CaseApprovalReviewOperationSelectColumn = "case_approval_review_operation_id"
	// 审核意见
	CaseApprovalReviewOperationSelectColumnReviewOpinion CaseApprovalReviewOperationSelectColumn = "review_opinion"
	// 审核结果
	CaseApprovalReviewOperationSelectColumnReviewResult CaseApprovalReviewOperationSelectColumn = "review_result"
	// 审核人
	CaseApprovalReviewOperationSelectColumnReviewer CaseApprovalReviewOperationSelectColumn = "reviewer"
	// 审核时间
	CaseApprovalReviewOperationSelectColumnReviewTime CaseApprovalReviewOperationSelectColumn = "review_time"
	// 创建时间
	CaseApprovalReviewOperationSelectColumnCreatedAt CaseApprovalReviewOperationSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id )
	CaseApprovalReviewOperationSelectColumnCreatedBy CaseApprovalReviewOperationSelectColumn = "created_by"
	// 修改时间
	CaseApprovalReviewOperationSelectColumnUpdatedAt CaseApprovalReviewOperationSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id )
	CaseApprovalReviewOperationSelectColumnUpdatedBy CaseApprovalReviewOperationSelectColumn = "updated_by"
	// 删除时间
	CaseApprovalReviewOperationSelectColumnDeletedAt CaseApprovalReviewOperationSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id )
	CaseApprovalReviewOperationSelectColumnDeletedBy CaseApprovalReviewOperationSelectColumn = "deleted_by"
)

var AllCaseApprovalReviewOperationSelectColumn = []CaseApprovalReviewOperationSelectColumn{
	CaseApprovalReviewOperationSelectColumnID,
	CaseApprovalReviewOperationSelectColumnCaseApprovalReviewOperationID,
	CaseApprovalReviewOperationSelectColumnReviewOpinion,
	CaseApprovalReviewOperationSelectColumnReviewResult,
	CaseApprovalReviewOperationSelectColumnReviewer,
	CaseApprovalReviewOperationSelectColumnReviewTime,
	CaseApprovalReviewOperationSelectColumnCreatedAt,
	CaseApprovalReviewOperationSelectColumnCreatedBy,
	CaseApprovalReviewOperationSelectColumnUpdatedAt,
	CaseApprovalReviewOperationSelectColumnUpdatedBy,
	CaseApprovalReviewOperationSelectColumnDeletedAt,
	CaseApprovalReviewOperationSelectColumnDeletedBy,
}

func (e CaseApprovalReviewOperationSelectColumn) IsValid() bool {
	switch e {
	case CaseApprovalReviewOperationSelectColumnID, CaseApprovalReviewOperationSelectColumnCaseApprovalReviewOperationID, CaseApprovalReviewOperationSelectColumnReviewOpinion, CaseApprovalReviewOperationSelectColumnReviewResult, CaseApprovalReviewOperationSelectColumnReviewer, CaseApprovalReviewOperationSelectColumnReviewTime, CaseApprovalReviewOperationSelectColumnCreatedAt, CaseApprovalReviewOperationSelectColumnCreatedBy, CaseApprovalReviewOperationSelectColumnUpdatedAt, CaseApprovalReviewOperationSelectColumnUpdatedBy, CaseApprovalReviewOperationSelectColumnDeletedAt, CaseApprovalReviewOperationSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e CaseApprovalReviewOperationSelectColumn) String() string {
	return string(e)
}

func (e *CaseApprovalReviewOperationSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CaseApprovalReviewOperationSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CaseApprovalReviewOperationSelectColumn", str)
	}
	return nil
}

func (e CaseApprovalReviewOperationSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DisputeViolationRecordLogSelectColumn string

const (
	// 按指定方法生成                                               ( 主键                                               )
	DisputeViolationRecordLogSelectColumnID DisputeViolationRecordLogSelectColumn = "id"
	// 违章争议审批日志外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                           )
	DisputeViolationRecordLogSelectColumnDisputeViolationLogID DisputeViolationRecordLogSelectColumn = "dispute_violation_log_id"
	// 违章争议记录表id                                             ( dispute_violation_record的dispute_violation_id )
	DisputeViolationRecordLogSelectColumnDisputeViolationID DisputeViolationRecordLogSelectColumn = "dispute_violation_id"
	// 审核人                                                       ( system_user表的user_id                         )
	DisputeViolationRecordLogSelectColumnReviewer DisputeViolationRecordLogSelectColumn = "reviewer"
	// 审核时间
	DisputeViolationRecordLogSelectColumnReviewTime DisputeViolationRecordLogSelectColumn = "review_time"
	// 审核意见
	DisputeViolationRecordLogSelectColumnReviewOpinion DisputeViolationRecordLogSelectColumn = "review_opinion"
	// 审核结果
	DisputeViolationRecordLogSelectColumnReviewResult DisputeViolationRecordLogSelectColumn = "review_result"
	// 审核动作名称
	DisputeViolationRecordLogSelectColumnReviewActionName DisputeViolationRecordLogSelectColumn = "review_action_name"
	// 审批人                                                       ( system_user表的user_id                         )
	DisputeViolationRecordLogSelectColumnApprover DisputeViolationRecordLogSelectColumn = "approver"
	// 内网更新时间
	DisputeViolationRecordLogSelectColumnUpdateTimeIn DisputeViolationRecordLogSelectColumn = "update_time_in"
)

var AllDisputeViolationRecordLogSelectColumn = []DisputeViolationRecordLogSelectColumn{
	DisputeViolationRecordLogSelectColumnID,
	DisputeViolationRecordLogSelectColumnDisputeViolationLogID,
	DisputeViolationRecordLogSelectColumnDisputeViolationID,
	DisputeViolationRecordLogSelectColumnReviewer,
	DisputeViolationRecordLogSelectColumnReviewTime,
	DisputeViolationRecordLogSelectColumnReviewOpinion,
	DisputeViolationRecordLogSelectColumnReviewResult,
	DisputeViolationRecordLogSelectColumnReviewActionName,
	DisputeViolationRecordLogSelectColumnApprover,
	DisputeViolationRecordLogSelectColumnUpdateTimeIn,
}

func (e DisputeViolationRecordLogSelectColumn) IsValid() bool {
	switch e {
	case DisputeViolationRecordLogSelectColumnID, DisputeViolationRecordLogSelectColumnDisputeViolationLogID, DisputeViolationRecordLogSelectColumnDisputeViolationID, DisputeViolationRecordLogSelectColumnReviewer, DisputeViolationRecordLogSelectColumnReviewTime, DisputeViolationRecordLogSelectColumnReviewOpinion, DisputeViolationRecordLogSelectColumnReviewResult, DisputeViolationRecordLogSelectColumnReviewActionName, DisputeViolationRecordLogSelectColumnApprover, DisputeViolationRecordLogSelectColumnUpdateTimeIn:
		return true
	}
	return false
}

func (e DisputeViolationRecordLogSelectColumn) String() string {
	return string(e)
}

func (e *DisputeViolationRecordLogSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeViolationRecordLogSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeViolationRecordLogSelectColumn", str)
	}
	return nil
}

func (e DisputeViolationRecordLogSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DisputeViolationRecordSelectColumn string

const (
	// 按指定方法生成                                               ( 主键                                                   )
	DisputeViolationRecordSelectColumnID DisputeViolationRecordSelectColumn = "id"
	// 违章争议记录表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                               )
	DisputeViolationRecordSelectColumnDisputeViolationID DisputeViolationRecordSelectColumn = "dispute_violation_id"
	// 违章明细表id                                                 ( vehicle_violation _details 表的violation_detail_id )
	DisputeViolationRecordSelectColumnViolationDetailID DisputeViolationRecordSelectColumn = "violation_detail_id"
	// 书面申请材料
	DisputeViolationRecordSelectColumnWrittenApplicationMaterials DisputeViolationRecordSelectColumn = "written_application_materials"
	// 劳动合同或租赁合同
	DisputeViolationRecordSelectColumnLaborContract DisputeViolationRecordSelectColumn = "labor_contract"
	// 行车日志
	DisputeViolationRecordSelectColumnDrivingLog DisputeViolationRecordSelectColumn = "driving_log"
	// 证人证言
	DisputeViolationRecordSelectColumnWitness DisputeViolationRecordSelectColumn = "witness"
	// 当事人陈述
	DisputeViolationRecordSelectColumnStatement DisputeViolationRecordSelectColumn = "statement"
	// 图像证据材料
	DisputeViolationRecordSelectColumnPicEvidence DisputeViolationRecordSelectColumn = "pic_evidence"
	// 行为人驾驶证
	DisputeViolationRecordSelectColumnDriverLicense DisputeViolationRecordSelectColumn = "driver_license"
	// 机动车行驶证
	DisputeViolationRecordSelectColumnDrivingLicense DisputeViolationRecordSelectColumn = "driving_license"
	// 行为人身份证
	DisputeViolationRecordSelectColumnIDCard DisputeViolationRecordSelectColumn = "id_card"
	// 机动车所有人营业执照
	DisputeViolationRecordSelectColumnBusinessLicense DisputeViolationRecordSelectColumn = "business_license"
	// 机动车所有人组织机构代码证
	DisputeViolationRecordSelectColumnOrganizationCode DisputeViolationRecordSelectColumn = "organization_code"
	// 法定代表人身份证
	DisputeViolationRecordSelectColumnLegalPersonIDNumber DisputeViolationRecordSelectColumn = "legal_person_id_number"
	// 委托代理人身份证
	DisputeViolationRecordSelectColumnAgentIDNumber DisputeViolationRecordSelectColumn = "agent_id_number"
	// 机动车管理人身份证
	DisputeViolationRecordSelectColumnVehicleManagerIDCard DisputeViolationRecordSelectColumn = "vehicle_manager_id_card"
	// 其他证据材料
	DisputeViolationRecordSelectColumnOtherEvidence DisputeViolationRecordSelectColumn = "other_evidence"
	// 审批状态                                                     ( 车辆违法审批状态字典                               )
	DisputeViolationRecordSelectColumnApproveState DisputeViolationRecordSelectColumn = "approve_state"
	// 内网更新时间
	DisputeViolationRecordSelectColumnUpdateTimeIn DisputeViolationRecordSelectColumn = "update_time_in"
	// 联系地址
	DisputeViolationRecordSelectColumnContactAddress DisputeViolationRecordSelectColumn = "contact_address"
	// 创建时间
	DisputeViolationRecordSelectColumnCreatedAt DisputeViolationRecordSelectColumn = "created_at"
	// 创建人                                                       ( system_user表的user_id                             )
	DisputeViolationRecordSelectColumnCreatedBy DisputeViolationRecordSelectColumn = "created_by"
	// 修改时间
	DisputeViolationRecordSelectColumnUpdatedAt DisputeViolationRecordSelectColumn = "updated_at"
	// 修改人                                                       ( system_user表的user_id                             )
	DisputeViolationRecordSelectColumnUpdatedBy DisputeViolationRecordSelectColumn = "updated_by"
	// 删除时间
	DisputeViolationRecordSelectColumnDeletedAt DisputeViolationRecordSelectColumn = "deleted_at"
	// 删除人                                                       ( system_user表的user_id                             )
	DisputeViolationRecordSelectColumnDeletedBy DisputeViolationRecordSelectColumn = "deleted_by"
	// 是否删除
	DisputeViolationRecordSelectColumnIsDeleted DisputeViolationRecordSelectColumn = "is_deleted"
)

var AllDisputeViolationRecordSelectColumn = []DisputeViolationRecordSelectColumn{
	DisputeViolationRecordSelectColumnID,
	DisputeViolationRecordSelectColumnDisputeViolationID,
	DisputeViolationRecordSelectColumnViolationDetailID,
	DisputeViolationRecordSelectColumnWrittenApplicationMaterials,
	DisputeViolationRecordSelectColumnLaborContract,
	DisputeViolationRecordSelectColumnDrivingLog,
	DisputeViolationRecordSelectColumnWitness,
	DisputeViolationRecordSelectColumnStatement,
	DisputeViolationRecordSelectColumnPicEvidence,
	DisputeViolationRecordSelectColumnDriverLicense,
	DisputeViolationRecordSelectColumnDrivingLicense,
	DisputeViolationRecordSelectColumnIDCard,
	DisputeViolationRecordSelectColumnBusinessLicense,
	DisputeViolationRecordSelectColumnOrganizationCode,
	DisputeViolationRecordSelectColumnLegalPersonIDNumber,
	DisputeViolationRecordSelectColumnAgentIDNumber,
	DisputeViolationRecordSelectColumnVehicleManagerIDCard,
	DisputeViolationRecordSelectColumnOtherEvidence,
	DisputeViolationRecordSelectColumnApproveState,
	DisputeViolationRecordSelectColumnUpdateTimeIn,
	DisputeViolationRecordSelectColumnContactAddress,
	DisputeViolationRecordSelectColumnCreatedAt,
	DisputeViolationRecordSelectColumnCreatedBy,
	DisputeViolationRecordSelectColumnUpdatedAt,
	DisputeViolationRecordSelectColumnUpdatedBy,
	DisputeViolationRecordSelectColumnDeletedAt,
	DisputeViolationRecordSelectColumnDeletedBy,
	DisputeViolationRecordSelectColumnIsDeleted,
}

func (e DisputeViolationRecordSelectColumn) IsValid() bool {
	switch e {
	case DisputeViolationRecordSelectColumnID, DisputeViolationRecordSelectColumnDisputeViolationID, DisputeViolationRecordSelectColumnViolationDetailID, DisputeViolationRecordSelectColumnWrittenApplicationMaterials, DisputeViolationRecordSelectColumnLaborContract, DisputeViolationRecordSelectColumnDrivingLog, DisputeViolationRecordSelectColumnWitness, DisputeViolationRecordSelectColumnStatement, DisputeViolationRecordSelectColumnPicEvidence, DisputeViolationRecordSelectColumnDriverLicense, DisputeViolationRecordSelectColumnDrivingLicense, DisputeViolationRecordSelectColumnIDCard, DisputeViolationRecordSelectColumnBusinessLicense, DisputeViolationRecordSelectColumnOrganizationCode, DisputeViolationRecordSelectColumnLegalPersonIDNumber, DisputeViolationRecordSelectColumnAgentIDNumber, DisputeViolationRecordSelectColumnVehicleManagerIDCard, DisputeViolationRecordSelectColumnOtherEvidence, DisputeViolationRecordSelectColumnApproveState, DisputeViolationRecordSelectColumnUpdateTimeIn, DisputeViolationRecordSelectColumnContactAddress, DisputeViolationRecordSelectColumnCreatedAt, DisputeViolationRecordSelectColumnCreatedBy, DisputeViolationRecordSelectColumnUpdatedAt, DisputeViolationRecordSelectColumnUpdatedBy, DisputeViolationRecordSelectColumnDeletedAt, DisputeViolationRecordSelectColumnDeletedBy, DisputeViolationRecordSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e DisputeViolationRecordSelectColumn) String() string {
	return string(e)
}

func (e *DisputeViolationRecordSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DisputeViolationRecordSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DisputeViolationRecordSelectColumn", str)
	}
	return nil
}

func (e DisputeViolationRecordSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type DrivingLogInfoSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                           )
	DrivingLogInfoSelectColumnID DrivingLogInfoSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	DrivingLogInfoSelectColumnDrivingLogInfoID DrivingLogInfoSelectColumn = "driving_log_info_id"
	// 车辆id                                          ( vehicle_info表的vehicle_id )
	DrivingLogInfoSelectColumnVehicleID DrivingLogInfoSelectColumn = "vehicle_id"
	// 驾驶员id                                        ( driver_info表的driver_id   )
	DrivingLogInfoSelectColumnDriverID DrivingLogInfoSelectColumn = "driver_id"
	// 用车起始日期
	DrivingLogInfoSelectColumnDrivingStartTime DrivingLogInfoSelectColumn = "driving_start_time"
	// 用车结束日期
	DrivingLogInfoSelectColumnDrivingEndTime DrivingLogInfoSelectColumn = "driving_end_time"
	// 事由
	DrivingLogInfoSelectColumnCause DrivingLogInfoSelectColumn = "cause"
	// 路线
	DrivingLogInfoSelectColumnRoute DrivingLogInfoSelectColumn = "route"
	// 备注
	DrivingLogInfoSelectColumnRemarks DrivingLogInfoSelectColumn = "remarks"
	// 开始时间
	DrivingLogInfoSelectColumnStartTime DrivingLogInfoSelectColumn = "start_time"
	// 结束时间
	DrivingLogInfoSelectColumnEndTime DrivingLogInfoSelectColumn = "end_time"
	// 审核状态
	DrivingLogInfoSelectColumnReviewStatus DrivingLogInfoSelectColumn = "review_status"
	// 审核机构级别
	DrivingLogInfoSelectColumnReviewAgecyLevel DrivingLogInfoSelectColumn = "review_agecy_level"
	// 是否补录
	DrivingLogInfoSelectColumnIsMarkup DrivingLogInfoSelectColumn = "is_markup"
	// 创建时间
	DrivingLogInfoSelectColumnCreatedAt DrivingLogInfoSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id     )
	DrivingLogInfoSelectColumnCreatedBy DrivingLogInfoSelectColumn = "created_by"
	// 修改时间
	DrivingLogInfoSelectColumnUpdatedAt DrivingLogInfoSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id     )
	DrivingLogInfoSelectColumnUpdatedBy DrivingLogInfoSelectColumn = "updated_by"
	// 删除时间
	DrivingLogInfoSelectColumnDeletedAt DrivingLogInfoSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id     )
	DrivingLogInfoSelectColumnDeletedBy DrivingLogInfoSelectColumn = "deleted_by"
)

var AllDrivingLogInfoSelectColumn = []DrivingLogInfoSelectColumn{
	DrivingLogInfoSelectColumnID,
	DrivingLogInfoSelectColumnDrivingLogInfoID,
	DrivingLogInfoSelectColumnVehicleID,
	DrivingLogInfoSelectColumnDriverID,
	DrivingLogInfoSelectColumnDrivingStartTime,
	DrivingLogInfoSelectColumnDrivingEndTime,
	DrivingLogInfoSelectColumnCause,
	DrivingLogInfoSelectColumnRoute,
	DrivingLogInfoSelectColumnRemarks,
	DrivingLogInfoSelectColumnStartTime,
	DrivingLogInfoSelectColumnEndTime,
	DrivingLogInfoSelectColumnReviewStatus,
	DrivingLogInfoSelectColumnReviewAgecyLevel,
	DrivingLogInfoSelectColumnIsMarkup,
	DrivingLogInfoSelectColumnCreatedAt,
	DrivingLogInfoSelectColumnCreatedBy,
	DrivingLogInfoSelectColumnUpdatedAt,
	DrivingLogInfoSelectColumnUpdatedBy,
	DrivingLogInfoSelectColumnDeletedAt,
	DrivingLogInfoSelectColumnDeletedBy,
}

func (e DrivingLogInfoSelectColumn) IsValid() bool {
	switch e {
	case DrivingLogInfoSelectColumnID, DrivingLogInfoSelectColumnDrivingLogInfoID, DrivingLogInfoSelectColumnVehicleID, DrivingLogInfoSelectColumnDriverID, DrivingLogInfoSelectColumnDrivingStartTime, DrivingLogInfoSelectColumnDrivingEndTime, DrivingLogInfoSelectColumnCause, DrivingLogInfoSelectColumnRoute, DrivingLogInfoSelectColumnRemarks, DrivingLogInfoSelectColumnStartTime, DrivingLogInfoSelectColumnEndTime, DrivingLogInfoSelectColumnReviewStatus, DrivingLogInfoSelectColumnReviewAgecyLevel, DrivingLogInfoSelectColumnIsMarkup, DrivingLogInfoSelectColumnCreatedAt, DrivingLogInfoSelectColumnCreatedBy, DrivingLogInfoSelectColumnUpdatedAt, DrivingLogInfoSelectColumnUpdatedBy, DrivingLogInfoSelectColumnDeletedAt, DrivingLogInfoSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e DrivingLogInfoSelectColumn) String() string {
	return string(e)
}

func (e *DrivingLogInfoSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DrivingLogInfoSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DrivingLogInfoSelectColumn", str)
	}
	return nil
}

func (e DrivingLogInfoSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type VehicleDriverBindingSelectColumn string

const (
	// 按指定方法生成                                               ( 主键                           )
	VehicleDriverBindingSelectColumnID VehicleDriverBindingSelectColumn = "id"
	// 车辆驾驶员绑定外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	VehicleDriverBindingSelectColumnVehicleDriverBindingID VehicleDriverBindingSelectColumn = "vehicle_driver_binding_id"
	// 驾驶员id                                                     ( driver_info表的driver_id   )
	VehicleDriverBindingSelectColumnDriverID VehicleDriverBindingSelectColumn = "driver_id"
	// 车辆id                                                       ( vehicle_info表的vehicle_id )
	VehicleDriverBindingSelectColumnVehicleID VehicleDriverBindingSelectColumn = "vehicle_id"
	// 备注
	VehicleDriverBindingSelectColumnRemarks VehicleDriverBindingSelectColumn = "remarks"
	// 创建时间
	VehicleDriverBindingSelectColumnCreatedAt VehicleDriverBindingSelectColumn = "created_at"
	// 创建人                                                       ( system_user表的user_id     )
	VehicleDriverBindingSelectColumnCreatedBy VehicleDriverBindingSelectColumn = "created_by"
	// 修改时间
	VehicleDriverBindingSelectColumnUpdatedAt VehicleDriverBindingSelectColumn = "updated_at"
	// 修改人                                                       ( system_user表的user_id     )
	VehicleDriverBindingSelectColumnUpdatedBy VehicleDriverBindingSelectColumn = "updated_by"
	// 删除时间
	VehicleDriverBindingSelectColumnDeletedAt VehicleDriverBindingSelectColumn = "deleted_at"
	// 删除人                                                       ( system_user表的user_id     )
	VehicleDriverBindingSelectColumnDeletedBy VehicleDriverBindingSelectColumn = "deleted_by"
	// 是否删除
	VehicleDriverBindingSelectColumnIsDeleted VehicleDriverBindingSelectColumn = "is_deleted"
)

var AllVehicleDriverBindingSelectColumn = []VehicleDriverBindingSelectColumn{
	VehicleDriverBindingSelectColumnID,
	VehicleDriverBindingSelectColumnVehicleDriverBindingID,
	VehicleDriverBindingSelectColumnDriverID,
	VehicleDriverBindingSelectColumnVehicleID,
	VehicleDriverBindingSelectColumnRemarks,
	VehicleDriverBindingSelectColumnCreatedAt,
	VehicleDriverBindingSelectColumnCreatedBy,
	VehicleDriverBindingSelectColumnUpdatedAt,
	VehicleDriverBindingSelectColumnUpdatedBy,
	VehicleDriverBindingSelectColumnDeletedAt,
	VehicleDriverBindingSelectColumnDeletedBy,
	VehicleDriverBindingSelectColumnIsDeleted,
}

func (e VehicleDriverBindingSelectColumn) IsValid() bool {
	switch e {
	case VehicleDriverBindingSelectColumnID, VehicleDriverBindingSelectColumnVehicleDriverBindingID, VehicleDriverBindingSelectColumnDriverID, VehicleDriverBindingSelectColumnVehicleID, VehicleDriverBindingSelectColumnRemarks, VehicleDriverBindingSelectColumnCreatedAt, VehicleDriverBindingSelectColumnCreatedBy, VehicleDriverBindingSelectColumnUpdatedAt, VehicleDriverBindingSelectColumnUpdatedBy, VehicleDriverBindingSelectColumnDeletedAt, VehicleDriverBindingSelectColumnDeletedBy, VehicleDriverBindingSelectColumnIsDeleted:
		return true
	}
	return false
}

func (e VehicleDriverBindingSelectColumn) String() string {
	return string(e)
}

func (e *VehicleDriverBindingSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleDriverBindingSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleDriverBindingSelectColumn", str)
	}
	return nil
}

func (e VehicleDriverBindingSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
